gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 5-9-2014  05:30:12
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:30:11 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _message
                                           	global _seconds
                                           	global _AN0String
                                           	global _mac_cmp
                                           	global _ip_cmp
                                           	global _addMacFromServ
                                           	global _UDPPutArrayInvert
                                           	global _getMacFromServ
                                           	global _setDhcpIp
                                           	global _sendRequest
                                           	global _rcvdFromServer
                                           	global _transmitToClient
                                           	global _rcvdFromClient
                                           	global _buildHeader
                                           	global _buildBootpHeader
                                           	global _configureBootpHeader
                                           	global _buildDiscoverMsg
                                           	global _sendRelease
                                           	global _sendRequestMsg
                                           	global _extractBootProtHeader
                                           	global _getLeaseFromAck
                                           	global _initializeClientDB
                                           	global _initializeItem
                                           	global _addItem
                                           	global _isPoolItemUsed
                                           	global _findInPool
                                           	global _leaseTimeCheck
                                           	global _timeCheck
                                           	global _doDhcpOperations
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _DisplayIPValue
                                           	global _strlcpy
                                           	global _AppConfig
                                           	global _MAC_ADDR_GATEWAY
                                           	global _pool
                                           	global _LowISR
                                           	global _HighISR
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrput2
                                           	extern __gptrget2
                                           	extern __gptrput3
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _uitoa
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _StackInit
                                           	extern _StackTask
                                           	extern _StackTaskModified
                                           	extern _TickInit
                                           	extern _TickGet
                                           	extern _TickConvertToMilliseconds
                                           	extern _TickUpdate
                                           	extern _ARPResolve
                                           	extern _ARPIsResolved
                                           	extern _UDPOpen
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern __modulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _seconds	db	0x00, 0x00
                                           _MAGIC_COOKIE	db	0x63, 0x82, 0x53, 0x63
                                           _timeCheck_previous_1_1	db	0x00, 0x00, 0x00, 0x00
                                           _timeCheck_counter_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           
                                           udata_MainDemo_0	udata
                                           _AN0String	res	8
                                           
                                           udata_MainDemo_1	udata
                                           _message	res	3
                                           
                                           udata_MainDemo_2	udata
                                           _MAC_ADDR_GATEWAY	res	6
                                           
                                           udata_MainDemo_3	udata
                                           _AppConfig	res	51
                                           
                                           udata_MainDemo_4	udata
                                           _getMacFromServ_gw_mac_1_1	res	6
                                           
                                           udata_MainDemo_5	udata
                                           _sendRequest_dhcp_header_length_1_1	res	2
                                           
                                           udata_MainDemo_6	udata
                                           _sendRequest_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_7	udata
                                           _sendRequest_dhcp_header_1_1	res	200
                                           
                                           udata_MainDemo_8	udata
                                           _rcvdFromServer_pool_it_1_1	res	3
                                           
                                           udata_MainDemo_9	udata
                                           _rcvdFromServer_dhcp_type_1_1	res	1
                                           
                                           udata_MainDemo_10	udata
                                           _rcvdFromServer_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_11	udata
                                           _rcvdFromServer_dhcp_header_1_1	res	200
                                           
                                           udata_MainDemo_12	udata
                                           _rcvdFromServer_dhcp_header_length_1_1	res	2
                                           
                                           udata_MainDemo_13	udata
                                           _rcvdFromServer_lease_time_1_1	res	4
                                           
                                           udata_MainDemo_14	udata
                                           _transmitToClient_lease_time_1_1	res	2
                                           
                                           udata_MainDemo_15	udata
                                           _transmitToClient_broadcast_1_1	res	4
                                           
                                           udata_MainDemo_16	udata
                                           _rcvdFromClient_pool_it_1_1	res	3
                                           
                                           udata_MainDemo_17	udata
                                           _rcvdFromClient_dhcp_type_1_1	res	1
                                           
                                           udata_MainDemo_18	udata
                                           _rcvdFromClient_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_19	udata
                                           _rcvdFromClient_dhcp_header_1_1	res	200
                                           
                                           udata_MainDemo_20	udata
                                           _rcvdFromClient_dhcp_header_length_1_1	res	2
                                           
                                           udata_MainDemo_21	udata
                                           _sendRelease_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_22	udata
                                           _extractBootProtHeader_opt_1_1	res	1
                                           
                                           udata_MainDemo_23	udata
                                           _extractBootProtHeader_cookie_checker_1_1	res	4
                                           
                                           udata_MainDemo_24	udata
                                           _extractBootProtHeader_length_1_1	res	1
                                           
                                           udata_MainDemo_25	udata
                                           _pool	res	200
                                           
                                           udata_MainDemo_26	udata
                                           _doDhcpOperations_send_s_socket_1_1	res	1
                                           
                                           udata_MainDemo_27	udata
                                           _doDhcpOperations_send_c_socket_1_1	res	1
                                           
                                           udata_MainDemo_28	udata
                                           _doDhcpOperations_receiver_socket_1_1	res	1
                                           
                                           udata_MainDemo_29	udata
                                           _doDhcpOperations_server_ip_1_1	res	4
                                           
                                           udata_MainDemo_30	udata
                                           _doDhcpOperations_ip_last_pckt_1_1	res	4
                                           
                                           udata_MainDemo_31	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           udata_MainDemo_32	udata
                                           _DisplayIPValue_IPDigit_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x2_LowISR	code	0X000018
                                           ivec_0x2_LowISR:
000018   ef94     goto	0x8528              	GOTO	_LowISR
00001a   f042
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x1_HighISR	code	0X000008
                                           ivec_0x1_HighISR:
000008   ef2c     goto	0xa858              	GOTO	_HighISR
00000a   f054
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_MainDemo__main	code
                                           _main:
                                           ;	.line	895; MainDemo.c	InitializeBoard();
00a5fe   ec38     call	0xac70, 0           	CALL	_InitializeBoard
00a600   f056
                                           ;	.line	898; MainDemo.c	LCDInit();
00a602   ecfd     call	0x51fa, 0           	CALL	_LCDInit
00a604   f028
                                           ;	.line	899; MainDemo.c	DelayMs(100);
00a606   0e10     movlw	0x10               	MOVLW	0x10
00a608   6e00     movwf	0, 0               	MOVWF	r0x00
00a60a   0e98     movlw	0x98               	MOVLW	0x98
00a60c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a60e   0e02     movlw	0x2                	MOVLW	0x02
00a610   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a612   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00642_DS_:
00a614   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00a616   f004
00a618   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00a61a   f005
00a61c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00a61e   f006
00a620   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00a622   f007
00a624   0eff     movlw	0xff               	MOVLW	0xff
00a626   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a628   0eff     movlw	0xff               	MOVLW	0xff
00a62a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a62c   0eff     movlw	0xff               	MOVLW	0xff
00a62e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00a630   0eff     movlw	0xff               	MOVLW	0xff
00a632   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00a634   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a636   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00a638   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00a63a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00a63c   e1eb     bnz	0xa614               	BNZ	_00642_DS_
                                           ;	.line	902; MainDemo.c	TickInit();
00a63e   ec9d     call	0xaf3a, 0           	CALL	_TickInit
00a640   f057
                                           ;	.line	905; MainDemo.c	InitAppConfig();
00a642   ec49     call	0x8a92, 0           	CALL	_InitAppConfig
00a644   f045
                                           ;	.line	909; MainDemo.c	StackInit();
00a646   ecc0     call	0xa180, 0           	CALL	_StackInit
00a648   f050
                                           ;	.line	912; MainDemo.c	DisplayString(0,"INGI2315 Init");
00a64a   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
00a64c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a64e   0e86     movlw	0x86               	MOVLW	HIGH(__str_9)
00a650   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a652   0e30     movlw	0x30               	MOVLW	LOW(__str_9)
00a654   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a656   0e00     movlw	0                  	MOVLW	0x00
00a658   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a65a   ecde     call	0x95bc, 0           	CALL	_DisplayString
00a65c   f04a
00a65e   0e04     movlw	0x4                	MOVLW	0x04
00a660   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	913; MainDemo.c	getMacFromServ();
00a662   ec59     call	0x76b2, 0           	CALL	_getMacFromServ
00a664   f03b
                                           ;	.line	914; MainDemo.c	initializeClientDB();
00a666   ec71     call	0x9ce2, 0           	CALL	_initializeClientDB
00a668   f04e
                                           ;	.line	916; MainDemo.c	doDhcpOperations();
00a66a   ec79     call	0x44f2, 0           	CALL	_doDhcpOperations
00a66c   f022
00a66e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__strlcpy	code
                                           _strlcpy:
                                           ;	.line	1152; MainDemo.c	strlcpy(char *dst, const char *src, size_t siz)
006162   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006164   ffe5
006166   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006168   ffd9
00616a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00616c   ffe5
00616e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006170   ffe5
006172   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006174   ffe5
006176   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006178   ffe5
00617a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00617c   ffe5
00617e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006180   ffe5
006182   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006184   ffe5
006186   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006188   ffe5
00618a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00618c   ffe5
00618e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006190   ffe5
006192   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006194   ffe5
006196   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006198   ffe5
00619a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00619c   ffe5
00619e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0061a0   ffe5
0061a2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0061a4   ffe5
0061a6   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0061a8   ffe5
0061aa   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0061ac   ffe5
0061ae   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0061b0   ffe5
0061b2   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0061b4   ffe5
0061b6   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0061b8   ffe5
0061ba   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0061bc   ffe5
0061be   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0061c0   ffe5
0061c2   0e02     movlw	0x2                	MOVLW	0x02
0061c4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0061c6   f000
0061c8   0e03     movlw	0x3                	MOVLW	0x03
0061ca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0061cc   f001
0061ce   0e04     movlw	0x4                	MOVLW	0x04
0061d0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0061d2   f002
0061d4   0e05     movlw	0x5                	MOVLW	0x05
0061d6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0061d8   f003
0061da   0e06     movlw	0x6                	MOVLW	0x06
0061dc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0061de   f004
0061e0   0e07     movlw	0x7                	MOVLW	0x07
0061e2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0061e4   f005
0061e6   0e08     movlw	0x8                	MOVLW	0x08
0061e8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0061ea   f006
0061ec   0e09     movlw	0x9                	MOVLW	0x09
0061ee   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0061f0   f007
                                           ;	.line	1154; MainDemo.c	char       *d = dst;
0061f2   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0061f4   f008
0061f6   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0061f8   f009
0061fa   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0061fc   f00a
                                           ;	.line	1155; MainDemo.c	const char *s = src;
0061fe   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
006200   f00b
006202   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
006204   f00c
006206   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
006208   f00d
                                           ;	.line	1156; MainDemo.c	size_t      n = siz;
00620a   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
00620c   f00e
00620e   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
006210   f00f
                                           ;	.line	1159; MainDemo.c	if (n != 0)
006212   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006214   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
006216   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
006218   d03e     bra	0x6296               	BRA	_00736_DS_
                                           ;	.line	1161; MainDemo.c	while (--n != 0)
00621a   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
00621c   f010
00621e   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
006220   f011
006222   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
006224   f012
006226   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
006228   f013
00622a   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
00622c   f014
                                           _00732_DS_:
00622e   0eff     movlw	0xff               	MOVLW	0xff
006230   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
006232   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006234   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
006236   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
006238   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
00623a   e01d     bz	0x6276                	BZ	_00751_DS_
                                           ;	.line	1163; MainDemo.c	if ((*d++ = *s++) == '\0')
00623c   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00623e   ffe9
006240   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
006242   fff3
006244   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
006246   ec12     call	0xae24, 0           	CALL	__gptrget1
006248   f057
00624a   6e15     movwf	0x15, 0            	MOVWF	r0x15
00624c   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
00624e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006250   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
006252   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006254   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
006256   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
006258   ffe5
00625a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00625c   ffe9
00625e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006260   fff3
006262   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006264   ece5     call	0xafca, 0           	CALL	__gptrput1
006266   f057
006268   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00626a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00626c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00626e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006270   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
006272   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
006274   e1dc     bnz	0x622e               	BNZ	_00732_DS_
                                           _00751_DS_:
                                           ;	.line	1164; MainDemo.c	break;
006276   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
006278   f00b
00627a   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
00627c   f00c
00627e   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
006280   f00d
006282   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
006284   f008
006286   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
006288   f009
00628a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00628c   f00a
00628e   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
006290   f00e
006292   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
006294   f00f
                                           _00736_DS_:
                                           ;	.line	1169; MainDemo.c	if (n == 0)
006296   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
006298   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
00629a   e127     bnz	0x62ea               	BNZ	_00743_DS_
                                           ;	.line	1171; MainDemo.c	if (siz != 0)
00629c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00629e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0062a0   e009     bz	0x62b4                	BZ	_00750_DS_
                                           ;	.line	1172; MainDemo.c	*d = '\0';          /* NUL-terminate dst */
0062a2   0e00     movlw	0                  	MOVLW	0x00
0062a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062a6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0062a8   ffe9
0062aa   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0062ac   fff3
0062ae   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0062b0   ece5     call	0xafca, 0           	CALL	__gptrput1
0062b2   f057
                                           _00750_DS_:
                                           ;	.line	1173; MainDemo.c	while (*s++)
0062b4   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
0062b6   f000
0062b8   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
0062ba   f001
0062bc   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
0062be   f002
                                           _00739_DS_:
0062c0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0062c2   ffe9
0062c4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0062c6   fff3
0062c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0062ca   ec12     call	0xae24, 0           	CALL	__gptrget1
0062cc   f057
0062ce   6e06     movwf	0x6, 0             	MOVWF	r0x06
0062d0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0062d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0062d4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0062d6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0062d8   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0062da   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0062dc   e1f1     bnz	0x62c0               	BNZ	_00739_DS_
0062de   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
0062e0   f00b
0062e2   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
0062e4   f00c
0062e6   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
0062e8   f00d
                                           _00743_DS_:
                                           ;	.line	1177; MainDemo.c	return (s - src - 1);       /* count does not include NUL */
0062ea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0062ec   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
0062ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0062f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0062f2   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
0062f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0062f6   0eff     movlw	0xff               	MOVLW	0xff
0062f8   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0062fa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0062fc   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0062fe   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006300   fff3
006302   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006304   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
006306   f015
006308   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00630a   f014
00630c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
00630e   f013
006310   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
006312   f012
006314   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
006316   f011
006318   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00631a   f010
00631c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00631e   f00f
006320   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
006322   f00e
006324   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
006326   f00d
006328   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00632a   f00c
00632c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00632e   f00b
006330   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006332   f00a
006334   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006336   f009
006338   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00633a   f008
00633c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00633e   f007
006340   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006342   f006
006344   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006346   f005
006348   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00634a   f004
00634c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00634e   f003
006350   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006352   f002
006354   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006356   f001
006358   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00635a   f000
00635c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00635e   ffd9
006360   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitAppConfig	code
                                           _InitAppConfig:
                                           ;	.line	1081; MainDemo.c	static void InitAppConfig(void)
008a92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008a94   ffe5
008a96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008a98   ffd9
008a9a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008a9c   ffe5
008a9e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008aa0   ffe5
008aa2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008aa4   ffe5
008aa6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008aa8   ffe5
008aaa   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	1083; MainDemo.c	AppConfig.Flags.bIsDHCPEnabled = TRUE;
008aac   8df4     bsf	0xf4, 0x6, 0x1       	BSF	(_AppConfig + 44), 6, B
008aae   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	1084; MainDemo.c	AppConfig.Flags.bInConfigMode = TRUE;
008ab0   8ff4     bsf	0xf4, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
008ab2   0108     movlb	0x8                	BANKSEL	(_AppConfig + 45)
                                           ;	.line	1088; MainDemo.c	AppConfig.MyMACAddr.v[0] = 0;
008ab4   6bf5     clrf	0xf5, 0x1           	CLRF	(_AppConfig + 45), B
                                           ;	.line	1089; MainDemo.c	AppConfig.MyMACAddr.v[1] = 0x04;
008ab6   0e04     movlw	0x4                	MOVLW	0x04
008ab8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 46)
008aba   6ff6     movwf	0xf6, 0x1          	MOVWF	(_AppConfig + 46), B
                                           ;	.line	1090; MainDemo.c	AppConfig.MyMACAddr.v[2] = 0xA3;
008abc   0ea3     movlw	0xa3               	MOVLW	0xa3
008abe   0108     movlb	0x8                	BANKSEL	(_AppConfig + 47)
008ac0   6ff7     movwf	0xf7, 0x1          	MOVWF	(_AppConfig + 47), B
                                           ;	.line	1091; MainDemo.c	AppConfig.MyMACAddr.v[3] = 0x01;
008ac2   0e01     movlw	0x1                	MOVLW	0x01
008ac4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 48)
008ac6   6ff8     movwf	0xf8, 0x1          	MOVWF	(_AppConfig + 48), B
                                           ;	.line	1092; MainDemo.c	AppConfig.MyMACAddr.v[4] = 0x02;
008ac8   0e02     movlw	0x2                	MOVLW	0x02
008aca   0108     movlb	0x8                	BANKSEL	(_AppConfig + 49)
008acc   6ff9     movwf	0xf9, 0x1          	MOVWF	(_AppConfig + 49), B
                                           ;	.line	1093; MainDemo.c	AppConfig.MyMACAddr.v[5] = 0x03;
008ace   0e03     movlw	0x3                	MOVLW	0x03
008ad0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 50)
008ad2   6ffa     movwf	0xfa, 0x1          	MOVWF	(_AppConfig + 50), B
                                           ;	.line	1096; MainDemo.c	AppConfig.MyIPAddr.Val = MY_DEFAULT_IP_ADDR_BYTE1 | 
008ad4   0ec0     movlw	0xc0               	MOVLW	0xc0
008ad6   0108     movlb	0x8                	BANKSEL	_AppConfig
008ad8   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
008ada   0ea8     movlw	0xa8               	MOVLW	0xa8
008adc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
008ade   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
008ae0   0e61     movlw	0x61               	MOVLW	0x61
008ae2   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
008ae4   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
008ae6   0e3c     movlw	0x3c               	MOVLW	0x3c
008ae8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
008aea   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
                                           ;	.line	1099; MainDemo.c	AppConfig.DefaultIPAddr.Val = AppConfig.MyIPAddr.Val;
008aec   c8c8     movff	0x8c8, 0           	MOVFF	_AppConfig, r0x00
008aee   f000
008af0   c8c9     movff	0x8c9, 0x1         	MOVFF	(_AppConfig + 1), r0x01
008af2   f001
008af4   c8ca     movff	0x8ca, 0x2         	MOVFF	(_AppConfig + 2), r0x02
008af6   f002
008af8   c8cb     movff	0x8cb, 0x3         	MOVFF	(_AppConfig + 3), r0x03
008afa   f003
008afc   5000     movf	0, 0, 0             	MOVF	r0x00, W
008afe   0108     movlb	0x8                	BANKSEL	(_AppConfig + 20)
008b00   6fdc     movwf	0xdc, 0x1          	MOVWF	(_AppConfig + 20), B
008b02   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008b04   0108     movlb	0x8                	BANKSEL	(_AppConfig + 21)
008b06   6fdd     movwf	0xdd, 0x1          	MOVWF	(_AppConfig + 21), B
008b08   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008b0a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 22)
008b0c   6fde     movwf	0xde, 0x1          	MOVWF	(_AppConfig + 22), B
008b0e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008b10   0108     movlb	0x8                	BANKSEL	(_AppConfig + 23)
008b12   6fdf     movwf	0xdf, 0x1          	MOVWF	(_AppConfig + 23), B
008b14   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1100; MainDemo.c	AppConfig.MyMask.Val = MY_DEFAULT_MASK_BYTE1 | 
008b16   69cc     setf	0xcc, 0x1           	SETF	(_AppConfig + 4), B
008b18   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
008b1a   69cd     setf	0xcd, 0x1           	SETF	(_AppConfig + 5), B
008b1c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
008b1e   69ce     setf	0xce, 0x1           	SETF	(_AppConfig + 6), B
008b20   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
008b22   6bcf     clrf	0xcf, 0x1           	CLRF	(_AppConfig + 7), B
                                           ;	.line	1103; MainDemo.c	AppConfig.DefaultMask.Val = AppConfig.MyMask.Val;
008b24   c8cc     movff	0x8cc, 0           	MOVFF	(_AppConfig + 4), r0x00
008b26   f000
008b28   c8cd     movff	0x8cd, 0x1         	MOVFF	(_AppConfig + 5), r0x01
008b2a   f001
008b2c   c8ce     movff	0x8ce, 0x2         	MOVFF	(_AppConfig + 6), r0x02
008b2e   f002
008b30   c8cf     movff	0x8cf, 0x3         	MOVFF	(_AppConfig + 7), r0x03
008b32   f003
008b34   5000     movf	0, 0, 0             	MOVF	r0x00, W
008b36   0108     movlb	0x8                	BANKSEL	(_AppConfig + 24)
008b38   6fe0     movwf	0xe0, 0x1          	MOVWF	(_AppConfig + 24), B
008b3a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008b3c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 25)
008b3e   6fe1     movwf	0xe1, 0x1          	MOVWF	(_AppConfig + 25), B
008b40   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008b42   0108     movlb	0x8                	BANKSEL	(_AppConfig + 26)
008b44   6fe2     movwf	0xe2, 0x1          	MOVWF	(_AppConfig + 26), B
008b46   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008b48   0108     movlb	0x8                	BANKSEL	(_AppConfig + 27)
008b4a   6fe3     movwf	0xe3, 0x1          	MOVWF	(_AppConfig + 27), B
                                           ;	.line	1104; MainDemo.c	AppConfig.MyGateway.Val = MY_DEFAULT_GATE_BYTE1 | 
008b4c   0ec0     movlw	0xc0               	MOVLW	0xc0
008b4e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 8)
008b50   6fd0     movwf	0xd0, 0x1          	MOVWF	(_AppConfig + 8), B
008b52   0ea8     movlw	0xa8               	MOVLW	0xa8
008b54   0108     movlb	0x8                	BANKSEL	(_AppConfig + 9)
008b56   6fd1     movwf	0xd1, 0x1          	MOVWF	(_AppConfig + 9), B
008b58   0e61     movlw	0x61               	MOVLW	0x61
008b5a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 10)
008b5c   6fd2     movwf	0xd2, 0x1          	MOVWF	(_AppConfig + 10), B
008b5e   0e01     movlw	0x1                	MOVLW	0x01
008b60   0108     movlb	0x8                	BANKSEL	(_AppConfig + 11)
008b62   6fd3     movwf	0xd3, 0x1          	MOVWF	(_AppConfig + 11), B
                                           ;	.line	1107; MainDemo.c	AppConfig.PrimaryDNSServer.Val = MY_DEFAULT_PRIMARY_DNS_BYTE1 | 
008b64   0ec0     movlw	0xc0               	MOVLW	0xc0
008b66   0108     movlb	0x8                	BANKSEL	(_AppConfig + 12)
008b68   6fd4     movwf	0xd4, 0x1          	MOVWF	(_AppConfig + 12), B
008b6a   0ea8     movlw	0xa8               	MOVLW	0xa8
008b6c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 13)
008b6e   6fd5     movwf	0xd5, 0x1          	MOVWF	(_AppConfig + 13), B
008b70   0e61     movlw	0x61               	MOVLW	0x61
008b72   0108     movlb	0x8                	BANKSEL	(_AppConfig + 14)
008b74   6fd6     movwf	0xd6, 0x1          	MOVWF	(_AppConfig + 14), B
008b76   0e01     movlw	0x1                	MOVLW	0x01
008b78   0108     movlb	0x8                	BANKSEL	(_AppConfig + 15)
008b7a   6fd7     movwf	0xd7, 0x1          	MOVWF	(_AppConfig + 15), B
008b7c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 16)
                                           ;	.line	1111; MainDemo.c	AppConfig.SecondaryDNSServer.Val = MY_DEFAULT_SECONDARY_DNS_BYTE1 | 
008b7e   6bd8     clrf	0xd8, 0x1           	CLRF	(_AppConfig + 16), B
008b80   0108     movlb	0x8                	BANKSEL	(_AppConfig + 17)
008b82   6bd9     clrf	0xd9, 0x1           	CLRF	(_AppConfig + 17), B
008b84   0108     movlb	0x8                	BANKSEL	(_AppConfig + 18)
008b86   6bda     clrf	0xda, 0x1           	CLRF	(_AppConfig + 18), B
008b88   0108     movlb	0x8                	BANKSEL	(_AppConfig + 19)
008b8a   6bdb     clrf	0xdb, 0x1           	CLRF	(_AppConfig + 19), B
008b8c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008b8e   f003
008b90   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008b92   f002
008b94   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008b96   f001
008b98   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008b9a   f000
008b9c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008b9e   ffd9
008ba0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitializeBoard	code
                                           _InitializeBoard:
                                           ;	.line	1025; MainDemo.c	static void InitializeBoard(void)
00ac70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ac72   ffe5
00ac74   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ac76   ffd9
                                           ;	.line	1028; MainDemo.c	LED0_TRIS = 0;  //LED0
00ac78   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	1029; MainDemo.c	LED1_TRIS = 0;  //LED1
00ac7a   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	1030; MainDemo.c	LED2_TRIS = 0;  //LED2
00ac7c   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	1031; MainDemo.c	LED3_TRIS = 0;  //LED_LCD1
00ac7e   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	1032; MainDemo.c	LED4_TRIS = 0;  //LED_LCD2
00ac80   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	1033; MainDemo.c	LED5_TRIS = 0;  //LED5=RELAY1
00ac82   9e98     bcf	0x98, 0x7, 0         	BCF	_TRISGbits, 7
                                           ;	.line	1034; MainDemo.c	LED6_TRIS = 0;  //LED7=RELAY2
00ac84   9c98     bcf	0x98, 0x6, 0         	BCF	_TRISGbits, 6
                                           ;	.line	1039; MainDemo.c	LED_PUT(0x00);  //turn off LED0 - LED2
00ac86   0ef8     movlw	0xf8               	MOVLW	0xf8
00ac88   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	1040; MainDemo.c	RELAY_PUT(0x00); //turn relays off to save power
00ac8a   0e3f     movlw	0x3f               	MOVLW	0x3f
00ac8c   168f     andwf	0x8f, 0x1, 0       	ANDWF	_LATG, F
                                           ;	.line	1046; MainDemo.c	OSCTUNE = 0x40;
00ac8e   0e40     movlw	0x40               	MOVLW	0x40
00ac90   6e9b     movwf	0x9b, 0            	MOVWF	_OSCTUNE
                                           ;	.line	1053; MainDemo.c	if(OSCCONbits.IDLEN) //IDLEN = 0x80; 0x02 selects the primary clock
00ac92   aed3     btfss	0xd3, 0x7, 0       	BTFSS	_OSCCONbits, 7
00ac94   d003     bra	0xac9c               	BRA	_00718_DS_
                                           ;	.line	1054; MainDemo.c	OSCCON = 0x82;
00ac96   0e82     movlw	0x82               	MOVLW	0x82
00ac98   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
00ac9a   d002     bra	0xaca0               	BRA	_00719_DS_
                                           _00718_DS_:
                                           ;	.line	1056; MainDemo.c	OSCCON = 0x02;
00ac9c   0e02     movlw	0x2                	MOVLW	0x02
00ac9e   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           _00719_DS_:
                                           ;	.line	1059; MainDemo.c	RCONbits.IPEN = 1;		// Enable interrupt priorities
00aca0   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	1060; MainDemo.c	INTCONbits.GIEH = 1;
00aca2   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	1061; MainDemo.c	INTCONbits.GIEL = 1;
00aca4   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
00aca6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aca8   ffd9
00acaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayIPValue	code
                                           _DisplayIPValue:
                                           ;	.line	967; MainDemo.c	void DisplayIPValue(DWORD IPdw) // 32 bits
006b26   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006b28   ffe5
006b2a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006b2c   ffd9
006b2e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006b30   ffe5
006b32   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006b34   ffe5
006b36   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006b38   ffe5
006b3a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006b3c   ffe5
006b3e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006b40   ffe5
006b42   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006b44   ffe5
006b46   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006b48   ffe5
006b4a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006b4c   ffe5
006b4e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006b50   ffe5
006b52   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006b54   ffe5
006b56   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006b58   ffe5
006b5a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006b5c   ffe5
006b5e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
006b60   ffe5
006b62   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
006b64   ffe5
006b66   0e02     movlw	0x2                	MOVLW	0x02
006b68   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006b6a   f000
006b6c   0e03     movlw	0x3                	MOVLW	0x03
006b6e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006b70   f001
006b72   0e04     movlw	0x4                	MOVLW	0x04
006b74   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006b76   f002
006b78   0e05     movlw	0x5                	MOVLW	0x05
006b7a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006b7c   f003
                                           ;	.line	975; MainDemo.c	BYTE LCDPos=16;  //write on second line of LCD
006b7e   0e10     movlw	0x10               	MOVLW	0x10
006b80   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	980; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
006b82   6a05     clrf	0x5, 0              	CLRF	r0x05
006b84   6a06     clrf	0x6, 0              	CLRF	r0x06
006b86   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00683_DS_:
006b88   0e04     movlw	0x4                	MOVLW	0x04
006b8a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
006b8c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006b8e   d081     bra	0x6c92               	BRA	_00686_DS_
                                           ;	.line	983; MainDemo.c	IP_field =(WORD)(IPdw>>(i*8))&0xff;      //ML
006b90   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
006b92   f008
006b94   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
006b96   f009
006b98   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
006b9a   f00a
006b9c   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
006b9e   f00b
006ba0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006ba2   e011     bz	0x6bc6                	BZ	_00704_DS_
006ba4   e609     bn	0x6bb8                	BN	_00707_DS_
006ba6   6ce8     negf	0xe8, 0             	NEGF	WREG
006ba8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00705_DS_:
006baa   320b     rrcf	0xb, 0x1, 0         	RRCF	r0x0b, F
006bac   320a     rrcf	0xa, 0x1, 0         	RRCF	r0x0a, F
006bae   3209     rrcf	0x9, 0x1, 0         	RRCF	r0x09, F
006bb0   3208     rrcf	0x8, 0x1, 0         	RRCF	r0x08, F
006bb2   0f01     addlw	0x1                	ADDLW	0x01
006bb4   e3fa     bnc	0x6baa               	BNC	_00705_DS_
006bb6   d007     bra	0x6bc6               	BRA	_00704_DS_
                                           _00707_DS_:
006bb8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00706_DS_:
006bba   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
006bbc   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
006bbe   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
006bc0   360b     rlcf	0xb, 0x1, 0         	RLCF	r0x0b, F
006bc2   0f01     addlw	0x1                	ADDLW	0x01
006bc4   e3fa     bnc	0x6bba               	BNC	_00706_DS_
                                           _00704_DS_:
006bc6   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	984; MainDemo.c	uitoa(IP_field, IPDigit, radix);      //ML
006bc8   0e0a     movlw	0xa                	MOVLW	0x0a
006bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bcc   0e0b     movlw	0xb                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
006bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bd0   0eae     movlw	0xae               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
006bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bd4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bd8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bdc   ecc5     call	0xa58a, 0           	CALL	_uitoa
006bde   f052
006be0   0e05     movlw	0x5                	MOVLW	0x05
006be2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	989; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
006be4   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
006be6   f008
006be8   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00689_DS_:
006bea   0e0b     movlw	0xb                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
006bec   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006bee   0eae     movlw	0xae               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
006bf0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006bf2   0e80     movlw	0x80               	MOVLW	0x80
006bf4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006bf6   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bfa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bfe   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c02   ec0a     call	0xa414, 0           	CALL	_strlen
006c04   f052
006c06   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006c08   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
006c0a   f00b
006c0c   0e03     movlw	0x3                	MOVLW	0x03
006c0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006c10   c009     movff	0x9, 0xc           	MOVFF	r0x09, r0x0c
006c12   f00c
006c14   6a0d     clrf	0xd, 0              	CLRF	r0x0d
006c16   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
006c18   0f80     addlw	0x80               	ADDLW	0x80
006c1a   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
006c1c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006c1e   0f80     addlw	0x80               	ADDLW	0x80
006c20   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
006c22   e102     bnz	0x6c28               	BNZ	_00709_DS_
006c24   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006c26   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00709_DS_:
006c28   e21c     bc	0x6c62                	BC	_00701_DS_
                                           ;	.line	991; MainDemo.c	LCDText[LCDPos++] = IPDigit[j];
006c2a   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
006c2c   f00a
006c2e   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
006c30   6a0b     clrf	0xb, 0              	CLRF	r0x0b
006c32   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
006c34   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
006c36   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006c38   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
006c3a   0eae     movlw	0xae               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
006c3c   2409     addwf	0x9, 0, 0          	ADDWF	r0x09, W
006c3e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006c40   6a0d     clrf	0xd, 0              	CLRF	r0x0d
006c42   0e0b     movlw	0xb                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
006c44   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
006c46   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
006c48   ffe9
006c4a   c00d     movff	0xd, 0xfea         	MOVFF	r0x0d, FSR0H
006c4c   ffea
006c4e   cfef     movff	0xfef, 0xc         	MOVFF	INDF0, r0x0c
006c50   f00c
006c52   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
006c54   ffe9
006c56   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
006c58   ffea
006c5a   c00c     movff	0xc, 0xfef         	MOVFF	r0x0c, INDF0
006c5c   ffef
                                           ;	.line	989; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
006c5e   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
006c60   d7c4     bra	0x6bea               	BRA	_00689_DS_
                                           _00701_DS_:
006c62   c008     movff	0x8, 0x4           	MOVFF	r0x08, r0x04
006c64   f004
                                           ;	.line	993; MainDemo.c	if(i == sizeof(IP_ADDR)-1)
006c66   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006c68   0a03     xorlw	0x3                	XORLW	0x03
006c6a   e013     bz	0x6c92                	BZ	_00686_DS_
                                           ;	.line	995; MainDemo.c	LCDText[LCDPos++] = '.';
006c6c   2808     incf	0x8, 0, 0           	INCF	r0x08, W
006c6e   6e04     movwf	0x4, 0             	MOVWF	r0x04
006c70   6a09     clrf	0x9, 0              	CLRF	r0x09
006c72   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
006c74   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
006c76   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006c78   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
006c7a   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
006c7c   ffe9
006c7e   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
006c80   ffea
006c82   0e2e     movlw	0x2e               	MOVLW	0x2e
006c84   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	980; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
006c86   0e08     movlw	0x8                	MOVLW	0x08
006c88   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
006c8a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006c8c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
006c8e   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006c90   d77b     bra	0x6b88               	BRA	_00683_DS_
                                           _00686_DS_:
                                           ;	.line	998; MainDemo.c	if(LCDPos < 32u)
006c92   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
006c94   f000
006c96   6a01     clrf	0x1, 0              	CLRF	r0x01
006c98   0e00     movlw	0                  	MOVLW	0x00
006c9a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006c9c   e102     bnz	0x6ca2               	BNZ	_00712_DS_
006c9e   0e20     movlw	0x20               	MOVLW	0x20
006ca0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00712_DS_:
006ca2   e20b     bc	0x6cba                	BC	_00688_DS_
                                           ;	.line	999; MainDemo.c	LCDText[LCDPos] = 0;
006ca4   6a00     clrf	0, 0                	CLRF	r0x00
006ca6   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
006ca8   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
006caa   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006cac   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
006cae   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
006cb0   ffe9
006cb2   c000     movff	0, 0xfea           	MOVFF	r0x00, FSR0H
006cb4   ffea
006cb6   0e00     movlw	0                  	MOVLW	0x00
006cb8   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00688_DS_:
                                           ;	.line	1000; MainDemo.c	LCDUpdate();
006cba   ec97     call	0x4d2e, 0           	CALL	_LCDUpdate
006cbc   f026
006cbe   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
006cc0   f00d
006cc2   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
006cc4   f00c
006cc6   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006cc8   f00b
006cca   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006ccc   f00a
006cce   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006cd0   f009
006cd2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006cd4   f008
006cd6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006cd8   f007
006cda   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006cdc   f006
006cde   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006ce0   f005
006ce2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006ce4   f004
006ce6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006ce8   f003
006cea   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006cec   f002
006cee   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006cf0   f001
006cf2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006cf4   f000
006cf6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006cf8   ffd9
006cfa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayString	code
                                           _DisplayString:
                                           ;	.line	951; MainDemo.c	void DisplayString(BYTE pos, char* text)
0095bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0095be   ffe5
0095c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0095c2   ffd9
0095c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0095c6   ffe5
0095c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0095ca   ffe5
0095cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0095ce   ffe5
0095d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0095d2   ffe5
0095d4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0095d6   ffe5
0095d8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0095da   ffe5
0095dc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0095de   ffe5
0095e0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0095e2   ffe5
0095e4   0e02     movlw	0x2                	MOVLW	0x02
0095e6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0095e8   f000
0095ea   0e03     movlw	0x3                	MOVLW	0x03
0095ec   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0095ee   f001
0095f0   0e04     movlw	0x4                	MOVLW	0x04
0095f2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0095f4   f002
0095f6   0e05     movlw	0x5                	MOVLW	0x05
0095f8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0095fa   f003
                                           ;	.line	953; MainDemo.c	BYTE l= strlen(text)+1;
0095fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0095fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009600   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009604   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009606   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009608   ec0a     call	0xa414, 0           	CALL	_strlen
00960a   f052
00960c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00960e   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
009610   f005
009612   0e03     movlw	0x3                	MOVLW	0x03
009614   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009616   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	954; MainDemo.c	BYTE max= 32-pos;
009618   5000     movf	0, 0, 0             	MOVF	r0x00, W
00961a   0820     sublw	0x20               	SUBLW	0x20
00961c   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	955; MainDemo.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
00961e   6a06     clrf	0x6, 0              	CLRF	r0x06
009620   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
009622   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009624   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
009626   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
009628   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00962a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00962c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00962e   6e00     movwf	0, 0               	MOVWF	r0x00
009630   0e80     movlw	0x80               	MOVLW	0x80
009632   6e07     movwf	0x7, 0             	MOVWF	r0x07
009634   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009636   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
009638   e302     bnc	0x963e               	BNC	_00674_DS_
00963a   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00963c   f004
                                           _00674_DS_:
00963e   6a05     clrf	0x5, 0              	CLRF	r0x05
009640   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009644   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009648   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00964a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00964c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00964e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009650   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009654   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009658   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00965a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00965c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00965e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009660   ecb1     call	0x6162, 0           	CALL	_strlcpy
009662   f030
009664   0e08     movlw	0x8                	MOVLW	0x08
009666   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	956; MainDemo.c	LCDUpdate();
009668   ec97     call	0x4d2e, 0           	CALL	_LCDUpdate
00966a   f026
00966c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00966e   f007
009670   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009672   f006
009674   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009676   f005
009678   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00967a   f004
00967c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00967e   f003
009680   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009682   f002
009684   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009686   f001
009688   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00968a   f000
00968c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00968e   ffd9
009690   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	929; MainDemo.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0080bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0080be   ffe5
0080c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0080c2   ffd9
0080c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0080c6   ffe5
0080c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0080ca   ffe5
0080cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0080ce   ffe5
0080d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0080d2   ffe5
0080d4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0080d6   ffe5
0080d8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0080da   ffe5
0080dc   0e02     movlw	0x2                	MOVLW	0x02
0080de   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0080e0   f000
0080e2   0e03     movlw	0x3                	MOVLW	0x03
0080e4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0080e6   f001
0080e8   0e04     movlw	0x4                	MOVLW	0x04
0080ea   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0080ec   f002
                                           ;	.line	937; MainDemo.c	ultoa(w, WDigit, radix);      
0080ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0080f0   6a04     clrf	0x4, 0              	CLRF	r0x04
0080f2   0e0a     movlw	0xa                	MOVLW	0x0a
0080f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0080f6   0e0b     movlw	0xb                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0080f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0080fa   0e92     movlw	0x92               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0080fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0080fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008102   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008106   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00810a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00810c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00810e   ec61     call	0x6ec2, 0           	CALL	_ultoa
008110   f037
008112   0e07     movlw	0x7                	MOVLW	0x07
008114   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	938; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
008116   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00655_DS_:
008118   0e0b     movlw	0xb                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
00811a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00811c   0e92     movlw	0x92               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00811e   6e02     movwf	0x2, 0             	MOVWF	r0x02
008120   0e80     movlw	0x80               	MOVLW	0x80
008122   6e04     movwf	0x4, 0             	MOVWF	r0x04
008124   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008126   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008128   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00812a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00812c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00812e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008130   ec0a     call	0xa414, 0           	CALL	_strlen
008132   f052
008134   6e02     movwf	0x2, 0             	MOVWF	r0x02
008136   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
008138   f003
00813a   0e03     movlw	0x3                	MOVLW	0x03
00813c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00813e   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
008140   f004
008142   6a05     clrf	0x5, 0              	CLRF	r0x05
008144   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008146   0f80     addlw	0x80               	ADDLW	0x80
008148   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00814a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00814c   0f80     addlw	0x80               	ADDLW	0x80
00814e   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
008150   e102     bnz	0x8156               	BNZ	_00665_DS_
008152   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008154   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00665_DS_:
008156   e21c     bc	0x8190                	BC	_00658_DS_
                                           ;	.line	940; MainDemo.c	LCDText[LCDPos++] = WDigit[j];
008158   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00815a   f002
00815c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00815e   6a03     clrf	0x3, 0              	CLRF	r0x03
008160   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
008162   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
008164   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
008166   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
008168   0e92     movlw	0x92               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00816a   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00816c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00816e   6a05     clrf	0x5, 0              	CLRF	r0x05
008170   0e0b     movlw	0xb                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
008172   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
008174   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
008176   ffe9
008178   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00817a   ffea
00817c   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
00817e   f004
008180   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
008182   ffe9
008184   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
008186   ffea
008188   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
00818a   ffef
                                           ;	.line	938; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
00818c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00818e   d7c4     bra	0x8118               	BRA	_00655_DS_
                                           _00658_DS_:
                                           ;	.line	942; MainDemo.c	if(LCDPos < 32u)
008190   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
008192   f001
008194   6a02     clrf	0x2, 0              	CLRF	r0x02
008196   0e00     movlw	0                  	MOVLW	0x00
008198   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00819a   e102     bnz	0x81a0               	BNZ	_00666_DS_
00819c   0e20     movlw	0x20               	MOVLW	0x20
00819e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00666_DS_:
0081a0   e20b     bc	0x81b8                	BC	_00654_DS_
                                           ;	.line	943; MainDemo.c	LCDText[LCDPos] = 0;
0081a2   6a01     clrf	0x1, 0              	CLRF	r0x01
0081a4   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0081a6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0081a8   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0081aa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0081ac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0081ae   ffe9
0081b0   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0081b2   ffea
0081b4   0e00     movlw	0                  	MOVLW	0x00
0081b6   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00654_DS_:
                                           ;	.line	944; MainDemo.c	LCDUpdate();
0081b8   ec97     call	0x4d2e, 0           	CALL	_LCDUpdate
0081ba   f026
0081bc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0081be   f005
0081c0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0081c2   f004
0081c4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0081c6   f003
0081c8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0081ca   f002
0081cc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0081ce   f001
0081d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0081d2   f000
0081d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0081d6   ffd9
0081d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__doDhcpOperations	code
                                           _doDhcpOperations:
                                           ;	.line	841; MainDemo.c	void doDhcpOperations(){
0044f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0044f4   ffe5
0044f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0044f8   ffd9
0044fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0044fc   ffe5
0044fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004500   ffe5
004502   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004504   ffe5
004506   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004508   ffe5
00450a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00450c   ffe5
00450e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004510   ffe5
004512   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004514   ffe5
004516   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004518   ffe5
00451a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00451c   ffe5
                                           ;	.line	850; MainDemo.c	setDhcpIp(&server_ip);
00451e   0e0b     movlw	0xb                	MOVLW	HIGH(_doDhcpOperations_server_ip_1_1)
004520   6e01     movwf	0x1, 0             	MOVWF	r0x01
004522   0ea6     movlw	0xa6               	MOVLW	LOW(_doDhcpOperations_server_ip_1_1)
004524   6e00     movwf	0, 0               	MOVWF	r0x00
004526   0e80     movlw	0x80               	MOVLW	0x80
004528   6e02     movwf	0x2, 0             	MOVWF	r0x02
00452a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00452c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00452e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004530   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004532   5000     movf	0, 0, 0             	MOVF	r0x00, W
004534   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004536   ecae     call	0x975c, 0           	CALL	_setDhcpIp
004538   f04b
00453a   0e03     movlw	0x3                	MOVLW	0x03
00453c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	854; MainDemo.c	send_s_socket = UDPOpen(0, NULL, 67);
00453e   0e00     movlw	0                  	MOVLW	0x00
004540   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004542   0e43     movlw	0x43               	MOVLW	0x43
004544   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004546   0e00     movlw	0                  	MOVLW	0x00
004548   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00454a   0e00     movlw	0                  	MOVLW	0x00
00454c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00454e   0e00     movlw	0                  	MOVLW	0x00
004550   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004552   0e00     movlw	0                  	MOVLW	0x00
004554   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004556   0e00     movlw	0                  	MOVLW	0x00
004558   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00455a   eccc     call	0x4f98, 0           	CALL	_UDPOpen
00455c   f027
00455e   6e00     movwf	0, 0               	MOVWF	r0x00
004560   0e07     movlw	0x7                	MOVLW	0x07
004562   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004564   c000     movff	0, 0x23c           	MOVFF	r0x00, _doDhcpOperations_send_s_socket_1_1
004566   f23c
                                           ;	.line	855; MainDemo.c	send_c_socket = UDPOpen(0, NULL, 68);
004568   0e00     movlw	0                  	MOVLW	0x00
00456a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00456c   0e44     movlw	0x44               	MOVLW	0x44
00456e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004570   0e00     movlw	0                  	MOVLW	0x00
004572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004574   0e00     movlw	0                  	MOVLW	0x00
004576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004578   0e00     movlw	0                  	MOVLW	0x00
00457a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00457c   0e00     movlw	0                  	MOVLW	0x00
00457e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004580   0e00     movlw	0                  	MOVLW	0x00
004582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004584   eccc     call	0x4f98, 0           	CALL	_UDPOpen
004586   f027
004588   6e01     movwf	0x1, 0             	MOVWF	r0x01
00458a   0e07     movlw	0x7                	MOVLW	0x07
00458c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00458e   c001     movff	0x1, 0x23d         	MOVFF	r0x01, _doDhcpOperations_send_c_socket_1_1
004590   f23d
                                           ;	.line	856; MainDemo.c	receiver_socket = UDPOpen(67, NULL, 0);
004592   0e00     movlw	0                  	MOVLW	0x00
004594   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004596   0e00     movlw	0                  	MOVLW	0x00
004598   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00459a   0e00     movlw	0                  	MOVLW	0x00
00459c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00459e   0e00     movlw	0                  	MOVLW	0x00
0045a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045a2   0e00     movlw	0                  	MOVLW	0x00
0045a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045a6   0e00     movlw	0                  	MOVLW	0x00
0045a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045aa   0e43     movlw	0x43               	MOVLW	0x43
0045ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045ae   eccc     call	0x4f98, 0           	CALL	_UDPOpen
0045b0   f027
0045b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0045b4   0e07     movlw	0x7                	MOVLW	0x07
0045b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0045b8   c002     movff	0x2, 0x23e         	MOVFF	r0x02, _doDhcpOperations_receiver_socket_1_1
0045ba   f23e
                                           ;	.line	858; MainDemo.c	if(send_s_socket == INVALID_UDP_SOCKET ||
0045bc   6a03     clrf	0x3, 0              	CLRF	r0x03
0045be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0045c0   0aff     xorlw	0xff               	XORLW	0xff
0045c2   e102     bnz	0x45c8               	BNZ	_00633_DS_
0045c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0045c6   e00d     bz	0x45e2                	BZ	_00602_DS_
                                           _00633_DS_:
                                           ;	.line	859; MainDemo.c	receiver_socket == INVALID_UDP_SOCKET ||
0045c8   6a00     clrf	0, 0                	CLRF	r0x00
0045ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0045cc   0aff     xorlw	0xff               	XORLW	0xff
0045ce   e102     bnz	0x45d4               	BNZ	_00635_DS_
0045d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0045d2   e007     bz	0x45e2                	BZ	_00602_DS_
                                           _00635_DS_:
                                           ;	.line	860; MainDemo.c	send_c_socket == INVALID_UDP_SOCKET){
0045d4   6a00     clrf	0, 0                	CLRF	r0x00
0045d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0045d8   0aff     xorlw	0xff               	XORLW	0xff
0045da   e102     bnz	0x45e0               	BNZ	_00636_DS_
0045dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0045de   e001     bz	0x45e2                	BZ	_00602_DS_
                                           _00636_DS_:
0045e0   d029     bra	0x4634               	BRA	_00603_DS_
                                           _00602_DS_:
                                           ;	.line	861; MainDemo.c	DisplayString (0,"Fail to create  socket");
0045e2   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
0045e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045e6   0e86     movlw	0x86               	MOVLW	HIGH(__str_7)
0045e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045ea   0e04     movlw	0x4                	MOVLW	LOW(__str_7)
0045ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045ee   0e00     movlw	0                  	MOVLW	0x00
0045f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045f2   ecde     call	0x95bc, 0           	CALL	_DisplayString
0045f4   f04a
0045f6   0e04     movlw	0x4                	MOVLW	0x04
0045f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	862; MainDemo.c	DelayMs(900);
0045fa   0e90     movlw	0x90               	MOVLW	0x90
0045fc   6e00     movwf	0, 0               	MOVWF	r0x00
0045fe   0e58     movlw	0x58               	MOVLW	0x58
004600   6e01     movwf	0x1, 0             	MOVWF	r0x01
004602   0e06     movlw	0x6                	MOVLW	0x06
004604   6e02     movwf	0x2, 0             	MOVWF	r0x02
004606   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00596_DS_:
004608   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00460a   f004
00460c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00460e   f005
004610   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004612   f006
004614   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004616   f007
004618   0eff     movlw	0xff               	MOVLW	0xff
00461a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00461c   0eff     movlw	0xff               	MOVLW	0xff
00461e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004620   0eff     movlw	0xff               	MOVLW	0xff
004622   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004624   0eff     movlw	0xff               	MOVLW	0xff
004626   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004628   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00462a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00462c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00462e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004630   e1eb     bnz	0x4608               	BNZ	_00596_DS_
                                           ;	.line	863; MainDemo.c	return;
004632   d0b9     bra	0x47a6               	BRA	_00620_DS_
                                           _00603_DS_:
                                           ;	.line	866; MainDemo.c	DisplayString (0,"Entering Task Cycle"); // debugging
004634   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
004636   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004638   0e86     movlw	0x86               	MOVLW	HIGH(__str_8)
00463a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00463c   0e1c     movlw	0x1c               	MOVLW	LOW(__str_8)
00463e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004640   0e00     movlw	0                  	MOVLW	0x00
004642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004644   ecde     call	0x95bc, 0           	CALL	_DisplayString
004646   f04a
004648   0e04     movlw	0x4                	MOVLW	0x04
00464a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	867; MainDemo.c	DelayMs(900);
00464c   0e90     movlw	0x90               	MOVLW	0x90
00464e   6e00     movwf	0, 0               	MOVWF	r0x00
004650   0e58     movlw	0x58               	MOVLW	0x58
004652   6e01     movwf	0x1, 0             	MOVWF	r0x01
004654   0e06     movlw	0x6                	MOVLW	0x06
004656   6e02     movwf	0x2, 0             	MOVWF	r0x02
004658   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00606_DS_:
00465a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00465c   f004
00465e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004660   f005
004662   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004664   f006
004666   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004668   f007
00466a   0eff     movlw	0xff               	MOVLW	0xff
00466c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00466e   0eff     movlw	0xff               	MOVLW	0xff
004670   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004672   0eff     movlw	0xff               	MOVLW	0xff
004674   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004676   0eff     movlw	0xff               	MOVLW	0xff
004678   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00467a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00467c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00467e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004680   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004682   e1eb     bnz	0x465a               	BNZ	_00606_DS_
                                           _00618_DS_:
                                           ;	.line	869; MainDemo.c	StackTaskModified(&ip_last_pckt);       
004684   0e0b     movlw	0xb                	MOVLW	HIGH(_doDhcpOperations_ip_last_pckt_1_1)
004686   6e01     movwf	0x1, 0             	MOVWF	r0x01
004688   0eaa     movlw	0xaa               	MOVLW	LOW(_doDhcpOperations_ip_last_pckt_1_1)
00468a   6e00     movwf	0, 0               	MOVWF	r0x00
00468c   0e80     movlw	0x80               	MOVLW	0x80
00468e   6e02     movwf	0x2, 0             	MOVWF	r0x02
004690   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004694   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004698   5000     movf	0, 0, 0             	MOVF	r0x00, W
00469a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00469c   ec3d     call	0x1e7a, 0           	CALL	_StackTaskModified
00469e   f00f
0046a0   0e03     movlw	0x3                	MOVLW	0x03
0046a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	870; MainDemo.c	timeCheck(&send_s_socket);
0046a4   0e02     movlw	0x2                	MOVLW	HIGH(_doDhcpOperations_send_s_socket_1_1)
0046a6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0046a8   0e3c     movlw	0x3c               	MOVLW	LOW(_doDhcpOperations_send_s_socket_1_1)
0046aa   6e00     movwf	0, 0               	MOVWF	r0x00
0046ac   0e80     movlw	0x80               	MOVLW	0x80
0046ae   6e02     movwf	0x2, 0             	MOVWF	r0x02
0046b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0046b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0046b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0046ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046bc   ec3d     call	0x707a, 0           	CALL	_timeCheck
0046be   f038
0046c0   0e03     movlw	0x3                	MOVLW	0x03
0046c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0046c4   0102     movlb	0x2                	BANKSEL	_doDhcpOperations_receiver_socket_1_1
                                           ;	.line	872; MainDemo.c	if(counter = UDPIsGetReady(receiver_socket)){
0046c6   513e     movf	0x3e, 0, 0x1        	MOVF	_doDhcpOperations_receiver_socket_1_1, W, B
0046c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046ca   ec38     call	0xa670, 0           	CALL	_UDPIsGetReady
0046cc   f053
0046ce   6e00     movwf	0, 0               	MOVWF	r0x00
0046d0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0046d2   f001
0046d4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0046d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0046d8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0046da   e0d4     bz	0x4684                	BZ	_00618_DS_
                                           ;	.line	873; MainDemo.c	if(ip_cmp(&ip_last_pckt, &server_ip)){ // Check si on peut pas voir avec l'OP code
0046dc   0e0b     movlw	0xb                	MOVLW	HIGH(_doDhcpOperations_ip_last_pckt_1_1)
0046de   6e01     movwf	0x1, 0             	MOVWF	r0x01
0046e0   0eaa     movlw	0xaa               	MOVLW	LOW(_doDhcpOperations_ip_last_pckt_1_1)
0046e2   6e00     movwf	0, 0               	MOVWF	r0x00
0046e4   0e80     movlw	0x80               	MOVLW	0x80
0046e6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0046e8   0e0b     movlw	0xb                	MOVLW	HIGH(_doDhcpOperations_server_ip_1_1)
0046ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0046ec   0ea6     movlw	0xa6               	MOVLW	LOW(_doDhcpOperations_server_ip_1_1)
0046ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0046f0   0e80     movlw	0x80               	MOVLW	0x80
0046f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0046f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0046f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0046fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0046fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004700   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004704   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004706   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004708   5000     movf	0, 0, 0             	MOVF	r0x00, W
00470a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00470c   ec35     call	0x886a, 0           	CALL	_ip_cmp
00470e   f044
004710   6e00     movwf	0, 0               	MOVWF	r0x00
004712   0e06     movlw	0x6                	MOVLW	0x06
004714   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004716   5000     movf	0, 0, 0             	MOVF	r0x00, W
004718   e01d     bz	0x4754                	BZ	_00613_DS_
                                           ;	.line	874; MainDemo.c	rcvdFromServer(&send_c_socket, &receiver_socket);
00471a   0e02     movlw	0x2                	MOVLW	HIGH(_doDhcpOperations_send_c_socket_1_1)
00471c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00471e   0e3d     movlw	0x3d               	MOVLW	LOW(_doDhcpOperations_send_c_socket_1_1)
004720   6e00     movwf	0, 0               	MOVWF	r0x00
004722   0e80     movlw	0x80               	MOVLW	0x80
004724   6e02     movwf	0x2, 0             	MOVWF	r0x02
004726   0e02     movlw	0x2                	MOVLW	HIGH(_doDhcpOperations_receiver_socket_1_1)
004728   6e04     movwf	0x4, 0             	MOVWF	r0x04
00472a   0e3e     movlw	0x3e               	MOVLW	LOW(_doDhcpOperations_receiver_socket_1_1)
00472c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00472e   0e80     movlw	0x80               	MOVLW	0x80
004730   6e05     movwf	0x5, 0             	MOVWF	r0x05
004732   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004734   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004736   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004738   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00473a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00473c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00473e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004742   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004746   5000     movf	0, 0, 0             	MOVF	r0x00, W
004748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00474a   ec21     call	0x2c42, 0           	CALL	_rcvdFromServer
00474c   f016
00474e   0e06     movlw	0x6                	MOVLW	0x06
004750   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004752   d798     bra	0x4684               	BRA	_00618_DS_
                                           _00613_DS_:
                                           ;	.line	877; MainDemo.c	rcvdFromClient(&send_s_socket, &send_c_socket, &receiver_socket);
004754   0e02     movlw	0x2                	MOVLW	HIGH(_doDhcpOperations_send_s_socket_1_1)
004756   6e01     movwf	0x1, 0             	MOVWF	r0x01
004758   0e3c     movlw	0x3c               	MOVLW	LOW(_doDhcpOperations_send_s_socket_1_1)
00475a   6e00     movwf	0, 0               	MOVWF	r0x00
00475c   0e80     movlw	0x80               	MOVLW	0x80
00475e   6e02     movwf	0x2, 0             	MOVWF	r0x02
004760   0e02     movlw	0x2                	MOVLW	HIGH(_doDhcpOperations_send_c_socket_1_1)
004762   6e04     movwf	0x4, 0             	MOVWF	r0x04
004764   0e3d     movlw	0x3d               	MOVLW	LOW(_doDhcpOperations_send_c_socket_1_1)
004766   6e03     movwf	0x3, 0             	MOVWF	r0x03
004768   0e80     movlw	0x80               	MOVLW	0x80
00476a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00476c   0e02     movlw	0x2                	MOVLW	HIGH(_doDhcpOperations_receiver_socket_1_1)
00476e   6e07     movwf	0x7, 0             	MOVWF	r0x07
004770   0e3e     movlw	0x3e               	MOVLW	LOW(_doDhcpOperations_receiver_socket_1_1)
004772   6e06     movwf	0x6, 0             	MOVWF	r0x06
004774   0e80     movlw	0x80               	MOVLW	0x80
004776   6e08     movwf	0x8, 0             	MOVWF	r0x08
004778   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00477a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00477c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00477e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004780   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004784   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004788   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00478a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00478c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00478e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004790   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004792   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004794   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004796   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004798   5000     movf	0, 0, 0             	MOVF	r0x00, W
00479a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00479c   ecf8     call	0xdf0, 0            	CALL	_rcvdFromClient
00479e   f006
0047a0   0e09     movlw	0x9                	MOVLW	0x09
0047a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0047a4   d76f     bra	0x4684               	BRA	_00618_DS_
                                           _00620_DS_:
0047a6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0047a8   f008
0047aa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0047ac   f007
0047ae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0047b0   f006
0047b2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0047b4   f005
0047b6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0047b8   f004
0047ba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0047bc   f003
0047be   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0047c0   f002
0047c2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0047c4   f001
0047c6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0047c8   f000
0047ca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0047cc   ffd9
0047ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__timeCheck	code
                                           _timeCheck:
                                           ;	.line	819; MainDemo.c	void timeCheck(UDP_SOCKET *send_s_socket){
00707a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00707c   ffe5
00707e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007080   ffd9
007082   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007084   ffe5
007086   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007088   ffe5
00708a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00708c   ffe5
00708e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007090   ffe5
007092   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007094   ffe5
007096   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007098   ffe5
00709a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00709c   ffe5
00709e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0070a0   ffe5
0070a2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0070a4   ffe5
0070a6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0070a8   ffe5
0070aa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0070ac   ffe5
0070ae   0e02     movlw	0x2                	MOVLW	0x02
0070b0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0070b2   f000
0070b4   0e03     movlw	0x3                	MOVLW	0x03
0070b6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0070b8   f001
0070ba   0e04     movlw	0x4                	MOVLW	0x04
0070bc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0070be   f002
                                           ;	.line	823; MainDemo.c	current = TickConvertToMilliseconds(TickGet());
0070c0   ec01     call	0xae02, 0           	CALL	_TickGet
0070c2   f057
0070c4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0070c6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0070c8   f004
0070ca   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0070cc   f005
0070ce   cfe9     movff	0xfe9, 0x6         	MOVFF	FSR0L, r0x06
0070d0   f006
0070d2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0070d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070d6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0070d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070da   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0070dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0070e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070e2   ecd7     call	0x9bae, 0           	CALL	_TickConvertToMilliseconds
0070e4   f04d
0070e6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0070e8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0070ea   f004
0070ec   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0070ee   f005
0070f0   cfe9     movff	0xfe9, 0x6         	MOVFF	FSR0L, r0x06
0070f2   f006
0070f4   0e04     movlw	0x4                	MOVLW	0x04
0070f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0070f8   010e     movlb	0xe                	BANKSEL	_timeCheck_previous_1_1
                                           ;	.line	825; MainDemo.c	if (current-previous >= 1000 || current < previous) {
0070fa   5149     movf	0x49, 0, 0x1        	MOVF	_timeCheck_previous_1_1, W, B
0070fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0070fe   6e07     movwf	0x7, 0             	MOVWF	r0x07
007100   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 1)
007102   514a     movf	0x4a, 0, 0x1        	MOVF	(_timeCheck_previous_1_1 + 1), W, B
007104   5804     subwfb	0x4, 0, 0         	SUBWFB	r0x04, W
007106   6e08     movwf	0x8, 0             	MOVWF	r0x08
007108   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 2)
00710a   514b     movf	0x4b, 0, 0x1        	MOVF	(_timeCheck_previous_1_1 + 2), W, B
00710c   5805     subwfb	0x5, 0, 0         	SUBWFB	r0x05, W
00710e   6e09     movwf	0x9, 0             	MOVWF	r0x09
007110   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 3)
007112   514c     movf	0x4c, 0, 0x1        	MOVF	(_timeCheck_previous_1_1 + 3), W, B
007114   5806     subwfb	0x6, 0, 0         	SUBWFB	r0x06, W
007116   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007118   0e00     movlw	0                  	MOVLW	0x00
00711a   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
00711c   e108     bnz	0x712e               	BNZ	_00590_DS_
00711e   0e00     movlw	0                  	MOVLW	0x00
007120   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
007122   e105     bnz	0x712e               	BNZ	_00590_DS_
007124   0e03     movlw	0x3                	MOVLW	0x03
007126   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
007128   e102     bnz	0x712e               	BNZ	_00590_DS_
00712a   0ee8     movlw	0xe8               	MOVLW	0xe8
00712c   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
                                           _00590_DS_:
00712e   e211     bc	0x7152                	BC	_00583_DS_
007130   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 3)
007132   514c     movf	0x4c, 0, 0x1        	MOVF	(_timeCheck_previous_1_1 + 3), W, B
007134   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
007136   e10b     bnz	0x714e               	BNZ	_00591_DS_
007138   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 2)
00713a   514b     movf	0x4b, 0, 0x1        	MOVF	(_timeCheck_previous_1_1 + 2), W, B
00713c   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00713e   e107     bnz	0x714e               	BNZ	_00591_DS_
007140   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 1)
007142   514a     movf	0x4a, 0, 0x1        	MOVF	(_timeCheck_previous_1_1 + 1), W, B
007144   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
007146   e103     bnz	0x714e               	BNZ	_00591_DS_
007148   010e     movlb	0xe                	BANKSEL	_timeCheck_previous_1_1
00714a   5149     movf	0x49, 0, 0x1        	MOVF	_timeCheck_previous_1_1, W, B
00714c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00591_DS_:
00714e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007150   d04d     bra	0x71ec               	BRA	_00586_DS_
                                           _00583_DS_:
                                           ;	.line	826; MainDemo.c	previous += 1000;
007152   0ee8     movlw	0xe8               	MOVLW	0xe8
007154   010e     movlb	0xe                	BANKSEL	_timeCheck_previous_1_1
007156   2749     addwf	0x49, 0x1, 0x1     	ADDWF	_timeCheck_previous_1_1, F, B
007158   0e03     movlw	0x3                	MOVLW	0x03
00715a   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 1)
00715c   234a     addwfc	0x4a, 0x1, 0x1    	ADDWFC	(_timeCheck_previous_1_1 + 1), F, B
00715e   0e00     movlw	0                  	MOVLW	0x00
007160   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 2)
007162   234b     addwfc	0x4b, 0x1, 0x1    	ADDWFC	(_timeCheck_previous_1_1 + 2), F, B
007164   0e00     movlw	0                  	MOVLW	0x00
007166   010e     movlb	0xe                	BANKSEL	(_timeCheck_previous_1_1 + 3)
007168   234c     addwfc	0x4c, 0x1, 0x1    	ADDWFC	(_timeCheck_previous_1_1 + 3), F, B
00716a   010e     movlb	0xe                	BANKSEL	_timeCheck_counter_1_1
                                           ;	.line	827; MainDemo.c	counter++;
00716c   2b4d     incf	0x4d, 0x1, 0x1      	INCF	_timeCheck_counter_1_1, F, B
00716e   e302     bnc	0x7174               	BNC	_10730_DS_
007170   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 1)
007172   2b4e     incf	0x4e, 0x1, 0x1      	INCF	(_timeCheck_counter_1_1 + 1), F, B
                                           _10730_DS_:
007174   e302     bnc	0x717a               	BNC	_20731_DS_
007176   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 2)
007178   2b4f     incf	0x4f, 0x1, 0x1      	INCF	(_timeCheck_counter_1_1 + 2), F, B
                                           _20731_DS_:
00717a   e302     bnc	0x7180               	BNC	_30732_DS_
00717c   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 3)
00717e   2b50     incf	0x50, 0x1, 0x1      	INCF	(_timeCheck_counter_1_1 + 3), F, B
                                           _30732_DS_:
                                           ;	.line	828; MainDemo.c	if(counter%OVERFLOW_TIME == 0){
007180   0e00     movlw	0                  	MOVLW	0x00
007182   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007184   0e00     movlw	0                  	MOVLW	0x00
007186   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007188   0e00     movlw	0                  	MOVLW	0x00
00718a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00718c   0e3d     movlw	0x3d               	MOVLW	0x3d
00718e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007190   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 3)
007192   5150     movf	0x50, 0, 0x1        	MOVF	(_timeCheck_counter_1_1 + 3), W, B
007194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007196   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 2)
007198   514f     movf	0x4f, 0, 0x1        	MOVF	(_timeCheck_counter_1_1 + 2), W, B
00719a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00719c   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 1)
00719e   514e     movf	0x4e, 0, 0x1        	MOVF	(_timeCheck_counter_1_1 + 1), W, B
0071a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071a2   010e     movlb	0xe                	BANKSEL	_timeCheck_counter_1_1
0071a4   514d     movf	0x4d, 0, 0x1        	MOVF	_timeCheck_counter_1_1, W, B
0071a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071a8   eccc     call	0x7f98, 0           	CALL	__modulong
0071aa   f03f
0071ac   6e03     movwf	0x3, 0             	MOVWF	r0x03
0071ae   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0071b0   f004
0071b2   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0071b4   f005
0071b6   cfe9     movff	0xfe9, 0x6         	MOVFF	FSR0L, r0x06
0071b8   f006
0071ba   0e08     movlw	0x8                	MOVLW	0x08
0071bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0071be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0071c0   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0071c2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0071c4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0071c6   e112     bnz	0x71ec               	BNZ	_00586_DS_
                                           ;	.line	829; MainDemo.c	leaseTimeCheck(send_s_socket);
0071c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0071ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0071ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0071d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071d4   ecce     call	0x2f9c, 0           	CALL	_leaseTimeCheck
0071d6   f017
0071d8   0e03     movlw	0x3                	MOVLW	0x03
0071da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0071dc   010e     movlb	0xe                	BANKSEL	_timeCheck_counter_1_1
                                           ;	.line	830; MainDemo.c	counter = 0;
0071de   6b4d     clrf	0x4d, 0x1           	CLRF	_timeCheck_counter_1_1, B
0071e0   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 1)
0071e2   6b4e     clrf	0x4e, 0x1           	CLRF	(_timeCheck_counter_1_1 + 1), B
0071e4   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 2)
0071e6   6b4f     clrf	0x4f, 0x1           	CLRF	(_timeCheck_counter_1_1 + 2), B
0071e8   010e     movlb	0xe                	BANKSEL	(_timeCheck_counter_1_1 + 3)
0071ea   6b50     clrf	0x50, 0x1           	CLRF	(_timeCheck_counter_1_1 + 3), B
                                           _00586_DS_:
0071ec   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0071ee   f00a
0071f0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0071f2   f009
0071f4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0071f6   f008
0071f8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0071fa   f007
0071fc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0071fe   f006
007200   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007202   f005
007204   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007206   f004
007208   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00720a   f003
00720c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00720e   f002
007210   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007212   f001
007214   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007216   f000
007218   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00721a   ffd9
00721c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__leaseTimeCheck	code
                                           _leaseTimeCheck:
                                           ;	.line	786; MainDemo.c	void leaseTimeCheck(UDP_SOCKET *send_s_socket){
002f9c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f9e   ffe5
002fa0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002fa2   ffd9
002fa4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002fa6   ffe5
002fa8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002faa   ffe5
002fac   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002fae   ffe5
002fb0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002fb2   ffe5
002fb4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002fb6   ffe5
002fb8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002fba   ffe5
002fbc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002fbe   ffe5
002fc0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002fc2   ffe5
002fc4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002fc6   ffe5
002fc8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002fca   ffe5
002fcc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002fce   ffe5
002fd0   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002fd2   ffe5
002fd4   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002fd6   ffe5
002fd8   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002fda   ffe5
002fdc   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002fde   ffe5
002fe0   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002fe2   ffe5
002fe4   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002fe6   ffe5
002fe8   0e02     movlw	0x2                	MOVLW	0x02
002fea   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002fec   f000
002fee   0e03     movlw	0x3                	MOVLW	0x03
002ff0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002ff2   f001
002ff4   0e04     movlw	0x4                	MOVLW	0x04
002ff6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002ff8   f002
                                           ;	.line	788; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
002ffa   6a03     clrf	0x3, 0              	CLRF	r0x03
002ffc   6a04     clrf	0x4, 0              	CLRF	r0x04
002ffe   6a05     clrf	0x5, 0              	CLRF	r0x05
003000   6a06     clrf	0x6, 0              	CLRF	r0x06
003002   6a07     clrf	0x7, 0              	CLRF	r0x07
003004   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00558_DS_:
003006   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003008   0f80     addlw	0x80               	ADDLW	0x80
00300a   0f80     addlw	0x80               	ADDLW	0x80
00300c   e102     bnz	0x3012               	BNZ	_00572_DS_
00300e   0e0a     movlw	0xa                	MOVLW	0x0a
003010   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00572_DS_:
003012   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003014   d136     bra	0x3282               	BRA	_00562_DS_
                                           ;	.line	789; MainDemo.c	if(!isPoolItemUsed(&pool[i])){
003016   0e00     movlw	0                  	MOVLW	LOW(_pool)
003018   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
00301a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00301c   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
00301e   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
003020   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003022   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003024   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003026   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003028   6e09     movwf	0x9, 0             	MOVWF	r0x09
00302a   0e80     movlw	0x80               	MOVLW	0x80
00302c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00302e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003030   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003032   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003034   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003036   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003038   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00303a   ecd3     call	0x99a6, 0           	CALL	_isPoolItemUsed
00303c   f04c
00303e   6e09     movwf	0x9, 0             	MOVWF	r0x09
003040   0e03     movlw	0x3                	MOVLW	0x03
003042   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003044   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003046   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
003048   d110     bra	0x326a               	BRA	_00560_DS_
                                           ;	.line	791; MainDemo.c	if(pool[i].server_leasetime < 60)
00304a   0e00     movlw	0                  	MOVLW	LOW(_pool)
00304c   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
00304e   6e09     movwf	0x9, 0             	MOVWF	r0x09
003050   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
003052   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
003054   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003056   0e10     movlw	0x10               	MOVLW	0x10
003058   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00305a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00305c   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
00305e   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
003060   ffe9
003062   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
003064   ffea
003066   cfee     movff	0xfee, 0xb         	MOVFF	POSTINC0, r0x0b
003068   f00b
00306a   cfee     movff	0xfee, 0xc         	MOVFF	POSTINC0, r0x0c
00306c   f00c
00306e   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
003070   f00d
003072   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
003074   f00e
003076   0e00     movlw	0                  	MOVLW	0x00
003078   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
00307a   e108     bnz	0x308c               	BNZ	_00573_DS_
00307c   0e00     movlw	0                  	MOVLW	0x00
00307e   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
003080   e105     bnz	0x308c               	BNZ	_00573_DS_
003082   0e00     movlw	0                  	MOVLW	0x00
003084   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
003086   e102     bnz	0x308c               	BNZ	_00573_DS_
003088   0e3c     movlw	0x3c               	MOVLW	0x3c
00308a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
                                           _00573_DS_:
00308c   e20d     bc	0x30a8                	BC	_00547_DS_
                                           ;	.line	792; MainDemo.c	pool[i].server_leasetime = 0;
00308e   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
003090   ffe9
003092   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
003094   ffea
003096   0e00     movlw	0                  	MOVLW	0x00
003098   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00309a   0e00     movlw	0                  	MOVLW	0x00
00309c   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00309e   0e00     movlw	0                  	MOVLW	0x00
0030a0   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0030a2   0e00     movlw	0                  	MOVLW	0x00
0030a4   6eef     movwf	0xef, 0            	MOVWF	INDF0
0030a6   d020     bra	0x30e8               	BRA	_00548_DS_
                                           _00547_DS_:
                                           ;	.line	793; MainDemo.c	else pool[i].server_leasetime -= 60;
0030a8   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0030aa   ffe9
0030ac   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
0030ae   ffea
0030b0   cfee     movff	0xfee, 0xb         	MOVFF	POSTINC0, r0x0b
0030b2   f00b
0030b4   cfee     movff	0xfee, 0xc         	MOVFF	POSTINC0, r0x0c
0030b6   f00c
0030b8   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
0030ba   f00d
0030bc   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
0030be   f00e
0030c0   0ec4     movlw	0xc4               	MOVLW	0xc4
0030c2   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
0030c4   0eff     movlw	0xff               	MOVLW	0xff
0030c6   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0030c8   0eff     movlw	0xff               	MOVLW	0xff
0030ca   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
0030cc   0eff     movlw	0xff               	MOVLW	0xff
0030ce   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
0030d0   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0030d2   ffe9
0030d4   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
0030d6   ffea
0030d8   c00b     movff	0xb, 0xfee         	MOVFF	r0x0b, POSTINC0
0030da   ffee
0030dc   c00c     movff	0xc, 0xfee         	MOVFF	r0x0c, POSTINC0
0030de   ffee
0030e0   c00d     movff	0xd, 0xfee         	MOVFF	r0x0d, POSTINC0
0030e2   ffee
0030e4   c00e     movff	0xe, 0xfef         	MOVFF	r0x0e, INDF0
0030e6   ffef
                                           _00548_DS_:
                                           ;	.line	795; MainDemo.c	if(pool[i].client_leasetime <= 60){
0030e8   0e00     movlw	0                  	MOVLW	LOW(_pool)
0030ea   2405     addwf	0x5, 0, 0          	ADDWF	r0x05, W
0030ec   6e09     movwf	0x9, 0             	MOVWF	r0x09
0030ee   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
0030f0   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
0030f2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0030f4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0030f6   0f0c     addlw	0xc                	ADDLW	0x0c
0030f8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0030fa   0e00     movlw	0                  	MOVLW	0x00
0030fc   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
0030fe   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003100   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
003102   ffe9
003104   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
003106   ffea
003108   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
00310a   f00d
00310c   cfee     movff	0xfee, 0xe         	MOVFF	POSTINC0, r0x0e
00310e   f00e
003110   cfee     movff	0xfee, 0xf         	MOVFF	POSTINC0, r0x0f
003112   f00f
003114   cfef     movff	0xfef, 0x10        	MOVFF	INDF0, r0x10
003116   f010
003118   0e00     movlw	0                  	MOVLW	0x00
00311a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
00311c   e108     bnz	0x312e               	BNZ	_00574_DS_
00311e   0e00     movlw	0                  	MOVLW	0x00
003120   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
003122   e105     bnz	0x312e               	BNZ	_00574_DS_
003124   0e00     movlw	0                  	MOVLW	0x00
003126   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
003128   e102     bnz	0x312e               	BNZ	_00574_DS_
00312a   0e3d     movlw	0x3d               	MOVLW	0x3d
00312c   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
                                           _00574_DS_:
00312e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003130   d042     bra	0x31b6               	BRA	_00552_DS_
                                           ;	.line	796; MainDemo.c	pool[i].terms_missed++;
003132   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003134   0f0a     addlw	0xa                	ADDLW	0x0a
003136   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003138   0e00     movlw	0                  	MOVLW	0x00
00313a   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
00313c   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00313e   c00d     movff	0xd, 0xfe9         	MOVFF	r0x0d, FSR0L
003140   ffe9
003142   c00e     movff	0xe, 0xfea         	MOVFF	r0x0e, FSR0H
003144   ffea
003146   cfee     movff	0xfee, 0xf         	MOVFF	POSTINC0, r0x0f
003148   f00f
00314a   cfef     movff	0xfef, 0x10        	MOVFF	INDF0, r0x10
00314c   f010
00314e   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
003150   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003152   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
003154   c00d     movff	0xd, 0xfe9         	MOVFF	r0x0d, FSR0L
003156   ffe9
003158   c00e     movff	0xe, 0xfea         	MOVFF	r0x0e, FSR0H
00315a   ffea
00315c   c00f     movff	0xf, 0xfee         	MOVFF	r0x0f, POSTINC0
00315e   ffee
003160   c010     movff	0x10, 0xfef        	MOVFF	r0x10, INDF0
003162   ffef
                                           ;	.line	797; MainDemo.c	pool[i].client_leasetime = CLIENT_LEASE_TIME;
003164   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
003166   ffe9
003168   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
00316a   ffea
00316c   0e2c     movlw	0x2c               	MOVLW	0x2c
00316e   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
003170   0e01     movlw	0x1                	MOVLW	0x01
003172   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
003174   0e00     movlw	0                  	MOVLW	0x00
003176   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
003178   0e00     movlw	0                  	MOVLW	0x00
00317a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	799; MainDemo.c	if(pool[i].terms_missed >= 5){
00317c   0e00     movlw	0                  	MOVLW	0x00
00317e   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
003180   e102     bnz	0x3186               	BNZ	_00575_DS_
003182   0e05     movlw	0x5                	MOVLW	0x05
003184   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00575_DS_:
003186   e337     bnc	0x31f6               	BNC	_00553_DS_
                                           ;	.line	801; MainDemo.c	sendRelease(send_s_socket, &pool[i]); // TODO
003188   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00318a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00318c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00318e   6e09     movwf	0x9, 0             	MOVWF	r0x09
003190   0e80     movlw	0x80               	MOVLW	0x80
003192   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003194   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003198   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00319a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00319c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00319e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0031a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0031aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ac   ecb1     call	0x6362, 0           	CALL	_sendRelease
0031ae   f031
0031b0   0e06     movlw	0x6                	MOVLW	0x06
0031b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	802; MainDemo.c	continue; 
0031b4   d05a     bra	0x326a               	BRA	_00560_DS_
                                           _00552_DS_:
                                           ;	.line	805; MainDemo.c	else pool[i].client_leasetime -= 60;            
0031b6   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
0031b8   ffe9
0031ba   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
0031bc   ffea
0031be   cfee     movff	0xfee, 0x9         	MOVFF	POSTINC0, r0x09
0031c0   f009
0031c2   cfee     movff	0xfee, 0xa         	MOVFF	POSTINC0, r0x0a
0031c4   f00a
0031c6   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
0031c8   f00d
0031ca   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
0031cc   f00e
0031ce   0ec4     movlw	0xc4               	MOVLW	0xc4
0031d0   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0031d2   0eff     movlw	0xff               	MOVLW	0xff
0031d4   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0031d6   0eff     movlw	0xff               	MOVLW	0xff
0031d8   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
0031da   0eff     movlw	0xff               	MOVLW	0xff
0031dc   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
0031de   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
0031e0   ffe9
0031e2   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
0031e4   ffea
0031e6   c009     movff	0x9, 0xfee         	MOVFF	r0x09, POSTINC0
0031e8   ffee
0031ea   c00a     movff	0xa, 0xfee         	MOVFF	r0x0a, POSTINC0
0031ec   ffee
0031ee   c00d     movff	0xd, 0xfee         	MOVFF	r0x0d, POSTINC0
0031f0   ffee
0031f2   c00e     movff	0xe, 0xfef         	MOVFF	r0x0e, INDF0
0031f4   ffef
                                           _00553_DS_:
                                           ;	.line	806; MainDemo.c	if(pool[i].server_leasetime <= SERVER_LEASE_TIME){
0031f6   0e00     movlw	0                  	MOVLW	LOW(_pool)
0031f8   2405     addwf	0x5, 0, 0          	ADDWF	r0x05, W
0031fa   6e09     movwf	0x9, 0             	MOVWF	r0x09
0031fc   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
0031fe   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
003200   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003202   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003204   0f10     addlw	0x10               	ADDLW	0x10
003206   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
003208   0e00     movlw	0                  	MOVLW	0x00
00320a   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
00320c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00320e   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
003210   ffe9
003212   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
003214   ffea
003216   cfee     movff	0xfee, 0xb         	MOVFF	POSTINC0, r0x0b
003218   f00b
00321a   cfee     movff	0xfee, 0xc         	MOVFF	POSTINC0, r0x0c
00321c   f00c
00321e   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
003220   f00d
003222   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
003224   f00e
003226   0e00     movlw	0                  	MOVLW	0x00
003228   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
00322a   e108     bnz	0x323c               	BNZ	_00576_DS_
00322c   0e00     movlw	0                  	MOVLW	0x00
00322e   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
003230   e105     bnz	0x323c               	BNZ	_00576_DS_
003232   0e01     movlw	0x1                	MOVLW	0x01
003234   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
003236   e102     bnz	0x323c               	BNZ	_00576_DS_
003238   0e2d     movlw	0x2d               	MOVLW	0x2d
00323a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
                                           _00576_DS_:
00323c   e216     bc	0x326a                	BC	_00560_DS_
                                           ;	.line	807; MainDemo.c	sendRequest(send_s_socket, &pool[i]);       // TODO
00323e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003240   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003242   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003244   6e09     movwf	0x9, 0             	MOVWF	r0x09
003246   0e80     movlw	0x80               	MOVLW	0x80
003248   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00324a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00324c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00324e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003252   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003254   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003256   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003258   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00325a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00325c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00325e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003262   ec7e     call	0x6cfc, 0           	CALL	_sendRequest
003264   f036
003266   0e06     movlw	0x6                	MOVLW	0x06
003268   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00560_DS_:
                                           ;	.line	788; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
00326a   0e14     movlw	0x14               	MOVLW	0x14
00326c   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
00326e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003270   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
003272   0e14     movlw	0x14               	MOVLW	0x14
003274   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
003276   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003278   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
00327a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00327c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00327e   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
003280   d6c2     bra	0x3006               	BRA	_00558_DS_
                                           _00562_DS_:
003282   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
003284   f010
003286   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003288   f00f
00328a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00328c   f00e
00328e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003290   f00d
003292   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003294   f00c
003296   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003298   f00b
00329a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00329c   f00a
00329e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0032a0   f009
0032a2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0032a4   f008
0032a6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0032a8   f007
0032aa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0032ac   f006
0032ae   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0032b0   f005
0032b2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0032b4   f004
0032b6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0032b8   f003
0032ba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0032bc   f002
0032be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032c0   f001
0032c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032c4   f000
0032c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0032c8   ffd9
0032ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__findInPool	code
                                           _findInPool:
                                           ;	.line	774; MainDemo.c	BOOL findInPool(POOL_ITEM **it, MAC_ADDR *mac){
007aa0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007aa2   ffe5
007aa4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007aa6   ffd9
007aa8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007aaa   ffe5
007aac   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007aae   ffe5
007ab0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007ab2   ffe5
007ab4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007ab6   ffe5
007ab8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007aba   ffe5
007abc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007abe   ffe5
007ac0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007ac2   ffe5
007ac4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007ac6   ffe5
007ac8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007aca   ffe5
007acc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007ace   ffe5
007ad0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
007ad2   ffe5
007ad4   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
007ad6   ffe5
007ad8   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
007ada   ffe5
007adc   0e02     movlw	0x2                	MOVLW	0x02
007ade   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007ae0   f000
007ae2   0e03     movlw	0x3                	MOVLW	0x03
007ae4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007ae6   f001
007ae8   0e04     movlw	0x4                	MOVLW	0x04
007aea   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007aec   f002
007aee   0e05     movlw	0x5                	MOVLW	0x05
007af0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
007af2   f003
007af4   0e06     movlw	0x6                	MOVLW	0x06
007af6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007af8   f004
007afa   0e07     movlw	0x7                	MOVLW	0x07
007afc   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
007afe   f005
                                           ;	.line	776; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
007b00   6a06     clrf	0x6, 0              	CLRF	r0x06
007b02   6a07     clrf	0x7, 0              	CLRF	r0x07
007b04   6a08     clrf	0x8, 0              	CLRF	r0x08
007b06   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00532_DS_:
007b08   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007b0a   0f80     addlw	0x80               	ADDLW	0x80
007b0c   0f80     addlw	0x80               	ADDLW	0x80
007b0e   e102     bnz	0x7b14               	BNZ	_00541_DS_
007b10   0e0a     movlw	0xa                	MOVLW	0x0a
007b12   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00541_DS_:
007b14   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007b16   d046     bra	0x7ba4               	BRA	_00535_DS_
                                           ;	.line	777; MainDemo.c	if(mac_cmp(mac, &pool[i].mac)){
007b18   0e00     movlw	0                  	MOVLW	LOW(_pool)
007b1a   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
007b1c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007b1e   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
007b20   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
007b22   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
007b24   0e04     movlw	0x4                	MOVLW	0x04
007b26   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
007b28   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007b2a   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
007b2c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
007b2e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
007b30   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007b32   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007b34   0e80     movlw	0x80               	MOVLW	0x80
007b36   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
007b38   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
007b3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b3c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
007b3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b40   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007b42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b44   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007b46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b48   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007b4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b4c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007b4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b50   ecbf     call	0x897e, 0           	CALL	_mac_cmp
007b52   f044
007b54   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007b56   0e06     movlw	0x6                	MOVLW	0x06
007b58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007b5a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007b5c   e01b     bz	0x7b94                	BZ	_00534_DS_
                                           ;	.line	778; MainDemo.c	*it = &pool[i];
007b5e   0e00     movlw	0                  	MOVLW	LOW(_pool)
007b60   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
007b62   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007b64   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
007b66   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
007b68   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
007b6a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
007b6c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
007b6e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007b70   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007b72   0e80     movlw	0x80               	MOVLW	0x80
007b74   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
007b76   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
007b78   ffe5
007b7a   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
007b7c   fff4
007b7e   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
007b80   fff6
007b82   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007b84   ffe9
007b86   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007b88   fff3
007b8a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007b8c   ecab     call	0xaf56, 0           	CALL	__gptrput3
007b8e   f057
                                           ;	.line	779; MainDemo.c	return TRUE;
007b90   0e01     movlw	0x1                	MOVLW	0x01
007b92   d009     bra	0x7ba6               	BRA	_00536_DS_
                                           _00534_DS_:
                                           ;	.line	776; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
007b94   0e14     movlw	0x14               	MOVLW	0x14
007b96   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
007b98   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007b9a   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
007b9c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
007b9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007ba0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
007ba2   d7b2     bra	0x7b08               	BRA	_00532_DS_
                                           _00535_DS_:
                                           ;	.line	782; MainDemo.c	return FALSE;
007ba4   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00536_DS_:
007ba6   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
007ba8   f00c
007baa   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
007bac   f00b
007bae   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
007bb0   f00a
007bb2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007bb4   f009
007bb6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007bb8   f008
007bba   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007bbc   f007
007bbe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007bc0   f006
007bc2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007bc4   f005
007bc6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007bc8   f004
007bca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007bcc   f003
007bce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007bd0   f002
007bd2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007bd4   f001
007bd6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007bd8   f000
007bda   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007bdc   ffd9
007bde   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__isPoolItemUsed	code
                                           _isPoolItemUsed:
                                           ;	.line	764; MainDemo.c	BOOL isPoolItemUsed(POOL_ITEM *it){
0099a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0099a8   ffe5
0099aa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0099ac   ffd9
0099ae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0099b0   ffe5
0099b2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0099b4   ffe5
0099b6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0099b8   ffe5
0099ba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0099bc   ffe5
0099be   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0099c0   ffe5
0099c2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0099c4   ffe5
0099c6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0099c8   ffe5
0099ca   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0099cc   ffe5
0099ce   0e02     movlw	0x2                	MOVLW	0x02
0099d0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0099d2   f000
0099d4   0e03     movlw	0x3                	MOVLW	0x03
0099d6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0099d8   f001
0099da   0e04     movlw	0x4                	MOVLW	0x04
0099dc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0099de   f002
                                           ;	.line	766; MainDemo.c	for(i=0; i<6; i++){
0099e0   0e04     movlw	0x4                	MOVLW	0x04
0099e2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0099e4   0e00     movlw	0                  	MOVLW	0x00
0099e6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0099e8   0e00     movlw	0                  	MOVLW	0x00
0099ea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0099ec   6a03     clrf	0x3, 0              	CLRF	r0x03
0099ee   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00516_DS_:
0099f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0099f2   0f80     addlw	0x80               	ADDLW	0x80
0099f4   0f80     addlw	0x80               	ADDLW	0x80
0099f6   e102     bnz	0x99fc               	BNZ	_00525_DS_
0099f8   0e06     movlw	0x6                	MOVLW	0x06
0099fa   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00525_DS_:
0099fc   e21b     bc	0x9a34                	BC	_00519_DS_
                                           ;	.line	767; MainDemo.c	if(it->mac.v[i] != 0){
0099fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009a00   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
009a02   6e05     movwf	0x5, 0             	MOVWF	r0x05
009a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009a06   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
009a08   6e06     movwf	0x6, 0             	MOVWF	r0x06
009a0a   6ae8     clrf	0xe8, 0             	CLRF	WREG
009a0c   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
009a0e   68e8     setf	0xe8, 0             	SETF	WREG
009a10   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
009a12   6e07     movwf	0x7, 0             	MOVWF	r0x07
009a14   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
009a16   ffe9
009a18   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
009a1a   fff3
009a1c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009a1e   ec12     call	0xae24, 0           	CALL	__gptrget1
009a20   f057
009a22   6e05     movwf	0x5, 0             	MOVWF	r0x05
009a24   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009a26   e002     bz	0x9a2c                	BZ	_00518_DS_
                                           ;	.line	768; MainDemo.c	return FALSE;
009a28   6ae8     clrf	0xe8, 0             	CLRF	WREG
009a2a   d005     bra	0x9a36               	BRA	_00520_DS_
                                           _00518_DS_:
                                           ;	.line	766; MainDemo.c	for(i=0; i<6; i++){
009a2c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
009a2e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009a30   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
009a32   d7de     bra	0x99f0               	BRA	_00516_DS_
                                           _00519_DS_:
                                           ;	.line	771; MainDemo.c	return TRUE;
009a34   0e01     movlw	0x1                	MOVLW	0x01
                                           _00520_DS_:
009a36   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009a38   f007
009a3a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009a3c   f006
009a3e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009a40   f005
009a42   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009a44   f004
009a46   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009a48   f003
009a4a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009a4c   f002
009a4e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009a50   f001
009a52   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009a54   f000
009a56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009a58   ffd9
009a5a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__addItem	code
                                           _addItem:
                                           ;	.line	747; MainDemo.c	BOOL addItem(IP_ADDR *ip, MAC_ADDR *mac, DWORD leasetime, unsigned int terms_missed_tmp){
0056ac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0056ae   ffe5
0056b0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0056b2   ffd9
0056b4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0056b6   ffe5
0056b8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0056ba   ffe5
0056bc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0056be   ffe5
0056c0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0056c2   ffe5
0056c4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0056c6   ffe5
0056c8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0056ca   ffe5
0056cc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0056ce   ffe5
0056d0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0056d2   ffe5
0056d4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0056d6   ffe5
0056d8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0056da   ffe5
0056dc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0056de   ffe5
0056e0   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0056e2   ffe5
0056e4   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0056e6   ffe5
0056e8   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0056ea   ffe5
0056ec   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0056ee   ffe5
0056f0   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0056f2   ffe5
0056f4   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0056f6   ffe5
0056f8   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0056fa   ffe5
0056fc   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0056fe   ffe5
005700   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
005702   ffe5
005704   0e02     movlw	0x2                	MOVLW	0x02
005706   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005708   f000
00570a   0e03     movlw	0x3                	MOVLW	0x03
00570c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00570e   f001
005710   0e04     movlw	0x4                	MOVLW	0x04
005712   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005714   f002
005716   0e05     movlw	0x5                	MOVLW	0x05
005718   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00571a   f003
00571c   0e06     movlw	0x6                	MOVLW	0x06
00571e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005720   f004
005722   0e07     movlw	0x7                	MOVLW	0x07
005724   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005726   f005
005728   0e08     movlw	0x8                	MOVLW	0x08
00572a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00572c   f006
00572e   0e09     movlw	0x9                	MOVLW	0x09
005730   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
005732   f007
005734   0e0a     movlw	0xa                	MOVLW	0x0a
005736   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
005738   f008
00573a   0e0b     movlw	0xb                	MOVLW	0x0b
00573c   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
00573e   f009
005740   0e0c     movlw	0xc                	MOVLW	0x0c
005742   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
005744   f00a
005746   0e0d     movlw	0xd                	MOVLW	0x0d
005748   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
00574a   f00b
                                           ;	.line	749; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
00574c   6a0c     clrf	0xc, 0              	CLRF	r0x0c
00574e   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005750   6a0e     clrf	0xe, 0              	CLRF	r0x0e
005752   6a0f     clrf	0xf, 0              	CLRF	r0x0f
                                           _00500_DS_:
005754   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005756   0f80     addlw	0x80               	ADDLW	0x80
005758   0f80     addlw	0x80               	ADDLW	0x80
00575a   e102     bnz	0x5760               	BNZ	_00509_DS_
00575c   0e0a     movlw	0xa                	MOVLW	0x0a
00575e   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00509_DS_:
005760   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005762   d09e     bra	0x58a0               	BRA	_00503_DS_
                                           ;	.line	750; MainDemo.c	if(isPoolItemUsed(&pool[i])){
005764   0e00     movlw	0                  	MOVLW	LOW(_pool)
005766   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
005768   6e10     movwf	0x10, 0            	MOVWF	r0x10
00576a   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
00576c   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
00576e   6e11     movwf	0x11, 0            	MOVWF	r0x11
005770   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005772   6e11     movwf	0x11, 0            	MOVWF	r0x11
005774   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005776   6e10     movwf	0x10, 0            	MOVWF	r0x10
005778   0e80     movlw	0x80               	MOVLW	0x80
00577a   6e12     movwf	0x12, 0            	MOVWF	r0x12
00577c   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00577e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005780   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005784   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005788   ecd3     call	0x99a6, 0           	CALL	_isPoolItemUsed
00578a   f04c
00578c   6e10     movwf	0x10, 0            	MOVWF	r0x10
00578e   0e03     movlw	0x3                	MOVLW	0x03
005790   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005792   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005794   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
005796   d07c     bra	0x5890               	BRA	_00502_DS_
                                           ;	.line	751; MainDemo.c	memcpy(pool[i].ip.v, ip->v, sizeof(IP_ADDR));
005798   0e00     movlw	0                  	MOVLW	LOW(_pool)
00579a   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
00579c   6e10     movwf	0x10, 0            	MOVWF	r0x10
00579e   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
0057a0   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
0057a2   6e11     movwf	0x11, 0            	MOVWF	r0x11
0057a4   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0057a6   6e11     movwf	0x11, 0            	MOVWF	r0x11
0057a8   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0057aa   6e10     movwf	0x10, 0            	MOVWF	r0x10
0057ac   0e80     movlw	0x80               	MOVLW	0x80
0057ae   6e12     movwf	0x12, 0            	MOVWF	r0x12
0057b0   0e00     movlw	0                  	MOVLW	0x00
0057b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057b4   0e04     movlw	0x4                	MOVLW	0x04
0057b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0057ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0057be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0057c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057c4   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0057c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057c8   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0057ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057cc   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0057ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057d0   ecd1     call	0x8ba2, 0           	CALL	_memcpy
0057d2   f045
0057d4   0e08     movlw	0x8                	MOVLW	0x08
0057d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	752; MainDemo.c	memcpy(pool[i].mac.v, mac->v, sizeof(MAC_ADDR));
0057d8   0e00     movlw	0                  	MOVLW	LOW(_pool)
0057da   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
0057dc   6e10     movwf	0x10, 0            	MOVWF	r0x10
0057de   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
0057e0   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
0057e2   6e11     movwf	0x11, 0            	MOVWF	r0x11
0057e4   0e04     movlw	0x4                	MOVLW	0x04
0057e6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0057e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0057ea   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
0057ec   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0057ee   6e11     movwf	0x11, 0            	MOVWF	r0x11
0057f0   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0057f2   6e10     movwf	0x10, 0            	MOVWF	r0x10
0057f4   0e80     movlw	0x80               	MOVLW	0x80
0057f6   6e12     movwf	0x12, 0            	MOVWF	r0x12
0057f8   0e00     movlw	0                  	MOVLW	0x00
0057fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057fc   0e06     movlw	0x6                	MOVLW	0x06
0057fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005800   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005804   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005808   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00580a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00580c   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00580e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005810   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005812   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005814   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005816   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005818   ecd1     call	0x8ba2, 0           	CALL	_memcpy
00581a   f045
00581c   0e08     movlw	0x8                	MOVLW	0x08
00581e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	753; MainDemo.c	pool[i].client_leasetime = CLIENT_LEASE_TIME;
005820   0e00     movlw	0                  	MOVLW	LOW(_pool)
005822   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
005824   6e10     movwf	0x10, 0            	MOVWF	r0x10
005826   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
005828   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
00582a   6e11     movwf	0x11, 0            	MOVWF	r0x11
00582c   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00582e   0f0c     addlw	0xc                	ADDLW	0x0c
005830   6e12     movwf	0x12, 0            	MOVWF	r0x12
005832   0e00     movlw	0                  	MOVLW	0x00
005834   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
005836   6e13     movwf	0x13, 0            	MOVWF	r0x13
005838   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
00583a   ffe9
00583c   c013     movff	0x13, 0xfea        	MOVFF	r0x13, FSR0H
00583e   ffea
005840   0e2c     movlw	0x2c               	MOVLW	0x2c
005842   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
005844   0e01     movlw	0x1                	MOVLW	0x01
005846   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
005848   0e00     movlw	0                  	MOVLW	0x00
00584a   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00584c   0e00     movlw	0                  	MOVLW	0x00
00584e   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	754; MainDemo.c	pool[i].server_leasetime = leasetime;
005850   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005852   0f10     addlw	0x10               	ADDLW	0x10
005854   6e12     movwf	0x12, 0            	MOVWF	r0x12
005856   0e00     movlw	0                  	MOVLW	0x00
005858   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
00585a   6e13     movwf	0x13, 0            	MOVWF	r0x13
00585c   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
00585e   ffe9
005860   c013     movff	0x13, 0xfea        	MOVFF	r0x13, FSR0H
005862   ffea
005864   c006     movff	0x6, 0xfee         	MOVFF	r0x06, POSTINC0
005866   ffee
005868   c007     movff	0x7, 0xfee         	MOVFF	r0x07, POSTINC0
00586a   ffee
00586c   c008     movff	0x8, 0xfee         	MOVFF	r0x08, POSTINC0
00586e   ffee
005870   c009     movff	0x9, 0xfef         	MOVFF	r0x09, INDF0
005872   ffef
                                           ;	.line	755; MainDemo.c	pool[i].terms_missed = terms_missed_tmp;
005874   0e0a     movlw	0xa                	MOVLW	0x0a
005876   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
005878   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00587a   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
00587c   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00587e   ffe9
005880   c011     movff	0x11, 0xfea        	MOVFF	r0x11, FSR0H
005882   ffea
005884   c00a     movff	0xa, 0xfee         	MOVFF	r0x0a, POSTINC0
005886   ffee
005888   c00b     movff	0xb, 0xfef         	MOVFF	r0x0b, INDF0
00588a   ffef
                                           ;	.line	756; MainDemo.c	return TRUE;
00588c   0e01     movlw	0x1                	MOVLW	0x01
00588e   d009     bra	0x58a2               	BRA	_00504_DS_
                                           _00502_DS_:
                                           ;	.line	749; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
005890   0e14     movlw	0x14               	MOVLW	0x14
005892   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
005894   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005896   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
005898   2a0c     incf	0xc, 0x1, 0         	INCF	r0x0c, F
00589a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00589c   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
00589e   d75a     bra	0x5754               	BRA	_00500_DS_
                                           _00503_DS_:
                                           ;	.line	759; MainDemo.c	return FALSE;
0058a0   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00504_DS_:
0058a2   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0058a4   f013
0058a6   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0058a8   f012
0058aa   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0058ac   f011
0058ae   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0058b0   f010
0058b2   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0058b4   f00f
0058b6   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0058b8   f00e
0058ba   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0058bc   f00d
0058be   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0058c0   f00c
0058c2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0058c4   f00b
0058c6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0058c8   f00a
0058ca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0058cc   f009
0058ce   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0058d0   f008
0058d2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0058d4   f007
0058d6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0058d8   f006
0058da   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0058dc   f005
0058de   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0058e0   f004
0058e2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0058e4   f003
0058e6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0058e8   f002
0058ea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0058ec   f001
0058ee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0058f0   f000
0058f2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0058f4   ffd9
0058f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__initializeItem	code
                                           _initializeItem:
                                           ;	.line	732; MainDemo.c	void initializeItem(POOL_ITEM *p){
0073be   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0073c0   ffe5
0073c2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0073c4   ffd9
0073c6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0073c8   ffe5
0073ca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0073cc   ffe5
0073ce   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0073d0   ffe5
0073d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0073d4   ffe5
0073d6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0073d8   ffe5
0073da   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0073dc   ffe5
0073de   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0073e0   ffe5
0073e2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0073e4   ffe5
0073e6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0073e8   ffe5
0073ea   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0073ec   ffe5
0073ee   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0073f0   ffe5
0073f2   0e02     movlw	0x2                	MOVLW	0x02
0073f4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0073f6   f000
0073f8   0e03     movlw	0x3                	MOVLW	0x03
0073fa   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0073fc   f001
0073fe   0e04     movlw	0x4                	MOVLW	0x04
007400   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007402   f002
                                           ;	.line	734; MainDemo.c	for(j=0; j<4; j++){
007404   6a03     clrf	0x3, 0              	CLRF	r0x03
007406   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00476_DS_:
007408   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00740a   0f80     addlw	0x80               	ADDLW	0x80
00740c   0f80     addlw	0x80               	ADDLW	0x80
00740e   e102     bnz	0x7414               	BNZ	_00492_DS_
007410   0e04     movlw	0x4                	MOVLW	0x04
007412   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00492_DS_:
007414   e218     bc	0x7446                	BC	_00479_DS_
                                           ;	.line	735; MainDemo.c	p->ip.v[j] = 0;
007416   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007418   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00741a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00741c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00741e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007420   6e06     movwf	0x6, 0             	MOVWF	r0x06
007422   6ae8     clrf	0xe8, 0             	CLRF	WREG
007424   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
007426   68e8     setf	0xe8, 0             	SETF	WREG
007428   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00742a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00742c   0e00     movlw	0                  	MOVLW	0x00
00742e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007430   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007432   ffe9
007434   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
007436   fff3
007438   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00743a   ece5     call	0xafca, 0           	CALL	__gptrput1
00743c   f057
                                           ;	.line	734; MainDemo.c	for(j=0; j<4; j++){
00743e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
007440   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007442   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
007444   d7e1     bra	0x7408               	BRA	_00476_DS_
                                           _00479_DS_:
                                           ;	.line	739; MainDemo.c	for(j=0; j<6; j++){
007446   5000     movf	0, 0, 0             	MOVF	r0x00, W
007448   0f04     addlw	0x4                	ADDLW	0x04
00744a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00744c   0e00     movlw	0                  	MOVLW	0x00
00744e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007450   6e04     movwf	0x4, 0             	MOVWF	r0x04
007452   0e00     movlw	0                  	MOVLW	0x00
007454   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
007456   6e05     movwf	0x5, 0             	MOVWF	r0x05
007458   6a06     clrf	0x6, 0              	CLRF	r0x06
00745a   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00480_DS_:
00745c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00745e   0f80     addlw	0x80               	ADDLW	0x80
007460   0f80     addlw	0x80               	ADDLW	0x80
007462   e102     bnz	0x7468               	BNZ	_00493_DS_
007464   0e06     movlw	0x6                	MOVLW	0x06
007466   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00493_DS_:
007468   e218     bc	0x749a                	BC	_00483_DS_
                                           ;	.line	740; MainDemo.c	p->mac.v[j] = 0;
00746a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00746c   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
00746e   6e08     movwf	0x8, 0             	MOVWF	r0x08
007470   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007472   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
007474   6e09     movwf	0x9, 0             	MOVWF	r0x09
007476   6ae8     clrf	0xe8, 0             	CLRF	WREG
007478   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
00747a   68e8     setf	0xe8, 0             	SETF	WREG
00747c   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00747e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007480   0e00     movlw	0                  	MOVLW	0x00
007482   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007484   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
007486   ffe9
007488   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00748a   fff3
00748c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00748e   ece5     call	0xafca, 0           	CALL	__gptrput1
007490   f057
                                           ;	.line	739; MainDemo.c	for(j=0; j<6; j++){
007492   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
007494   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007496   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
007498   d7e1     bra	0x745c               	BRA	_00480_DS_
                                           _00483_DS_:
                                           ;	.line	742; MainDemo.c	p->terms_missed = 0;
00749a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00749c   0f0a     addlw	0xa                	ADDLW	0x0a
00749e   6e03     movwf	0x3, 0             	MOVWF	r0x03
0074a0   0e00     movlw	0                  	MOVLW	0x00
0074a2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0074a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0074a6   0e00     movlw	0                  	MOVLW	0x00
0074a8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0074aa   6e05     movwf	0x5, 0             	MOVWF	r0x05
0074ac   0e00     movlw	0                  	MOVLW	0x00
0074ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074b0   0e00     movlw	0                  	MOVLW	0x00
0074b2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0074b4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0074b6   ffe9
0074b8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0074ba   fff3
0074bc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0074be   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
0074c0   f057
                                           ;	.line	743; MainDemo.c	p->client_leasetime = 0;
0074c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0074c4   0f0c     addlw	0xc                	ADDLW	0x0c
0074c6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0074c8   0e00     movlw	0                  	MOVLW	0x00
0074ca   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0074cc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0074ce   0e00     movlw	0                  	MOVLW	0x00
0074d0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0074d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0074d4   0e00     movlw	0                  	MOVLW	0x00
0074d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074d8   0e00     movlw	0                  	MOVLW	0x00
0074da   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0074dc   0e00     movlw	0                  	MOVLW	0x00
0074de   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0074e0   0e00     movlw	0                  	MOVLW	0x00
0074e2   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0074e4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0074e6   ffe9
0074e8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0074ea   fff3
0074ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0074ee   ec43     call	0xae86, 0           	CALL	__gptrput4
0074f0   f057
                                           ;	.line	744; MainDemo.c	p->server_leasetime = 0;
0074f2   0e10     movlw	0x10               	MOVLW	0x10
0074f4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0074f6   0e00     movlw	0                  	MOVLW	0x00
0074f8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0074fa   0e00     movlw	0                  	MOVLW	0x00
0074fc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0074fe   0e00     movlw	0                  	MOVLW	0x00
007500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007502   0e00     movlw	0                  	MOVLW	0x00
007504   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
007506   0e00     movlw	0                  	MOVLW	0x00
007508   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
00750a   0e00     movlw	0                  	MOVLW	0x00
00750c   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
00750e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007510   ffe9
007512   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007514   fff3
007516   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007518   ec43     call	0xae86, 0           	CALL	__gptrput4
00751a   f057
00751c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00751e   f00a
007520   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007522   f009
007524   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007526   f008
007528   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00752a   f007
00752c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00752e   f006
007530   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007532   f005
007534   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007536   f004
007538   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00753a   f003
00753c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00753e   f002
007540   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007542   f001
007544   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007546   f000
007548   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00754a   ffd9
00754c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__initializeClientDB	code
                                           _initializeClientDB:
                                           ;	.line	724; MainDemo.c	void initializeClientDB(){
009ce2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009ce4   ffe5
009ce6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009ce8   ffd9
009cea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009cec   ffe5
009cee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009cf0   ffe5
009cf2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009cf4   ffe5
009cf6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009cf8   ffe5
009cfa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009cfc   ffe5
009cfe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009d00   ffe5
009d02   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009d04   ffe5
                                           ;	.line	726; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
009d06   6a00     clrf	0, 0                	CLRF	r0x00
009d08   6a01     clrf	0x1, 0              	CLRF	r0x01
009d0a   6a02     clrf	0x2, 0              	CLRF	r0x02
009d0c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00462_DS_:
009d0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009d10   0f80     addlw	0x80               	ADDLW	0x80
009d12   0f80     addlw	0x80               	ADDLW	0x80
009d14   e102     bnz	0x9d1a               	BNZ	_00471_DS_
009d16   0e0a     movlw	0xa                	MOVLW	0x0a
009d18   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00471_DS_:
009d1a   e21e     bc	0x9d58                	BC	_00466_DS_
                                           ;	.line	727; MainDemo.c	initializeItem(&pool[i]);
009d1c   0e00     movlw	0                  	MOVLW	LOW(_pool)
009d1e   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
009d20   6e04     movwf	0x4, 0             	MOVWF	r0x04
009d22   0e09     movlw	0x9                	MOVLW	HIGH(_pool)
009d24   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
009d26   6e05     movwf	0x5, 0             	MOVWF	r0x05
009d28   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009d2a   6e05     movwf	0x5, 0             	MOVWF	r0x05
009d2c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009d2e   6e04     movwf	0x4, 0             	MOVWF	r0x04
009d30   0e80     movlw	0x80               	MOVLW	0x80
009d32   6e06     movwf	0x6, 0             	MOVWF	r0x06
009d34   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009d38   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009d3c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009d40   ecdf     call	0x73be, 0           	CALL	_initializeItem
009d42   f039
009d44   0e03     movlw	0x3                	MOVLW	0x03
009d46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	726; MainDemo.c	for(i=0; i<MAX_CLIENT; i++){
009d48   0e14     movlw	0x14               	MOVLW	0x14
009d4a   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
009d4c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009d4e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
009d50   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
009d52   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009d54   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
009d56   d7db     bra	0x9d0e               	BRA	_00462_DS_
                                           _00466_DS_:
009d58   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009d5a   f006
009d5c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009d5e   f005
009d60   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009d62   f004
009d64   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009d66   f003
009d68   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009d6a   f002
009d6c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009d6e   f001
009d70   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009d72   f000
009d74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009d76   ffd9
009d78   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__getLeaseFromAck	code
                                           _getLeaseFromAck:
                                           ;	.line	698; MainDemo.c	BOOL getLeaseFromAck(DWORD *lease_time, BYTE *dhcp_header, unsigned int dhcp_header_length){
00675e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006760   ffe5
006762   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006764   ffd9
006766   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006768   ffe5
00676a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00676c   ffe5
00676e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006770   ffe5
006772   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006774   ffe5
006776   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006778   ffe5
00677a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00677c   ffe5
00677e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006780   ffe5
006782   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006784   ffe5
006786   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006788   ffe5
00678a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00678c   ffe5
00678e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006790   ffe5
006792   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006794   ffe5
006796   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
006798   ffe5
00679a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00679c   ffe5
00679e   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0067a0   ffe5
0067a2   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0067a4   ffe5
0067a6   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0067a8   ffe5
0067aa   0e02     movlw	0x2                	MOVLW	0x02
0067ac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0067ae   f000
0067b0   0e03     movlw	0x3                	MOVLW	0x03
0067b2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0067b4   f001
0067b6   0e04     movlw	0x4                	MOVLW	0x04
0067b8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0067ba   f002
0067bc   0e05     movlw	0x5                	MOVLW	0x05
0067be   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0067c0   f003
0067c2   0e06     movlw	0x6                	MOVLW	0x06
0067c4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0067c6   f004
0067c8   0e07     movlw	0x7                	MOVLW	0x07
0067ca   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0067cc   f005
0067ce   0e08     movlw	0x8                	MOVLW	0x08
0067d0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0067d2   f006
0067d4   0e09     movlw	0x9                	MOVLW	0x09
0067d6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0067d8   f007
                                           ;	.line	701; MainDemo.c	i=0;
0067da   6a08     clrf	0x8, 0              	CLRF	r0x08
0067dc   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00447_DS_:
                                           ;	.line	703; MainDemo.c	while(i<dhcp_header_length){
0067de   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
0067e0   f00a
0067e2   c009     movff	0x9, 0xb           	MOVFF	r0x09, r0x0b
0067e4   f00b
0067e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0067e8   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
0067ea   e102     bnz	0x67f0               	BNZ	_00455_DS_
0067ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0067ee   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00455_DS_:
0067f0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0067f2   d086     bra	0x6900               	BRA	_00449_DS_
                                           ;	.line	704; MainDemo.c	opt = dhcp_header[i];
0067f4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0067f6   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
0067f8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0067fa   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0067fc   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0067fe   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006800   6ae8     clrf	0xe8, 0             	CLRF	WREG
006802   be09     btfsc	0x9, 0x7, 0        	BTFSC	r0x09, 7
006804   68e8     setf	0xe8, 0             	SETF	WREG
006806   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
006808   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00680a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00680c   ffe9
00680e   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
006810   fff3
006812   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006814   ec12     call	0xae24, 0           	CALL	__gptrget1
006816   f057
006818   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	705; MainDemo.c	i++;
00681a   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
00681c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00681e   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
                                           ;	.line	706; MainDemo.c	length = dhcp_header[i];
006820   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006822   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
006824   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006826   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006828   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00682a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00682c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00682e   be09     btfsc	0x9, 0x7, 0        	BTFSC	r0x09, 7
006830   68e8     setf	0xe8, 0             	SETF	WREG
006832   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
006834   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
006836   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
006838   ffe9
00683a   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00683c   fff3
00683e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
006840   ec12     call	0xae24, 0           	CALL	__gptrget1
006842   f057
006844   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	707; MainDemo.c	i++;
006846   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
006848   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00684a   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
                                           ;	.line	709; MainDemo.c	if(opt == DHCP_IP_LEASE_TIME){
00684c   6a0c     clrf	0xc, 0              	CLRF	r0x0c
00684e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006850   0a33     xorlw	0x33               	XORLW	0x33
006852   e102     bnz	0x6858               	BNZ	_00456_DS_
006854   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006856   e001     bz	0x685a                	BZ	_00457_DS_
                                           _00456_DS_:
006858   d04d     bra	0x68f4               	BRA	_00446_DS_
                                           _00457_DS_:
                                           ;	.line	710; MainDemo.c	*lease_time = dhcp_header[i+3]|dhcp_header[i+2]<<8|dhcp_header[i+1]<<16|dhcp_header[i]<<24;
00685a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00685c   0f03     addlw	0x3                	ADDLW	0x03
00685e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006860   0e00     movlw	0                  	MOVLW	0x00
006862   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
006864   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006866   6a0d     clrf	0xd, 0              	CLRF	r0x0d
006868   be0c     btfsc	0xc, 0x7, 0        	BTFSC	r0x0c, 7
00686a   680d     setf	0xd, 0              	SETF	r0x0d
00686c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00686e   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
006870   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006872   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
006874   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006876   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
006878   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00687a   ffe9
00687c   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00687e   fff3
006880   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
006882   ec12     call	0xae24, 0           	CALL	__gptrget1
006884   f057
006886   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006888   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00688a   0f02     addlw	0x2                	ADDLW	0x02
00688c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00688e   0e00     movlw	0                  	MOVLW	0x00
006890   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
006892   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
006894   6a0e     clrf	0xe, 0              	CLRF	r0x0e
006896   be0d     btfsc	0xd, 0x7, 0        	BTFSC	r0x0d, 7
006898   680e     setf	0xe, 0              	SETF	r0x0e
00689a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00689c   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
00689e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0068a0   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
0068a2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0068a4   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
0068a6   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0068a8   ffe9
0068aa   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0068ac   fff3
0068ae   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0068b0   ec12     call	0xae24, 0           	CALL	__gptrget1
0068b2   f057
0068b4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0068b6   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0068b8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0068ba   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0068bc   6a0e     clrf	0xe, 0              	CLRF	r0x0e
0068be   6a10     clrf	0x10, 0             	CLRF	r0x10
0068c0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0068c2   120e     iorwf	0xe, 0x1, 0        	IORWF	r0x0e, F
0068c4   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0068c6   120f     iorwf	0xf, 0x1, 0        	IORWF	r0x0f, F
0068c8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0068ca   be0f     btfsc	0xf, 0x7, 0        	BTFSC	r0x0f, 7
0068cc   0eff     movlw	0xff               	MOVLW	0xff
0068ce   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0068d0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0068d2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0068d4   ffe5
0068d6   c00f     movff	0xf, 0xff4         	MOVFF	r0x0f, PRODH
0068d8   fff4
0068da   c00a     movff	0xa, 0xff6         	MOVFF	r0x0a, TBLPTRL
0068dc   fff6
0068de   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
0068e0   fff7
0068e2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0068e4   ffe9
0068e6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0068e8   fff3
0068ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0068ec   ec43     call	0xae86, 0           	CALL	__gptrput4
0068ee   f057
                                           ;	.line	711; MainDemo.c	return TRUE;
0068f0   0e01     movlw	0x1                	MOVLW	0x01
0068f2   d007     bra	0x6902               	BRA	_00450_DS_
                                           _00446_DS_:
                                           ;	.line	713; MainDemo.c	i+=length;
0068f4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0068f6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0068f8   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0068fa   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0068fc   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
0068fe   d76f     bra	0x67de               	BRA	_00447_DS_
                                           _00449_DS_:
                                           ;	.line	715; MainDemo.c	return FALSE;    
006900   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00450_DS_:
006902   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
006904   f010
006906   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
006908   f00f
00690a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00690c   f00e
00690e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
006910   f00d
006912   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
006914   f00c
006916   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006918   f00b
00691a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00691c   f00a
00691e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006920   f009
006922   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006924   f008
006926   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006928   f007
00692a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00692c   f006
00692e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006930   f005
006932   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006934   f004
006936   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006938   f003
00693a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00693c   f002
00693e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006940   f001
006942   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006944   f000
006946   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006948   ffd9
00694a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__extractBootProtHeader	code
                                           _extractBootProtHeader:
                                           ;	.line	650; MainDemo.c	BOOL extractBootProtHeader(BYTE *dhcp_type, BOOTP_HEADER *bootp_header,
001728   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00172a   ffe5
00172c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00172e   ffd9
001730   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001732   ffe5
001734   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001736   ffe5
001738   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00173a   ffe5
00173c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00173e   ffe5
001740   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001742   ffe5
001744   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001746   ffe5
001748   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00174a   ffe5
00174c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00174e   ffe5
001750   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001752   ffe5
001754   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001756   ffe5
001758   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00175a   ffe5
00175c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00175e   ffe5
001760   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001762   ffe5
001764   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001766   ffe5
001768   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00176a   ffe5
00176c   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00176e   ffe5
001770   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001772   ffe5
001774   0e02     movlw	0x2                	MOVLW	0x02
001776   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001778   f000
00177a   0e03     movlw	0x3                	MOVLW	0x03
00177c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00177e   f001
001780   0e04     movlw	0x4                	MOVLW	0x04
001782   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001784   f002
001786   0e05     movlw	0x5                	MOVLW	0x05
001788   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00178a   f003
00178c   0e06     movlw	0x6                	MOVLW	0x06
00178e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001790   f004
001792   0e07     movlw	0x7                	MOVLW	0x07
001794   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001796   f005
001798   0e08     movlw	0x8                	MOVLW	0x08
00179a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00179c   f006
00179e   0e09     movlw	0x9                	MOVLW	0x09
0017a0   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0017a2   f007
0017a4   0e0a     movlw	0xa                	MOVLW	0x0a
0017a6   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0017a8   f008
0017aa   0e0b     movlw	0xb                	MOVLW	0x0b
0017ac   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
0017ae   f009
0017b0   0e0c     movlw	0xc                	MOVLW	0x0c
0017b2   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
0017b4   f00a
0017b6   0e0d     movlw	0xd                	MOVLW	0x0d
0017b8   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
0017ba   f00b
0017bc   0e0e     movlw	0xe                	MOVLW	0x0e
0017be   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
0017c0   f00c
0017c2   0e0f     movlw	0xf                	MOVLW	0x0f
0017c4   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
0017c6   f00d
0017c8   0e10     movlw	0x10               	MOVLW	0x10
0017ca   cfdb     movff	0xfdb, 0xe         	MOVFF	PLUSW2, r0x0e
0017cc   f00e
                                           _00395_DS_:
                                           ;	.line	662; MainDemo.c	while(!UDPIsGetReady(*receiver_socket));
0017ce   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0017d0   ffe9
0017d2   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0017d4   fff3
0017d6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0017d8   ec12     call	0xae24, 0           	CALL	__gptrget1
0017da   f057
0017dc   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0017de   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0017e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e2   ec38     call	0xa670, 0           	CALL	_UDPIsGetReady
0017e4   f053
0017e6   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0017e8   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x10
0017ea   f010
0017ec   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0017ee   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0017f0   1010     iorwf	0x10, 0, 0         	IORWF	r0x10, W
0017f2   e0ed     bz	0x17ce                	BZ	_00395_DS_
                                           ;	.line	664; MainDemo.c	UDPGetArray((BYTE*)bootp_header, sizeof(BOOTP_HEADER)); //Read 34bytes
0017f4   0e00     movlw	0                  	MOVLW	0x00
0017f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f8   0e22     movlw	0x22               	MOVLW	0x22
0017fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017fc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0017fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001800   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001804   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001808   ecae     call	0x915c, 0           	CALL	_UDPGetArray
00180a   f048
00180c   0e05     movlw	0x5                	MOVLW	0x05
00180e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	666; MainDemo.c	if(bootp_header->HardwareType != 1 || bootp_header->HardwareLen != 6){
001810   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001812   0f01     addlw	0x1                	ADDLW	0x01
001814   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001816   0e00     movlw	0                  	MOVLW	0x00
001818   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00181a   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00181c   0e00     movlw	0                  	MOVLW	0x00
00181e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001820   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001822   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001824   ffe9
001826   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001828   fff3
00182a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00182c   ec12     call	0xae24, 0           	CALL	__gptrget1
00182e   f057
001830   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001832   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001834   0a01     xorlw	0x1                	XORLW	0x01
001836   e111     bnz	0x185a               	BNZ	_00398_DS_
001838   0e02     movlw	0x2                	MOVLW	0x02
00183a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00183c   0e00     movlw	0                  	MOVLW	0x00
00183e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001840   0e00     movlw	0                  	MOVLW	0x00
001842   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001844   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001846   ffe9
001848   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00184a   fff3
00184c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00184e   ec12     call	0xae24, 0           	CALL	__gptrget1
001850   f057
001852   6e03     movwf	0x3, 0             	MOVWF	r0x03
001854   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001856   0a06     xorlw	0x6                	XORLW	0x06
001858   e002     bz	0x185e                	BZ	_00422_DS_
                                           _00398_DS_:
                                           ;	.line	667; MainDemo.c	return FALSE;
00185a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00185c   d116     bra	0x1a8a               	BRA	_00416_DS_
                                           _00422_DS_:
                                           ;	.line	671; MainDemo.c	for(i=0; i<skip_length; i++){
00185e   6a03     clrf	0x3, 0              	CLRF	r0x03
001860   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00412_DS_:
001862   0e00     movlw	0                  	MOVLW	0x00
001864   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001866   e102     bnz	0x186c               	BNZ	_00434_DS_
001868   0eca     movlw	0xca               	MOVLW	0xca
00186a   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00434_DS_:
00186c   e214     bc	0x1896                	BC	_00415_DS_
                                           ;	.line	672; MainDemo.c	UDPGet(&opt);
00186e   0e02     movlw	0x2                	MOVLW	HIGH(_extractBootProtHeader_opt_1_1)
001870   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001872   0e3a     movlw	0x3a               	MOVLW	LOW(_extractBootProtHeader_opt_1_1)
001874   6e05     movwf	0x5, 0             	MOVWF	r0x05
001876   0e80     movlw	0x80               	MOVLW	0x80
001878   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00187a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00187c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00187e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001880   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001882   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001886   ec03     call	0xa206, 0           	CALL	_UDPGet
001888   f051
00188a   0e03     movlw	0x3                	MOVLW	0x03
00188c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	671; MainDemo.c	for(i=0; i<skip_length; i++){
00188e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001890   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001892   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
001894   d7e6     bra	0x1862               	BRA	_00412_DS_
                                           _00415_DS_:
                                           ;	.line	675; MainDemo.c	UDPGetArray((BYTE*)&cookie_checker, sizeof(DWORD));
001896   0e0b     movlw	0xb                	MOVLW	HIGH(_extractBootProtHeader_cookie_checker_1_1)
001898   6e04     movwf	0x4, 0             	MOVWF	r0x04
00189a   0ea2     movlw	0xa2               	MOVLW	LOW(_extractBootProtHeader_cookie_checker_1_1)
00189c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00189e   0e80     movlw	0x80               	MOVLW	0x80
0018a0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0018a2   0e00     movlw	0                  	MOVLW	0x00
0018a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018a6   0e04     movlw	0x4                	MOVLW	0x04
0018a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0018ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018b6   ecae     call	0x915c, 0           	CALL	_UDPGetArray
0018b8   f048
0018ba   0e05     movlw	0x5                	MOVLW	0x05
0018bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0018be   010b     movlb	0xb                	BANKSEL	_extractBootProtHeader_cookie_checker_1_1
                                           ;	.line	676; MainDemo.c	if(cookie_checker != MAGIC_COOKIE){
0018c0   51a2     movf	0xa2, 0, 0x1        	MOVF	_extractBootProtHeader_cookie_checker_1_1, W, B
0018c2   010e     movlb	0xe                	BANKSEL	_MAGIC_COOKIE
0018c4   1945     xorwf	0x45, 0, 0x1       	XORWF	_MAGIC_COOKIE, W, B
0018c6   e10f     bnz	0x18e6               	BNZ	_00436_DS_
0018c8   010b     movlb	0xb                	BANKSEL	(_extractBootProtHeader_cookie_checker_1_1 + 1)
0018ca   51a3     movf	0xa3, 0, 0x1        	MOVF	(_extractBootProtHeader_cookie_checker_1_1 + 1), W, B
0018cc   010e     movlb	0xe                	BANKSEL	(_MAGIC_COOKIE + 1)
0018ce   1946     xorwf	0x46, 0, 0x1       	XORWF	(_MAGIC_COOKIE + 1), W, B
0018d0   e10a     bnz	0x18e6               	BNZ	_00436_DS_
0018d2   010b     movlb	0xb                	BANKSEL	(_extractBootProtHeader_cookie_checker_1_1 + 2)
0018d4   51a4     movf	0xa4, 0, 0x1        	MOVF	(_extractBootProtHeader_cookie_checker_1_1 + 2), W, B
0018d6   010e     movlb	0xe                	BANKSEL	(_MAGIC_COOKIE + 2)
0018d8   1947     xorwf	0x47, 0, 0x1       	XORWF	(_MAGIC_COOKIE + 2), W, B
0018da   e105     bnz	0x18e6               	BNZ	_00436_DS_
0018dc   010b     movlb	0xb                	BANKSEL	(_extractBootProtHeader_cookie_checker_1_1 + 3)
0018de   51a5     movf	0xa5, 0, 0x1        	MOVF	(_extractBootProtHeader_cookie_checker_1_1 + 3), W, B
0018e0   010e     movlb	0xe                	BANKSEL	(_MAGIC_COOKIE + 3)
0018e2   1948     xorwf	0x48, 0, 0x1       	XORWF	(_MAGIC_COOKIE + 3), W, B
0018e4   e002     bz	0x18ea                	BZ	_00402_DS_
                                           _00436_DS_:
                                           ;	.line	677; MainDemo.c	return FALSE;
0018e6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0018e8   d0d0     bra	0x1a8a               	BRA	_00416_DS_
                                           _00402_DS_:
                                           ;	.line	680; MainDemo.c	*dhcp_header_length = 0;
0018ea   0e00     movlw	0                  	MOVLW	0x00
0018ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ee   0e00     movlw	0                  	MOVLW	0x00
0018f0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0018f2   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0018f4   ffe9
0018f6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0018f8   fff3
0018fa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0018fc   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
0018fe   f057
                                           ;	.line	681; MainDemo.c	wrong_packet = TRUE;
001900   0e01     movlw	0x1                	MOVLW	0x01
001902   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00409_DS_:
                                           ;	.line	682; MainDemo.c	while(UDPGet(&opt) && opt != DHCP_END_OPTION){
001904   0e02     movlw	0x2                	MOVLW	HIGH(_extractBootProtHeader_opt_1_1)
001906   6e05     movwf	0x5, 0             	MOVWF	r0x05
001908   0e3a     movlw	0x3a               	MOVLW	LOW(_extractBootProtHeader_opt_1_1)
00190a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00190c   0e80     movlw	0x80               	MOVLW	0x80
00190e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001910   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001912   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001914   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001916   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001918   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00191a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00191c   ec03     call	0xa206, 0           	CALL	_UDPGet
00191e   f051
001920   6e04     movwf	0x4, 0             	MOVWF	r0x04
001922   0e03     movlw	0x3                	MOVLW	0x03
001924   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001926   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001928   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00192a   d0a8     bra	0x1a7c               	BRA	_00411_DS_
00192c   c23a     movff	0x23a, 0x4         	MOVFF	_extractBootProtHeader_opt_1_1, r0x04
00192e   f004
001930   6a05     clrf	0x5, 0              	CLRF	r0x05
001932   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001934   0aff     xorlw	0xff               	XORLW	0xff
001936   e103     bnz	0x193e               	BNZ	_00438_DS_
001938   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00193a   e101     bnz	0x193e               	BNZ	_00438_DS_
00193c   d09f     bra	0x1a7c               	BRA	_00411_DS_
                                           _00438_DS_:
                                           ;	.line	683; MainDemo.c	UDPGet(&length);
00193e   0e02     movlw	0x2                	MOVLW	HIGH(_extractBootProtHeader_length_1_1)
001940   6e05     movwf	0x5, 0             	MOVWF	r0x05
001942   0e3b     movlw	0x3b               	MOVLW	LOW(_extractBootProtHeader_length_1_1)
001944   6e04     movwf	0x4, 0             	MOVWF	r0x04
001946   0e80     movlw	0x80               	MOVLW	0x80
001948   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00194a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00194c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001952   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001956   ec03     call	0xa206, 0           	CALL	_UDPGet
001958   f051
00195a   0e03     movlw	0x3                	MOVLW	0x03
00195c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	684; MainDemo.c	if(opt == DHCP_MESSAGE_TYPE){
00195e   c23a     movff	0x23a, 0x4         	MOVFF	_extractBootProtHeader_opt_1_1, r0x04
001960   f004
001962   6a05     clrf	0x5, 0              	CLRF	r0x05
001964   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001966   0a35     xorlw	0x35               	XORLW	0x35
001968   e102     bnz	0x196e               	BNZ	_00439_DS_
00196a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00196c   e001     bz	0x1970                	BZ	_00440_DS_
                                           _00439_DS_:
00196e   d00c     bra	0x1988               	BRA	_00406_DS_
                                           _00440_DS_:
                                           ;	.line	685; MainDemo.c	UDPGet(dhcp_type);
001970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001972   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001974   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001978   5000     movf	0, 0, 0             	MOVF	r0x00, W
00197a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00197c   ec03     call	0xa206, 0           	CALL	_UDPGet
00197e   f051
001980   0e03     movlw	0x3                	MOVLW	0x03
001982   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	686; MainDemo.c	wrong_packet = FALSE;
001984   6a03     clrf	0x3, 0              	CLRF	r0x03
001986   d7be     bra	0x1904               	BRA	_00409_DS_
                                           _00406_DS_:
                                           ;	.line	688; MainDemo.c	else if(dhcp_header != NULL){
001988   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00198a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00198c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00198e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001990   d7b9     bra	0x1904               	BRA	_00409_DS_
                                           ;	.line	689; MainDemo.c	dhcp_header[*dhcp_header_length] = opt;
001992   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001994   ffe9
001996   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001998   fff3
00199a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00199c   ec88     call	0xad10, 0           	CALL	__gptrget2
00199e   f056
0019a0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019a2   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0019a4   f005
0019a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019a8   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
0019aa   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0019ac   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0019ae   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0019b0   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0019b2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0019b4   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
0019b6   68e8     setf	0xe8, 0             	SETF	WREG
0019b8   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0019ba   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0019bc   c23a     movff	0x23a, 0xfe5       	MOVFF	_extractBootProtHeader_opt_1_1, POSTDEC1
0019be   ffe5
0019c0   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0019c2   ffe9
0019c4   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0019c6   fff3
0019c8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0019ca   ece5     call	0xafca, 0           	CALL	__gptrput1
0019cc   f057
                                           ;	.line	690; MainDemo.c	dhcp_header[*dhcp_header_length+1] = length;
0019ce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019d0   0f01     addlw	0x1                	ADDLW	0x01
0019d2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0019d4   0e00     movlw	0                  	MOVLW	0x00
0019d6   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0019d8   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0019da   6a0e     clrf	0xe, 0              	CLRF	r0x0e
0019dc   be0d     btfsc	0xd, 0x7, 0        	BTFSC	r0x0d, 7
0019de   680e     setf	0xe, 0              	SETF	r0x0e
0019e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019e2   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0019e4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0019e6   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
0019e8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0019ea   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
0019ec   c23b     movff	0x23b, 0xfe5       	MOVFF	_extractBootProtHeader_length_1_1, POSTDEC1
0019ee   ffe5
0019f0   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0019f2   ffe9
0019f4   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0019f6   fff3
0019f8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0019fa   ece5     call	0xafca, 0           	CALL	__gptrput1
0019fc   f057
                                           ;	.line	691; MainDemo.c	UDPGetArray(&dhcp_header[*dhcp_header_length+2], length);
0019fe   0e02     movlw	0x2                	MOVLW	0x02
001a00   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001a02   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a04   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001a06   6a0c     clrf	0xc, 0              	CLRF	r0x0c
001a08   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
001a0a   680c     setf	0xc, 0              	SETF	r0x0c
001a0c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a0e   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001a10   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a12   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001a14   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001a16   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
001a18   c23b     movff	0x23b, 0xd         	MOVFF	_extractBootProtHeader_length_1_1, r0x0d
001a1a   f00d
001a1c   6a0e     clrf	0xe, 0              	CLRF	r0x0e
001a1e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a22   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a26   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a2a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a2e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a32   ecae     call	0x915c, 0           	CALL	_UDPGetArray
001a34   f048
001a36   0e05     movlw	0x5                	MOVLW	0x05
001a38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	692; MainDemo.c	*dhcp_header_length += 2+length;
001a3a   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001a3c   ffe9
001a3e   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001a40   fff3
001a42   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001a44   ec88     call	0xad10, 0           	CALL	__gptrget2
001a46   f056
001a48   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a4a   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001a4c   f005
001a4e   c23b     movff	0x23b, 0xc         	MOVFF	_extractBootProtHeader_length_1_1, r0x0c
001a50   f00c
001a52   6a0d     clrf	0xd, 0              	CLRF	r0x0d
001a54   0e02     movlw	0x2                	MOVLW	0x02
001a56   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
001a58   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a5a   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
001a5c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001a5e   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001a60   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001a62   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001a64   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001a66   ffe5
001a68   c005     movff	0x5, 0xff4         	MOVFF	r0x05, PRODH
001a6a   fff4
001a6c   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001a6e   ffe9
001a70   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001a72   fff3
001a74   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001a76   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
001a78   f057
001a7a   d744     bra	0x1904               	BRA	_00409_DS_
                                           _00411_DS_:
                                           ;	.line	695; MainDemo.c	return !wrong_packet;
001a7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a7e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001a80   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
001a82   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001a84   6a03     clrf	0x3, 0              	CLRF	r0x03
001a86   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
001a88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00416_DS_:
001a8a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
001a8c   f010
001a8e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
001a90   f00f
001a92   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001a94   f00e
001a96   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001a98   f00d
001a9a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001a9c   f00c
001a9e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001aa0   f00b
001aa2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001aa4   f00a
001aa6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001aa8   f009
001aaa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001aac   f008
001aae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ab0   f007
001ab2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ab4   f006
001ab6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001ab8   f005
001aba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001abc   f004
001abe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ac0   f003
001ac2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ac4   f002
001ac6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ac8   f001
001aca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001acc   f000
001ace   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ad0   ffd9
001ad2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__sendRequestMsg	code
                                           _sendRequestMsg:
                                           ;	.line	612; MainDemo.c	void sendRequestMsg(BYTE *dhcp_header, int dhcp_header_length){
005f56   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005f58   ffe5
005f5a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005f5c   ffd9
005f5e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005f60   ffe5
005f62   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005f64   ffe5
005f66   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005f68   ffe5
005f6a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005f6c   ffe5
005f6e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005f70   ffe5
005f72   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005f74   ffe5
005f76   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005f78   ffe5
005f7a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005f7c   ffe5
005f7e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005f80   ffe5
005f82   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005f84   ffe5
005f86   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
005f88   ffe5
005f8a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
005f8c   ffe5
005f8e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
005f90   ffe5
005f92   0e02     movlw	0x2                	MOVLW	0x02
005f94   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005f96   f000
005f98   0e03     movlw	0x3                	MOVLW	0x03
005f9a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005f9c   f001
005f9e   0e04     movlw	0x4                	MOVLW	0x04
005fa0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005fa2   f002
005fa4   0e05     movlw	0x5                	MOVLW	0x05
005fa6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005fa8   f003
005faa   0e06     movlw	0x6                	MOVLW	0x06
005fac   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005fae   f004
                                           ;	.line	616; MainDemo.c	UDPPut(DHCP_REQUEST_MESSAGE);
005fb0   0e03     movlw	0x3                	MOVLW	0x03
005fb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fb4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
005fb6   f04f
005fb8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	618; MainDemo.c	i=0;
005fba   6a05     clrf	0x5, 0              	CLRF	r0x05
005fbc   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00374_DS_:
                                           ;	.line	619; MainDemo.c	while(i<dhcp_header_length){
005fbe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005fc0   0f80     addlw	0x80               	ADDLW	0x80
005fc2   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
005fc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005fc6   0f80     addlw	0x80               	ADDLW	0x80
005fc8   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
005fca   e102     bnz	0x5fd0               	BNZ	_00387_DS_
005fcc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005fce   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00387_DS_:
005fd0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005fd2   d081     bra	0x60d6               	BRA	_00376_DS_
                                           ;	.line	620; MainDemo.c	opt = dhcp_header[i];
005fd4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005fd6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005fd8   6e07     movwf	0x7, 0             	MOVWF	r0x07
005fda   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005fdc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005fde   6e08     movwf	0x8, 0             	MOVWF	r0x08
005fe0   6ae8     clrf	0xe8, 0             	CLRF	WREG
005fe2   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
005fe4   68e8     setf	0xe8, 0             	SETF	WREG
005fe6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005fe8   6e09     movwf	0x9, 0             	MOVWF	r0x09
005fea   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
005fec   ffe9
005fee   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
005ff0   fff3
005ff2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005ff4   ec12     call	0xae24, 0           	CALL	__gptrget1
005ff6   f057
005ff8   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	621; MainDemo.c	UDPPut(opt);
005ffa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005ffc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ffe   ec54     call	0x9ea8, 0           	CALL	_UDPPut
006000   f04f
006002   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	622; MainDemo.c	i++;
006004   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006006   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006008   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
                                           ;	.line	623; MainDemo.c	length = dhcp_header[i];
00600a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00600c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00600e   6e08     movwf	0x8, 0             	MOVWF	r0x08
006010   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006012   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006014   6e09     movwf	0x9, 0             	MOVWF	r0x09
006016   6ae8     clrf	0xe8, 0             	CLRF	WREG
006018   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
00601a   68e8     setf	0xe8, 0             	SETF	WREG
00601c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00601e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006020   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
006022   ffe9
006024   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
006026   fff3
006028   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00602a   ec12     call	0xae24, 0           	CALL	__gptrget1
00602c   f057
00602e   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	624; MainDemo.c	UDPPut(length);
006030   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006034   ec54     call	0x9ea8, 0           	CALL	_UDPPut
006036   f04f
006038   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	625; MainDemo.c	i++;
00603a   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00603c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00603e   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
                                           ;	.line	626; MainDemo.c	switch(opt){
006040   6a09     clrf	0x9, 0              	CLRF	r0x09
006042   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006044   0a36     xorlw	0x36               	XORLW	0x36
006046   e102     bnz	0x604c               	BNZ	_00388_DS_
006048   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00604a   e001     bz	0x604e                	BZ	_00389_DS_
                                           _00388_DS_:
00604c   d022     bra	0x6092               	BRA	_00372_DS_
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00389_DS_:
00604e   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	628; MainDemo.c	UDPPutArray((BYTE*)&UDPSocketInfo[activeUDPSocket].remoteNode.IPAddr, length);
006050   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
006052   0d0e     mullw	0xe                	MULLW	0x0e
006054   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
006056   f007
006058   6a09     clrf	0x9, 0              	CLRF	r0x09
00605a   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00605c   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
00605e   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
006060   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
006062   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006064   6e09     movwf	0x9, 0             	MOVWF	r0x09
006066   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006068   6e07     movwf	0x7, 0             	MOVWF	r0x07
00606a   0e80     movlw	0x80               	MOVLW	0x80
00606c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00606e   c008     movff	0x8, 0xb           	MOVFF	r0x08, r0x0b
006070   f00b
006072   6a0c     clrf	0xc, 0              	CLRF	r0x0c
006074   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006076   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006078   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00607a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00607c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00607e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006080   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006082   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006084   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006088   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
00608a   f047
00608c   0e05     movlw	0x5                	MOVLW	0x05
00608e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	629; MainDemo.c	break;
006090   d01c     bra	0x60ca               	BRA	_00373_DS_
                                           _00372_DS_:
                                           ;	.line	631; MainDemo.c	UDPPutArray((BYTE*)&dhcp_header[i], length);   
006092   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006094   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
006096   6e07     movwf	0x7, 0             	MOVWF	r0x07
006098   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00609a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00609c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00609e   6ae8     clrf	0xe8, 0             	CLRF	WREG
0060a0   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
0060a2   68e8     setf	0xe8, 0             	SETF	WREG
0060a4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0060a6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0060a8   c008     movff	0x8, 0xb           	MOVFF	r0x08, r0x0b
0060aa   f00b
0060ac   6a0c     clrf	0xc, 0              	CLRF	r0x0c
0060ae   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0060b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060b2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0060b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060b6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0060b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060ba   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0060bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060be   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0060c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060c2   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
0060c4   f047
0060c6   0e05     movlw	0x5                	MOVLW	0x05
0060c8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00373_DS_:
                                           ;	.line	634; MainDemo.c	i+=length;
0060ca   6a07     clrf	0x7, 0              	CLRF	r0x07
0060cc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0060ce   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0060d0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0060d2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0060d4   d774     bra	0x5fbe               	BRA	_00374_DS_
                                           _00376_DS_:
                                           ;	.line	637; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
0060d6   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
0060d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0060da   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
0060dc   6e00     movwf	0, 0               	MOVWF	r0x00
0060de   0e80     movlw	0x80               	MOVLW	0x80
0060e0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0060e2   0e00     movlw	0                  	MOVLW	0x00
0060e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060e6   0e04     movlw	0x4                	MOVLW	0x04
0060e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0060ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0060f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0060f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060f6   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
0060f8   f047
0060fa   0e05     movlw	0x5                	MOVLW	0x05
0060fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	638; MainDemo.c	UDPPut(DHCP_END_OPTION);
0060fe   0eff     movlw	0xff               	MOVLW	0xff
006100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006102   ec54     call	0x9ea8, 0           	CALL	_UDPPut
006104   f04f
006106   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00377_DS_:
                                           ;	.line	639; MainDemo.c	while(UDPTxCount < 300){
006108   0e01     movlw	0x1                	MOVLW	0x01
00610a   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00610c   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
00610e   e103     bnz	0x6116               	BNZ	_00390_DS_
006110   0e2c     movlw	0x2c               	MOVLW	0x2c
006112   0102     movlb	0x2                	BANKSEL	_UDPTxCount
006114   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00390_DS_:
006116   e206     bc	0x6124                	BC	_00379_DS_
                                           ;	.line	640; MainDemo.c	UDPPut(0);
006118   0e00     movlw	0                  	MOVLW	0x00
00611a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00611c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00611e   f04f
006120   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006122   d7f2     bra	0x6108               	BRA	_00377_DS_
                                           _00379_DS_:
                                           ;	.line	643; MainDemo.c	UDPFlush();
006124   ec04     call	0x4208, 0           	CALL	_UDPFlush
006126   f021
006128   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00612a   f00c
00612c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00612e   f00b
006130   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006132   f00a
006134   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006136   f009
006138   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00613a   f008
00613c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00613e   f007
006140   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006142   f006
006144   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006146   f005
006148   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00614a   f004
00614c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00614e   f003
006150   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006152   f002
006154   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006156   f001
006158   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00615a   f000
00615c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00615e   ffd9
006160   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__sendRelease	code
                                           _sendRelease:
                                           ;	.line	588; MainDemo.c	void sendRelease(UDP_SOCKET *send_s_socket, POOL_ITEM *it){
006362   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006364   ffe5
006366   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006368   ffd9
00636a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00636c   ffe5
00636e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006370   ffe5
006372   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006374   ffe5
006376   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006378   ffe5
00637a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00637c   ffe5
00637e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006380   ffe5
006382   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006384   ffe5
006386   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006388   ffe5
00638a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00638c   ffe5
00638e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006390   ffe5
006392   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006394   ffe5
006396   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006398   ffe5
00639a   0e02     movlw	0x2                	MOVLW	0x02
00639c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00639e   f000
0063a0   0e03     movlw	0x3                	MOVLW	0x03
0063a2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0063a4   f001
0063a6   0e04     movlw	0x4                	MOVLW	0x04
0063a8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0063aa   f002
0063ac   0e05     movlw	0x5                	MOVLW	0x05
0063ae   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0063b0   f003
0063b2   0e06     movlw	0x6                	MOVLW	0x06
0063b4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0063b6   f004
0063b8   0e07     movlw	0x7                	MOVLW	0x07
0063ba   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0063bc   f005
                                           _00354_DS_:
                                           ;	.line	590; MainDemo.c	while(!UDPIsPutReady(*send_s_socket));
0063be   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0063c0   ffe9
0063c2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0063c4   fff3
0063c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0063c8   ec12     call	0xae24, 0           	CALL	__gptrget1
0063ca   f057
0063cc   6e06     movwf	0x6, 0             	MOVWF	r0x06
0063ce   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0063d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063d2   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
0063d4   f050
0063d6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0063d8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0063da   f007
0063dc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0063de   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0063e0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0063e2   e0ed     bz	0x63be                	BZ	_00354_DS_
                                           ;	.line	591; MainDemo.c	addMacFromServ();
0063e4   ec3c     call	0x9078, 0           	CALL	_addMacFromServ
0063e6   f048
                                           ;	.line	592; MainDemo.c	configureBootpHeader(&bootp_header, 0, &it->ip, &it->ip, &it->mac, DHCP_ACK_MESSAGE);
0063e8   0e0e     movlw	0xe                	MOVLW	HIGH(_sendRelease_bootp_header_1_1)
0063ea   6e07     movwf	0x7, 0             	MOVWF	r0x07
0063ec   0e00     movlw	0                  	MOVLW	LOW(_sendRelease_bootp_header_1_1)
0063ee   6e06     movwf	0x6, 0             	MOVWF	r0x06
0063f0   0e80     movlw	0x80               	MOVLW	0x80
0063f2   6e08     movwf	0x8, 0             	MOVWF	r0x08
0063f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0063f6   0f04     addlw	0x4                	ADDLW	0x04
0063f8   6e09     movwf	0x9, 0             	MOVWF	r0x09
0063fa   0e00     movlw	0                  	MOVLW	0x00
0063fc   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0063fe   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006400   0e00     movlw	0                  	MOVLW	0x00
006402   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
006404   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006406   0e05     movlw	0x5                	MOVLW	0x05
006408   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00640a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00640c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00640e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006410   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006412   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006414   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006416   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006418   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00641a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00641c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00641e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006422   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006426   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006428   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00642a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00642c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00642e   0e00     movlw	0                  	MOVLW	0x00
006430   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006432   0e00     movlw	0                  	MOVLW	0x00
006434   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006436   0e00     movlw	0                  	MOVLW	0x00
006438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00643a   0e00     movlw	0                  	MOVLW	0x00
00643c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00643e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006442   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006446   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006448   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00644a   ec8a     call	0x3914, 0           	CALL	_configureBootpHeader
00644c   f01c
00644e   0e11     movlw	0x11               	MOVLW	0x11
006450   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	593; MainDemo.c	buildBootpHeader(&bootp_header, send_s_socket);
006452   0e0e     movlw	0xe                	MOVLW	HIGH(_sendRelease_bootp_header_1_1)
006454   6e07     movwf	0x7, 0             	MOVWF	r0x07
006456   0e00     movlw	0                  	MOVLW	LOW(_sendRelease_bootp_header_1_1)
006458   6e06     movwf	0x6, 0             	MOVWF	r0x06
00645a   0e80     movlw	0x80               	MOVLW	0x80
00645c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00645e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006462   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006466   5000     movf	0, 0, 0             	MOVF	r0x00, W
006468   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00646a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00646c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00646e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006470   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006472   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006476   ec11     call	0x3c22, 0           	CALL	_buildBootpHeader
006478   f01e
00647a   0e06     movlw	0x6                	MOVLW	0x06
00647c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	594; MainDemo.c	UDPPut(DHCP_RELEASE_MESSAGE);
00647e   0e07     movlw	0x7                	MOVLW	0x07
006480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006482   ec54     call	0x9ea8, 0           	CALL	_UDPPut
006484   f04f
006486   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	596; MainDemo.c	UDPPut(DHCP_SERVER_IDENTIFIER);
006488   0e36     movlw	0x36               	MOVLW	0x36
00648a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00648c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00648e   f04f
006490   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	597; MainDemo.c	UDPPut(sizeof(IP_ADDR));
006492   0e04     movlw	0x4                	MOVLW	0x04
006494   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006496   ec54     call	0x9ea8, 0           	CALL	_UDPPut
006498   f04f
00649a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	598; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
00649c   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
00649e   6e01     movwf	0x1, 0             	MOVWF	r0x01
0064a0   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
0064a2   6e00     movwf	0, 0               	MOVWF	r0x00
0064a4   0e80     movlw	0x80               	MOVLW	0x80
0064a6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0064a8   0e00     movlw	0                  	MOVLW	0x00
0064aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064ac   0e04     movlw	0x4                	MOVLW	0x04
0064ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0064b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0064b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0064ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064bc   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
0064be   f047
0064c0   0e05     movlw	0x5                	MOVLW	0x05
0064c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	600; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
0064c4   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
0064c6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0064c8   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
0064ca   6e00     movwf	0, 0               	MOVWF	r0x00
0064cc   0e80     movlw	0x80               	MOVLW	0x80
0064ce   6e02     movwf	0x2, 0             	MOVWF	r0x02
0064d0   0e00     movlw	0                  	MOVLW	0x00
0064d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064d4   0e04     movlw	0x4                	MOVLW	0x04
0064d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0064da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0064de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0064e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064e4   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
0064e6   f047
0064e8   0e05     movlw	0x5                	MOVLW	0x05
0064ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	601; MainDemo.c	UDPPut(DHCP_END_OPTION);
0064ec   0eff     movlw	0xff               	MOVLW	0xff
0064ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064f0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0064f2   f04f
0064f4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00357_DS_:
                                           ;	.line	602; MainDemo.c	while(UDPTxCount < 300){
0064f6   0e01     movlw	0x1                	MOVLW	0x01
0064f8   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
0064fa   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
0064fc   e103     bnz	0x6504               	BNZ	_00366_DS_
0064fe   0e2c     movlw	0x2c               	MOVLW	0x2c
006500   0102     movlb	0x2                	BANKSEL	_UDPTxCount
006502   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00366_DS_:
006504   e206     bc	0x6512                	BC	_00359_DS_
                                           ;	.line	603; MainDemo.c	UDPPut(0);
006506   0e00     movlw	0                  	MOVLW	0x00
006508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00650a   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00650c   f04f
00650e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006510   d7f2     bra	0x64f6               	BRA	_00357_DS_
                                           _00359_DS_:
                                           ;	.line	606; MainDemo.c	UDPFlush();
006512   ec04     call	0x4208, 0           	CALL	_UDPFlush
006514   f021
                                           ;	.line	608; MainDemo.c	initializeItem(it); // Corresponds to RemoveFromPool action in ASG
006516   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006518   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00651a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00651c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00651e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006520   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006522   ecdf     call	0x73be, 0           	CALL	_initializeItem
006524   f039
006526   0e03     movlw	0x3                	MOVLW	0x03
006528   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00652a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00652c   f00b
00652e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006530   f00a
006532   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006534   f009
006536   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006538   f008
00653a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00653c   f007
00653e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006540   f006
006542   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006544   f005
006546   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006548   f004
00654a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00654c   f003
00654e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006550   f002
006552   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006554   f001
006556   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006558   f000
00655a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00655c   ffd9
00655e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__buildDiscoverMsg	code
                                           _buildDiscoverMsg:
                                           ;	.line	566; MainDemo.c	void buildDiscoverMsg(){
008da8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008daa   ffe5
008dac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008dae   ffd9
008db0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008db2   ffe5
008db4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008db6   ffe5
008db8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008dba   ffe5
                                           ;	.line	568; MainDemo.c	UDPPut(DHCP_DISCOVER_MESSAGE);
008dbc   0e01     movlw	0x1                	MOVLW	0x01
008dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008dc0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008dc2   f04f
008dc4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	570; MainDemo.c	UDPPut(DHCP_SERVER_IDENTIFIER);
008dc6   0e36     movlw	0x36               	MOVLW	0x36
008dc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008dca   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008dcc   f04f
008dce   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	571; MainDemo.c	UDPPut(sizeof(IP_ADDR));
008dd0   0e04     movlw	0x4                	MOVLW	0x04
008dd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008dd4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008dd6   f04f
008dd8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	572; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
008dda   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
008ddc   6e01     movwf	0x1, 0             	MOVWF	r0x01
008dde   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
008de0   6e00     movwf	0, 0               	MOVWF	r0x00
008de2   0e80     movlw	0x80               	MOVLW	0x80
008de4   6e02     movwf	0x2, 0             	MOVWF	r0x02
008de6   0e00     movlw	0                  	MOVLW	0x00
008de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008dea   0e04     movlw	0x4                	MOVLW	0x04
008dec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008dee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008df0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008df2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008df4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008df6   5000     movf	0, 0, 0             	MOVF	r0x00, W
008df8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008dfa   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
008dfc   f047
008dfe   0e05     movlw	0x5                	MOVLW	0x05
008e00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	574; MainDemo.c	UDPPut(DHCP_ROUTER);
008e02   0e03     movlw	0x3                	MOVLW	0x03
008e04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e06   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008e08   f04f
008e0a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	575; MainDemo.c	UDPPut(sizeof(IP_ADDR));
008e0c   0e04     movlw	0x4                	MOVLW	0x04
008e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e10   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008e12   f04f
008e14   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	576; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
008e16   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
008e18   6e01     movwf	0x1, 0             	MOVWF	r0x01
008e1a   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
008e1c   6e00     movwf	0, 0               	MOVWF	r0x00
008e1e   0e80     movlw	0x80               	MOVLW	0x80
008e20   6e02     movwf	0x2, 0             	MOVWF	r0x02
008e22   0e00     movlw	0                  	MOVLW	0x00
008e24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e26   0e04     movlw	0x4                	MOVLW	0x04
008e28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008e30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e32   5000     movf	0, 0, 0             	MOVF	r0x00, W
008e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e36   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
008e38   f047
008e3a   0e05     movlw	0x5                	MOVLW	0x05
008e3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	578; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
008e3e   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
008e40   6e01     movwf	0x1, 0             	MOVWF	r0x01
008e42   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
008e44   6e00     movwf	0, 0               	MOVWF	r0x00
008e46   0e80     movlw	0x80               	MOVLW	0x80
008e48   6e02     movwf	0x2, 0             	MOVWF	r0x02
008e4a   0e00     movlw	0                  	MOVLW	0x00
008e4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e4e   0e04     movlw	0x4                	MOVLW	0x04
008e50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e52   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e56   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e5a   5000     movf	0, 0, 0             	MOVF	r0x00, W
008e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e5e   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
008e60   f047
008e62   0e05     movlw	0x5                	MOVLW	0x05
008e64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; MainDemo.c	UDPPut(DHCP_END_OPTION);
008e66   0eff     movlw	0xff               	MOVLW	0xff
008e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e6a   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008e6c   f04f
008e6e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00342_DS_:
                                           ;	.line	580; MainDemo.c	while(UDPTxCount < 300){
008e70   0e01     movlw	0x1                	MOVLW	0x01
008e72   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
008e74   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
008e76   e103     bnz	0x8e7e               	BNZ	_00349_DS_
008e78   0e2c     movlw	0x2c               	MOVLW	0x2c
008e7a   0102     movlb	0x2                	BANKSEL	_UDPTxCount
008e7c   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00349_DS_:
008e7e   e206     bc	0x8e8c                	BC	_00344_DS_
                                           ;	.line	581; MainDemo.c	UDPPut(0);
008e80   0e00     movlw	0                  	MOVLW	0x00
008e82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008e84   ec54     call	0x9ea8, 0           	CALL	_UDPPut
008e86   f04f
008e88   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
008e8a   d7f2     bra	0x8e70               	BRA	_00342_DS_
                                           _00344_DS_:
                                           ;	.line	584; MainDemo.c	UDPFlush();
008e8c   ec04     call	0x4208, 0           	CALL	_UDPFlush
008e8e   f021
008e90   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008e92   f002
008e94   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008e96   f001
008e98   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008e9a   f000
008e9c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008e9e   ffd9
008ea0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__configureBootpHeader	code
                                           _configureBootpHeader:
                                           ;	.line	547; MainDemo.c	void configureBootpHeader(BOOTP_HEADER *bootp_header, DWORD transactionId, IP_ADDR *clientIP, IP_ADDR *yourIP, MAC_ADDR	*clientMAC, BYTE msg_type)
003914   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003916   ffe5
003918   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00391a   ffd9
00391c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00391e   ffe5
003920   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003922   ffe5
003924   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003926   ffe5
003928   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00392a   ffe5
00392c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00392e   ffe5
003930   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003932   ffe5
003934   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003936   ffe5
003938   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00393a   ffe5
00393c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00393e   ffe5
003940   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003942   ffe5
003944   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003946   ffe5
003948   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00394a   ffe5
00394c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00394e   ffe5
003950   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003952   ffe5
003954   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003956   ffe5
003958   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00395a   ffe5
00395c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00395e   ffe5
003960   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
003962   ffe5
003964   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
003966   ffe5
003968   0e02     movlw	0x2                	MOVLW	0x02
00396a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00396c   f000
00396e   0e03     movlw	0x3                	MOVLW	0x03
003970   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003972   f001
003974   0e04     movlw	0x4                	MOVLW	0x04
003976   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003978   f002
00397a   0e05     movlw	0x5                	MOVLW	0x05
00397c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00397e   f003
003980   0e06     movlw	0x6                	MOVLW	0x06
003982   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003984   f004
003986   0e07     movlw	0x7                	MOVLW	0x07
003988   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00398a   f005
00398c   0e08     movlw	0x8                	MOVLW	0x08
00398e   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003990   f006
003992   0e09     movlw	0x9                	MOVLW	0x09
003994   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003996   f007
003998   0e0a     movlw	0xa                	MOVLW	0x0a
00399a   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
00399c   f008
00399e   0e0b     movlw	0xb                	MOVLW	0x0b
0039a0   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
0039a2   f009
0039a4   0e0c     movlw	0xc                	MOVLW	0x0c
0039a6   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
0039a8   f00a
0039aa   0e0d     movlw	0xd                	MOVLW	0x0d
0039ac   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
0039ae   f00b
0039b0   0e0e     movlw	0xe                	MOVLW	0x0e
0039b2   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
0039b4   f00c
0039b6   0e0f     movlw	0xf                	MOVLW	0x0f
0039b8   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
0039ba   f00d
0039bc   0e10     movlw	0x10               	MOVLW	0x10
0039be   cfdb     movff	0xfdb, 0xe         	MOVFF	PLUSW2, r0x0e
0039c0   f00e
0039c2   0e11     movlw	0x11               	MOVLW	0x11
0039c4   cfdb     movff	0xfdb, 0xf         	MOVFF	PLUSW2, r0x0f
0039c6   f00f
0039c8   0e12     movlw	0x12               	MOVLW	0x12
0039ca   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x10
0039cc   f010
                                           ;	.line	550; MainDemo.c	bootp_header->MessageType = msg_type;
0039ce   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0039d0   ffe5
0039d2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0039d4   ffe9
0039d6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0039d8   fff3
0039da   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0039dc   ece5     call	0xafca, 0           	CALL	__gptrput1
0039de   f057
                                           ;	.line	551; MainDemo.c	bootp_header->HardwareType = BOOT_HW_TYPE;
0039e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0039e2   0f01     addlw	0x1                	ADDLW	0x01
0039e4   6e10     movwf	0x10, 0            	MOVWF	r0x10
0039e6   0e00     movlw	0                  	MOVLW	0x00
0039e8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0039ea   6e11     movwf	0x11, 0            	MOVWF	r0x11
0039ec   0e00     movlw	0                  	MOVLW	0x00
0039ee   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0039f0   6e12     movwf	0x12, 0            	MOVWF	r0x12
0039f2   0e01     movlw	0x1                	MOVLW	0x01
0039f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039f6   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0039f8   ffe9
0039fa   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0039fc   fff3
0039fe   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003a00   ece5     call	0xafca, 0           	CALL	__gptrput1
003a02   f057
                                           ;	.line	552; MainDemo.c	bootp_header->HardwareLen = BOOT_LEN_OF_HW_TYPE;
003a04   5000     movf	0, 0, 0             	MOVF	r0x00, W
003a06   0f02     addlw	0x2                	ADDLW	0x02
003a08   6e10     movwf	0x10, 0            	MOVWF	r0x10
003a0a   0e00     movlw	0                  	MOVLW	0x00
003a0c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003a0e   6e11     movwf	0x11, 0            	MOVWF	r0x11
003a10   0e00     movlw	0                  	MOVLW	0x00
003a12   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003a14   6e12     movwf	0x12, 0            	MOVWF	r0x12
003a16   0e06     movlw	0x6                	MOVLW	0x06
003a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a1a   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003a1c   ffe9
003a1e   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003a20   fff3
003a22   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003a24   ece5     call	0xafca, 0           	CALL	__gptrput1
003a26   f057
                                           ;	.line	553; MainDemo.c	bootp_header->Hops = 1;
003a28   5000     movf	0, 0, 0             	MOVF	r0x00, W
003a2a   0f03     addlw	0x3                	ADDLW	0x03
003a2c   6e10     movwf	0x10, 0            	MOVWF	r0x10
003a2e   0e00     movlw	0                  	MOVLW	0x00
003a30   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003a32   6e11     movwf	0x11, 0            	MOVWF	r0x11
003a34   0e00     movlw	0                  	MOVLW	0x00
003a36   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003a38   6e12     movwf	0x12, 0            	MOVWF	r0x12
003a3a   0e01     movlw	0x1                	MOVLW	0x01
003a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a3e   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003a40   ffe9
003a42   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003a44   fff3
003a46   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003a48   ece5     call	0xafca, 0           	CALL	__gptrput1
003a4a   f057
                                           ;	.line	554; MainDemo.c	bootp_header->TransactionID = transactionId;
003a4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003a4e   0f04     addlw	0x4                	ADDLW	0x04
003a50   6e10     movwf	0x10, 0            	MOVWF	r0x10
003a52   0e00     movlw	0                  	MOVLW	0x00
003a54   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003a56   6e11     movwf	0x11, 0            	MOVWF	r0x11
003a58   0e00     movlw	0                  	MOVLW	0x00
003a5a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003a5c   6e12     movwf	0x12, 0            	MOVWF	r0x12
003a5e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003a60   ffe5
003a62   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
003a64   fff4
003a66   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
003a68   fff6
003a6a   c006     movff	0x6, 0xff7         	MOVFF	r0x06, TBLPTRH
003a6c   fff7
003a6e   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003a70   ffe9
003a72   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003a74   fff3
003a76   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003a78   ec43     call	0xae86, 0           	CALL	__gptrput4
003a7a   f057
                                           ;	.line	555; MainDemo.c	bootp_header->SecondsElapsed = 0;
003a7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003a7e   0f08     addlw	0x8                	ADDLW	0x08
003a80   6e03     movwf	0x3, 0             	MOVWF	r0x03
003a82   0e00     movlw	0                  	MOVLW	0x00
003a84   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003a86   6e04     movwf	0x4, 0             	MOVWF	r0x04
003a88   0e00     movlw	0                  	MOVLW	0x00
003a8a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003a8c   6e05     movwf	0x5, 0             	MOVWF	r0x05
003a8e   0e00     movlw	0                  	MOVLW	0x00
003a90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a92   0e00     movlw	0                  	MOVLW	0x00
003a94   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003a96   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003a98   ffe9
003a9a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003a9c   fff3
003a9e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003aa0   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
003aa2   f057
                                           ;	.line	556; MainDemo.c	bootp_header->BootpFlags = 0;
003aa4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003aa6   0f0a     addlw	0xa                	ADDLW	0x0a
003aa8   6e03     movwf	0x3, 0             	MOVWF	r0x03
003aaa   0e00     movlw	0                  	MOVLW	0x00
003aac   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003aae   6e04     movwf	0x4, 0             	MOVWF	r0x04
003ab0   0e00     movlw	0                  	MOVLW	0x00
003ab2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003ab4   6e05     movwf	0x5, 0             	MOVWF	r0x05
003ab6   0e00     movlw	0                  	MOVLW	0x00
003ab8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003aba   0e00     movlw	0                  	MOVLW	0x00
003abc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003abe   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003ac0   ffe9
003ac2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003ac4   fff3
003ac6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003ac8   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
003aca   f057
                                           ;	.line	557; MainDemo.c	memcpy(&bootp_header->ClientIP, clientIP, sizeof(IP_ADDR));
003acc   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ace   0f0c     addlw	0xc                	ADDLW	0x0c
003ad0   6e03     movwf	0x3, 0             	MOVWF	r0x03
003ad2   0e00     movlw	0                  	MOVLW	0x00
003ad4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003ad6   6e04     movwf	0x4, 0             	MOVWF	r0x04
003ad8   0e00     movlw	0                  	MOVLW	0x00
003ada   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003adc   6e05     movwf	0x5, 0             	MOVWF	r0x05
003ade   0e00     movlw	0                  	MOVLW	0x00
003ae0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ae2   0e04     movlw	0x4                	MOVLW	0x04
003ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ae6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003aea   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003aec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003aee   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003af0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003af2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003af4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003af6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003af8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003afa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003afc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003afe   ecd1     call	0x8ba2, 0           	CALL	_memcpy
003b00   f045
003b02   0e08     movlw	0x8                	MOVLW	0x08
003b04   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	558; MainDemo.c	memcpy(&bootp_header->YourIP, yourIP, sizeof(IP_ADDR));
003b06   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b08   0f10     addlw	0x10               	ADDLW	0x10
003b0a   6e03     movwf	0x3, 0             	MOVWF	r0x03
003b0c   0e00     movlw	0                  	MOVLW	0x00
003b0e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003b10   6e04     movwf	0x4, 0             	MOVWF	r0x04
003b12   0e00     movlw	0                  	MOVLW	0x00
003b14   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003b16   6e05     movwf	0x5, 0             	MOVWF	r0x05
003b18   0e00     movlw	0                  	MOVLW	0x00
003b1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b1c   0e04     movlw	0x4                	MOVLW	0x04
003b1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b20   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003b22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b24   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003b26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b28   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003b2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003b2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b30   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003b32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b34   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003b36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b38   ecd1     call	0x8ba2, 0           	CALL	_memcpy
003b3a   f045
003b3c   0e08     movlw	0x8                	MOVLW	0x08
003b3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	559; MainDemo.c	memset((void*)&bootp_header->NextServerIP, 0, sizeof(IP_ADDR));
003b40   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b42   0f14     addlw	0x14               	ADDLW	0x14
003b44   6e03     movwf	0x3, 0             	MOVWF	r0x03
003b46   0e00     movlw	0                  	MOVLW	0x00
003b48   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003b4a   6e04     movwf	0x4, 0             	MOVWF	r0x04
003b4c   0e00     movlw	0                  	MOVLW	0x00
003b4e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003b50   6e05     movwf	0x5, 0             	MOVWF	r0x05
003b52   0e00     movlw	0                  	MOVLW	0x00
003b54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b56   0e04     movlw	0x4                	MOVLW	0x04
003b58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b5a   0e00     movlw	0                  	MOVLW	0x00
003b5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b5e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b62   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b66   ec49     call	0x9692, 0           	CALL	_memset
003b68   f04b
003b6a   0e05     movlw	0x5                	MOVLW	0x05
003b6c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	560; MainDemo.c	memset((void*)&bootp_header->RelayAgentIP, 42, sizeof(IP_ADDR));
003b6e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b70   0f18     addlw	0x18               	ADDLW	0x18
003b72   6e03     movwf	0x3, 0             	MOVWF	r0x03
003b74   0e00     movlw	0                  	MOVLW	0x00
003b76   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003b78   6e04     movwf	0x4, 0             	MOVWF	r0x04
003b7a   0e00     movlw	0                  	MOVLW	0x00
003b7c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003b7e   6e05     movwf	0x5, 0             	MOVWF	r0x05
003b80   0e00     movlw	0                  	MOVLW	0x00
003b82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b84   0e04     movlw	0x4                	MOVLW	0x04
003b86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b88   0e2a     movlw	0x2a               	MOVLW	0x2a
003b8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b8c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003b8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003b92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b94   ec49     call	0x9692, 0           	CALL	_memset
003b96   f04b
003b98   0e05     movlw	0x5                	MOVLW	0x05
003b9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	561; MainDemo.c	memcpy(&bootp_header->ClientMAC, clientMAC->v, sizeof(MAC_ADDR));
003b9c   0e1c     movlw	0x1c               	MOVLW	0x1c
003b9e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003ba0   0e00     movlw	0                  	MOVLW	0x00
003ba2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003ba4   0e00     movlw	0                  	MOVLW	0x00
003ba6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003ba8   0e00     movlw	0                  	MOVLW	0x00
003baa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bac   0e06     movlw	0x6                	MOVLW	0x06
003bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bb0   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
003bb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bb4   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bb8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003bba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bc8   ecd1     call	0x8ba2, 0           	CALL	_memcpy
003bca   f045
003bcc   0e08     movlw	0x8                	MOVLW	0x08
003bce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003bd0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003bd2   f012
003bd4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
003bd6   f011
003bd8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
003bda   f010
003bdc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003bde   f00f
003be0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003be2   f00e
003be4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003be6   f00d
003be8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003bea   f00c
003bec   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003bee   f00b
003bf0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003bf2   f00a
003bf4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003bf6   f009
003bf8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003bfa   f008
003bfc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003bfe   f007
003c00   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003c02   f006
003c04   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003c06   f005
003c08   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003c0a   f004
003c0c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003c0e   f003
003c10   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003c12   f002
003c14   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003c16   f001
003c18   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003c1a   f000
003c1c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003c1e   ffd9
003c20   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__buildBootpHeader	code
                                           _buildBootpHeader:
                                           ;	.line	517; MainDemo.c	void buildBootpHeader(BOOTP_HEADER *bootp_header, UDP_SOCKET *my_socket){
003c22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003c24   ffe5
003c26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003c28   ffd9
003c2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003c2c   ffe5
003c2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003c30   ffe5
003c32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003c34   ffe5
003c36   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003c38   ffe5
003c3a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003c3c   ffe5
003c3e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003c40   ffe5
003c42   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003c44   ffe5
003c46   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003c48   ffe5
003c4a   0e02     movlw	0x2                	MOVLW	0x02
003c4c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003c4e   f000
003c50   0e03     movlw	0x3                	MOVLW	0x03
003c52   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003c54   f001
003c56   0e04     movlw	0x4                	MOVLW	0x04
003c58   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003c5a   f002
003c5c   0e05     movlw	0x5                	MOVLW	0x05
003c5e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003c60   f003
003c62   0e06     movlw	0x6                	MOVLW	0x06
003c64   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003c66   f004
003c68   0e07     movlw	0x7                	MOVLW	0x07
003c6a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003c6c   f005
                                           _00326_DS_:
                                           ;	.line	520; MainDemo.c	while(!UDPIsPutReady(*my_socket));
003c6e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003c70   ffe9
003c72   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003c74   fff3
003c76   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003c78   ec12     call	0xae24, 0           	CALL	__gptrget1
003c7a   f057
003c7c   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c7e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c82   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
003c84   f050
003c86   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c88   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
003c8a   f007
003c8c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003c8e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c90   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003c92   e0ed     bz	0x3c6e                	BZ	_00326_DS_
                                           ;	.line	522; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->MessageType, sizeof(BYTE));
003c94   0e00     movlw	0                  	MOVLW	0x00
003c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c98   0e01     movlw	0x1                	MOVLW	0x01
003c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca8   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003caa   f047
003cac   0e05     movlw	0x5                	MOVLW	0x05
003cae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	523; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->HardwareType, sizeof(BYTE));
003cb0   5000     movf	0, 0, 0             	MOVF	r0x00, W
003cb2   0f01     addlw	0x1                	ADDLW	0x01
003cb4   6e03     movwf	0x3, 0             	MOVWF	r0x03
003cb6   0e00     movlw	0                  	MOVLW	0x00
003cb8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003cba   6e04     movwf	0x4, 0             	MOVWF	r0x04
003cbc   0e00     movlw	0                  	MOVLW	0x00
003cbe   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003cc0   6e05     movwf	0x5, 0             	MOVWF	r0x05
003cc2   0e00     movlw	0                  	MOVLW	0x00
003cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cc6   0e01     movlw	0x1                	MOVLW	0x01
003cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cca   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cd2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cd6   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003cd8   f047
003cda   0e05     movlw	0x5                	MOVLW	0x05
003cdc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	524; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->HardwareLen, sizeof(BYTE));
003cde   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ce0   0f02     addlw	0x2                	ADDLW	0x02
003ce2   6e03     movwf	0x3, 0             	MOVWF	r0x03
003ce4   0e00     movlw	0                  	MOVLW	0x00
003ce6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003ce8   6e04     movwf	0x4, 0             	MOVWF	r0x04
003cea   0e00     movlw	0                  	MOVLW	0x00
003cec   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003cee   6e05     movwf	0x5, 0             	MOVWF	r0x05
003cf0   0e00     movlw	0                  	MOVLW	0x00
003cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cf4   0e01     movlw	0x1                	MOVLW	0x01
003cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cf8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cfc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d04   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003d06   f047
003d08   0e05     movlw	0x5                	MOVLW	0x05
003d0a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	525; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->Hops, sizeof(BYTE));
003d0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d0e   0f03     addlw	0x3                	ADDLW	0x03
003d10   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d12   0e00     movlw	0                  	MOVLW	0x00
003d14   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003d16   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d18   0e00     movlw	0                  	MOVLW	0x00
003d1a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003d1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
003d1e   0e00     movlw	0                  	MOVLW	0x00
003d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d22   0e01     movlw	0x1                	MOVLW	0x01
003d24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d2e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d32   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003d34   f047
003d36   0e05     movlw	0x5                	MOVLW	0x05
003d38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	526; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->TransactionID, sizeof(DWORD));
003d3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d3c   0f04     addlw	0x4                	ADDLW	0x04
003d3e   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d40   0e00     movlw	0                  	MOVLW	0x00
003d42   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003d44   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d46   0e00     movlw	0                  	MOVLW	0x00
003d48   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003d4a   6e05     movwf	0x5, 0             	MOVWF	r0x05
003d4c   0e00     movlw	0                  	MOVLW	0x00
003d4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d50   0e04     movlw	0x4                	MOVLW	0x04
003d52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d54   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d58   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d5c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d60   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003d62   f047
003d64   0e05     movlw	0x5                	MOVLW	0x05
003d66   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->SecondsElapsed, sizeof(WORD));
003d68   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d6a   0f08     addlw	0x8                	ADDLW	0x08
003d6c   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d6e   0e00     movlw	0                  	MOVLW	0x00
003d70   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003d72   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d74   0e00     movlw	0                  	MOVLW	0x00
003d76   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003d78   6e05     movwf	0x5, 0             	MOVWF	r0x05
003d7a   0e00     movlw	0                  	MOVLW	0x00
003d7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d7e   0e02     movlw	0x2                	MOVLW	0x02
003d80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d82   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d86   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8e   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003d90   f047
003d92   0e05     movlw	0x5                	MOVLW	0x05
003d94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	528; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->BootpFlags, sizeof(WORD));
003d96   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d98   0f0a     addlw	0xa                	ADDLW	0x0a
003d9a   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d9c   0e00     movlw	0                  	MOVLW	0x00
003d9e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003da0   6e04     movwf	0x4, 0             	MOVWF	r0x04
003da2   0e00     movlw	0                  	MOVLW	0x00
003da4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003da6   6e05     movwf	0x5, 0             	MOVWF	r0x05
003da8   0e00     movlw	0                  	MOVLW	0x00
003daa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dac   0e02     movlw	0x2                	MOVLW	0x02
003dae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003db0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003db4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003db8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dbc   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003dbe   f047
003dc0   0e05     movlw	0x5                	MOVLW	0x05
003dc2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	529; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->ClientIP, sizeof(IP_ADDR));
003dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dc6   0f0c     addlw	0xc                	ADDLW	0x0c
003dc8   6e03     movwf	0x3, 0             	MOVWF	r0x03
003dca   0e00     movlw	0                  	MOVLW	0x00
003dcc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003dce   6e04     movwf	0x4, 0             	MOVWF	r0x04
003dd0   0e00     movlw	0                  	MOVLW	0x00
003dd2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003dd4   6e05     movwf	0x5, 0             	MOVWF	r0x05
003dd6   0e00     movlw	0                  	MOVLW	0x00
003dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dda   0e04     movlw	0x4                	MOVLW	0x04
003ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dde   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003de2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003de6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dea   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003dec   f047
003dee   0e05     movlw	0x5                	MOVLW	0x05
003df0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	530; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->YourIP, sizeof(IP_ADDR));
003df2   5000     movf	0, 0, 0             	MOVF	r0x00, W
003df4   0f10     addlw	0x10               	ADDLW	0x10
003df6   6e03     movwf	0x3, 0             	MOVWF	r0x03
003df8   0e00     movlw	0                  	MOVLW	0x00
003dfa   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003dfc   6e04     movwf	0x4, 0             	MOVWF	r0x04
003dfe   0e00     movlw	0                  	MOVLW	0x00
003e00   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e02   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e04   0e00     movlw	0                  	MOVLW	0x00
003e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e08   0e04     movlw	0x4                	MOVLW	0x04
003e0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e0c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e10   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e18   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003e1a   f047
003e1c   0e05     movlw	0x5                	MOVLW	0x05
003e1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	531; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->NextServerIP, sizeof(IP_ADDR));
003e20   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e22   0f14     addlw	0x14               	ADDLW	0x14
003e24   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e26   0e00     movlw	0                  	MOVLW	0x00
003e28   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003e2a   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e2c   0e00     movlw	0                  	MOVLW	0x00
003e2e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e30   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e32   0e00     movlw	0                  	MOVLW	0x00
003e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e36   0e04     movlw	0x4                	MOVLW	0x04
003e38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e3a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e3e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e42   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e46   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003e48   f047
003e4a   0e05     movlw	0x5                	MOVLW	0x05
003e4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	532; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
003e4e   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
003e50   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e52   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
003e54   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e56   0e80     movlw	0x80               	MOVLW	0x80
003e58   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e5a   0e00     movlw	0                  	MOVLW	0x00
003e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e5e   0e04     movlw	0x4                	MOVLW	0x04
003e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e62   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e66   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e6a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e6e   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003e70   f047
003e72   0e05     movlw	0x5                	MOVLW	0x05
003e74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	533; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->ClientMAC, sizeof(MAC_ADDR));
003e76   0e1c     movlw	0x1c               	MOVLW	0x1c
003e78   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003e7a   0e00     movlw	0                  	MOVLW	0x00
003e7c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003e7e   0e00     movlw	0                  	MOVLW	0x00
003e80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003e82   0e00     movlw	0                  	MOVLW	0x00
003e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e86   0e06     movlw	0x6                	MOVLW	0x06
003e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e8a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e8e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e92   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e96   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
003e98   f047
003e9a   0e05     movlw	0x5                	MOVLW	0x05
003e9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	535; MainDemo.c	for(i=0; i<202; i++){
003e9e   0eca     movlw	0xca               	MOVLW	0xca
003ea0   6e00     movwf	0, 0               	MOVWF	r0x00
003ea2   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00331_DS_:
                                           ;	.line	536; MainDemo.c	UDPPut(0);
003ea4   0e00     movlw	0                  	MOVLW	0x00
003ea6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ea8   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003eaa   f04f
003eac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003eae   0eff     movlw	0xff               	MOVLW	0xff
003eb0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003eb2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003eb4   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	535; MainDemo.c	for(i=0; i<202; i++){
003eb6   5000     movf	0, 0, 0             	MOVF	r0x00, W
003eb8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
003eba   e1f4     bnz	0x3ea4               	BNZ	_00331_DS_
                                           ;	.line	539; MainDemo.c	UDPPut(99);
003ebc   0e63     movlw	0x63               	MOVLW	0x63
003ebe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ec0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003ec2   f04f
003ec4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	540; MainDemo.c	UDPPut(130);
003ec6   0e82     movlw	0x82               	MOVLW	0x82
003ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003eca   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003ecc   f04f
003ece   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	541; MainDemo.c	UDPPut(83);
003ed0   0e53     movlw	0x53               	MOVLW	0x53
003ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ed4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003ed6   f04f
003ed8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	542; MainDemo.c	UDPPut(99);
003eda   0e63     movlw	0x63               	MOVLW	0x63
003edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ede   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003ee0   f04f
003ee2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	543; MainDemo.c	UDPPut(DHCP_MESSAGE_TYPE);
003ee4   0e35     movlw	0x35               	MOVLW	0x35
003ee6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ee8   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003eea   f04f
003eec   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	544; MainDemo.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
003eee   0e01     movlw	0x1                	MOVLW	0x01
003ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ef2   ec54     call	0x9ea8, 0           	CALL	_UDPPut
003ef4   f04f
003ef6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003ef8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003efa   f007
003efc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003efe   f006
003f00   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003f02   f005
003f04   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003f06   f004
003f08   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003f0a   f003
003f0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003f0e   f002
003f10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003f12   f001
003f14   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003f16   f000
003f18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003f1a   ffd9
003f1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__buildHeader	code
                                           _buildHeader:
                                           ;	.line	501; MainDemo.c	void buildHeader(BYTE *header, unsigned int *dhcp_header_length, POOL_ITEM *it){
0058f8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0058fa   ffe5
0058fc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0058fe   ffd9
005900   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005902   ffe5
005904   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005906   ffe5
005908   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00590a   ffe5
00590c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00590e   ffe5
005910   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005912   ffe5
005914   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005916   ffe5
005918   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00591a   ffe5
00591c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00591e   ffe5
005920   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005922   ffe5
005924   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005926   ffe5
005928   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00592a   ffe5
00592c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00592e   ffe5
005930   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
005932   ffe5
005934   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
005936   ffe5
005938   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00593a   ffe5
00593c   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00593e   ffe5
005940   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
005942   ffe5
005944   0e02     movlw	0x2                	MOVLW	0x02
005946   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005948   f000
00594a   0e03     movlw	0x3                	MOVLW	0x03
00594c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00594e   f001
005950   0e04     movlw	0x4                	MOVLW	0x04
005952   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005954   f002
005956   0e05     movlw	0x5                	MOVLW	0x05
005958   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00595a   f003
00595c   0e06     movlw	0x6                	MOVLW	0x06
00595e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005960   f004
005962   0e07     movlw	0x7                	MOVLW	0x07
005964   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005966   f005
005968   0e08     movlw	0x8                	MOVLW	0x08
00596a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00596c   f006
00596e   0e09     movlw	0x9                	MOVLW	0x09
005970   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
005972   f007
005974   0e0a     movlw	0xa                	MOVLW	0x0a
005976   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
005978   f008
                                           ;	.line	504; MainDemo.c	header[0] = DHCP_MESSAGE_TYPE;
00597a   0e35     movlw	0x35               	MOVLW	0x35
00597c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00597e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005980   ffe9
005982   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005984   fff3
005986   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005988   ece5     call	0xafca, 0           	CALL	__gptrput1
00598a   f057
                                           ;	.line	505; MainDemo.c	header[1] = DHCP_MESSAGE_TYPE_LEN;
00598c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00598e   0f01     addlw	0x1                	ADDLW	0x01
005990   6e09     movwf	0x9, 0             	MOVWF	r0x09
005992   0e00     movlw	0                  	MOVLW	0x00
005994   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005996   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
005998   0e00     movlw	0                  	MOVLW	0x00
00599a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00599c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00599e   0e01     movlw	0x1                	MOVLW	0x01
0059a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059a2   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0059a4   ffe9
0059a6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0059a8   fff3
0059aa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0059ac   ece5     call	0xafca, 0           	CALL	__gptrput1
0059ae   f057
                                           ;	.line	506; MainDemo.c	header[2] = DHCP_REQUEST_MESSAGE;
0059b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0059b2   0f02     addlw	0x2                	ADDLW	0x02
0059b4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0059b6   0e00     movlw	0                  	MOVLW	0x00
0059b8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0059ba   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0059bc   0e00     movlw	0                  	MOVLW	0x00
0059be   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0059c0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0059c2   0e03     movlw	0x3                	MOVLW	0x03
0059c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059c6   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0059c8   ffe9
0059ca   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0059cc   fff3
0059ce   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0059d0   ece5     call	0xafca, 0           	CALL	__gptrput1
0059d2   f057
                                           ;	.line	507; MainDemo.c	header[3] = DHCP_PARAM_REQUEST_IP_ADDRESS;
0059d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0059d6   0f03     addlw	0x3                	ADDLW	0x03
0059d8   6e09     movwf	0x9, 0             	MOVWF	r0x09
0059da   0e00     movlw	0                  	MOVLW	0x00
0059dc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0059de   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0059e0   0e00     movlw	0                  	MOVLW	0x00
0059e2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0059e4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0059e6   0e32     movlw	0x32               	MOVLW	0x32
0059e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059ea   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0059ec   ffe9
0059ee   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0059f0   fff3
0059f2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0059f4   ece5     call	0xafca, 0           	CALL	__gptrput1
0059f6   f057
                                           ;	.line	508; MainDemo.c	header[4] = DHCP_PARAM_REQUEST_IP_ADDRESS_LEN;
0059f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0059fa   0f04     addlw	0x4                	ADDLW	0x04
0059fc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0059fe   0e00     movlw	0                  	MOVLW	0x00
005a00   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005a02   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
005a04   0e00     movlw	0                  	MOVLW	0x00
005a06   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005a08   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005a0a   0e04     movlw	0x4                	MOVLW	0x04
005a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a0e   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005a10   ffe9
005a12   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
005a14   fff3
005a16   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005a18   ece5     call	0xafca, 0           	CALL	__gptrput1
005a1a   f057
                                           ;	.line	509; MainDemo.c	for(i=5; i<9; i++){
005a1c   0e05     movlw	0x5                	MOVLW	0x05
005a1e   6e09     movwf	0x9, 0             	MOVWF	r0x09
005a20   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           _00312_DS_:
005a22   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
005a24   0f80     addlw	0x80               	ADDLW	0x80
005a26   0f80     addlw	0x80               	ADDLW	0x80
005a28   e102     bnz	0x5a2e               	BNZ	_00321_DS_
005a2a   0e09     movlw	0x9                	MOVLW	0x09
005a2c   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
                                           _00321_DS_:
005a2e   e22f     bc	0x5a8e                	BC	_00315_DS_
                                           ;	.line	510; MainDemo.c	header[i] = it->ip.v[i-5];
005a30   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005a32   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005a34   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005a36   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
005a38   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005a3a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005a3c   6ae8     clrf	0xe8, 0             	CLRF	WREG
005a3e   be0a     btfsc	0xa, 0x7, 0        	BTFSC	r0x0a, 7
005a40   68e8     setf	0xe8, 0             	SETF	WREG
005a42   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005a44   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
005a46   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005a48   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
005a4a   0efb     movlw	0xfb               	MOVLW	0xfb
005a4c   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
005a4e   0e00     movlw	0                  	MOVLW	0x00
005a50   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
005a52   0eff     movlw	0xff               	MOVLW	0xff
005a54   6e10     movwf	0x10, 0            	MOVWF	r0x10
005a56   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
005a58   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005a5a   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
005a5c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005a5e   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
005a60   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005a62   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x10, F
005a64   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
005a66   ffe9
005a68   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
005a6a   fff3
005a6c   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005a6e   ec12     call	0xae24, 0           	CALL	__gptrget1
005a70   f057
005a72   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
005a74   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
005a76   ffe5
005a78   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
005a7a   ffe9
005a7c   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
005a7e   fff3
005a80   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005a82   ece5     call	0xafca, 0           	CALL	__gptrput1
005a84   f057
                                           ;	.line	509; MainDemo.c	for(i=5; i<9; i++){
005a86   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
005a88   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005a8a   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
005a8c   d7ca     bra	0x5a22               	BRA	_00312_DS_
                                           _00315_DS_:
                                           ;	.line	512; MainDemo.c	header[9] = DHCP_SERVER_IDENTIFIER;
005a8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005a90   0f09     addlw	0x9                	ADDLW	0x09
005a92   6e06     movwf	0x6, 0             	MOVWF	r0x06
005a94   0e00     movlw	0                  	MOVLW	0x00
005a96   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005a98   6e07     movwf	0x7, 0             	MOVWF	r0x07
005a9a   0e00     movlw	0                  	MOVLW	0x00
005a9c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005a9e   6e08     movwf	0x8, 0             	MOVWF	r0x08
005aa0   0e36     movlw	0x36               	MOVLW	0x36
005aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005aa4   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
005aa6   ffe9
005aa8   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005aaa   fff3
005aac   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005aae   ece5     call	0xafca, 0           	CALL	__gptrput1
005ab0   f057
                                           ;	.line	513; MainDemo.c	header[10] = sizeof(IP_ADDR);
005ab2   0e0a     movlw	0xa                	MOVLW	0x0a
005ab4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005ab6   0e00     movlw	0                  	MOVLW	0x00
005ab8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005aba   0e00     movlw	0                  	MOVLW	0x00
005abc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005abe   0e04     movlw	0x4                	MOVLW	0x04
005ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ac2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005ac4   ffe9
005ac6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005ac8   fff3
005aca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005acc   ece5     call	0xafca, 0           	CALL	__gptrput1
005ace   f057
                                           ;	.line	514; MainDemo.c	*dhcp_header_length = 15;
005ad0   0e0f     movlw	0xf                	MOVLW	0x0f
005ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ad4   0e00     movlw	0                  	MOVLW	0x00
005ad6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
005ad8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005ada   ffe9
005adc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005ade   fff3
005ae0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005ae2   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
005ae4   f057
005ae6   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
005ae8   f010
005aea   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
005aec   f00f
005aee   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
005af0   f00e
005af2   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
005af4   f00d
005af6   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
005af8   f00c
005afa   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
005afc   f00b
005afe   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
005b00   f00a
005b02   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005b04   f009
005b06   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005b08   f008
005b0a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005b0c   f007
005b0e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005b10   f006
005b12   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005b14   f005
005b16   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005b18   f004
005b1a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005b1c   f003
005b1e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005b20   f002
005b22   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005b24   f001
005b26   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005b28   f000
005b2a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005b2c   ffd9
005b2e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__rcvdFromClient	code
                                           _rcvdFromClient:
                                           ;	.line	440; MainDemo.c	void rcvdFromClient(UDP_SOCKET *send_s_socket,
000df0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000df2   ffe5
000df4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000df6   ffd9
000df8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dfa   ffe5
000dfc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000dfe   ffe5
000e00   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e02   ffe5
000e04   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e06   ffe5
000e08   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e0a   ffe5
000e0c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e0e   ffe5
000e10   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e12   ffe5
000e14   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e16   ffe5
000e18   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e1a   ffe5
000e1c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e1e   ffe5
000e20   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000e22   ffe5
000e24   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000e26   ffe5
000e28   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000e2a   ffe5
000e2c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000e2e   ffe5
000e30   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000e32   ffe5
000e34   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000e36   ffe5
000e38   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000e3a   ffe5
000e3c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000e3e   ffe5
000e40   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000e42   ffe5
000e44   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000e46   ffe5
000e48   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000e4a   ffe5
000e4c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000e4e   ffe5
000e50   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
000e52   ffe5
000e54   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
000e56   ffe5
000e58   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
000e5a   ffe5
000e5c   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
000e5e   ffe5
000e60   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
000e62   ffe5
000e64   0e02     movlw	0x2                	MOVLW	0x02
000e66   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e68   f000
000e6a   0e03     movlw	0x3                	MOVLW	0x03
000e6c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000e6e   f001
000e70   0e04     movlw	0x4                	MOVLW	0x04
000e72   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000e74   f002
000e76   0e05     movlw	0x5                	MOVLW	0x05
000e78   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000e7a   f003
000e7c   0e06     movlw	0x6                	MOVLW	0x06
000e7e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000e80   f004
000e82   0e07     movlw	0x7                	MOVLW	0x07
000e84   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000e86   f005
000e88   0e08     movlw	0x8                	MOVLW	0x08
000e8a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000e8c   f006
000e8e   0e09     movlw	0x9                	MOVLW	0x09
000e90   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000e92   f007
000e94   0e0a     movlw	0xa                	MOVLW	0x0a
000e96   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
000e98   f008
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x09
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000e9a   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	452; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];   
000e9c   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
000e9e   0d0e     mullw	0xe                	MULLW	0x0e
000ea0   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000ea2   f009
000ea4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000ea6   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
000ea8   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
000eaa   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
000eac   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
000eae   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000eb0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000eb2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000eb4   6e09     movwf	0x9, 0             	MOVWF	r0x09
000eb6   0e80     movlw	0x80               	MOVLW	0x80
000eb8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	453; MainDemo.c	remote_node_MAC = &info->remoteNode.MACAddr;
000eba   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000ebc   0f04     addlw	0x4                	ADDLW	0x04
000ebe   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000ec0   0e00     movlw	0                  	MOVLW	0x00
000ec2   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
000ec4   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000ec6   0e00     movlw	0                  	MOVLW	0x00
000ec8   200b     addwfc	0xb, 0, 0         	ADDWFC	r0x0b, W
000eca   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
                                           ;	.line	455; MainDemo.c	extractBootProtHeader(&dhcp_type, &bootp_header, dhcp_header, &dhcp_header_length, receiver_socket);
000ecc   0e02     movlw	0x2                	MOVLW	HIGH(_rcvdFromClient_dhcp_type_1_1)
000ece   6e10     movwf	0x10, 0            	MOVWF	r0x10
000ed0   0e39     movlw	0x39               	MOVLW	LOW(_rcvdFromClient_dhcp_type_1_1)
000ed2   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
000ed4   0e80     movlw	0x80               	MOVLW	0x80
000ed6   6e11     movwf	0x11, 0            	MOVWF	r0x11
000ed8   0e09     movlw	0x9                	MOVLW	HIGH(_rcvdFromClient_bootp_header_1_1)
000eda   6e13     movwf	0x13, 0            	MOVWF	r0x13
000edc   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromClient_bootp_header_1_1)
000ede   6e12     movwf	0x12, 0            	MOVWF	r0x12
000ee0   0e80     movlw	0x80               	MOVLW	0x80
000ee2   6e14     movwf	0x14, 0            	MOVWF	r0x14
000ee4   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromClient_dhcp_header_1_1)
000ee6   6e16     movwf	0x16, 0            	MOVWF	r0x16
000ee8   0e00     movlw	0                  	MOVLW	LOW(_rcvdFromClient_dhcp_header_1_1)
000eea   6e15     movwf	0x15, 0            	MOVWF	r0x15
000eec   0e80     movlw	0x80               	MOVLW	0x80
000eee   6e17     movwf	0x17, 0            	MOVWF	r0x17
000ef0   0e02     movlw	0x2                	MOVLW	HIGH(_rcvdFromClient_dhcp_header_length_1_1)
000ef2   6e19     movwf	0x19, 0            	MOVWF	r0x19
000ef4   0e00     movlw	0                  	MOVLW	LOW(_rcvdFromClient_dhcp_header_length_1_1)
000ef6   6e18     movwf	0x18, 0            	MOVWF	r0x18
000ef8   0e80     movlw	0x80               	MOVLW	0x80
000efa   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
000efc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000efe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f00   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f08   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
000f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f0c   5019     movf	0x19, 0, 0          	MOVF	r0x19, W
000f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f10   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
000f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f14   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f18   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
000f1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1c   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f20   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
000f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f24   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f28   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2c   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f30   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f34   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000f36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f38   ec94     call	0x1728, 0           	CALL	_extractBootProtHeader
000f3a   f00b
000f3c   0e0f     movlw	0xf                	MOVLW	0x0f
000f3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	456; MainDemo.c	UDPDiscard();
000f40   ecc8     call	0xad90, 0           	CALL	_UDPDiscard
000f42   f056
                                           ;	.line	458; MainDemo.c	switch(dhcp_type){
000f44   c239     movff	0x239, 0x6         	MOVFF	_rcvdFromClient_dhcp_type_1_1, r0x06
000f46   f006
000f48   6a07     clrf	0x7, 0              	CLRF	r0x07
000f4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f4c   0a01     xorlw	0x1                	XORLW	0x01
000f4e   e102     bnz	0xf54                	BNZ	_00305_DS_
000f50   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f52   e007     bz	0xf62                 	BZ	_00279_DS_
                                           _00305_DS_:
000f54   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f56   0a03     xorlw	0x3                	XORLW	0x03
000f58   e103     bnz	0xf60                	BNZ	_00307_DS_
000f5a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f5c   e101     bnz	0xf60                	BNZ	_00307_DS_
000f5e   d055     bra	0x100a               	BRA	_00282_DS_
                                           _00307_DS_:
000f60   d18d     bra	0x127c               	BRA	_00292_DS_
                                           _00279_DS_:
                                           ;	.line	460; MainDemo.c	while(!UDPIsPutReady(*send_s_socket));
000f62   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000f64   ffe9
000f66   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f68   fff3
000f6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f6c   ec12     call	0xae24, 0           	CALL	__gptrget1
000f6e   f057
000f70   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f72   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f76   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
000f78   f050
000f7a   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f7c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
000f7e   f007
000f80   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000f82   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f84   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f86   e0ed     bz	0xf62                 	BZ	_00279_DS_
                                           ;	.line	461; MainDemo.c	addMacFromServ();
000f88   ec3c     call	0x9078, 0           	CALL	_addMacFromServ
000f8a   f048
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000f8c   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	462; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];
000f8e   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
000f90   0d0e     mullw	0xe                	MULLW	0x0e
000f92   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000f94   f006
000f96   6a07     clrf	0x7, 0              	CLRF	r0x07
000f98   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
000f9a   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
000f9c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
000f9e   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000fa0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000fa2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000fa4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000fa6   6e09     movwf	0x9, 0             	MOVWF	r0x09
000fa8   0e80     movlw	0x80               	MOVLW	0x80
000faa   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	463; MainDemo.c	setDhcpIp(&info->remoteNode.IPAddr);
000fac   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000fae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000fb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000fb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb8   ecae     call	0x975c, 0           	CALL	_setDhcpIp
000fba   f04b
000fbc   0e03     movlw	0x3                	MOVLW	0x03
000fbe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	465; MainDemo.c	DisplayString(0, "DHCP DISCOVERY");
000fc0   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000fc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc4   0e85     movlw	0x85               	MOVLW	HIGH(__str_4)
000fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc8   0ed6     movlw	0xd6               	MOVLW	LOW(__str_4)
000fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fcc   0e00     movlw	0                  	MOVLW	0x00
000fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd0   ecde     call	0x95bc, 0           	CALL	_DisplayString
000fd2   f04a
000fd4   0e04     movlw	0x4                	MOVLW	0x04
000fd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	466; MainDemo.c	buildBootpHeader(&bootp_header, send_s_socket);
000fd8   0e09     movlw	0x9                	MOVLW	HIGH(_rcvdFromClient_bootp_header_1_1)
000fda   6e07     movwf	0x7, 0             	MOVWF	r0x07
000fdc   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromClient_bootp_header_1_1)
000fde   6e06     movwf	0x6, 0             	MOVWF	r0x06
000fe0   0e80     movlw	0x80               	MOVLW	0x80
000fe2   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fe4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ffc   ec11     call	0x3c22, 0           	CALL	_buildBootpHeader
000ffe   f01e
001000   0e06     movlw	0x6                	MOVLW	0x06
001002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	467; MainDemo.c	buildDiscoverMsg();
001004   ecd4     call	0x8da8, 0           	CALL	_buildDiscoverMsg
001006   f046
                                           ;	.line	468; MainDemo.c	break;
001008   d145     bra	0x1294               	BRA	_00294_DS_
                                           _00282_DS_:
                                           ;	.line	470; MainDemo.c	DisplayString(0, "DHCP REQUEST");
00100a   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   0e85     movlw	0x85               	MOVLW	HIGH(__str_5)
001010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001012   0ee6     movlw	0xe6               	MOVLW	LOW(__str_5)
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   0e00     movlw	0                  	MOVLW	0x00
001018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101a   ecde     call	0x95bc, 0           	CALL	_DisplayString
00101c   f04a
00101e   0e04     movlw	0x4                	MOVLW	0x04
001020   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	472; MainDemo.c	if(findInPool(&pool_it,remote_node_MAC)){                
001022   0e0b     movlw	0xb                	MOVLW	HIGH(_rcvdFromClient_pool_it_1_1)
001024   6e07     movwf	0x7, 0             	MOVWF	r0x07
001026   0efd     movlw	0xfd               	MOVLW	LOW(_rcvdFromClient_pool_it_1_1)
001028   6e06     movwf	0x6, 0             	MOVWF	r0x06
00102a   0e80     movlw	0x80               	MOVLW	0x80
00102c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00102e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001030   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001032   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001034   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001036   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001038   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00103c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001040   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001042   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001044   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001046   ec50     call	0x7aa0, 0           	CALL	_findInPool
001048   f03d
00104a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00104c   0e06     movlw	0x6                	MOVLW	0x06
00104e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001050   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001052   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001054   d0b7     bra	0x11c4               	BRA	_00286_DS_
                                           _00283_DS_:
                                           ;	.line	473; MainDemo.c	while(!UDPIsPutReady(*send_c_socket));
001056   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001058   ffe9
00105a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00105c   fff3
00105e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001060   ec12     call	0xae24, 0           	CALL	__gptrget1
001062   f057
001064   6e06     movwf	0x6, 0             	MOVWF	r0x06
001066   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106a   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
00106c   f050
00106e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001070   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001072   f007
001074   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001076   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001078   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00107a   e0ed     bz	0x1056                	BZ	_00283_DS_
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00107c   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	474; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket]; 
00107e   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
001080   0d0e     mullw	0xe                	MULLW	0x0e
001082   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001084   f006
001086   6a07     clrf	0x7, 0              	CLRF	r0x07
001088   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00108a   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
00108c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00108e   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001090   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001092   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001094   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001096   6e09     movwf	0x9, 0             	MOVWF	r0x09
001098   0e80     movlw	0x80               	MOVLW	0x80
00109a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	475; MainDemo.c	setDhcpIp(&info->remoteNode.IPAddr);
00109c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00109e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a8   ecae     call	0x975c, 0           	CALL	_setDhcpIp
0010aa   f04b
0010ac   0e03     movlw	0x3                	MOVLW	0x03
0010ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	476; MainDemo.c	pool_it->client_leasetime = CLIENT_LEASE_TIME;
0010b0   cbfd     movff	0xbfd, 0x6         	MOVFF	_rcvdFromClient_pool_it_1_1, r0x06
0010b2   f006
0010b4   cbfe     movff	0xbfe, 0x7         	MOVFF	(_rcvdFromClient_pool_it_1_1 + 1), r0x07
0010b6   f007
0010b8   cbff     movff	0xbff, 0x8         	MOVFF	(_rcvdFromClient_pool_it_1_1 + 2), r0x08
0010ba   f008
0010bc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010be   0f0c     addlw	0xc                	ADDLW	0x0c
0010c0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0010c2   0e00     movlw	0                  	MOVLW	0x00
0010c4   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0010c6   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0010c8   0e00     movlw	0                  	MOVLW	0x00
0010ca   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0010cc   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0010ce   0e2c     movlw	0x2c               	MOVLW	0x2c
0010d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d2   0e01     movlw	0x1                	MOVLW	0x01
0010d4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0010d6   0e00     movlw	0                  	MOVLW	0x00
0010d8   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0010da   0e00     movlw	0                  	MOVLW	0x00
0010dc   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0010de   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0010e0   ffe9
0010e2   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0010e4   fff3
0010e6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0010e8   ec43     call	0xae86, 0           	CALL	__gptrput4
0010ea   f057
                                           ;	.line	477; MainDemo.c	pool_it->terms_missed = 0;
0010ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010ee   0f0a     addlw	0xa                	ADDLW	0x0a
0010f0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0010f2   0e00     movlw	0                  	MOVLW	0x00
0010f4   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0010f6   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0010f8   0e00     movlw	0                  	MOVLW	0x00
0010fa   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0010fc   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0010fe   0e00     movlw	0                  	MOVLW	0x00
001100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001102   0e00     movlw	0                  	MOVLW	0x00
001104   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001106   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001108   ffe9
00110a   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
00110c   fff3
00110e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001110   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
001112   f057
                                           ;	.line	478; MainDemo.c	configureBootpHeader(&bootp_header, bootp_header.TransactionID, &bootp_header.ClientIP, &pool_it->ip, &pool_it->mac, BOOT_REPLY);
001114   0e09     movlw	0x9                	MOVLW	HIGH(_rcvdFromClient_bootp_header_1_1)
001116   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001118   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromClient_bootp_header_1_1)
00111a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00111c   0e80     movlw	0x80               	MOVLW	0x80
00111e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001120   0e09     movlw	0x9                	MOVLW	HIGH(_rcvdFromClient_bootp_header_1_1 + 12)
001122   6e10     movwf	0x10, 0            	MOVWF	r0x10
001124   0ed4     movlw	0xd4               	MOVLW	LOW(_rcvdFromClient_bootp_header_1_1 + 12)
001126   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001128   0e80     movlw	0x80               	MOVLW	0x80
00112a   6e11     movwf	0x11, 0            	MOVWF	r0x11
00112c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00112e   0f04     addlw	0x4                	ADDLW	0x04
001130   6e12     movwf	0x12, 0            	MOVWF	r0x12
001132   0e00     movlw	0                  	MOVLW	0x00
001134   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
001136   6e13     movwf	0x13, 0            	MOVWF	r0x13
001138   0e00     movlw	0                  	MOVLW	0x00
00113a   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00113c   6e14     movwf	0x14, 0            	MOVWF	r0x14
00113e   0e02     movlw	0x2                	MOVLW	0x02
001140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001142   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
001144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001146   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
001148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001156   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115a   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
00115c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115e   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
001160   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001162   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001164   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001166   0109     movlb	0x9                	BANKSEL	(_rcvdFromClient_bootp_header_1_1 + 7)
001168   51cf     movf	0xcf, 0, 0x1        	MOVF	(_rcvdFromClient_bootp_header_1_1 + 7), W, B
00116a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116c   0109     movlb	0x9                	BANKSEL	(_rcvdFromClient_bootp_header_1_1 + 6)
00116e   51ce     movf	0xce, 0, 0x1        	MOVF	(_rcvdFromClient_bootp_header_1_1 + 6), W, B
001170   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001172   0109     movlb	0x9                	BANKSEL	(_rcvdFromClient_bootp_header_1_1 + 5)
001174   51cd     movf	0xcd, 0, 0x1        	MOVF	(_rcvdFromClient_bootp_header_1_1 + 5), W, B
001176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001178   0109     movlb	0x9                	BANKSEL	(_rcvdFromClient_bootp_header_1_1 + 4)
00117a   51cc     movf	0xcc, 0, 0x1        	MOVF	(_rcvdFromClient_bootp_header_1_1 + 4), W, B
00117c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00117e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001182   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001186   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00118a   ec8a     call	0x3914, 0           	CALL	_configureBootpHeader
00118c   f01c
00118e   0e11     movlw	0x11               	MOVLW	0x11
001190   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	479; MainDemo.c	transmitToClient(&bootp_header, send_c_socket, DHCP_ACK_MESSAGE);
001192   0e09     movlw	0x9                	MOVLW	HIGH(_rcvdFromClient_bootp_header_1_1)
001194   6e07     movwf	0x7, 0             	MOVWF	r0x07
001196   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromClient_bootp_header_1_1)
001198   6e06     movwf	0x6, 0             	MOVWF	r0x06
00119a   0e80     movlw	0x80               	MOVLW	0x80
00119c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00119e   0e05     movlw	0x5                	MOVLW	0x05
0011a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0011a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0011b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0011b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ba   ec83     call	0x1306, 0           	CALL	_transmitToClient
0011bc   f009
0011be   0e07     movlw	0x7                	MOVLW	0x07
0011c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011c2   d068     bra	0x1294               	BRA	_00294_DS_
                                           _00286_DS_:
                                           ;	.line	483; MainDemo.c	while(!UDPIsPutReady(*send_s_socket));
0011c4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0011c6   ffe9
0011c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0011ca   fff3
0011cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011ce   ec12     call	0xae24, 0           	CALL	__gptrget1
0011d0   f057
0011d2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0011d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d8   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
0011da   f050
0011dc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0011de   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0011e0   f004
0011e2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0011e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011e6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0011e8   e0ed     bz	0x11c4                	BZ	_00286_DS_
                                           ;	.line	484; MainDemo.c	addMacFromServ();
0011ea   ec3c     call	0x9078, 0           	CALL	_addMacFromServ
0011ec   f048
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0011ee   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	485; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];             
0011f0   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
0011f2   0d0e     mullw	0xe                	MULLW	0x0e
0011f4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0011f6   f003
0011f8   6a04     clrf	0x4, 0              	CLRF	r0x04
0011fa   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0011fc   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0011fe   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
001200   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001202   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001204   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001206   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001208   6e09     movwf	0x9, 0             	MOVWF	r0x09
00120a   0e80     movlw	0x80               	MOVLW	0x80
00120c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	486; MainDemo.c	setDhcpIp(&info->remoteNode.IPAddr);
00120e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001212   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001216   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00121a   ecae     call	0x975c, 0           	CALL	_setDhcpIp
00121c   f04b
00121e   0e03     movlw	0x3                	MOVLW	0x03
001220   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	487; MainDemo.c	buildBootpHeader(&bootp_header, send_s_socket);
001222   0e09     movlw	0x9                	MOVLW	HIGH(_rcvdFromClient_bootp_header_1_1)
001224   6e04     movwf	0x4, 0             	MOVWF	r0x04
001226   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromClient_bootp_header_1_1)
001228   6e03     movwf	0x3, 0             	MOVWF	r0x03
00122a   0e80     movlw	0x80               	MOVLW	0x80
00122c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00122e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001230   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001232   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001234   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001236   5000     movf	0, 0, 0             	MOVF	r0x00, W
001238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00123a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00123c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00123e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001242   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001244   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001246   ec11     call	0x3c22, 0           	CALL	_buildBootpHeader
001248   f01e
00124a   0e06     movlw	0x6                	MOVLW	0x06
00124c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	488; MainDemo.c	sendRequestMsg(dhcp_header, dhcp_header_length);
00124e   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromClient_dhcp_header_1_1)
001250   6e01     movwf	0x1, 0             	MOVWF	r0x01
001252   0e00     movlw	0                  	MOVLW	LOW(_rcvdFromClient_dhcp_header_1_1)
001254   6e00     movwf	0, 0               	MOVWF	r0x00
001256   0e80     movlw	0x80               	MOVLW	0x80
001258   6e02     movwf	0x2, 0             	MOVWF	r0x02
00125a   0102     movlb	0x2                	BANKSEL	(_rcvdFromClient_dhcp_header_length_1_1 + 1)
00125c   5101     movf	0x1, 0, 0x1         	MOVF	(_rcvdFromClient_dhcp_header_length_1_1 + 1), W, B
00125e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001260   0102     movlb	0x2                	BANKSEL	_rcvdFromClient_dhcp_header_length_1_1
001262   5100     movf	0, 0, 0x1           	MOVF	_rcvdFromClient_dhcp_header_length_1_1, W, B
001264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001266   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001268   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00126c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001270   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001272   ecab     call	0x5f56, 0           	CALL	_sendRequestMsg
001274   f02f
001276   0e05     movlw	0x5                	MOVLW	0x05
001278   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	490; MainDemo.c	break;
00127a   d00c     bra	0x1294               	BRA	_00294_DS_
                                           _00292_DS_:
                                           ;	.line	492; MainDemo.c	DisplayString(0, "Wrong DHCP type");
00127c   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   0e85     movlw	0x85               	MOVLW	HIGH(__str_6)
001282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001284   0ef4     movlw	0xf4               	MOVLW	LOW(__str_6)
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   0e00     movlw	0                  	MOVLW	0x00
00128a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00128c   ecde     call	0x95bc, 0           	CALL	_DisplayString
00128e   f04a
001290   0e04     movlw	0x4                	MOVLW	0x04
001292   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00294_DS_:
                                           ;	.line	494; MainDemo.c	}
001294   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
001296   f01a
001298   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
00129a   f019
00129c   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
00129e   f018
0012a0   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
0012a2   f017
0012a4   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
0012a6   f016
0012a8   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0012aa   f015
0012ac   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0012ae   f014
0012b0   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0012b2   f013
0012b4   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0012b6   f012
0012b8   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0012ba   f011
0012bc   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0012be   f010
0012c0   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0012c2   f00f
0012c4   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0012c6   f00e
0012c8   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0012ca   f00d
0012cc   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0012ce   f00c
0012d0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0012d2   f00b
0012d4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0012d6   f00a
0012d8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0012da   f009
0012dc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0012de   f008
0012e0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0012e2   f007
0012e4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0012e6   f006
0012e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0012ea   f005
0012ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0012ee   f004
0012f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0012f2   f003
0012f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0012f6   f002
0012f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012fa   f001
0012fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0012fe   f000
001300   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001302   ffd9
001304   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__transmitToClient	code
                                           _transmitToClient:
                                           ;	.line	373; MainDemo.c	void transmitToClient(BOOTP_HEADER *bootp_header, UDP_SOCKET *send_c_socket, BYTE packet_type) {
001306   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001308   ffe5
00130a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00130c   ffd9
00130e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001310   ffe5
001312   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001314   ffe5
001316   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001318   ffe5
00131a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00131c   ffe5
00131e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001320   ffe5
001322   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001324   ffe5
001326   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001328   ffe5
00132a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00132c   ffe5
00132e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001330   ffe5
001332   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001334   ffe5
001336   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001338   ffe5
00133a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00133c   ffe5
00133e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001340   ffe5
001342   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001344   ffe5
001346   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001348   ffe5
00134a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00134c   ffe5
00134e   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001350   ffe5
001352   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
001354   ffe5
001356   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
001358   ffe5
00135a   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
00135c   ffe5
00135e   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
001360   ffe5
001362   0e02     movlw	0x2                	MOVLW	0x02
001364   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001366   f000
001368   0e03     movlw	0x3                	MOVLW	0x03
00136a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00136c   f001
00136e   0e04     movlw	0x4                	MOVLW	0x04
001370   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001372   f002
001374   0e05     movlw	0x5                	MOVLW	0x05
001376   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001378   f003
00137a   0e06     movlw	0x6                	MOVLW	0x06
00137c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00137e   f004
001380   0e07     movlw	0x7                	MOVLW	0x07
001382   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001384   f005
001386   0e08     movlw	0x8                	MOVLW	0x08
001388   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00138a   f006
                                           _00235_DS_:
                                           ;	.line	379; MainDemo.c	while(!UDPIsPutReady(*send_c_socket));
00138c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00138e   ffe9
001390   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001392   fff3
001394   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001396   ec12     call	0xae24, 0           	CALL	__gptrget1
001398   f057
00139a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00139c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00139e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013a0   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
0013a2   f050
0013a4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013a6   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
0013a8   f008
0013aa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0013ac   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013ae   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0013b0   e0ed     bz	0x138c                	BZ	_00235_DS_
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0013b2   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	381; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];
0013b4   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
0013b6   0d0e     mullw	0xe                	MULLW	0x0e
0013b8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0013ba   f007
0013bc   6a08     clrf	0x8, 0              	CLRF	r0x08
0013be   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0013c0   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0013c2   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0013c4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
0013c6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0013c8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0013ca   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013cc   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013ce   0e80     movlw	0x80               	MOVLW	0x80
0013d0   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	382; MainDemo.c	for(i=0; i<4; i++){
0013d2   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0013d4   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           _00241_DS_:
0013d6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0013d8   0f80     addlw	0x80               	ADDLW	0x80
0013da   0f80     addlw	0x80               	ADDLW	0x80
0013dc   e102     bnz	0x13e2               	BNZ	_00268_DS_
0013de   0e04     movlw	0x4                	MOVLW	0x04
0013e0   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00268_DS_:
0013e2   e218     bc	0x1414                	BC	_00244_DS_
                                           ;	.line	383; MainDemo.c	info->remoteNode.IPAddr.v[i] = 255;
0013e4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0013e6   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
0013e8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0013ea   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0013ec   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0013ee   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0013f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0013f2   be0b     btfsc	0xb, 0x7, 0        	BTFSC	r0x0b, 7
0013f4   68e8     setf	0xe8, 0             	SETF	WREG
0013f6   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0013f8   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0013fa   0eff     movlw	0xff               	MOVLW	0xff
0013fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fe   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001400   ffe9
001402   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001404   fff3
001406   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001408   ece5     call	0xafca, 0           	CALL	__gptrput1
00140a   f057
                                           ;	.line	382; MainDemo.c	for(i=0; i<4; i++){
00140c   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
00140e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001410   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
001412   d7e1     bra	0x13d6               	BRA	_00241_DS_
                                           _00244_DS_:
                                           ;	.line	386; MainDemo.c	info->remotePort = DHCP_CLIENT_PORT;
001414   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001416   0f0a     addlw	0xa                	ADDLW	0x0a
001418   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00141a   0e00     movlw	0                  	MOVLW	0x00
00141c   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00141e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001420   0e00     movlw	0                  	MOVLW	0x00
001422   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
001424   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001426   0e44     movlw	0x44               	MOVLW	0x44
001428   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00142a   0e00     movlw	0                  	MOVLW	0x00
00142c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00142e   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
001430   ffe9
001432   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
001434   fff3
001436   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001438   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
00143a   f057
                                           ;	.line	389; MainDemo.c	for (i=0; i<sizeof(IP_ADDR); i++) {
00143c   0e04     movlw	0x4                	MOVLW	0x04
00143e   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
001440   0e00     movlw	0                  	MOVLW	0x00
001442   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
001444   0e00     movlw	0                  	MOVLW	0x00
001446   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
001448   5000     movf	0, 0, 0             	MOVF	r0x00, W
00144a   0f1c     addlw	0x1c               	ADDLW	0x1c
00144c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00144e   0e00     movlw	0                  	MOVLW	0x00
001450   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001452   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001454   0e00     movlw	0                  	MOVLW	0x00
001456   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001458   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00145a   6a0d     clrf	0xd, 0              	CLRF	r0x0d
00145c   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00245_DS_:
00145e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001460   0f80     addlw	0x80               	ADDLW	0x80
001462   0f80     addlw	0x80               	ADDLW	0x80
001464   e102     bnz	0x146a               	BNZ	_00269_DS_
001466   0e04     movlw	0x4                	MOVLW	0x04
001468   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
                                           _00269_DS_:
00146a   e22b     bc	0x14c2                	BC	_00248_DS_
                                           ;	.line	390; MainDemo.c	info->remoteNode.MACAddr.v[i] = bootp_header->ClientMAC.v[i];
00146c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00146e   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
001470   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001472   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001474   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
001476   6e10     movwf	0x10, 0            	MOVWF	r0x10
001478   6ae8     clrf	0xe8, 0             	CLRF	WREG
00147a   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
00147c   68e8     setf	0xe8, 0             	SETF	WREG
00147e   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
001480   6e11     movwf	0x11, 0            	MOVWF	r0x11
001482   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001484   240a     addwf	0xa, 0, 0          	ADDWF	r0x0a, W
001486   6e12     movwf	0x12, 0            	MOVWF	r0x12
001488   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00148a   200b     addwfc	0xb, 0, 0         	ADDWFC	r0x0b, W
00148c   6e13     movwf	0x13, 0            	MOVWF	r0x13
00148e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001490   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
001492   68e8     setf	0xe8, 0             	SETF	WREG
001494   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
001496   6e14     movwf	0x14, 0            	MOVWF	r0x14
001498   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
00149a   ffe9
00149c   c013     movff	0x13, 0xff3        	MOVFF	r0x13, PRODL
00149e   fff3
0014a0   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0014a2   ec12     call	0xae24, 0           	CALL	__gptrget1
0014a4   f057
0014a6   6e12     movwf	0x12, 0            	MOVWF	r0x12
0014a8   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0014aa   ffe5
0014ac   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0014ae   ffe9
0014b0   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0014b2   fff3
0014b4   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0014b6   ece5     call	0xafca, 0           	CALL	__gptrput1
0014b8   f057
                                           ;	.line	389; MainDemo.c	for (i=0; i<sizeof(IP_ADDR); i++) {
0014ba   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
0014bc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014be   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
0014c0   d7ce     bra	0x145e               	BRA	_00245_DS_
                                           _00248_DS_:
                                           ;	.line	393; MainDemo.c	buildBootpHeader(bootp_header, send_c_socket);
0014c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0014c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0014cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0014d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014d2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014da   ec11     call	0x3c22, 0           	CALL	_buildBootpHeader
0014dc   f01e
0014de   0e06     movlw	0x6                	MOVLW	0x06
0014e0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	394; MainDemo.c	UDPPut(packet_type);	
0014e2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0014e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014e6   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0014e8   f04f
0014ea   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	397; MainDemo.c	UDPPut(DHCP_SUBNET_MASK);
0014ec   0e01     movlw	0x1                	MOVLW	0x01
0014ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014f0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0014f2   f04f
0014f4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	398; MainDemo.c	UDPPut(sizeof(IP_ADDR));
0014f6   0e04     movlw	0x4                	MOVLW	0x04
0014f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014fa   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0014fc   f04f
0014fe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	399; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyMask, sizeof(IP_ADDR));
001500   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 4)
001502   6e01     movwf	0x1, 0             	MOVWF	r0x01
001504   0ecc     movlw	0xcc               	MOVLW	LOW(_AppConfig + 4)
001506   6e00     movwf	0, 0               	MOVWF	r0x00
001508   0e80     movlw	0x80               	MOVLW	0x80
00150a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00150c   0e00     movlw	0                  	MOVLW	0x00
00150e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001510   0e04     movlw	0x4                	MOVLW	0x04
001512   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001514   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001516   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001518   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00151a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00151c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00151e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001520   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
001522   f047
001524   0e05     movlw	0x5                	MOVLW	0x05
001526   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	402; MainDemo.c	UDPPut(DHCP_BROADCAST);
001528   0e1c     movlw	0x1c               	MOVLW	0x1c
00152a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00152c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00152e   f04f
001530   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	403; MainDemo.c	UDPPut(sizeof(IP_ADDR));
001532   0e04     movlw	0x4                	MOVLW	0x04
001534   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001536   ec54     call	0x9ea8, 0           	CALL	_UDPPut
001538   f04f
00153a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	404; MainDemo.c	for(i=0; i<sizeof(IP_ADDR); i++){
00153c   6a00     clrf	0, 0                	CLRF	r0x00
00153e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00249_DS_:
001540   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001542   0f80     addlw	0x80               	ADDLW	0x80
001544   0f80     addlw	0x80               	ADDLW	0x80
001546   e102     bnz	0x154c               	BNZ	_00270_DS_
001548   0e04     movlw	0x4                	MOVLW	0x04
00154a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00270_DS_:
00154c   e22d     bc	0x15a8                	BC	_00252_DS_
                                           ;	.line	405; MainDemo.c	broadcast.v[i] = (AppConfig.MyIPAddr.v[i] & AppConfig.MyMask.v[i]) | ~AppConfig.MyMask.v[i];
00154e   0e9e     movlw	0x9e               	MOVLW	LOW(_transmitToClient_broadcast_1_1)
001550   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001552   6e02     movwf	0x2, 0             	MOVWF	r0x02
001554   0e0b     movlw	0xb                	MOVLW	HIGH(_transmitToClient_broadcast_1_1)
001556   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001558   6e03     movwf	0x3, 0             	MOVWF	r0x03
00155a   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
00155c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00155e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001560   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
001562   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001564   6e05     movwf	0x5, 0             	MOVWF	r0x05
001566   0ecc     movlw	0xcc               	MOVLW	LOW(_AppConfig + 4)
001568   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00156a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00156c   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 4)
00156e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001570   6e07     movwf	0x7, 0             	MOVWF	r0x07
001572   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001574   ffe9
001576   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001578   ffea
00157a   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
00157c   f004
00157e   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001580   ffe9
001582   c007     movff	0x7, 0xfea         	MOVFF	r0x07, FSR0H
001584   ffea
001586   cfef     movff	0xfef, 0x6         	MOVFF	INDF0, r0x06
001588   f006
00158a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00158c   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
00158e   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
001590   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001592   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
001594   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001596   ffe9
001598   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00159a   ffea
00159c   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
00159e   ffef
                                           ;	.line	404; MainDemo.c	for(i=0; i<sizeof(IP_ADDR); i++){
0015a0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0015a2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015a4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0015a6   d7cc     bra	0x1540               	BRA	_00249_DS_
                                           _00252_DS_:
                                           ;	.line	407; MainDemo.c	UDPPutArray((BYTE*)&broadcast, sizeof(IP_ADDR));
0015a8   0e0b     movlw	0xb                	MOVLW	HIGH(_transmitToClient_broadcast_1_1)
0015aa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0015ac   0e9e     movlw	0x9e               	MOVLW	LOW(_transmitToClient_broadcast_1_1)
0015ae   6e00     movwf	0, 0               	MOVWF	r0x00
0015b0   0e80     movlw	0x80               	MOVLW	0x80
0015b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0015b4   0e00     movlw	0                  	MOVLW	0x00
0015b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015b8   0e04     movlw	0x4                	MOVLW	0x04
0015ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c8   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
0015ca   f047
0015cc   0e05     movlw	0x5                	MOVLW	0x05
0015ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	410; MainDemo.c	UDPPut(DHCP_ROUTER);
0015d0   0e03     movlw	0x3                	MOVLW	0x03
0015d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015d4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0015d6   f04f
0015d8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	411; MainDemo.c	UDPPut(sizeof(IP_ADDR));
0015da   0e04     movlw	0x4                	MOVLW	0x04
0015dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015de   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0015e0   f04f
0015e2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	412; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyGateway, sizeof(IP_ADDR));
0015e4   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 8)
0015e6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0015e8   0ed0     movlw	0xd0               	MOVLW	LOW(_AppConfig + 8)
0015ea   6e00     movwf	0, 0               	MOVWF	r0x00
0015ec   0e80     movlw	0x80               	MOVLW	0x80
0015ee   6e02     movwf	0x2, 0             	MOVWF	r0x02
0015f0   0e00     movlw	0                  	MOVLW	0x00
0015f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f4   0e04     movlw	0x4                	MOVLW	0x04
0015f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001600   5000     movf	0, 0, 0             	MOVF	r0x00, W
001602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001604   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
001606   f047
001608   0e05     movlw	0x5                	MOVLW	0x05
00160a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	414; MainDemo.c	lease_time = CLIENT_LEASE_TIME; // Corresponds to AdaptLeaseTime action in ASG
00160c   0e2c     movlw	0x2c               	MOVLW	0x2c
00160e   0109     movlb	0x9                	BANKSEL	_transmitToClient_lease_time_1_1
001610   6ffe     movwf	0xfe, 0x1          	MOVWF	_transmitToClient_lease_time_1_1, B
001612   0e01     movlw	0x1                	MOVLW	0x01
001614   0109     movlb	0x9                	BANKSEL	(_transmitToClient_lease_time_1_1 + 1)
001616   6fff     movwf	0xff, 0x1          	MOVWF	(_transmitToClient_lease_time_1_1 + 1), B
                                           ;	.line	415; MainDemo.c	UDPPut(DHCP_IP_LEASE_TIME);
001618   0e33     movlw	0x33               	MOVLW	0x33
00161a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00161e   f04f
001620   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	416; MainDemo.c	UDPPut(4);
001622   0e04     movlw	0x4                	MOVLW	0x04
001624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001626   ec54     call	0x9ea8, 0           	CALL	_UDPPut
001628   f04f
00162a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	417; MainDemo.c	UDPPut(0);
00162c   0e00     movlw	0                  	MOVLW	0x00
00162e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001630   ec54     call	0x9ea8, 0           	CALL	_UDPPut
001632   f04f
001634   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	418; MainDemo.c	UDPPut(0);
001636   0e00     movlw	0                  	MOVLW	0x00
001638   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00163a   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00163c   f04f
00163e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	419; MainDemo.c	UDPPutArrayInvert((BYTE*)&lease_time, 2);
001640   0e09     movlw	0x9                	MOVLW	HIGH(_transmitToClient_lease_time_1_1)
001642   6e01     movwf	0x1, 0             	MOVWF	r0x01
001644   0efe     movlw	0xfe               	MOVLW	LOW(_transmitToClient_lease_time_1_1)
001646   6e00     movwf	0, 0               	MOVWF	r0x00
001648   0e80     movlw	0x80               	MOVLW	0x80
00164a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00164c   0e00     movlw	0                  	MOVLW	0x00
00164e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001650   0e02     movlw	0x2                	MOVLW	0x02
001652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001654   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001658   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00165a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00165c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00165e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001660   ec02     call	0x9404, 0           	CALL	_UDPPutArrayInvert
001662   f04a
001664   0e05     movlw	0x5                	MOVLW	0x05
001666   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	422; MainDemo.c	UDPPut(DHCP_SERVER_IDENTIFIER);
001668   0e36     movlw	0x36               	MOVLW	0x36
00166a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00166c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00166e   f04f
001670   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	423; MainDemo.c	UDPPut(sizeof(IP_ADDR));
001672   0e04     movlw	0x4                	MOVLW	0x04
001674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001676   ec54     call	0x9ea8, 0           	CALL	_UDPPut
001678   f04f
00167a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	426; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
00167c   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
00167e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001680   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
001682   6e00     movwf	0, 0               	MOVWF	r0x00
001684   0e80     movlw	0x80               	MOVLW	0x80
001686   6e02     movwf	0x2, 0             	MOVWF	r0x02
001688   0e00     movlw	0                  	MOVLW	0x00
00168a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168c   0e04     movlw	0x4                	MOVLW	0x04
00168e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001690   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001694   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001698   5000     movf	0, 0, 0             	MOVF	r0x00, W
00169a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169c   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
00169e   f047
0016a0   0e05     movlw	0x5                	MOVLW	0x05
0016a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	427; MainDemo.c	UDPPut(DHCP_END_OPTION);
0016a4   0eff     movlw	0xff               	MOVLW	0xff
0016a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a8   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0016aa   f04f
0016ac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00238_DS_:
                                           ;	.line	428; MainDemo.c	while(UDPTxCount < 300){
0016ae   0e01     movlw	0x1                	MOVLW	0x01
0016b0   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
0016b2   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
0016b4   e103     bnz	0x16bc               	BNZ	_00273_DS_
0016b6   0e2c     movlw	0x2c               	MOVLW	0x2c
0016b8   0102     movlb	0x2                	BANKSEL	_UDPTxCount
0016ba   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00273_DS_:
0016bc   e206     bc	0x16ca                	BC	_00240_DS_
                                           ;	.line	429; MainDemo.c	UDPPut(0);
0016be   0e00     movlw	0                  	MOVLW	0x00
0016c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016c2   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0016c4   f04f
0016c6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0016c8   d7f2     bra	0x16ae               	BRA	_00238_DS_
                                           _00240_DS_:
                                           ;	.line	433; MainDemo.c	UDPFlush();
0016ca   ec04     call	0x4208, 0           	CALL	_UDPFlush
0016cc   f021
0016ce   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0016d0   f014
0016d2   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0016d4   f013
0016d6   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0016d8   f012
0016da   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0016dc   f011
0016de   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0016e0   f010
0016e2   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0016e4   f00f
0016e6   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0016e8   f00e
0016ea   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0016ec   f00d
0016ee   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0016f0   f00c
0016f2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0016f4   f00b
0016f6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0016f8   f00a
0016fa   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0016fc   f009
0016fe   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001700   f008
001702   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001704   f007
001706   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001708   f006
00170a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00170c   f005
00170e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001710   f004
001712   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001714   f003
001716   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001718   f002
00171a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00171c   f001
00171e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001720   f000
001722   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001724   ffd9
001726   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__rcvdFromServer	code
                                           _rcvdFromServer:
                                           ;	.line	338; MainDemo.c	void rcvdFromServer(UDP_SOCKET *send_c_socket, UDP_SOCKET *receiver_socket){
002c42   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c44   ffe5
002c46   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c48   ffd9
002c4a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c4c   ffe5
002c4e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002c50   ffe5
002c52   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002c54   ffe5
002c56   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002c58   ffe5
002c5a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002c5c   ffe5
002c5e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002c60   ffe5
002c62   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002c64   ffe5
002c66   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002c68   ffe5
002c6a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002c6c   ffe5
002c6e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002c70   ffe5
002c72   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002c74   ffe5
002c76   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002c78   ffe5
002c7a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002c7c   ffe5
002c7e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002c80   ffe5
002c82   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002c84   ffe5
002c86   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002c88   ffe5
002c8a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002c8c   ffe5
002c8e   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002c90   ffe5
002c92   0e02     movlw	0x2                	MOVLW	0x02
002c94   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002c96   f000
002c98   0e03     movlw	0x3                	MOVLW	0x03
002c9a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002c9c   f001
002c9e   0e04     movlw	0x4                	MOVLW	0x04
002ca0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002ca2   f002
002ca4   0e05     movlw	0x5                	MOVLW	0x05
002ca6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002ca8   f003
002caa   0e06     movlw	0x6                	MOVLW	0x06
002cac   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002cae   f004
002cb0   0e07     movlw	0x7                	MOVLW	0x07
002cb2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002cb4   f005
                                           ;	.line	346; MainDemo.c	extractBootProtHeader(&dhcp_type, &bootp_header, dhcp_header, &dhcp_header_length, receiver_socket);
002cb6   0e02     movlw	0x2                	MOVLW	HIGH(_rcvdFromServer_dhcp_type_1_1)
002cb8   6e07     movwf	0x7, 0             	MOVWF	r0x07
002cba   0e38     movlw	0x38               	MOVLW	LOW(_rcvdFromServer_dhcp_type_1_1)
002cbc   6e06     movwf	0x6, 0             	MOVWF	r0x06
002cbe   0e80     movlw	0x80               	MOVLW	0x80
002cc0   6e08     movwf	0x8, 0             	MOVWF	r0x08
002cc2   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1)
002cc4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002cc6   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1)
002cc8   6e09     movwf	0x9, 0             	MOVWF	r0x09
002cca   0e80     movlw	0x80               	MOVLW	0x80
002ccc   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002cce   0e0a     movlw	0xa                	MOVLW	HIGH(_rcvdFromServer_dhcp_header_1_1)
002cd0   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002cd2   0e00     movlw	0                  	MOVLW	LOW(_rcvdFromServer_dhcp_header_1_1)
002cd4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002cd6   0e80     movlw	0x80               	MOVLW	0x80
002cd8   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002cda   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_dhcp_header_length_1_1)
002cdc   6e10     movwf	0x10, 0            	MOVWF	r0x10
002cde   0efe     movlw	0xfe               	MOVLW	LOW(_rcvdFromServer_dhcp_header_length_1_1)
002ce0   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
002ce2   0e80     movlw	0x80               	MOVLW	0x80
002ce4   6e11     movwf	0x11, 0            	MOVWF	r0x11
002ce6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ce8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002cec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf2   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
002cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf6   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfa   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d02   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002d04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d06   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002d08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d0a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d0e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d12   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002d14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d16   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002d18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d1a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002d1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d1e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d22   ec94     call	0x1728, 0           	CALL	_extractBootProtHeader
002d24   f00b
002d26   0e0f     movlw	0xf                	MOVLW	0x0f
002d28   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	347; MainDemo.c	UDPDiscard();
002d2a   ecc8     call	0xad90, 0           	CALL	_UDPDiscard
002d2c   f056
                                           ;	.line	349; MainDemo.c	switch(dhcp_type){
002d2e   c238     movff	0x238, 0x3         	MOVFF	_rcvdFromServer_dhcp_type_1_1, r0x03
002d30   f003
002d32   6a04     clrf	0x4, 0              	CLRF	r0x04
002d34   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d36   0a02     xorlw	0x2                	XORLW	0x02
002d38   e102     bnz	0x2d3e               	BNZ	_00228_DS_
002d3a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d3c   e006     bz	0x2d4a                	BZ	_00215_DS_
                                           _00228_DS_:
002d3e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d40   0a05     xorlw	0x5                	XORLW	0x05
002d42   e102     bnz	0x2d48               	BNZ	_00230_DS_
002d44   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d46   e027     bz	0x2d96                	BZ	_00216_DS_
                                           _00230_DS_:
002d48   d0f6     bra	0x2f36               	BRA	_00220_DS_
                                           _00215_DS_:
                                           ;	.line	351; MainDemo.c	DisplayString(0, "DHCP OFFER");
002d4a   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
002d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d4e   0e85     movlw	0x85               	MOVLW	HIGH(__str_1)
002d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d52   0ea2     movlw	0xa2               	MOVLW	LOW(__str_1)
002d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d56   0e00     movlw	0                  	MOVLW	0x00
002d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d5a   ecde     call	0x95bc, 0           	CALL	_DisplayString
002d5c   f04a
002d5e   0e04     movlw	0x4                	MOVLW	0x04
002d60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	352; MainDemo.c	transmitToClient(&bootp_header, send_c_socket, dhcp_type);
002d62   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1)
002d64   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d66   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1)
002d68   6e03     movwf	0x3, 0             	MOVWF	r0x03
002d6a   0e80     movlw	0x80               	MOVLW	0x80
002d6c   6e05     movwf	0x5, 0             	MOVWF	r0x05
002d6e   0102     movlb	0x2                	BANKSEL	_rcvdFromServer_dhcp_type_1_1
002d70   5138     movf	0x38, 0, 0x1        	MOVF	_rcvdFromServer_dhcp_type_1_1, W, B
002d72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d78   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002d7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d80   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d84   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002d8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d8c   ec83     call	0x1306, 0           	CALL	_transmitToClient
002d8e   f009
002d90   0e07     movlw	0x7                	MOVLW	0x07
002d92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; MainDemo.c	break;
002d94   d0dc     bra	0x2f4e               	BRA	_00222_DS_
                                           _00216_DS_:
                                           ;	.line	356; MainDemo.c	DisplayString(0, "DHCP ACK");
002d96   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
002d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9a   0e85     movlw	0x85               	MOVLW	HIGH(__str_2)
002d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9e   0eae     movlw	0xae               	MOVLW	LOW(__str_2)
002da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da2   0e00     movlw	0                  	MOVLW	0x00
002da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da6   ecde     call	0x95bc, 0           	CALL	_DisplayString
002da8   f04a
002daa   0e04     movlw	0x4                	MOVLW	0x04
002dac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	357; MainDemo.c	getLeaseFromAck(&lease_time, dhcp_header, dhcp_header_length);        
002dae   0e08     movlw	0x8                	MOVLW	HIGH(_rcvdFromServer_lease_time_1_1)
002db0   6e04     movwf	0x4, 0             	MOVWF	r0x04
002db2   0efb     movlw	0xfb               	MOVLW	LOW(_rcvdFromServer_lease_time_1_1)
002db4   6e03     movwf	0x3, 0             	MOVWF	r0x03
002db6   0e80     movlw	0x80               	MOVLW	0x80
002db8   6e05     movwf	0x5, 0             	MOVWF	r0x05
002dba   0e0a     movlw	0xa                	MOVLW	HIGH(_rcvdFromServer_dhcp_header_1_1)
002dbc   6e07     movwf	0x7, 0             	MOVWF	r0x07
002dbe   0e00     movlw	0                  	MOVLW	LOW(_rcvdFromServer_dhcp_header_1_1)
002dc0   6e06     movwf	0x6, 0             	MOVWF	r0x06
002dc2   0e80     movlw	0x80               	MOVLW	0x80
002dc4   6e08     movwf	0x8, 0             	MOVWF	r0x08
002dc6   0101     movlb	0x1                	BANKSEL	(_rcvdFromServer_dhcp_header_length_1_1 + 1)
002dc8   51ff     movf	0xff, 0, 0x1        	MOVF	(_rcvdFromServer_dhcp_header_length_1_1 + 1), W, B
002dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dcc   0101     movlb	0x1                	BANKSEL	_rcvdFromServer_dhcp_header_length_1_1
002dce   51fe     movf	0xfe, 0, 0x1        	MOVF	_rcvdFromServer_dhcp_header_length_1_1, W, B
002dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dda   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dde   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dea   ecaf     call	0x675e, 0           	CALL	_getLeaseFromAck
002dec   f033
002dee   0e08     movlw	0x8                	MOVLW	0x08
002df0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; MainDemo.c	if(findInPool(&pool_it, &bootp_header.ClientMAC)){
002df2   0e0b     movlw	0xb                	MOVLW	HIGH(_rcvdFromServer_pool_it_1_1)
002df4   6e04     movwf	0x4, 0             	MOVWF	r0x04
002df6   0efa     movlw	0xfa               	MOVLW	LOW(_rcvdFromServer_pool_it_1_1)
002df8   6e03     movwf	0x3, 0             	MOVWF	r0x03
002dfa   0e80     movlw	0x80               	MOVLW	0x80
002dfc   6e05     movwf	0x5, 0             	MOVWF	r0x05
002dfe   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1 + 28)
002e00   6e07     movwf	0x7, 0             	MOVWF	r0x07
002e02   0ee4     movlw	0xe4               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1 + 28)
002e04   6e06     movwf	0x6, 0             	MOVWF	r0x06
002e06   0e80     movlw	0x80               	MOVLW	0x80
002e08   6e08     movwf	0x8, 0             	MOVWF	r0x08
002e0a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002e0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e0e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002e10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e12   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002e14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002e18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e22   ec50     call	0x7aa0, 0           	CALL	_findInPool
002e24   f03d
002e26   6e03     movwf	0x3, 0             	MOVWF	r0x03
002e28   0e06     movlw	0x6                	MOVLW	0x06
002e2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002e2c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e2e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002e30   d03c     bra	0x2eaa               	BRA	_00218_DS_
                                           ;	.line	359; MainDemo.c	memcpy(pool_it->ip.v, &bootp_header.YourIP, sizeof(IP_ADDR));
002e32   cbfa     movff	0xbfa, 0x3         	MOVFF	_rcvdFromServer_pool_it_1_1, r0x03
002e34   f003
002e36   cbfb     movff	0xbfb, 0x4         	MOVFF	(_rcvdFromServer_pool_it_1_1 + 1), r0x04
002e38   f004
002e3a   cbfc     movff	0xbfc, 0x5         	MOVFF	(_rcvdFromServer_pool_it_1_1 + 2), r0x05
002e3c   f005
002e3e   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1 + 16)
002e40   6e07     movwf	0x7, 0             	MOVWF	r0x07
002e42   0ed8     movlw	0xd8               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1 + 16)
002e44   6e06     movwf	0x6, 0             	MOVWF	r0x06
002e46   0e80     movlw	0x80               	MOVLW	0x80
002e48   6e08     movwf	0x8, 0             	MOVWF	r0x08
002e4a   0e00     movlw	0                  	MOVLW	0x00
002e4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4e   0e04     movlw	0x4                	MOVLW	0x04
002e50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e52   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e56   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e5a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e5e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e62   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e66   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6a   ecd1     call	0x8ba2, 0           	CALL	_memcpy
002e6c   f045
002e6e   0e08     movlw	0x8                	MOVLW	0x08
002e70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	360; MainDemo.c	pool_it->server_leasetime = lease_time;
002e72   cbfa     movff	0xbfa, 0x3         	MOVFF	_rcvdFromServer_pool_it_1_1, r0x03
002e74   f003
002e76   cbfb     movff	0xbfb, 0x4         	MOVFF	(_rcvdFromServer_pool_it_1_1 + 1), r0x04
002e78   f004
002e7a   cbfc     movff	0xbfc, 0x5         	MOVFF	(_rcvdFromServer_pool_it_1_1 + 2), r0x05
002e7c   f005
002e7e   0e10     movlw	0x10               	MOVLW	0x10
002e80   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002e82   0e00     movlw	0                  	MOVLW	0x00
002e84   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002e86   0e00     movlw	0                  	MOVLW	0x00
002e88   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002e8a   c8fb     movff	0x8fb, 0xfe5       	MOVFF	_rcvdFromServer_lease_time_1_1, POSTDEC1
002e8c   ffe5
002e8e   c8fc     movff	0x8fc, 0xff4       	MOVFF	(_rcvdFromServer_lease_time_1_1 + 1), PRODH
002e90   fff4
002e92   c8fd     movff	0x8fd, 0xff6       	MOVFF	(_rcvdFromServer_lease_time_1_1 + 2), TBLPTRL
002e94   fff6
002e96   c8fe     movff	0x8fe, 0xff7       	MOVFF	(_rcvdFromServer_lease_time_1_1 + 3), TBLPTRH
002e98   fff7
002e9a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002e9c   ffe9
002e9e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002ea0   fff3
002ea2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ea4   ec43     call	0xae86, 0           	CALL	__gptrput4
002ea6   f057
002ea8   d02c     bra	0x2f02               	BRA	_00219_DS_
                                           _00218_DS_:
                                           ;	.line	362; MainDemo.c	addItem((IP_ADDR*)&bootp_header.YourIP, &bootp_header.ClientMAC, lease_time, 0);    
002eaa   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1 + 16)
002eac   6e04     movwf	0x4, 0             	MOVWF	r0x04
002eae   0ed8     movlw	0xd8               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1 + 16)
002eb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
002eb2   0e80     movlw	0x80               	MOVLW	0x80
002eb4   6e05     movwf	0x5, 0             	MOVWF	r0x05
002eb6   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1 + 28)
002eb8   6e07     movwf	0x7, 0             	MOVWF	r0x07
002eba   0ee4     movlw	0xe4               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1 + 28)
002ebc   6e06     movwf	0x6, 0             	MOVWF	r0x06
002ebe   0e80     movlw	0x80               	MOVLW	0x80
002ec0   6e08     movwf	0x8, 0             	MOVWF	r0x08
002ec2   0e00     movlw	0                  	MOVLW	0x00
002ec4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ec6   0e00     movlw	0                  	MOVLW	0x00
002ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eca   0108     movlb	0x8                	BANKSEL	(_rcvdFromServer_lease_time_1_1 + 3)
002ecc   51fe     movf	0xfe, 0, 0x1        	MOVF	(_rcvdFromServer_lease_time_1_1 + 3), W, B
002ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed0   0108     movlb	0x8                	BANKSEL	(_rcvdFromServer_lease_time_1_1 + 2)
002ed2   51fd     movf	0xfd, 0, 0x1        	MOVF	(_rcvdFromServer_lease_time_1_1 + 2), W, B
002ed4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed6   0108     movlb	0x8                	BANKSEL	(_rcvdFromServer_lease_time_1_1 + 1)
002ed8   51fc     movf	0xfc, 0, 0x1        	MOVF	(_rcvdFromServer_lease_time_1_1 + 1), W, B
002eda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002edc   0108     movlb	0x8                	BANKSEL	_rcvdFromServer_lease_time_1_1
002ede   51fb     movf	0xfb, 0, 0x1        	MOVF	_rcvdFromServer_lease_time_1_1, W, B
002ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002ee4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002ee8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002eec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eee   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ef2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ef6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002efa   ec56     call	0x56ac, 0           	CALL	_addItem
002efc   f02b
002efe   0e0c     movlw	0xc                	MOVLW	0x0c
002f00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00219_DS_:
                                           ;	.line	364; MainDemo.c	transmitToClient(&bootp_header, send_c_socket, dhcp_type);
002f02   0e01     movlw	0x1                	MOVLW	HIGH(_rcvdFromServer_bootp_header_1_1)
002f04   6e04     movwf	0x4, 0             	MOVWF	r0x04
002f06   0ec8     movlw	0xc8               	MOVLW	LOW(_rcvdFromServer_bootp_header_1_1)
002f08   6e03     movwf	0x3, 0             	MOVWF	r0x03
002f0a   0e80     movlw	0x80               	MOVLW	0x80
002f0c   6e05     movwf	0x5, 0             	MOVWF	r0x05
002f0e   0102     movlb	0x2                	BANKSEL	_rcvdFromServer_dhcp_type_1_1
002f10   5138     movf	0x38, 0, 0x1        	MOVF	_rcvdFromServer_dhcp_type_1_1, W, B
002f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f18   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f1c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f20   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f24   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f28   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f2c   ec83     call	0x1306, 0           	CALL	_transmitToClient
002f2e   f009
002f30   0e07     movlw	0x7                	MOVLW	0x07
002f32   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	365; MainDemo.c	break;
002f34   d00c     bra	0x2f4e               	BRA	_00222_DS_
                                           _00220_DS_:
                                           ;	.line	368; MainDemo.c	DisplayString(0, "DISCARDED packet from server");
002f36   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
002f38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f3a   0e85     movlw	0x85               	MOVLW	HIGH(__str_3)
002f3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f3e   0eb8     movlw	0xb8               	MOVLW	LOW(__str_3)
002f40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f42   0e00     movlw	0                  	MOVLW	0x00
002f44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f46   ecde     call	0x95bc, 0           	CALL	_DisplayString
002f48   f04a
002f4a   0e04     movlw	0x4                	MOVLW	0x04
002f4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00222_DS_:
                                           ;	.line	370; MainDemo.c	}
002f4e   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002f50   f011
002f52   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002f54   f010
002f56   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002f58   f00f
002f5a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002f5c   f00e
002f5e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002f60   f00d
002f62   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002f64   f00c
002f66   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002f68   f00b
002f6a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002f6c   f00a
002f6e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002f70   f009
002f72   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002f74   f008
002f76   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002f78   f007
002f7a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002f7c   f006
002f7e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002f80   f005
002f82   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002f84   f004
002f86   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002f88   f003
002f8a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002f8c   f002
002f8e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002f90   f001
002f92   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002f94   f000
002f96   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002f98   ffd9
002f9a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__sendRequest	code
                                           _sendRequest:
                                           ;	.line	325; MainDemo.c	void sendRequest(UDP_SOCKET *send_s_socket, POOL_ITEM *it){
006cfc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006cfe   ffe5
006d00   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006d02   ffd9
006d04   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006d06   ffe5
006d08   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006d0a   ffe5
006d0c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006d0e   ffe5
006d10   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006d12   ffe5
006d14   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006d16   ffe5
006d18   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006d1a   ffe5
006d1c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006d1e   ffe5
006d20   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006d22   ffe5
006d24   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006d26   ffe5
006d28   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006d2a   ffe5
006d2c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006d2e   ffe5
006d30   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006d32   ffe5
006d34   0e02     movlw	0x2                	MOVLW	0x02
006d36   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006d38   f000
006d3a   0e03     movlw	0x3                	MOVLW	0x03
006d3c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006d3e   f001
006d40   0e04     movlw	0x4                	MOVLW	0x04
006d42   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006d44   f002
006d46   0e05     movlw	0x5                	MOVLW	0x05
006d48   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006d4a   f003
006d4c   0e06     movlw	0x6                	MOVLW	0x06
006d4e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006d50   f004
006d52   0e07     movlw	0x7                	MOVLW	0x07
006d54   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
006d56   f005
                                           _00207_DS_:
                                           ;	.line	330; MainDemo.c	while(!UDPIsPutReady(*send_s_socket));
006d58   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006d5a   ffe9
006d5c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006d5e   fff3
006d60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006d62   ec12     call	0xae24, 0           	CALL	__gptrget1
006d64   f057
006d66   6e06     movwf	0x6, 0             	MOVWF	r0x06
006d68   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006d6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d6c   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
006d6e   f050
006d70   6e06     movwf	0x6, 0             	MOVWF	r0x06
006d72   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
006d74   f007
006d76   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006d78   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006d7a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
006d7c   e0ed     bz	0x6d58                	BZ	_00207_DS_
                                           ;	.line	331; MainDemo.c	addMacFromServ();
006d7e   ec3c     call	0x9078, 0           	CALL	_addMacFromServ
006d80   f048
                                           ;	.line	332; MainDemo.c	configureBootpHeader(&bootp_header, 0, &it->ip, &it->ip, &it->mac, DHCP_REQUEST_MESSAGE);
006d82   0e0a     movlw	0xa                	MOVLW	HIGH(_sendRequest_bootp_header_1_1)
006d84   6e07     movwf	0x7, 0             	MOVWF	r0x07
006d86   0ec8     movlw	0xc8               	MOVLW	LOW(_sendRequest_bootp_header_1_1)
006d88   6e06     movwf	0x6, 0             	MOVWF	r0x06
006d8a   0e80     movlw	0x80               	MOVLW	0x80
006d8c   6e08     movwf	0x8, 0             	MOVWF	r0x08
006d8e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006d90   0f04     addlw	0x4                	ADDLW	0x04
006d92   6e09     movwf	0x9, 0             	MOVWF	r0x09
006d94   0e00     movlw	0                  	MOVLW	0x00
006d96   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
006d98   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006d9a   0e00     movlw	0                  	MOVLW	0x00
006d9c   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
006d9e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006da0   0e03     movlw	0x3                	MOVLW	0x03
006da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006da4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006da6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006da8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006daa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dac   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006dae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006db0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006db4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006db8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dbc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dc0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dc4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dc8   0e00     movlw	0                  	MOVLW	0x00
006dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dcc   0e00     movlw	0                  	MOVLW	0x00
006dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dd0   0e00     movlw	0                  	MOVLW	0x00
006dd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dd4   0e00     movlw	0                  	MOVLW	0x00
006dd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006dd8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006dda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ddc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006dde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006de0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006de2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006de4   ec8a     call	0x3914, 0           	CALL	_configureBootpHeader
006de6   f01c
006de8   0e11     movlw	0x11               	MOVLW	0x11
006dea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	333; MainDemo.c	buildHeader(dhcp_header, &dhcp_header_length, it);
006dec   0e08     movlw	0x8                	MOVLW	HIGH(_sendRequest_dhcp_header_1_1)
006dee   6e07     movwf	0x7, 0             	MOVWF	r0x07
006df0   0e00     movlw	0                  	MOVLW	LOW(_sendRequest_dhcp_header_1_1)
006df2   6e06     movwf	0x6, 0             	MOVWF	r0x06
006df4   0e80     movlw	0x80               	MOVLW	0x80
006df6   6e08     movwf	0x8, 0             	MOVWF	r0x08
006df8   0e0a     movlw	0xa                	MOVLW	HIGH(_sendRequest_dhcp_header_length_1_1)
006dfa   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006dfc   0efe     movlw	0xfe               	MOVLW	LOW(_sendRequest_dhcp_header_length_1_1)
006dfe   6e09     movwf	0x9, 0             	MOVWF	r0x09
006e00   0e80     movlw	0x80               	MOVLW	0x80
006e02   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006e04   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e08   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006e0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e0c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e10   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e14   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006e16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e18   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006e1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e1c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e20   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e24   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006e26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e28   ec7c     call	0x58f8, 0           	CALL	_buildHeader
006e2a   f02c
006e2c   0e09     movlw	0x9                	MOVLW	0x09
006e2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	334; MainDemo.c	buildBootpHeader(&bootp_header, send_s_socket);
006e30   0e0a     movlw	0xa                	MOVLW	HIGH(_sendRequest_bootp_header_1_1)
006e32   6e04     movwf	0x4, 0             	MOVWF	r0x04
006e34   0ec8     movlw	0xc8               	MOVLW	LOW(_sendRequest_bootp_header_1_1)
006e36   6e03     movwf	0x3, 0             	MOVWF	r0x03
006e38   0e80     movlw	0x80               	MOVLW	0x80
006e3a   6e05     movwf	0x5, 0             	MOVWF	r0x05
006e3c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e44   5000     movf	0, 0, 0             	MOVF	r0x00, W
006e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e48   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e54   ec11     call	0x3c22, 0           	CALL	_buildBootpHeader
006e56   f01e
006e58   0e06     movlw	0x6                	MOVLW	0x06
006e5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	335; MainDemo.c	sendRequestMsg(dhcp_header, dhcp_header_length);
006e5c   0e08     movlw	0x8                	MOVLW	HIGH(_sendRequest_dhcp_header_1_1)
006e5e   6e01     movwf	0x1, 0             	MOVWF	r0x01
006e60   0e00     movlw	0                  	MOVLW	LOW(_sendRequest_dhcp_header_1_1)
006e62   6e00     movwf	0, 0               	MOVWF	r0x00
006e64   0e80     movlw	0x80               	MOVLW	0x80
006e66   6e02     movwf	0x2, 0             	MOVWF	r0x02
006e68   cafe     movff	0xafe, 0x3         	MOVFF	_sendRequest_dhcp_header_length_1_1, r0x03
006e6a   f003
006e6c   caff     movff	0xaff, 0x4         	MOVFF	(_sendRequest_dhcp_header_length_1_1 + 1), r0x04
006e6e   f004
006e70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006e72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006e76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006e7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006e7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e80   5000     movf	0, 0, 0             	MOVF	r0x00, W
006e82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e84   ecab     call	0x5f56, 0           	CALL	_sendRequestMsg
006e86   f02f
006e88   0e05     movlw	0x5                	MOVLW	0x05
006e8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006e8c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006e8e   f00b
006e90   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006e92   f00a
006e94   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006e96   f009
006e98   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006e9a   f008
006e9c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006e9e   f007
006ea0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006ea2   f006
006ea4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006ea6   f005
006ea8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006eaa   f004
006eac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006eae   f003
006eb0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006eb2   f002
006eb4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006eb6   f001
006eb8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006eba   f000
006ebc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006ebe   ffd9
006ec0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__setDhcpIp	code
                                           _setDhcpIp:
                                           ;	.line	317; MainDemo.c	void setDhcpIp(IP_ADDR *ip){
00975c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00975e   ffe5
009760   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009762   ffd9
009764   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009766   ffe5
009768   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00976a   ffe5
00976c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00976e   ffe5
009770   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009772   ffe5
009774   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009776   ffe5
009778   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00977a   ffe5
00977c   0e02     movlw	0x2                	MOVLW	0x02
00977e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009780   f000
009782   0e03     movlw	0x3                	MOVLW	0x03
009784   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009786   f001
009788   0e04     movlw	0x4                	MOVLW	0x04
00978a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00978c   f002
                                           ;	.line	318; MainDemo.c	ip->v[0] = DHCP_IP8;
00978e   0ec0     movlw	0xc0               	MOVLW	0xc0
009790   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009792   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
009794   ffe9
009796   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
009798   fff3
00979a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00979c   ece5     call	0xafca, 0           	CALL	__gptrput1
00979e   f057
                                           ;	.line	319; MainDemo.c	ip->v[1] = DHCP_IP16;
0097a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0097a2   0f01     addlw	0x1                	ADDLW	0x01
0097a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0097a6   0e00     movlw	0                  	MOVLW	0x00
0097a8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0097aa   6e04     movwf	0x4, 0             	MOVWF	r0x04
0097ac   0e00     movlw	0                  	MOVLW	0x00
0097ae   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0097b0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0097b2   0ea8     movlw	0xa8               	MOVLW	0xa8
0097b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0097b6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0097b8   ffe9
0097ba   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0097bc   fff3
0097be   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0097c0   ece5     call	0xafca, 0           	CALL	__gptrput1
0097c2   f057
                                           ;	.line	320; MainDemo.c	ip->v[2] = DHCP_IP24;
0097c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0097c6   0f02     addlw	0x2                	ADDLW	0x02
0097c8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0097ca   0e00     movlw	0                  	MOVLW	0x00
0097cc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0097ce   6e04     movwf	0x4, 0             	MOVWF	r0x04
0097d0   0e00     movlw	0                  	MOVLW	0x00
0097d2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0097d4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0097d6   0e58     movlw	0x58               	MOVLW	0x58
0097d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0097da   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0097dc   ffe9
0097de   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0097e0   fff3
0097e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0097e4   ece5     call	0xafca, 0           	CALL	__gptrput1
0097e6   f057
                                           ;	.line	321; MainDemo.c	ip->v[3] = DHCP_IP32;
0097e8   0e03     movlw	0x3                	MOVLW	0x03
0097ea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0097ec   0e00     movlw	0                  	MOVLW	0x00
0097ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0097f0   0e00     movlw	0                  	MOVLW	0x00
0097f2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0097f4   0e02     movlw	0x2                	MOVLW	0x02
0097f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0097f8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0097fa   ffe9
0097fc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0097fe   fff3
009800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009802   ece5     call	0xafca, 0           	CALL	__gptrput1
009804   f057
009806   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009808   f005
00980a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00980c   f004
00980e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009810   f003
009812   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009814   f002
009816   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009818   f001
00981a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00981c   f000
00981e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009820   ffd9
009822   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__getMacFromServ	code
                                           _getMacFromServ:
                                           ;	.line	299; MainDemo.c	void getMacFromServ(){
0076b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0076b4   ffe5
0076b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0076b8   ffd9
0076ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0076bc   ffe5
0076be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0076c0   ffe5
0076c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0076c4   ffe5
0076c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0076c8   ffe5
0076ca   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0076cc   ffe5
0076ce   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0076d0   ffe5
0076d2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0076d4   ffe5
0076d6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0076d8   ffe5
0076da   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0076dc   ffe5
0076de   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0076e0   ffe5
                                           ;	.line	303; MainDemo.c	for (i=0; i<100; i++) {
0076e2   6a00     clrf	0, 0                	CLRF	r0x00
0076e4   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00185_DS_:
0076e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0076e8   0f80     addlw	0x80               	ADDLW	0x80
0076ea   0f80     addlw	0x80               	ADDLW	0x80
0076ec   e102     bnz	0x76f2               	BNZ	_00196_DS_
0076ee   0e64     movlw	0x64               	MOVLW	0x64
0076f0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00196_DS_:
0076f2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0076f4   d064     bra	0x77be               	BRA	_00188_DS_
                                           ;	.line	304; MainDemo.c	StackTask();
0076f6   ecf0     call	0xade0, 0           	CALL	_StackTask
0076f8   f056
                                           ;	.line	305; MainDemo.c	ARPResolve(&AppConfig.MyGateway);
0076fa   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 8)
0076fc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0076fe   0ed0     movlw	0xd0               	MOVLW	LOW(_AppConfig + 8)
007700   6e02     movwf	0x2, 0             	MOVWF	r0x02
007702   0e80     movlw	0x80               	MOVLW	0x80
007704   6e04     movwf	0x4, 0             	MOVWF	r0x04
007706   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007708   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00770a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00770c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00770e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007712   ec2f     call	0x7e5e, 0           	CALL	_ARPResolve
007714   f03f
007716   0e03     movlw	0x3                	MOVLW	0x03
007718   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	306; MainDemo.c	for(j=0;j<5000; j++) {
00771a   6a02     clrf	0x2, 0              	CLRF	r0x02
00771c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00181_DS_:
00771e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007720   0f80     addlw	0x80               	ADDLW	0x80
007722   0f6d     addlw	0x6d               	ADDLW	0x6d
007724   e102     bnz	0x772a               	BNZ	_00197_DS_
007726   0e88     movlw	0x88               	MOVLW	0x88
007728   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00197_DS_:
00772a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00772c   d044     bra	0x77b6               	BRA	_00187_DS_
                                           ;	.line	307; MainDemo.c	if(ARPIsResolved(&AppConfig.MyGateway, &gw_mac)) {
00772e   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 8)
007730   6e05     movwf	0x5, 0             	MOVWF	r0x05
007732   0ed0     movlw	0xd0               	MOVLW	LOW(_AppConfig + 8)
007734   6e04     movwf	0x4, 0             	MOVWF	r0x04
007736   0e80     movlw	0x80               	MOVLW	0x80
007738   6e06     movwf	0x6, 0             	MOVWF	r0x06
00773a   0e0b     movlw	0xb                	MOVLW	HIGH(_getMacFromServ_gw_mac_1_1)
00773c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00773e   0e8c     movlw	0x8c               	MOVLW	LOW(_getMacFromServ_gw_mac_1_1)
007740   6e07     movwf	0x7, 0             	MOVWF	r0x07
007742   0e80     movlw	0x80               	MOVLW	0x80
007744   6e09     movwf	0x9, 0             	MOVWF	r0x09
007746   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00774a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00774c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00774e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007752   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007756   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00775a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00775c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00775e   eca7     call	0x754e, 0           	CALL	_ARPIsResolved
007760   f03a
007762   6e04     movwf	0x4, 0             	MOVWF	r0x04
007764   0e06     movlw	0x6                	MOVLW	0x06
007766   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007768   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00776a   e021     bz	0x77ae                	BZ	_00183_DS_
                                           ;	.line	308; MainDemo.c	memcpy(MAC_ADDR_GATEWAY, &gw_mac, 6);
00776c   0e0b     movlw	0xb                	MOVLW	HIGH(_MAC_ADDR_GATEWAY)
00776e   6e05     movwf	0x5, 0             	MOVWF	r0x05
007770   0e86     movlw	0x86               	MOVLW	LOW(_MAC_ADDR_GATEWAY)
007772   6e04     movwf	0x4, 0             	MOVWF	r0x04
007774   0e80     movlw	0x80               	MOVLW	0x80
007776   6e06     movwf	0x6, 0             	MOVWF	r0x06
007778   0e0b     movlw	0xb                	MOVLW	HIGH(_getMacFromServ_gw_mac_1_1)
00777a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00777c   0e8c     movlw	0x8c               	MOVLW	LOW(_getMacFromServ_gw_mac_1_1)
00777e   6e07     movwf	0x7, 0             	MOVWF	r0x07
007780   0e80     movlw	0x80               	MOVLW	0x80
007782   6e09     movwf	0x9, 0             	MOVWF	r0x09
007784   0e00     movlw	0                  	MOVLW	0x00
007786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007788   0e06     movlw	0x6                	MOVLW	0x06
00778a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00778c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00778e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007790   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
007792   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007794   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007796   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007798   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00779a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00779c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00779e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0077a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077a4   ecd1     call	0x8ba2, 0           	CALL	_memcpy
0077a6   f045
0077a8   0e08     movlw	0x8                	MOVLW	0x08
0077aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; MainDemo.c	return;     
0077ac   d014     bra	0x77d6               	BRA	_00189_DS_
                                           _00183_DS_:
                                           ;	.line	306; MainDemo.c	for(j=0;j<5000; j++) {
0077ae   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0077b0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0077b2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0077b4   d7b4     bra	0x771e               	BRA	_00181_DS_
                                           _00187_DS_:
                                           ;	.line	303; MainDemo.c	for (i=0; i<100; i++) {
0077b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0077b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0077ba   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0077bc   d794     bra	0x76e6               	BRA	_00185_DS_
                                           _00188_DS_:
                                           ;	.line	313; MainDemo.c	DisplayString(0, "No MAC : ARP    Request Failed");
0077be   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0077c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077c2   0e85     movlw	0x85               	MOVLW	HIGH(__str_0)
0077c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077c6   0e82     movlw	0x82               	MOVLW	LOW(__str_0)
0077c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077ca   0e00     movlw	0                  	MOVLW	0x00
0077cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077ce   ecde     call	0x95bc, 0           	CALL	_DisplayString
0077d0   f04a
0077d2   0e04     movlw	0x4                	MOVLW	0x04
0077d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00189_DS_:
0077d6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0077d8   f009
0077da   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0077dc   f008
0077de   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0077e0   f007
0077e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0077e4   f006
0077e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0077e8   f005
0077ea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0077ec   f004
0077ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0077f0   f003
0077f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0077f4   f002
0077f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0077f8   f001
0077fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0077fc   f000
0077fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007800   ffd9
007802   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__UDPPutArrayInvert	code
                                           _UDPPutArrayInvert:
                                           ;	.line	288; MainDemo.c	void UDPPutArrayInvert(BYTE *val, int len)
009404   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009406   ffe5
009408   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00940a   ffd9
00940c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00940e   ffe5
009410   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009412   ffe5
009414   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009416   ffe5
009418   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00941a   ffe5
00941c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00941e   ffe5
009420   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009422   ffe5
009424   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009426   ffe5
009428   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00942a   ffe5
00942c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00942e   ffe5
009430   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
009432   ffe5
009434   0e02     movlw	0x2                	MOVLW	0x02
009436   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009438   f000
00943a   0e03     movlw	0x3                	MOVLW	0x03
00943c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00943e   f001
009440   0e04     movlw	0x4                	MOVLW	0x04
009442   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009444   f002
009446   0e05     movlw	0x5                	MOVLW	0x05
009448   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00944a   f003
00944c   0e06     movlw	0x6                	MOVLW	0x06
00944e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009450   f004
                                           ;	.line	291; MainDemo.c	for(i = 0; i < len; i++)
009452   6a05     clrf	0x5, 0              	CLRF	r0x05
009454   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00165_DS_:
009456   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009458   0f80     addlw	0x80               	ADDLW	0x80
00945a   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00945c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00945e   0f80     addlw	0x80               	ADDLW	0x80
009460   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
009462   e102     bnz	0x9468               	BNZ	_00174_DS_
009464   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009466   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00174_DS_:
009468   e224     bc	0x94b2                	BC	_00169_DS_
                                           ;	.line	292; MainDemo.c	UDPPut(val[len-i-1]);
00946a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00946c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00946e   6e07     movwf	0x7, 0             	MOVWF	r0x07
009470   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009472   5804     subwfb	0x4, 0, 0         	SUBWFB	r0x04, W
009474   6e08     movwf	0x8, 0             	MOVWF	r0x08
009476   0eff     movlw	0xff               	MOVLW	0xff
009478   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
00947a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00947c   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
00947e   6a09     clrf	0x9, 0              	CLRF	r0x09
009480   be08     btfsc	0x8, 0x7, 0        	BTFSC	r0x08, 7
009482   6809     setf	0x9, 0              	SETF	r0x09
009484   5000     movf	0, 0, 0             	MOVF	r0x00, W
009486   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
009488   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00948a   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
00948c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00948e   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
009490   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
009492   ffe9
009494   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
009496   fff3
009498   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00949a   ec12     call	0xae24, 0           	CALL	__gptrget1
00949c   f057
00949e   6e07     movwf	0x7, 0             	MOVWF	r0x07
0094a0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0094a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0094a4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0094a6   f04f
0094a8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	291; MainDemo.c	for(i = 0; i < len; i++)
0094aa   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0094ac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0094ae   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0094b0   d7d2     bra	0x9456               	BRA	_00165_DS_
                                           _00169_DS_:
0094b2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0094b4   f009
0094b6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0094b8   f008
0094ba   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0094bc   f007
0094be   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0094c0   f006
0094c2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0094c4   f005
0094c6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0094c8   f004
0094ca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0094cc   f003
0094ce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0094d0   f002
0094d2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0094d4   f001
0094d6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0094d8   f000
0094da   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0094dc   ffd9
0094de   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__addMacFromServ	code
                                           _addMacFromServ:
                                           ;	.line	275; MainDemo.c	void addMacFromServ(){
009078   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00907a   ffe5
00907c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00907e   ffd9
009080   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009082   ffe5
009084   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009086   ffe5
009088   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00908a   ffe5
00908c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00908e   ffe5
009090   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009092   ffe5
009094   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009096   ffe5
009098   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00909a   ffe5
00909c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00909e   ffe5
0090a0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0090a2   ffe5
0090a4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0090a6   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0090a8   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	280; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];
0090aa   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
0090ac   0d0e     mullw	0xe                	MULLW	0x0e
0090ae   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0090b0   f000
0090b2   6a01     clrf	0x1, 0              	CLRF	r0x01
0090b4   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0090b6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0090b8   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0090ba   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0090bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0090be   6e01     movwf	0x1, 0             	MOVWF	r0x01
0090c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0090c2   6e00     movwf	0, 0               	MOVWF	r0x00
0090c4   0e80     movlw	0x80               	MOVLW	0x80
0090c6   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	281; MainDemo.c	remote_node_MAC = &info->remoteNode.MACAddr;
0090c8   0e04     movlw	0x4                	MOVLW	0x04
0090ca   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0090cc   0e00     movlw	0                  	MOVLW	0x00
0090ce   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0090d0   0e00     movlw	0                  	MOVLW	0x00
0090d2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	283; MainDemo.c	for (i=0; i<sizeof(MAC_ADDR); i++)
0090d4   6a03     clrf	0x3, 0              	CLRF	r0x03
0090d6   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00151_DS_:
0090d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0090da   0f80     addlw	0x80               	ADDLW	0x80
0090dc   0f80     addlw	0x80               	ADDLW	0x80
0090de   e102     bnz	0x90e4               	BNZ	_00160_DS_
0090e0   0e06     movlw	0x6                	MOVLW	0x06
0090e2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00160_DS_:
0090e4   e224     bc	0x912e                	BC	_00155_DS_
                                           ;	.line	284; MainDemo.c	remote_node_MAC->v[i] = MAC_ADDR_GATEWAY[i];
0090e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0090e8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0090ea   6e05     movwf	0x5, 0             	MOVWF	r0x05
0090ec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0090ee   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0090f0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0090f2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0090f4   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
0090f6   68e8     setf	0xe8, 0             	SETF	WREG
0090f8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0090fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0090fc   0e86     movlw	0x86               	MOVLW	LOW(_MAC_ADDR_GATEWAY)
0090fe   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
009100   6e08     movwf	0x8, 0             	MOVWF	r0x08
009102   0e0b     movlw	0xb                	MOVLW	HIGH(_MAC_ADDR_GATEWAY)
009104   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
009106   6e09     movwf	0x9, 0             	MOVWF	r0x09
009108   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00910a   ffe9
00910c   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
00910e   ffea
009110   cfef     movff	0xfef, 0x8         	MOVFF	INDF0, r0x08
009112   f008
009114   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
009116   ffe5
009118   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00911a   ffe9
00911c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00911e   fff3
009120   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009122   ece5     call	0xafca, 0           	CALL	__gptrput1
009124   f057
                                           ;	.line	283; MainDemo.c	for (i=0; i<sizeof(MAC_ADDR); i++)
009126   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
009128   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00912a   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00912c   d7d5     bra	0x90d8               	BRA	_00151_DS_
                                           _00155_DS_:
00912e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
009130   f009
009132   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
009134   f008
009136   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009138   f007
00913a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00913c   f006
00913e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009140   f005
009142   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009144   f004
009146   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009148   f003
00914a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00914c   f002
00914e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009150   f001
009152   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009154   f000
009156   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009158   ffd9
00915a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__ip_cmp	code
                                           _ip_cmp:
                                           ;	.line	265; MainDemo.c	BOOL ip_cmp(IP_ADDR *ip1, IP_ADDR *ip2){
00886a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00886c   ffe5
00886e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008870   ffd9
008872   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008874   ffe5
008876   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008878   ffe5
00887a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00887c   ffe5
00887e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008880   ffe5
008882   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008884   ffe5
008886   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008888   ffe5
00888a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00888c   ffe5
00888e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008890   ffe5
008892   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
008894   ffe5
008896   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
008898   ffe5
00889a   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00889c   ffe5
00889e   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0088a0   ffe5
0088a2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0088a4   ffe5
0088a6   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0088a8   ffe5
0088aa   0e02     movlw	0x2                	MOVLW	0x02
0088ac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0088ae   f000
0088b0   0e03     movlw	0x3                	MOVLW	0x03
0088b2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0088b4   f001
0088b6   0e04     movlw	0x4                	MOVLW	0x04
0088b8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0088ba   f002
0088bc   0e05     movlw	0x5                	MOVLW	0x05
0088be   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0088c0   f003
0088c2   0e06     movlw	0x6                	MOVLW	0x06
0088c4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0088c6   f004
0088c8   0e07     movlw	0x7                	MOVLW	0x07
0088ca   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0088cc   f005
                                           ;	.line	267; MainDemo.c	for(i=0; i<4; i++){
0088ce   6a06     clrf	0x6, 0              	CLRF	r0x06
0088d0   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00135_DS_:
0088d2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0088d4   0f80     addlw	0x80               	ADDLW	0x80
0088d6   0f80     addlw	0x80               	ADDLW	0x80
0088d8   e102     bnz	0x88de               	BNZ	_00144_DS_
0088da   0e04     movlw	0x4                	MOVLW	0x04
0088dc   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00144_DS_:
0088de   e22f     bc	0x893e                	BC	_00138_DS_
                                           ;	.line	268; MainDemo.c	if(ip1->v[i] != ip2->v[i]){
0088e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0088e2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0088e4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0088e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0088e8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0088ea   6e09     movwf	0x9, 0             	MOVWF	r0x09
0088ec   6ae8     clrf	0xe8, 0             	CLRF	WREG
0088ee   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
0088f0   68e8     setf	0xe8, 0             	SETF	WREG
0088f2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0088f4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0088f6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0088f8   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
0088fa   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0088fc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0088fe   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
008900   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
008902   6ae8     clrf	0xe8, 0             	CLRF	WREG
008904   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
008906   68e8     setf	0xe8, 0             	SETF	WREG
008908   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00890a   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00890c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00890e   ffe9
008910   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
008912   fff3
008914   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
008916   ec12     call	0xae24, 0           	CALL	__gptrget1
008918   f057
00891a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00891c   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00891e   ffe9
008920   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
008922   fff3
008924   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
008926   ec12     call	0xae24, 0           	CALL	__gptrget1
008928   f057
00892a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00892c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00892e   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
008930   e002     bz	0x8936                	BZ	_00137_DS_
                                           ;	.line	269; MainDemo.c	return FALSE;
008932   6ae8     clrf	0xe8, 0             	CLRF	WREG
008934   d005     bra	0x8940               	BRA	_00139_DS_
                                           _00137_DS_:
                                           ;	.line	267; MainDemo.c	for(i=0; i<4; i++){
008936   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
008938   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00893a   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00893c   d7ca     bra	0x88d2               	BRA	_00135_DS_
                                           _00138_DS_:
                                           ;	.line	272; MainDemo.c	return TRUE;
00893e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00139_DS_:
008940   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
008942   f00d
008944   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
008946   f00c
008948   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00894a   f00b
00894c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00894e   f00a
008950   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
008952   f009
008954   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
008956   f008
008958   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00895a   f007
00895c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00895e   f006
008960   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008962   f005
008964   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008966   f004
008968   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00896a   f003
00896c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00896e   f002
008970   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008972   f001
008974   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008976   f000
008978   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00897a   ffd9
00897c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__mac_cmp	code
                                           _mac_cmp:
                                           ;	.line	254; MainDemo.c	BOOL mac_cmp(MAC_ADDR *m1, MAC_ADDR *m2){
00897e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008980   ffe5
008982   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008984   ffd9
008986   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008988   ffe5
00898a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00898c   ffe5
00898e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008990   ffe5
008992   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008994   ffe5
008996   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008998   ffe5
00899a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00899c   ffe5
00899e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0089a0   ffe5
0089a2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0089a4   ffe5
0089a6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0089a8   ffe5
0089aa   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0089ac   ffe5
0089ae   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0089b0   ffe5
0089b2   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0089b4   ffe5
0089b6   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0089b8   ffe5
0089ba   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0089bc   ffe5
0089be   0e02     movlw	0x2                	MOVLW	0x02
0089c0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0089c2   f000
0089c4   0e03     movlw	0x3                	MOVLW	0x03
0089c6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0089c8   f001
0089ca   0e04     movlw	0x4                	MOVLW	0x04
0089cc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0089ce   f002
0089d0   0e05     movlw	0x5                	MOVLW	0x05
0089d2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0089d4   f003
0089d6   0e06     movlw	0x6                	MOVLW	0x06
0089d8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0089da   f004
0089dc   0e07     movlw	0x7                	MOVLW	0x07
0089de   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0089e0   f005
                                           ;	.line	256; MainDemo.c	for(i=0; i<6; i++){
0089e2   6a06     clrf	0x6, 0              	CLRF	r0x06
0089e4   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00117_DS_:
0089e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0089e8   0f80     addlw	0x80               	ADDLW	0x80
0089ea   0f80     addlw	0x80               	ADDLW	0x80
0089ec   e102     bnz	0x89f2               	BNZ	_00126_DS_
0089ee   0e06     movlw	0x6                	MOVLW	0x06
0089f0   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00126_DS_:
0089f2   e22f     bc	0x8a52                	BC	_00120_DS_
                                           ;	.line	257; MainDemo.c	if(m1->v[i] != m2->v[i]){
0089f4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0089f6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0089f8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0089fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0089fc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0089fe   6e09     movwf	0x9, 0             	MOVWF	r0x09
008a00   6ae8     clrf	0xe8, 0             	CLRF	WREG
008a02   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
008a04   68e8     setf	0xe8, 0             	SETF	WREG
008a06   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
008a08   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
008a0a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008a0c   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
008a0e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008a10   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
008a12   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
008a14   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
008a16   6ae8     clrf	0xe8, 0             	CLRF	WREG
008a18   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
008a1a   68e8     setf	0xe8, 0             	SETF	WREG
008a1c   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
008a1e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
008a20   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
008a22   ffe9
008a24   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
008a26   fff3
008a28   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
008a2a   ec12     call	0xae24, 0           	CALL	__gptrget1
008a2c   f057
008a2e   6e08     movwf	0x8, 0             	MOVWF	r0x08
008a30   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
008a32   ffe9
008a34   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
008a36   fff3
008a38   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
008a3a   ec12     call	0xae24, 0           	CALL	__gptrget1
008a3c   f057
008a3e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008a40   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
008a42   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
008a44   e002     bz	0x8a4a                	BZ	_00119_DS_
                                           ;	.line	258; MainDemo.c	return FALSE;
008a46   6ae8     clrf	0xe8, 0             	CLRF	WREG
008a48   d005     bra	0x8a54               	BRA	_00121_DS_
                                           _00119_DS_:
                                           ;	.line	256; MainDemo.c	for(i=0; i<6; i++){
008a4a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
008a4c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
008a4e   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
008a50   d7ca     bra	0x89e6               	BRA	_00117_DS_
                                           _00120_DS_:
                                           ;	.line	261; MainDemo.c	return TRUE;
008a52   0e01     movlw	0x1                	MOVLW	0x01
                                           _00121_DS_:
008a54   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
008a56   f00d
008a58   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
008a5a   f00c
008a5c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
008a5e   f00b
008a60   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
008a62   f00a
008a64   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
008a66   f009
008a68   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
008a6a   f008
008a6c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008a6e   f007
008a70   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008a72   f006
008a74   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008a76   f005
008a78   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008a7a   f004
008a7c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008a7e   f003
008a80   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008a82   f002
008a84   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008a86   f001
008a88   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008a8a   f000
008a8c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008a8e   ffd9
008a90   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__HighISR	code
                                           _HighISR:
                                           ;	.line	232; MainDemo.c	void HighISR(void) __interrupt(1) //ML for sdcc        
00a858   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00a85a   ffe5
00a85c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00a85e   ffe5
00a860   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00a862   ffe5
00a864   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00a866   ffe5
00a868   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00a86a   ffe5
00a86c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00a86e   ffe5
00a870   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00a872   ffe5
00a874   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00a876   ffe5
00a878   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00a87a   ffe5
00a87c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a87e   ffe5
00a880   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a882   ffd9
                                           ;	.line	239; MainDemo.c	}
00a884   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a886   ffd9
00a888   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00a88a   fffb
00a88c   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00a88e   fffa
00a890   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00a892   ffea
00a894   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00a896   ffe9
00a898   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00a89a   fff4
00a89c   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00a89e   fff3
00a8a0   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00a8a2   ffe0
00a8a4   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00a8a6   ffd8
00a8a8   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00a8aa   ffe8
00a8ac   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__LowISR	code
                                           _LowISR:
                                           ;	.line	211; MainDemo.c	void LowISR(void) __interrupt (2) //ML for sdcc
008528   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00852a   ffe5
00852c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00852e   ffe5
008530   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
008532   ffe5
008534   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
008536   ffe5
008538   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00853a   ffe5
00853c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00853e   ffe5
008540   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
008542   ffe5
008544   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
008546   ffe5
008548   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00854a   ffe5
00854c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00854e   ffe5
008550   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008552   ffd9
                                           ;	.line	217; MainDemo.c	TickUpdate();
008554   ecb3     call	0xad66, 0           	CALL	_TickUpdate
008556   f056
008558   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00855a   ffd9
00855c   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00855e   fffb
008560   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
008562   fffa
008564   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
008566   ffea
008568   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00856a   ffe9
00856c   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00856e   fff4
008570   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
008572   fff3
008574   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
008576   ffe0
008578   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00857a   ffd8
00857c   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00857e   ffe8
008580   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
008582   6f4e     movwf	0x4e, 0x1          	DB	0x4e, 0x6f, 0x20, 0x4d, 0x41, 0x43, 0x20, 0x3a, 0x20, 0x41, 0x52, 0x50
008584   4d20     dcfsnz	0x20, 0, 0x1      
008586   4341     rrncf	0x41, 0x1, 0x1     
008588   3a20     swapf	0x20, 0x1, 0       
00858a   4120     rrncf	0x20, 0, 0x1       
00858c   5052     movf	0x52, 0, 0          
00858e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20
008590   2020     addwfc	0x20, 0, 0        
008592   6552     cpfsgt	0x52, 0x1         
008594   7571     btg	0x71, 0x2, 0x1       
008596   7365     btg	0x65, 0x1, 0x1       
008598   2074     addwfc	0x74, 0, 0        
00859a   6146     cpfslt	0x46, 0x1         	DB	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x00
00859c   6c69     negf	0x69, 0             
00859e   6465     cpfsgt	0x65, 0           
0085a0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0085a2   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x00
0085a4   5043     movf	0x43, 0, 0          
0085a6   4f20     dcfsnz	0x20, 0x1, 0x1    
0085a8   4646     rlncf	0x46, 0x1, 0       
0085aa   5245     movf	0x45, 0x1, 0        
0085ac   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0085ae   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x41, 0x43, 0x4b, 0x00
0085b0   5043     movf	0x43, 0, 0          
0085b2   4120     rrncf	0x20, 0, 0x1       
0085b4   4b43     infsnz	0x43, 0x1, 0x1    
0085b6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0085b8   4944     infsnz	0x44, 0, 0x1      	DB	0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x45, 0x44, 0x20, 0x70, 0x61
0085ba   4353     rrncf	0x53, 0x1, 0x1     
0085bc   5241     movf	0x41, 0x1, 0        
0085be   4544     rlncf	0x44, 0, 0x1       
0085c0   2044     addwfc	0x44, 0, 0        
0085c2   6170     cpfslt	0x70, 0x1         
0085c4   6b63     clrf	0x63, 0x1           	DB	0x63, 0x6b, 0x65, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65
0085c6   7465     btg	0x65, 0x2, 0         
0085c8   6620     tstfsz	0x20, 0           
0085ca   6f72     movwf	0x72, 0x1          
0085cc   206d     addwfc	0x6d, 0, 0        
0085ce   6573     cpfsgt	0x73, 0x1         
0085d0   7672     btg	0x72, 0x3, 0         	DB	0x72, 0x76, 0x65, 0x72, 0x00
0085d2   7265     btg	0x65, 0x1, 0         
0085d4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
0085d6   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45
0085d8   5043     movf	0x43, 0, 0          
0085da   4420     rlncf	0x20, 0, 0         
0085dc   5349     movf	0x49, 0x1, 0x1      
0085de   4f43     dcfsnz	0x43, 0x1, 0x1    
0085e0   4556     rlncf	0x56, 0, 0x1       
0085e2   5952     subwfb	0x52, 0, 0x1      	DB	0x52, 0x59, 0x00
0085e4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
0085e6   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54
0085e8   5043     movf	0x43, 0, 0          
0085ea   5220     movf	0x20, 0x1, 0        
0085ec   5145     movf	0x45, 0, 0x1        
0085ee   4555     rlncf	0x55, 0, 0x1       
0085f0   5453     subfwb	0x53, 0, 0        
0085f2   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_6:
0085f4   7257     btg	0x57, 0x1, 0         	DB	0x57, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x44, 0x48, 0x43, 0x50, 0x20, 0x74
0085f6   6e6f     movwf	0x6f, 0            
0085f8   2067     addwfc	0x67, 0, 0        
0085fa   4844     infsnz	0x44, 0, 0        
0085fc   5043     movf	0x43, 0, 0          
0085fe   7420     btg	0x20, 0x2, 0         
008600   7079     btg	0x79, 0, 0           	DB	0x79, 0x70, 0x65, 0x00
008602   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
008604   6146     cpfslt	0x46, 0x1         	DB	0x46, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61
008606   6c69     negf	0x69, 0             
008608   7420     btg	0x20, 0x2, 0         
00860a   206f     addwfc	0x6f, 0, 0        
00860c   7263     btg	0x63, 0x1, 0         
00860e   6165     cpfslt	0x65, 0x1         
008610   6574     cpfsgt	0x74, 0x1         	DB	0x74, 0x65, 0x20, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x00
008612   2020     addwfc	0x20, 0, 0        
008614   6f73     movwf	0x73, 0x1          
008616   6b63     clrf	0x63, 0x1           
008618   7465     btg	0x65, 0x2, 0         
00861a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
00861c   6e45     movwf	0x45, 0            	DB	0x45, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x61, 0x73
00861e   6574     cpfsgt	0x74, 0x1         
008620   6972     setf	0x72, 0x1           
008622   676e     tstfsz	0x6e, 0x1         
008624   5420     subfwb	0x20, 0, 0        
008626   7361     btg	0x61, 0x1, 0x1       
008628   206b     addwfc	0x6b, 0, 0        	DB	0x6b, 0x20, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x00
00862a   7943     btg	0x43, 0x4, 0x1       
00862c   6c63     negf	0x63, 0             
00862e   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_9:
008630   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x47, 0x49, 0x32, 0x33, 0x31, 0x35, 0x20, 0x49, 0x6e, 0x69
008632   4947     infsnz	0x47, 0, 0x1      
008634   3332     rrcf	0x32, 0x1, 0x1      
008636   3531     rlcf	0x31, 0, 0x1        
008638   4920     infsnz	0x20, 0, 0x1      
00863a   696e     setf	0x6e, 0x1           
00863c   0074     dw	0x74  ;unknown opcode 	DB	0x74, 0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	15802 (0x3dba) bytes (12.06%)
                                           ;           	 7901 (0x1edd) words
                                           ; udata size:	 1061 (0x0425) bytes (27.63%)
                                           ; access size:	   27 (0x001b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:54 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:54 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ARPInit
                                           	global _ARPProcess
                                           	global _ARPResolve
                                           	global _ARPIsResolved
                                           	global _SwapARPPacket
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _swaps
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACPutHeader
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _ARPProcess_smARP_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_ARP_0	udata
                                           _Cache	res	10
                                           
                                           udata_ARP_1	udata
                                           _ARPProcess_Target_1_1	res	10
                                           
                                           udata_ARP_2	udata
                                           _ARPProcess_packet_1_1	res	28
                                           
                                           udata_ARP_3	udata
                                           _ARPResolve_packet_1_1	res	28
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ARP__SwapARPPacket	code
                                           _SwapARPPacket:
                                           ;	.line	412; TCPIP_Stack/ARP.c	void SwapARPPacket(ARP_PACKET* p)
007d20   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d22   ffe5
007d24   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d26   ffd9
007d28   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007d2a   ffe5
007d2c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007d2e   ffe5
007d30   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007d32   ffe5
007d34   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007d36   ffe5
007d38   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007d3a   ffe5
007d3c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007d3e   ffe5
007d40   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007d42   ffe5
007d44   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007d46   ffe5
007d48   0e02     movlw	0x2                	MOVLW	0x02
007d4a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007d4c   f000
007d4e   0e03     movlw	0x3                	MOVLW	0x03
007d50   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007d52   f001
007d54   0e04     movlw	0x4                	MOVLW	0x04
007d56   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007d58   f002
                                           ;	.line	414; TCPIP_Stack/ARP.c	p->HardwareType     = swaps(p->HardwareType);
007d5a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007d5c   ffe9
007d5e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007d60   fff3
007d62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007d64   ec88     call	0xad10, 0           	CALL	__gptrget2
007d66   f056
007d68   6e03     movwf	0x3, 0             	MOVWF	r0x03
007d6a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007d6c   f004
007d6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d76   ec81     call	0xa902, 0           	CALL	_swaps
007d78   f054
007d7a   6e03     movwf	0x3, 0             	MOVWF	r0x03
007d7c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007d7e   f004
007d80   0e02     movlw	0x2                	MOVLW	0x02
007d82   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007d84   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007d86   ffe5
007d88   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
007d8a   fff4
007d8c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007d8e   ffe9
007d90   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007d92   fff3
007d94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007d96   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
007d98   f057
                                           ;	.line	415; TCPIP_Stack/ARP.c	p->Protocol         = swaps(p->Protocol);
007d9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
007d9c   0f02     addlw	0x2                	ADDLW	0x02
007d9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
007da0   0e00     movlw	0                  	MOVLW	0x00
007da2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007da4   6e04     movwf	0x4, 0             	MOVWF	r0x04
007da6   0e00     movlw	0                  	MOVLW	0x00
007da8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
007daa   6e05     movwf	0x5, 0             	MOVWF	r0x05
007dac   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007dae   ffe9
007db0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007db2   fff3
007db4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007db6   ec88     call	0xad10, 0           	CALL	__gptrget2
007db8   f056
007dba   6e06     movwf	0x6, 0             	MOVWF	r0x06
007dbc   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007dbe   f007
007dc0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007dc4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007dc8   ec81     call	0xa902, 0           	CALL	_swaps
007dca   f054
007dcc   6e06     movwf	0x6, 0             	MOVWF	r0x06
007dce   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007dd0   f007
007dd2   0e02     movlw	0x2                	MOVLW	0x02
007dd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007dd6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007dd8   ffe5
007dda   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
007ddc   fff4
007dde   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007de0   ffe9
007de2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007de4   fff3
007de6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007de8   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
007dea   f057
                                           ;	.line	416; TCPIP_Stack/ARP.c	p->Operation        = swaps(p->Operation);
007dec   0e06     movlw	0x6                	MOVLW	0x06
007dee   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
007df0   0e00     movlw	0                  	MOVLW	0x00
007df2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
007df4   0e00     movlw	0                  	MOVLW	0x00
007df6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
007df8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007dfa   ffe9
007dfc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007dfe   fff3
007e00   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007e02   ec88     call	0xad10, 0           	CALL	__gptrget2
007e04   f056
007e06   6e03     movwf	0x3, 0             	MOVWF	r0x03
007e08   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007e0a   f004
007e0c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e10   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e14   ec81     call	0xa902, 0           	CALL	_swaps
007e16   f054
007e18   6e03     movwf	0x3, 0             	MOVWF	r0x03
007e1a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007e1c   f004
007e1e   0e02     movlw	0x2                	MOVLW	0x02
007e20   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007e22   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007e24   ffe5
007e26   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
007e28   fff4
007e2a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007e2c   ffe9
007e2e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007e30   fff3
007e32   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007e34   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
007e36   f057
007e38   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007e3a   f007
007e3c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007e3e   f006
007e40   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007e42   f005
007e44   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007e46   f004
007e48   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007e4a   f003
007e4c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007e4e   f002
007e50   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007e52   f001
007e54   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007e56   f000
007e58   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007e5a   ffd9
007e5c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPIsResolved	code
                                           _ARPIsResolved:
                                           ;	.line	377; TCPIP_Stack/ARP.c	BOOL ARPIsResolved(IP_ADDR* IPAddr, MAC_ADDR* MACAddr)
00754e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007550   ffe5
007552   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007554   ffd9
007556   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007558   ffe5
00755a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00755c   ffe5
00755e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007560   ffe5
007562   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007564   ffe5
007566   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007568   ffe5
00756a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00756c   ffe5
00756e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007570   ffe5
007572   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007574   ffe5
007576   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007578   ffe5
00757a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00757c   ffe5
00757e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
007580   ffe5
007582   0e02     movlw	0x2                	MOVLW	0x02
007584   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007586   f000
007588   0e03     movlw	0x3                	MOVLW	0x03
00758a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00758c   f001
00758e   0e04     movlw	0x4                	MOVLW	0x04
007590   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007592   f002
007594   0e05     movlw	0x5                	MOVLW	0x05
007596   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
007598   f003
00759a   0e06     movlw	0x6                	MOVLW	0x06
00759c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00759e   f004
0075a0   0e07     movlw	0x7                	MOVLW	0x07
0075a2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0075a4   f005
                                           ;	.line	379; TCPIP_Stack/ARP.c	if((Cache.IPAddr.Val == IPAddr->Val) || 
0075a6   cb50     movff	0xb50, 0x6         	MOVFF	_Cache, r0x06
0075a8   f006
0075aa   cb51     movff	0xb51, 0x7         	MOVFF	(_Cache + 1), r0x07
0075ac   f007
0075ae   cb52     movff	0xb52, 0x8         	MOVFF	(_Cache + 2), r0x08
0075b0   f008
0075b2   cb53     movff	0xb53, 0x9         	MOVFF	(_Cache + 3), r0x09
0075b4   f009
0075b6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0075b8   ffe9
0075ba   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0075bc   fff3
0075be   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0075c0   ec18     call	0xac30, 0           	CALL	__gptrget4
0075c2   f056
0075c4   6e00     movwf	0, 0               	MOVWF	r0x00
0075c6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0075c8   f001
0075ca   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0075cc   f002
0075ce   cfe9     movff	0xfe9, 0xa         	MOVFF	FSR0L, r0x0a
0075d0   f00a
0075d2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0075d4   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0075d6   e109     bnz	0x75ea               	BNZ	_00180_DS_
0075d8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0075da   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0075dc   e106     bnz	0x75ea               	BNZ	_00180_DS_
0075de   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0075e0   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
0075e2   e103     bnz	0x75ea               	BNZ	_00180_DS_
0075e4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0075e6   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
0075e8   e02e     bz	0x7646                	BZ	_00171_DS_
                                           _00180_DS_:
                                           ;	.line	380; TCPIP_Stack/ARP.c	((Cache.IPAddr.Val == AppConfig.MyGateway.Val) && 
0075ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0075ec   0108     movlb	0x8                	BANKSEL	(_AppConfig + 8)
0075ee   19d0     xorwf	0xd0, 0, 0x1       	XORWF	(_AppConfig + 8), W, B
0075f0   e10c     bnz	0x760a               	BNZ	_00181_DS_
0075f2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0075f4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 9)
0075f6   19d1     xorwf	0xd1, 0, 0x1       	XORWF	(_AppConfig + 9), W, B
0075f8   e108     bnz	0x760a               	BNZ	_00181_DS_
0075fa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0075fc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 10)
0075fe   19d2     xorwf	0xd2, 0, 0x1       	XORWF	(_AppConfig + 10), W, B
007600   e104     bnz	0x760a               	BNZ	_00181_DS_
007602   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007604   0108     movlb	0x8                	BANKSEL	(_AppConfig + 11)
007606   19d3     xorwf	0xd3, 0, 0x1       	XORWF	(_AppConfig + 11), W, B
007608   e001     bz	0x760c                	BZ	_00182_DS_
                                           _00181_DS_:
00760a   d039     bra	0x767e               	BRA	_00172_DS_
                                           _00182_DS_:
00760c   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	381; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val)))
00760e   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
007610   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
007612   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
007614   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
007616   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
007618   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
00761a   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
00761c   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
00761e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
007620   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
007622   1a0a     xorwf	0xa, 0x1, 0        	XORWF	r0x0a, F
007624   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
007626   51cc     movf	0xcc, 0, 0x1        	MOVF	(_AppConfig + 4), W, B
007628   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00762a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
00762c   51cd     movf	0xcd, 0, 0x1        	MOVF	(_AppConfig + 5), W, B
00762e   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
007630   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
007632   51ce     movf	0xce, 0, 0x1        	MOVF	(_AppConfig + 6), W, B
007634   1602     andwf	0x2, 0x1, 0        	ANDWF	r0x02, F
007636   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
007638   51cf     movf	0xcf, 0, 0x1        	MOVF	(_AppConfig + 7), W, B
00763a   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
00763c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00763e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
007640   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
007642   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
007644   e01c     bz	0x767e                	BZ	_00172_DS_
                                           _00171_DS_:
                                           ;	.line	384; TCPIP_Stack/ARP.c	memcpy((void*)MACAddr, (void*)&Cache.MACAddr, sizeof(Cache.MACAddr));
007646   0e0b     movlw	0xb                	MOVLW	HIGH(_Cache + 4)
007648   6e01     movwf	0x1, 0             	MOVWF	r0x01
00764a   0e54     movlw	0x54               	MOVLW	LOW(_Cache + 4)
00764c   6e00     movwf	0, 0               	MOVWF	r0x00
00764e   0e80     movlw	0x80               	MOVLW	0x80
007650   6e02     movwf	0x2, 0             	MOVWF	r0x02
007652   0e00     movlw	0                  	MOVLW	0x00
007654   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007656   0e06     movlw	0x6                	MOVLW	0x06
007658   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00765a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00765c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00765e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007660   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007662   5000     movf	0, 0, 0             	MOVF	r0x00, W
007664   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007666   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00766a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00766c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00766e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007672   ecd1     call	0x8ba2, 0           	CALL	_memcpy
007674   f045
007676   0e08     movlw	0x8                	MOVLW	0x08
007678   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	388; TCPIP_Stack/ARP.c	return TRUE;
00767a   0e01     movlw	0x1                	MOVLW	0x01
00767c   d001     bra	0x7680               	BRA	_00175_DS_
                                           _00172_DS_:
                                           ;	.line	390; TCPIP_Stack/ARP.c	return FALSE;
00767e   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00175_DS_:
007680   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
007682   f00a
007684   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007686   f009
007688   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00768a   f008
00768c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00768e   f007
007690   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007692   f006
007694   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007696   f005
007698   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00769a   f004
00769c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00769e   f003
0076a0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0076a2   f002
0076a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0076a6   f001
0076a8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0076aa   f000
0076ac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0076ae   ffd9
0076b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPResolve	code
                                           _ARPResolve:
                                           ;	.line	324; TCPIP_Stack/ARP.c	void ARPResolve(IP_ADDR* IPAddr)
007e5e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e60   ffe5
007e62   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e64   ffd9
007e66   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007e68   ffe5
007e6a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007e6c   ffe5
007e6e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007e70   ffe5
007e72   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007e74   ffe5
007e76   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007e78   ffe5
007e7a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007e7c   ffe5
007e7e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007e80   ffe5
007e82   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007e84   ffe5
007e86   0e02     movlw	0x2                	MOVLW	0x02
007e88   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007e8a   f000
007e8c   0e03     movlw	0x3                	MOVLW	0x03
007e8e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007e90   f001
007e92   0e04     movlw	0x4                	MOVLW	0x04
007e94   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007e96   f002
                                           ;	.line	328; TCPIP_Stack/ARP.c	packet.Operation            = ARP_OPERATION_REQ;
007e98   0e01     movlw	0x1                	MOVLW	0x01
007e9a   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 6)
007e9c   6f06     movwf	0x6, 0x1           	MOVWF	(_ARPResolve_packet_1_1 + 6), B
007e9e   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 7)
007ea0   6b07     clrf	0x7, 0x1            	CLRF	(_ARPResolve_packet_1_1 + 7), B
007ea2   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 18)
                                           ;	.line	329; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[0]   = 0xff;
007ea4   6912     setf	0x12, 0x1           	SETF	(_ARPResolve_packet_1_1 + 18), B
007ea6   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 19)
                                           ;	.line	330; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[1]   = 0xff;
007ea8   6913     setf	0x13, 0x1           	SETF	(_ARPResolve_packet_1_1 + 19), B
007eaa   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 20)
                                           ;	.line	331; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[2]   = 0xff;
007eac   6914     setf	0x14, 0x1           	SETF	(_ARPResolve_packet_1_1 + 20), B
007eae   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 21)
                                           ;	.line	332; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[3]   = 0xff;
007eb0   6915     setf	0x15, 0x1           	SETF	(_ARPResolve_packet_1_1 + 21), B
007eb2   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 22)
                                           ;	.line	333; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[4]   = 0xff;
007eb4   6916     setf	0x16, 0x1           	SETF	(_ARPResolve_packet_1_1 + 22), B
007eb6   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 23)
                                           ;	.line	334; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[5]   = 0xff;
007eb8   6917     setf	0x17, 0x1           	SETF	(_ARPResolve_packet_1_1 + 23), B
                                           ;	.line	340; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val) 
007eba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007ebc   ffe9
007ebe   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007ec0   fff3
007ec2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007ec4   ec18     call	0xac30, 0           	CALL	__gptrget4
007ec6   f056
007ec8   6e00     movwf	0, 0               	MOVWF	r0x00
007eca   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007ecc   f001
007ece   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
007ed0   f002
007ed2   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
007ed4   f003
007ed6   5000     movf	0, 0, 0             	MOVF	r0x00, W
007ed8   0108     movlb	0x8                	BANKSEL	_AppConfig
007eda   19c8     xorwf	0xc8, 0, 0x1       	XORWF	_AppConfig, W, B
007edc   6e04     movwf	0x4, 0             	MOVWF	r0x04
007ede   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007ee0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
007ee2   19c9     xorwf	0xc9, 0, 0x1       	XORWF	(_AppConfig + 1), W, B
007ee4   6e05     movwf	0x5, 0             	MOVWF	r0x05
007ee6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007ee8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
007eea   19ca     xorwf	0xca, 0, 0x1       	XORWF	(_AppConfig + 2), W, B
007eec   6e06     movwf	0x6, 0             	MOVWF	r0x06
007eee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007ef0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
007ef2   19cb     xorwf	0xcb, 0, 0x1       	XORWF	(_AppConfig + 3), W, B
007ef4   6e07     movwf	0x7, 0             	MOVWF	r0x07
007ef6   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
007ef8   51cc     movf	0xcc, 0, 0x1        	MOVF	(_AppConfig + 4), W, B
007efa   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
007efc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
007efe   51cd     movf	0xcd, 0, 0x1        	MOVF	(_AppConfig + 5), W, B
007f00   1605     andwf	0x5, 0x1, 0        	ANDWF	r0x05, F
007f02   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
007f04   51ce     movf	0xce, 0, 0x1        	MOVF	(_AppConfig + 6), W, B
007f06   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
007f08   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
007f0a   51cf     movf	0xcf, 0, 0x1        	MOVF	(_AppConfig + 7), W, B
007f0c   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
007f0e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007f10   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
007f12   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
007f14   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
007f16   e009     bz	0x7f2a                	BZ	_00165_DS_
                                           ;	.line	341; TCPIP_Stack/ARP.c	? AppConfig.MyGateway.Val 
007f18   c8d0     movff	0x8d0, 0x4         	MOVFF	(_AppConfig + 8), r0x04
007f1a   f004
007f1c   c8d1     movff	0x8d1, 0x5         	MOVFF	(_AppConfig + 9), r0x05
007f1e   f005
007f20   c8d2     movff	0x8d2, 0x6         	MOVFF	(_AppConfig + 10), r0x06
007f22   f006
007f24   c8d3     movff	0x8d3, 0x7         	MOVFF	(_AppConfig + 11), r0x07
007f26   f007
007f28   d008     bra	0x7f3a               	BRA	_00166_DS_
                                           _00165_DS_:
                                           ;	.line	342; TCPIP_Stack/ARP.c	: (*IPAddr).Val;
007f2a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
007f2c   f004
007f2e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
007f30   f005
007f32   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
007f34   f006
007f36   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
007f38   f007
                                           _00166_DS_:
007f3a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007f3c   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 24)
007f3e   6f18     movwf	0x18, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 24), B
007f40   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007f42   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 25)
007f44   6f19     movwf	0x19, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 25), B
007f46   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007f48   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 26)
007f4a   6f1a     movwf	0x1a, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 26), B
007f4c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007f4e   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 27)
007f50   6f1b     movwf	0x1b, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 27), B
                                           ;	.line	343; TCPIP_Stack/ARP.c	ARPPut(&packet);
007f52   0e0b     movlw	0xb                	MOVLW	HIGH(_ARPResolve_packet_1_1)
007f54   6e01     movwf	0x1, 0             	MOVWF	r0x01
007f56   0e00     movlw	0                  	MOVLW	LOW(_ARPResolve_packet_1_1)
007f58   6e00     movwf	0, 0               	MOVWF	r0x00
007f5a   0e80     movlw	0x80               	MOVLW	0x80
007f5c   6e02     movwf	0x2, 0             	MOVWF	r0x02
007f5e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007f60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f62   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007f64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f66   5000     movf	0, 0, 0             	MOVF	r0x00, W
007f68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f6a   ecb0     call	0x6560, 0           	CALL	_ARPPut
007f6c   f032
007f6e   0e03     movlw	0x3                	MOVLW	0x03
007f70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007f72   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007f74   f007
007f76   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007f78   f006
007f7a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007f7c   f005
007f7e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007f80   f004
007f82   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007f84   f003
007f86   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007f88   f002
007f8a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007f8c   f001
007f8e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007f90   f000
007f92   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f94   ffd9
007f96   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPProcess	code
                                           _ARPProcess:
                                           ;	.line	204; TCPIP_Stack/ARP.c	BOOL ARPProcess(void)
004aae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004ab0   ffe5
004ab2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004ab4   ffd9
004ab6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004ab8   ffe5
004aba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004abc   ffe5
004abe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004ac0   ffe5
004ac2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004ac4   ffe5
004ac6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004ac8   ffe5
004aca   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004acc   ffe5
004ace   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004ad0   ffe5
004ad2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004ad4   ffe5
004ad6   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	214; TCPIP_Stack/ARP.c	switch(smARP)
004ad8   5151     movf	0x51, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
004ada   e006     bz	0x4ae8                	BZ	_00118_DS_
                                           _00144_DS_:
004adc   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
004ade   5151     movf	0x51, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
004ae0   0a01     xorlw	0x1                	XORLW	0x01
004ae2   e101     bnz	0x4ae6               	BNZ	_00146_DS_
004ae4   d0c4     bra	0x4c6e               	BRA	_00129_DS_
                                           _00146_DS_:
004ae6   d10f     bra	0x4d06               	BRA	_00132_DS_
                                           _00118_DS_:
                                           ;	.line	218; TCPIP_Stack/ARP.c	MACGetArray((BYTE*)&packet, sizeof(packet));
004ae8   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
004aea   6e01     movwf	0x1, 0             	MOVWF	r0x01
004aec   0e61     movlw	0x61               	MOVLW	LOW(_ARPProcess_packet_1_1)
004aee   6e00     movwf	0, 0               	MOVWF	r0x00
004af0   0e80     movlw	0x80               	MOVLW	0x80
004af2   6e02     movwf	0x2, 0             	MOVWF	r0x02
004af4   0e00     movlw	0                  	MOVLW	0x00
004af6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004af8   0e1c     movlw	0x1c               	MOVLW	0x1c
004afa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004afc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004afe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b00   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004b02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b04   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b08   ec20     call	0x9240, 0           	CALL	_MACGetArray
004b0a   f049
004b0c   0e05     movlw	0x5                	MOVLW	0x05
004b0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	219; TCPIP_Stack/ARP.c	MACDiscardRx();
004b10   ec9f     call	0x9f3e, 0           	CALL	_MACDiscardRx
004b12   f04f
                                           ;	.line	220; TCPIP_Stack/ARP.c	SwapARPPacket(&packet);
004b14   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
004b16   6e01     movwf	0x1, 0             	MOVWF	r0x01
004b18   0e61     movlw	0x61               	MOVLW	LOW(_ARPProcess_packet_1_1)
004b1a   6e00     movwf	0, 0               	MOVWF	r0x00
004b1c   0e80     movlw	0x80               	MOVLW	0x80
004b1e   6e02     movwf	0x2, 0             	MOVWF	r0x02
004b20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004b22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b24   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004b26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b28   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b2c   ec90     call	0x7d20, 0           	CALL	_SwapARPPacket
004b2e   f03e
004b30   0e03     movlw	0x3                	MOVLW	0x03
004b32   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004b34   010e     movlb	0xe                	BANKSEL	_ARPProcess_packet_1_1
                                           ;	.line	223; TCPIP_Stack/ARP.c	if ( packet.HardwareType != HW_ETHERNET     ||
004b36   5161     movf	0x61, 0, 0x1        	MOVF	_ARPProcess_packet_1_1, W, B
004b38   0a01     xorlw	0x1                	XORLW	0x01
004b3a   e103     bnz	0x4b42               	BNZ	_00147_DS_
004b3c   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 1)
004b3e   5162     movf	0x62, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 1), W, B
004b40   e001     bz	0x4b44                	BZ	_00148_DS_
                                           _00147_DS_:
004b42   d008     bra	0x4b54               	BRA	_00119_DS_
                                           _00148_DS_:
004b44   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 4)
                                           ;	.line	224; TCPIP_Stack/ARP.c	packet.MACAddrLen != sizeof(MAC_ADDR)  ||
004b46   5165     movf	0x65, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 4), W, B
004b48   0a06     xorlw	0x6                	XORLW	0x06
004b4a   e104     bnz	0x4b54               	BNZ	_00119_DS_
                                           _00150_DS_:
004b4c   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 5)
                                           ;	.line	225; TCPIP_Stack/ARP.c	packet.ProtocolLen != sizeof(IP_ADDR) )
004b4e   5166     movf	0x66, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 5), W, B
004b50   0a04     xorlw	0x4                	XORLW	0x04
004b52   e002     bz	0x4b58                	BZ	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	227; TCPIP_Stack/ARP.c	return TRUE;
004b54   0e01     movlw	0x1                	MOVLW	0x01
004b56   d0d8     bra	0x4d08               	BRA	_00133_DS_
                                           _00120_DS_:
                                           ;	.line	232; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_RESP)
004b58   ce67     movff	0xe67, 0           	MOVFF	(_ARPProcess_packet_1_1 + 6), r0x00
004b5a   f000
004b5c   ce68     movff	0xe68, 0x1         	MOVFF	(_ARPProcess_packet_1_1 + 7), r0x01
004b5e   f001
004b60   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b62   0a02     xorlw	0x2                	XORLW	0x02
004b64   e102     bnz	0x4b6a               	BNZ	_00153_DS_
004b66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004b68   e001     bz	0x4b6c                	BZ	_00154_DS_
                                           _00153_DS_:
004b6a   d032     bra	0x4bd0               	BRA	_00124_DS_
                                           _00154_DS_:
                                           ;	.line	238; TCPIP_Stack/ARP.c	memcpy((void*)&Cache.MACAddr, (void*)&packet.SenderMACAddr, 
004b6c   0e0b     movlw	0xb                	MOVLW	HIGH(_Cache + 4)
004b6e   6e03     movwf	0x3, 0             	MOVWF	r0x03
004b70   0e54     movlw	0x54               	MOVLW	LOW(_Cache + 4)
004b72   6e02     movwf	0x2, 0             	MOVWF	r0x02
004b74   0e80     movlw	0x80               	MOVLW	0x80
004b76   6e04     movwf	0x4, 0             	MOVWF	r0x04
004b78   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
004b7a   6e06     movwf	0x6, 0             	MOVWF	r0x06
004b7c   0e69     movlw	0x69               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
004b7e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004b80   0e80     movlw	0x80               	MOVLW	0x80
004b82   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	239; TCPIP_Stack/ARP.c	sizeof(packet.SenderMACAddr));  
004b84   0e00     movlw	0                  	MOVLW	0x00
004b86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b88   0e06     movlw	0x6                	MOVLW	0x06
004b8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004b8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b90   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004b92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b94   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b98   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004b9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b9c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004b9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ba0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ba2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ba4   ecd1     call	0x8ba2, 0           	CALL	_memcpy
004ba6   f045
004ba8   0e08     movlw	0x8                	MOVLW	0x08
004baa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004bac   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	243; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = packet.SenderIPAddr.Val;
004bae   516f     movf	0x6f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
004bb0   010b     movlb	0xb                	BANKSEL	_Cache
004bb2   6f50     movwf	0x50, 0x1          	MOVWF	_Cache, B
004bb4   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
004bb6   5170     movf	0x70, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
004bb8   010b     movlb	0xb                	BANKSEL	(_Cache + 1)
004bba   6f51     movwf	0x51, 0x1          	MOVWF	(_Cache + 1), B
004bbc   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
004bbe   5171     movf	0x71, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
004bc0   010b     movlb	0xb                	BANKSEL	(_Cache + 2)
004bc2   6f52     movwf	0x52, 0x1          	MOVWF	(_Cache + 2), B
004bc4   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
004bc6   5172     movf	0x72, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
004bc8   010b     movlb	0xb                	BANKSEL	(_Cache + 3)
004bca   6f53     movwf	0x53, 0x1          	MOVWF	(_Cache + 3), B
                                           ;	.line	244; TCPIP_Stack/ARP.c	return TRUE;
004bcc   0e01     movlw	0x1                	MOVLW	0x01
004bce   d09c     bra	0x4d08               	BRA	_00133_DS_
                                           _00124_DS_:
                                           ;	.line	249; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_REQ)
004bd0   5000     movf	0, 0, 0             	MOVF	r0x00, W
004bd2   0a01     xorlw	0x1                	XORLW	0x01
004bd4   e102     bnz	0x4bda               	BNZ	_00155_DS_
004bd6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004bd8   e001     bz	0x4bdc                	BZ	_00156_DS_
                                           _00155_DS_:
004bda   d049     bra	0x4c6e               	BRA	_00129_DS_
                                           _00156_DS_:
004bdc   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
                                           ;	.line	251; TCPIP_Stack/ARP.c	if(packet.TargetIPAddr.Val != AppConfig.MyIPAddr.Val)
004bde   5179     movf	0x79, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 24), W, B
004be0   0108     movlb	0x8                	BANKSEL	_AppConfig
004be2   19c8     xorwf	0xc8, 0, 0x1       	XORWF	_AppConfig, W, B
004be4   e10f     bnz	0x4c04               	BNZ	_00158_DS_
004be6   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
004be8   517a     movf	0x7a, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 25), W, B
004bea   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
004bec   19c9     xorwf	0xc9, 0, 0x1       	XORWF	(_AppConfig + 1), W, B
004bee   e10a     bnz	0x4c04               	BNZ	_00158_DS_
004bf0   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
004bf2   517b     movf	0x7b, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 26), W, B
004bf4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
004bf6   19ca     xorwf	0xca, 0, 0x1       	XORWF	(_AppConfig + 2), W, B
004bf8   e105     bnz	0x4c04               	BNZ	_00158_DS_
004bfa   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
004bfc   517c     movf	0x7c, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 27), W, B
004bfe   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
004c00   19cb     xorwf	0xcb, 0, 0x1       	XORWF	(_AppConfig + 3), W, B
004c02   e002     bz	0x4c08                	BZ	_00126_DS_
                                           _00158_DS_:
                                           ;	.line	253; TCPIP_Stack/ARP.c	return TRUE;
004c04   0e01     movlw	0x1                	MOVLW	0x01
004c06   d080     bra	0x4d08               	BRA	_00133_DS_
                                           _00126_DS_:
004c08   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	262; TCPIP_Stack/ARP.c	Target.IPAddr.Val = packet.SenderIPAddr.Val;
004c0a   516f     movf	0x6f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
004c0c   010b     movlb	0xb                	BANKSEL	_ARPProcess_Target_1_1
004c0e   6f5a     movwf	0x5a, 0x1          	MOVWF	_ARPProcess_Target_1_1, B
004c10   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
004c12   5170     movf	0x70, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
004c14   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
004c16   6f5b     movwf	0x5b, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 1), B
004c18   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
004c1a   5171     movf	0x71, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
004c1c   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
004c1e   6f5c     movwf	0x5c, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 2), B
004c20   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
004c22   5172     movf	0x72, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
004c24   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
004c26   6f5d     movwf	0x5d, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 3), B
                                           ;	.line	264; TCPIP_Stack/ARP.c	memcpy((void*)&Target.MACAddr, 
004c28   0e0b     movlw	0xb                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
004c2a   6e01     movwf	0x1, 0             	MOVWF	r0x01
004c2c   0e5e     movlw	0x5e               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
004c2e   6e00     movwf	0, 0               	MOVWF	r0x00
004c30   0e80     movlw	0x80               	MOVLW	0x80
004c32   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	265; TCPIP_Stack/ARP.c	(void*)&packet.SenderMACAddr, sizeof(packet.SenderMACAddr));
004c34   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
004c36   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c38   0e69     movlw	0x69               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
004c3a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c3c   0e80     movlw	0x80               	MOVLW	0x80
004c3e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c40   0e00     movlw	0                  	MOVLW	0x00
004c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c44   0e06     movlw	0x6                	MOVLW	0x06
004c46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c48   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004c5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
004c5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c60   ecd1     call	0x8ba2, 0           	CALL	_memcpy
004c62   f045
004c64   0e08     movlw	0x8                	MOVLW	0x08
004c66   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; TCPIP_Stack/ARP.c	smARP = SM_ARP_REPLY;
004c68   0e01     movlw	0x1                	MOVLW	0x01
004c6a   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
004c6c   6f51     movwf	0x51, 0x1          	MOVWF	_ARPProcess_smARP_1_1, B
                                           _00129_DS_:
                                           ;	.line	274; TCPIP_Stack/ARP.c	packet.Operation  = ARP_OPERATION_RESP;
004c6e   0e02     movlw	0x2                	MOVLW	0x02
004c70   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 6)
004c72   6f67     movwf	0x67, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 6), B
004c74   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 7)
004c76   6b68     clrf	0x68, 0x1           	CLRF	(_ARPProcess_packet_1_1 + 7), B
                                           ;	.line	276; TCPIP_Stack/ARP.c	memcpy(&packet.TargetMACAddr, (void*)&Target.MACAddr, 
004c78   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 18)
004c7a   6e01     movwf	0x1, 0             	MOVWF	r0x01
004c7c   0e73     movlw	0x73               	MOVLW	LOW(_ARPProcess_packet_1_1 + 18)
004c7e   6e00     movwf	0, 0               	MOVWF	r0x00
004c80   0e80     movlw	0x80               	MOVLW	0x80
004c82   6e02     movwf	0x2, 0             	MOVWF	r0x02
004c84   0e0b     movlw	0xb                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
004c86   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c88   0e5e     movlw	0x5e               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
004c8a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c8c   0e80     movlw	0x80               	MOVLW	0x80
004c8e   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	277; TCPIP_Stack/ARP.c	sizeof(Target.MACAddr));
004c90   0e00     movlw	0                  	MOVLW	0x00
004c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c94   0e06     movlw	0x6                	MOVLW	0x06
004c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c98   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c9c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ca0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ca4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ca8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004caa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cac   5000     movf	0, 0, 0             	MOVF	r0x00, W
004cae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cb0   ecd1     call	0x8ba2, 0           	CALL	_memcpy
004cb2   f045
004cb4   0e08     movlw	0x8                	MOVLW	0x08
004cb6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004cb8   010b     movlb	0xb                	BANKSEL	_ARPProcess_Target_1_1
                                           ;	.line	281; TCPIP_Stack/ARP.c	packet.TargetIPAddr.Val	= Target.IPAddr.Val;
004cba   515a     movf	0x5a, 0, 0x1        	MOVF	_ARPProcess_Target_1_1, W, B
004cbc   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
004cbe   6f79     movwf	0x79, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 24), B
004cc0   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
004cc2   515b     movf	0x5b, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 1), W, B
004cc4   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
004cc6   6f7a     movwf	0x7a, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 25), B
004cc8   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
004cca   515c     movf	0x5c, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 2), W, B
004ccc   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
004cce   6f7b     movwf	0x7b, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 26), B
004cd0   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
004cd2   515d     movf	0x5d, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 3), W, B
004cd4   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
004cd6   6f7c     movwf	0x7c, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 27), B
                                           ;	.line	284; TCPIP_Stack/ARP.c	if(!ARPPut(&packet))
004cd8   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
004cda   6e01     movwf	0x1, 0             	MOVWF	r0x01
004cdc   0e61     movlw	0x61               	MOVLW	LOW(_ARPProcess_packet_1_1)
004cde   6e00     movwf	0, 0               	MOVWF	r0x00
004ce0   0e80     movlw	0x80               	MOVLW	0x80
004ce2   6e02     movwf	0x2, 0             	MOVWF	r0x02
004ce4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ce8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cec   5000     movf	0, 0, 0             	MOVF	r0x00, W
004cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cf0   ecb0     call	0x6560, 0           	CALL	_ARPPut
004cf2   f032
004cf4   6e00     movwf	0, 0               	MOVWF	r0x00
004cf6   0e03     movlw	0x3                	MOVLW	0x03
004cf8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004cfa   5000     movf	0, 0, 0             	MOVF	r0x00, W
004cfc   e102     bnz	0x4d02               	BNZ	_00131_DS_
                                           ;	.line	286; TCPIP_Stack/ARP.c	return FALSE;
004cfe   6ae8     clrf	0xe8, 0             	CLRF	WREG
004d00   d003     bra	0x4d08               	BRA	_00133_DS_
                                           _00131_DS_:
004d02   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	290; TCPIP_Stack/ARP.c	smARP = SM_ARP_IDLE;
004d04   6b51     clrf	0x51, 0x1           	CLRF	_ARPProcess_smARP_1_1, B
                                           _00132_DS_:
                                           ;	.line	294; TCPIP_Stack/ARP.c	return TRUE;
004d06   0e01     movlw	0x1                	MOVLW	0x01
                                           _00133_DS_:
004d08   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004d0a   f007
004d0c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004d0e   f006
004d10   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004d12   f005
004d14   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004d16   f004
004d18   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004d1a   f003
004d1c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004d1e   f002
004d20   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004d22   f001
004d24   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004d26   f000
004d28   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004d2a   ffd9
004d2c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPInit	code
                                           _ARPInit:
                                           ;	.line	165; TCPIP_Stack/ARP.c	void ARPInit(void)
00acac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00acae   ffe5
00acb0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00acb2   ffd9
00acb4   010b     movlb	0xb                	BANKSEL	(_Cache + 4)
                                           ;	.line	167; TCPIP_Stack/ARP.c	Cache.MACAddr.v[0] = 0xff;
00acb6   6954     setf	0x54, 0x1           	SETF	(_Cache + 4), B
00acb8   010b     movlb	0xb                	BANKSEL	(_Cache + 5)
                                           ;	.line	168; TCPIP_Stack/ARP.c	Cache.MACAddr.v[1] = 0xff;
00acba   6955     setf	0x55, 0x1           	SETF	(_Cache + 5), B
00acbc   010b     movlb	0xb                	BANKSEL	(_Cache + 6)
                                           ;	.line	169; TCPIP_Stack/ARP.c	Cache.MACAddr.v[2] = 0xff;
00acbe   6956     setf	0x56, 0x1           	SETF	(_Cache + 6), B
00acc0   010b     movlb	0xb                	BANKSEL	(_Cache + 7)
                                           ;	.line	170; TCPIP_Stack/ARP.c	Cache.MACAddr.v[3] = 0xff;
00acc2   6957     setf	0x57, 0x1           	SETF	(_Cache + 7), B
00acc4   010b     movlb	0xb                	BANKSEL	(_Cache + 8)
                                           ;	.line	171; TCPIP_Stack/ARP.c	Cache.MACAddr.v[4] = 0xff;
00acc6   6958     setf	0x58, 0x1           	SETF	(_Cache + 8), B
00acc8   010b     movlb	0xb                	BANKSEL	(_Cache + 9)
                                           ;	.line	172; TCPIP_Stack/ARP.c	Cache.MACAddr.v[5] = 0xff;
00acca   6959     setf	0x59, 0x1           	SETF	(_Cache + 9), B
00accc   010b     movlb	0xb                	BANKSEL	_Cache
                                           ;	.line	174; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = 0x0;
00acce   6b50     clrf	0x50, 0x1           	CLRF	_Cache, B
00acd0   010b     movlb	0xb                	BANKSEL	(_Cache + 1)
00acd2   6b51     clrf	0x51, 0x1           	CLRF	(_Cache + 1), B
00acd4   010b     movlb	0xb                	BANKSEL	(_Cache + 2)
00acd6   6b52     clrf	0x52, 0x1           	CLRF	(_Cache + 2), B
00acd8   010b     movlb	0xb                	BANKSEL	(_Cache + 3)
00acda   6b53     clrf	0x53, 0x1           	CLRF	(_Cache + 3), B
00acdc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00acde   ffd9
00ace0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPPut	code
                                           _ARPPut:
                                           ;	.line	111; TCPIP_Stack/ARP.c	static BOOL ARPPut(ARP_PACKET* packet)
006560   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006562   ffe5
006564   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006566   ffd9
006568   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00656a   ffe5
00656c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00656e   ffe5
006570   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006572   ffe5
006574   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006576   ffe5
006578   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00657a   ffe5
00657c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00657e   ffe5
006580   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006582   ffe5
006584   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006586   ffe5
006588   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00658a   ffe5
00658c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00658e   ffe5
006590   0e02     movlw	0x2                	MOVLW	0x02
006592   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006594   f000
006596   0e03     movlw	0x3                	MOVLW	0x03
006598   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00659a   f001
00659c   0e04     movlw	0x4                	MOVLW	0x04
00659e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0065a0   f002
                                           _00105_DS_:
                                           ;	.line	113; TCPIP_Stack/ARP.c	while(!MACIsTxReady());
0065a2   ec89     call	0xa512, 0           	CALL	_MACIsTxReady
0065a4   f052
0065a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0065a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0065aa   e0fb     bz	0x65a2                	BZ	_00105_DS_
                                           ;	.line	114; TCPIP_Stack/ARP.c	MACSetWritePtr(BASE_TX_ADDR);
0065ac   0e1a     movlw	0x1a               	MOVLW	0x1a
0065ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065b0   0e0b     movlw	0xb                	MOVLW	0x0b
0065b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065b4   ec88     call	0xa310, 0           	CALL	_MACSetWritePtr
0065b6   f051
0065b8   0e02     movlw	0x2                	MOVLW	0x02
0065ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	117; TCPIP_Stack/ARP.c	packet->HardwareType  = HW_ETHERNET;
0065bc   0e01     movlw	0x1                	MOVLW	0x01
0065be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065c0   0e00     movlw	0                  	MOVLW	0x00
0065c2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0065c4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0065c6   ffe9
0065c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0065ca   fff3
0065cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0065ce   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
0065d0   f057
                                           ;	.line	118; TCPIP_Stack/ARP.c	packet->Protocol      = ARP_IP;
0065d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0065d4   0f02     addlw	0x2                	ADDLW	0x02
0065d6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0065d8   0e00     movlw	0                  	MOVLW	0x00
0065da   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0065dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0065de   0e00     movlw	0                  	MOVLW	0x00
0065e0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0065e2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0065e4   0e00     movlw	0                  	MOVLW	0x00
0065e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065e8   0e08     movlw	0x8                	MOVLW	0x08
0065ea   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0065ec   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0065ee   ffe9
0065f0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0065f2   fff3
0065f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0065f6   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
0065f8   f057
                                           ;	.line	119; TCPIP_Stack/ARP.c	packet->MACAddrLen    = sizeof(MAC_ADDR);
0065fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0065fc   0f04     addlw	0x4                	ADDLW	0x04
0065fe   6e03     movwf	0x3, 0             	MOVWF	r0x03
006600   0e00     movlw	0                  	MOVLW	0x00
006602   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006604   6e04     movwf	0x4, 0             	MOVWF	r0x04
006606   0e00     movlw	0                  	MOVLW	0x00
006608   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00660a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00660c   0e06     movlw	0x6                	MOVLW	0x06
00660e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006610   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
006612   ffe9
006614   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006616   fff3
006618   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00661a   ece5     call	0xafca, 0           	CALL	__gptrput1
00661c   f057
                                           ;	.line	120; TCPIP_Stack/ARP.c	packet->ProtocolLen   = sizeof(IP_ADDR);
00661e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006620   0f05     addlw	0x5                	ADDLW	0x05
006622   6e03     movwf	0x3, 0             	MOVWF	r0x03
006624   0e00     movlw	0                  	MOVLW	0x00
006626   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006628   6e04     movwf	0x4, 0             	MOVWF	r0x04
00662a   0e00     movlw	0                  	MOVLW	0x00
00662c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00662e   6e05     movwf	0x5, 0             	MOVWF	r0x05
006630   0e04     movlw	0x4                	MOVLW	0x04
006632   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006634   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
006636   ffe9
006638   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00663a   fff3
00663c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00663e   ece5     call	0xafca, 0           	CALL	__gptrput1
006640   f057
                                           ;	.line	122; TCPIP_Stack/ARP.c	memcpy(&packet->SenderMACAddr, (void*)&AppConfig.MyMACAddr, 
006642   5000     movf	0, 0, 0             	MOVF	r0x00, W
006644   0f08     addlw	0x8                	ADDLW	0x08
006646   6e03     movwf	0x3, 0             	MOVWF	r0x03
006648   0e00     movlw	0                  	MOVLW	0x00
00664a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00664c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00664e   0e00     movlw	0                  	MOVLW	0x00
006650   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006652   6e05     movwf	0x5, 0             	MOVWF	r0x05
006654   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
006656   6e07     movwf	0x7, 0             	MOVWF	r0x07
006658   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
00665a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00665c   0e80     movlw	0x80               	MOVLW	0x80
00665e   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	123; TCPIP_Stack/ARP.c	sizeof(packet->SenderMACAddr));
006660   0e00     movlw	0                  	MOVLW	0x00
006662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006664   0e06     movlw	0x6                	MOVLW	0x06
006666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006668   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00666a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00666c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00666e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006670   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006672   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006674   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006676   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006678   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00667a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00667c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00667e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006680   ecd1     call	0x8ba2, 0           	CALL	_memcpy
006682   f045
006684   0e08     movlw	0x8                	MOVLW	0x08
006686   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	127; TCPIP_Stack/ARP.c	packet->SenderIPAddr.Val  = AppConfig.MyIPAddr.Val;
006688   5000     movf	0, 0, 0             	MOVF	r0x00, W
00668a   0f0e     addlw	0xe                	ADDLW	0x0e
00668c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00668e   0e00     movlw	0                  	MOVLW	0x00
006690   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006692   6e04     movwf	0x4, 0             	MOVWF	r0x04
006694   0e00     movlw	0                  	MOVLW	0x00
006696   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006698   6e05     movwf	0x5, 0             	MOVWF	r0x05
00669a   c8c8     movff	0x8c8, 0x6         	MOVFF	_AppConfig, r0x06
00669c   f006
00669e   c8c9     movff	0x8c9, 0x7         	MOVFF	(_AppConfig + 1), r0x07
0066a0   f007
0066a2   c8ca     movff	0x8ca, 0x8         	MOVFF	(_AppConfig + 2), r0x08
0066a4   f008
0066a6   c8cb     movff	0x8cb, 0x9         	MOVFF	(_AppConfig + 3), r0x09
0066a8   f009
0066aa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0066ac   ffe5
0066ae   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0066b0   fff4
0066b2   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
0066b4   fff6
0066b6   c009     movff	0x9, 0xff7         	MOVFF	r0x09, TBLPTRH
0066b8   fff7
0066ba   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0066bc   ffe9
0066be   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0066c0   fff3
0066c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0066c4   ec43     call	0xae86, 0           	CALL	__gptrput4
0066c6   f057
                                           ;	.line	129; TCPIP_Stack/ARP.c	SwapARPPacket(packet);
0066c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0066ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0066ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066d4   ec90     call	0x7d20, 0           	CALL	_SwapARPPacket
0066d6   f03e
0066d8   0e03     movlw	0x3                	MOVLW	0x03
0066da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; TCPIP_Stack/ARP.c	MACPutHeader(&packet->TargetMACAddr, MAC_ARP, sizeof(*packet));
0066dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066de   0f12     addlw	0x12               	ADDLW	0x12
0066e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0066e2   0e00     movlw	0                  	MOVLW	0x00
0066e4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0066e6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0066e8   0e00     movlw	0                  	MOVLW	0x00
0066ea   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0066ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
0066ee   0e00     movlw	0                  	MOVLW	0x00
0066f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066f2   0e1c     movlw	0x1c               	MOVLW	0x1c
0066f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066f6   0e06     movlw	0x6                	MOVLW	0x06
0066f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0066fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006702   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006706   ecf0     call	0x7be0, 0           	CALL	_MACPutHeader
006708   f03d
00670a   0e06     movlw	0x6                	MOVLW	0x06
00670c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	132; TCPIP_Stack/ARP.c	MACPutArray((BYTE*)packet, sizeof(*packet));
00670e   0e00     movlw	0                  	MOVLW	0x00
006710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006712   0e1c     movlw	0x1c               	MOVLW	0x1c
006714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006716   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006718   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00671a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00671c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00671e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006720   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006722   ec09     call	0x9e12, 0           	CALL	_MACPutArray
006724   f04f
006726   0e05     movlw	0x5                	MOVLW	0x05
006728   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; TCPIP_Stack/ARP.c	MACFlush();
00672a   ec6d     call	0xa6da, 0           	CALL	_MACFlush
00672c   f053
                                           ;	.line	135; TCPIP_Stack/ARP.c	return TRUE;
00672e   0e01     movlw	0x1                	MOVLW	0x01
006730   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006732   f009
006734   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006736   f008
006738   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00673a   f007
00673c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00673e   f006
006740   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006742   f005
006744   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006746   f004
006748   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00674a   f003
00674c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00674e   f002
006750   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006752   f001
006754   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006756   f000
006758   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00675a   ffd9
00675c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2192 (0x0890) bytes ( 1.67%)
                                           ;           	 1096 (0x0448) words
                                           ; udata size:	   76 (0x004c) bytes ( 1.98%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DHCPInit
                                           	global _DHCPDisable
                                           	global _DHCPEnable
                                           	global _DHCPIsEnabled
                                           	global _DHCPIsBound
                                           	global _DHCPStateChanged
                                           	global _DHCPIsServerDetected
                                           	global _DHCPTask
                                           	global _DHCPClientInitializedOnce
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           	extern _TickGet
                                           	extern _MACIsLinked
                                           	extern _UDPOpen
                                           	extern _UDPClose
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _DHCPClientInitializedOnce	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_DHCP_0	udata
                                           _DHCPClient	res	28
                                           
                                           udata_DHCP_1	udata
                                           __DHCPReceive_type_1_1	res	1
                                           
                                           udata_DHCP_2	udata
                                           __DHCPReceive_j_1_1	res	1
                                           
                                           udata_DHCP_3	udata
                                           __DHCPReceive_v_1_1	res	1
                                           
                                           udata_DHCP_4	udata
                                           __DHCPReceive_tempServerID_1_1	res	4
                                           
                                           udata_DHCP_5	udata
                                           __DHCPSend_MyIP_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPSend	code
                                           __DHCPSend:
                                           ;	.line	1039; TCPIP_Stack/DHCP.c	static void _DHCPSend(BYTE messageType, BOOL bRenewing)
002584   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002586   ffe5
002588   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00258a   ffd9
00258c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00258e   ffe5
002590   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002592   ffe5
002594   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002596   ffe5
002598   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00259a   ffe5
00259c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00259e   ffe5
0025a0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0025a2   ffe5
0025a4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0025a6   ffe5
0025a8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0025aa   ffe5
0025ac   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0025ae   ffe5
0025b0   0e02     movlw	0x2                	MOVLW	0x02
0025b2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0025b4   f000
0025b6   0e03     movlw	0x3                	MOVLW	0x03
0025b8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0025ba   f001
                                           ;	.line	1045; TCPIP_Stack/DHCP.c	UDPPut(BOOT_REQUEST);                       // op
0025bc   0e01     movlw	0x1                	MOVLW	0x01
0025be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025c2   f04f
0025c4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1046; TCPIP_Stack/DHCP.c	UDPPut(BOOT_HW_TYPE);                       // htype
0025c6   0e01     movlw	0x1                	MOVLW	0x01
0025c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025ca   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025cc   f04f
0025ce   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1047; TCPIP_Stack/DHCP.c	UDPPut(BOOT_LEN_OF_HW_TYPE);                // hlen
0025d0   0e06     movlw	0x6                	MOVLW	0x06
0025d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025d4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025d6   f04f
0025d8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1048; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // hops
0025da   0e00     movlw	0                  	MOVLW	0x00
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025e0   f04f
0025e2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1049; TCPIP_Stack/DHCP.c	UDPPut(0x12);                               // xid[0]
0025e4   0e12     movlw	0x12               	MOVLW	0x12
0025e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e8   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025ea   f04f
0025ec   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1050; TCPIP_Stack/DHCP.c	UDPPut(0x23);                               // xid[1]
0025ee   0e23     movlw	0x23               	MOVLW	0x23
0025f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025f2   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025f4   f04f
0025f6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1051; TCPIP_Stack/DHCP.c	UDPPut(0x34);                               // xid[2]
0025f8   0e34     movlw	0x34               	MOVLW	0x34
0025fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025fc   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0025fe   f04f
002600   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1052; TCPIP_Stack/DHCP.c	UDPPut(0x56);                               // xid[3]
002602   0e56     movlw	0x56               	MOVLW	0x56
002604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002606   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002608   f04f
00260a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1053; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[0]
00260c   0e00     movlw	0                  	MOVLW	0x00
00260e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002610   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002612   f04f
002614   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1054; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[1]
002616   0e00     movlw	0                  	MOVLW	0x00
002618   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00261a   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00261c   f04f
00261e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002620   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1055; TCPIP_Stack/DHCP.c	UDPPut(DHCPClient.flags.bits.bUseUnicastMode ? 0x00: 0x80);
002622   a91e     btfss	0x1e, 0x4, 0x1     	BTFSS	(_DHCPClient + 2), 4, B
002624   d002     bra	0x262a               	BRA	_00489_DS_
002626   6a02     clrf	0x2, 0              	CLRF	r0x02
002628   d002     bra	0x262e               	BRA	_00490_DS_
                                           _00489_DS_:
00262a   0e80     movlw	0x80               	MOVLW	0x80
00262c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00490_DS_:
00262e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002632   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002634   f04f
002636   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1057; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // flags[1]
002638   0e00     movlw	0                  	MOVLW	0x00
00263a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00263c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00263e   f04f
002640   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1060; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && bRenewing)
002642   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
002644   f002
002646   6a03     clrf	0x3, 0              	CLRF	r0x03
002648   6a04     clrf	0x4, 0              	CLRF	r0x04
00264a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00264c   0a03     xorlw	0x3                	XORLW	0x03
00264e   e103     bnz	0x2656               	BNZ	_00507_DS_
002650   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002652   e101     bnz	0x2656               	BNZ	_00507_DS_
002654   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           _00507_DS_:
002656   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002658   e017     bz	0x2688                	BZ	_00463_DS_
00265a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00265c   e015     bz	0x2688                	BZ	_00463_DS_
                                           ;	.line	1062; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
00265e   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 15)
002660   6e06     movwf	0x6, 0             	MOVWF	r0x06
002662   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
002664   6e05     movwf	0x5, 0             	MOVWF	r0x05
002666   0e80     movlw	0x80               	MOVLW	0x80
002668   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	1063; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
00266a   0e00     movlw	0                  	MOVLW	0x00
00266c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266e   0e04     movlw	0x4                	MOVLW	0x04
002670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002672   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002676   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002678   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00267c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267e   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
002680   f047
002682   0e05     movlw	0x5                	MOVLW	0x05
002684   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002686   d014     bra	0x26b0               	BRA	_00464_DS_
                                           _00463_DS_:
                                           ;	.line	1067; TCPIP_Stack/DHCP.c	UDPPut(0x00);
002688   0e00     movlw	0                  	MOVLW	0x00
00268a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00268c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00268e   f04f
002690   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1068; TCPIP_Stack/DHCP.c	UDPPut(0x00);
002692   0e00     movlw	0                  	MOVLW	0x00
002694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002696   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002698   f04f
00269a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1069; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00269c   0e00     movlw	0                  	MOVLW	0x00
00269e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026a0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0026a2   f04f
0026a4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1070; TCPIP_Stack/DHCP.c	UDPPut(0x00);
0026a6   0e00     movlw	0                  	MOVLW	0x00
0026a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026aa   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0026ac   f04f
0026ae   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00464_DS_:
                                           ;	.line	1074; TCPIP_Stack/DHCP.c	for ( i = 0; i < 12u; i++ )	UDPPut(0x00);
0026b0   0e0c     movlw	0xc                	MOVLW	0x0c
0026b2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00483_DS_:
0026b4   0e00     movlw	0                  	MOVLW	0x00
0026b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026b8   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0026ba   f04f
0026bc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0026be   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
0026c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0026c2   e1f8     bnz	0x26b4               	BNZ	_00483_DS_
                                           ;	.line	1077; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
0026c4   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
0026c6   6e07     movwf	0x7, 0             	MOVWF	r0x07
0026c8   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
0026ca   6e06     movwf	0x6, 0             	MOVWF	r0x06
0026cc   0e80     movlw	0x80               	MOVLW	0x80
0026ce   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026d0   0e00     movlw	0                  	MOVLW	0x00
0026d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026d4   0e06     movlw	0x6                	MOVLW	0x06
0026d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026d8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e4   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
0026e6   f047
0026e8   0e05     movlw	0x5                	MOVLW	0x05
0026ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1080; TCPIP_Stack/DHCP.c	for ( i = 0; i < 202u; i++ ) UDPPut(0);
0026ec   0eca     movlw	0xca               	MOVLW	0xca
0026ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00486_DS_:
0026f0   0e00     movlw	0                  	MOVLW	0x00
0026f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026f4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0026f6   f04f
0026f8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0026fa   2e05     decfsz	0x5, 0x1, 0       	DECFSZ	r0x05, F
0026fc   d7f9     bra	0x26f0               	BRA	_00486_DS_
                                           ;	.line	1083; TCPIP_Stack/DHCP.c	UDPPut(99);
0026fe   0e63     movlw	0x63               	MOVLW	0x63
002700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002702   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002704   f04f
002706   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1084; TCPIP_Stack/DHCP.c	UDPPut(130);
002708   0e82     movlw	0x82               	MOVLW	0x82
00270a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00270c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00270e   f04f
002710   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1085; TCPIP_Stack/DHCP.c	UDPPut(83);
002712   0e53     movlw	0x53               	MOVLW	0x53
002714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002716   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002718   f04f
00271a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1086; TCPIP_Stack/DHCP.c	UDPPut(99);
00271c   0e63     movlw	0x63               	MOVLW	0x63
00271e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002720   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002722   f04f
002724   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1089; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE);
002726   0e35     movlw	0x35               	MOVLW	0x35
002728   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00272a   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00272c   f04f
00272e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1090; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
002730   0e01     movlw	0x1                	MOVLW	0x01
002732   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002734   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002736   f04f
002738   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1091; TCPIP_Stack/DHCP.c	UDPPut(messageType);
00273a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00273c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00273e   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002740   f04f
002742   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1093; TCPIP_Stack/DHCP.c	if(messageType == DHCP_DISCOVER_MESSAGE)
002744   6a00     clrf	0, 0                	CLRF	r0x00
002746   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002748   0a01     xorlw	0x1                	XORLW	0x01
00274a   e103     bnz	0x2752               	BNZ	_00511_DS_
00274c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00274e   e101     bnz	0x2752               	BNZ	_00511_DS_
002750   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00511_DS_:
002752   5000     movf	0, 0, 0             	MOVF	r0x00, W
002754   e002     bz	0x275a                	BZ	_00467_DS_
002756   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1096; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
002758   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           _00467_DS_:
                                           ;	.line	1100; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing)
00275a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00275c   e024     bz	0x27a6                	BZ	_00469_DS_
00275e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002760   e122     bnz	0x27a6               	BNZ	_00469_DS_
                                           ;	.line	1108; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER);
002762   0e36     movlw	0x36               	MOVLW	0x36
002764   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002766   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002768   f04f
00276a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1109; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER_LEN);
00276c   0e04     movlw	0x4                	MOVLW	0x04
00276e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002770   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002772   f04f
002774   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002776   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 14)
                                           ;	.line	1110; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[3]);
002778   512a     movf	0x2a, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
00277a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00277c   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00277e   f04f
002780   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002782   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 13)
                                           ;	.line	1111; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[2]);
002784   5129     movf	0x29, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
002786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002788   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00278a   f04f
00278c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00278e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 12)
                                           ;	.line	1112; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[1]);
002790   5128     movf	0x28, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
002792   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002794   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002796   f04f
002798   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00279a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1113; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[0]);
00279c   5127     movf	0x27, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
00279e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a0   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027a2   f04f
0027a4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00469_DS_:
                                           ;	.line	1119; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST);
0027a6   0e37     movlw	0x37               	MOVLW	0x37
0027a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027aa   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027ac   f04f
0027ae   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1120; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST_LEN);
0027b0   0e04     movlw	0x4                	MOVLW	0x04
0027b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b4   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027b6   f04f
0027b8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1121; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SUBNET_MASK);
0027ba   0e01     movlw	0x1                	MOVLW	0x01
0027bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027be   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027c0   f04f
0027c2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1122; TCPIP_Stack/DHCP.c	UDPPut(DHCP_ROUTER);
0027c4   0e03     movlw	0x3                	MOVLW	0x03
0027c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027c8   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027ca   f04f
0027cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1123; TCPIP_Stack/DHCP.c	UDPPut(DHCP_DNS);
0027ce   0e06     movlw	0x6                	MOVLW	0x06
0027d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027d2   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027d4   f04f
0027d6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1124; TCPIP_Stack/DHCP.c	UDPPut(DHCP_HOST_NAME);
0027d8   0e0c     movlw	0xc                	MOVLW	0x0c
0027da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027dc   ec54     call	0x9ea8, 0           	CALL	_UDPPut
0027de   f04f
0027e0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1127; TCPIP_Stack/DHCP.c	if( ((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing) || 
0027e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027e4   e002     bz	0x27ea                	BZ	_00475_DS_
0027e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027e8   e00b     bz	0x2800                	BZ	_00471_DS_
                                           _00475_DS_:
                                           ;	.line	1128; TCPIP_Stack/DHCP.c	((messageType == DHCP_DISCOVER_MESSAGE) && 
0027ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0027ec   e027     bz	0x283c                	BZ	_00472_DS_
0027ee   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	1129; TCPIP_Stack/DHCP.c	DHCPClient.tempIPAddress.Val))
0027f0   512b     movf	0x2b, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
0027f2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 16)
0027f4   112c     iorwf	0x2c, 0, 0x1       	IORWF	(_DHCPClient + 16), W, B
0027f6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 17)
0027f8   112d     iorwf	0x2d, 0, 0x1       	IORWF	(_DHCPClient + 17), W, B
0027fa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 18)
0027fc   112e     iorwf	0x2e, 0, 0x1       	IORWF	(_DHCPClient + 18), W, B
0027fe   e01e     bz	0x283c                	BZ	_00472_DS_
                                           _00471_DS_:
                                           ;	.line	1131; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS);
002800   0e32     movlw	0x32               	MOVLW	0x32
002802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002804   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002806   f04f
002808   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1132; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
00280a   0e04     movlw	0x4                	MOVLW	0x04
00280c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00280e   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002810   f04f
002812   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1133; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
002814   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 15)
002816   6e02     movwf	0x2, 0             	MOVWF	r0x02
002818   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
00281a   6e00     movwf	0, 0               	MOVWF	r0x00
00281c   0e80     movlw	0x80               	MOVLW	0x80
00281e   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	1134; TCPIP_Stack/DHCP.c	DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
002820   0e00     movlw	0                  	MOVLW	0x00
002822   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002824   0e04     movlw	0x4                	MOVLW	0x04
002826   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002828   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00282a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00282c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00282e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002830   5000     movf	0, 0, 0             	MOVF	r0x00, W
002832   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002834   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
002836   f047
002838   0e05     movlw	0x5                	MOVLW	0x05
00283a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00472_DS_:
                                           ;	.line	1140; TCPIP_Stack/DHCP.c	UDPPut(DHCP_END_OPTION);
00283c   0eff     movlw	0xff               	MOVLW	0xff
00283e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002840   ec54     call	0x9ea8, 0           	CALL	_UDPPut
002842   f04f
002844   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00476_DS_:
                                           ;	.line	1144; TCPIP_Stack/DHCP.c	while(UDPTxCount < 300u) UDPPut(0); 
002846   0e01     movlw	0x1                	MOVLW	0x01
002848   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00284a   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
00284c   e103     bnz	0x2854               	BNZ	_00512_DS_
00284e   0e2c     movlw	0x2c               	MOVLW	0x2c
002850   0102     movlb	0x2                	BANKSEL	_UDPTxCount
002852   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00512_DS_:
002854   e206     bc	0x2862                	BC	_00478_DS_
002856   0e00     movlw	0                  	MOVLW	0x00
002858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00285a   ec54     call	0x9ea8, 0           	CALL	_UDPPut
00285c   f04f
00285e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002860   d7f2     bra	0x2846               	BRA	_00476_DS_
                                           _00478_DS_:
002862   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	1149; TCPIP_Stack/DHCP.c	MyIP.Val = AppConfig.MyIPAddr.Val;
002864   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
002866   010b     movlb	0xb                	BANKSEL	__DHCPSend_MyIP_1_1
002868   6fb6     movwf	0xb6, 0x1          	MOVWF	__DHCPSend_MyIP_1_1, B
00286a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
00286c   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
00286e   010b     movlb	0xb                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
002870   6fb7     movwf	0xb7, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 1), B
002872   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
002874   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
002876   010b     movlb	0xb                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
002878   6fb8     movwf	0xb8, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 2), B
00287a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
00287c   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
00287e   010b     movlb	0xb                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
002880   6fb9     movwf	0xb9, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 3), B
                                           ;	.line	1150; TCPIP_Stack/DHCP.c	if(!bRenewing) AppConfig.MyIPAddr.Val = 0x00000000;
002882   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002884   e108     bnz	0x2896               	BNZ	_00480_DS_
002886   0108     movlb	0x8                	BANKSEL	_AppConfig
002888   6bc8     clrf	0xc8, 0x1           	CLRF	_AppConfig, B
00288a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
00288c   6bc9     clrf	0xc9, 0x1           	CLRF	(_AppConfig + 1), B
00288e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
002890   6bca     clrf	0xca, 0x1           	CLRF	(_AppConfig + 2), B
002892   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
002894   6bcb     clrf	0xcb, 0x1           	CLRF	(_AppConfig + 3), B
                                           _00480_DS_:
                                           ;	.line	1151; TCPIP_Stack/DHCP.c	UDPFlush();
002896   ec04     call	0x4208, 0           	CALL	_UDPFlush
002898   f021
00289a   010b     movlb	0xb                	BANKSEL	__DHCPSend_MyIP_1_1
                                           ;	.line	1152; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = MyIP.Val;
00289c   51b6     movf	0xb6, 0, 0x1        	MOVF	__DHCPSend_MyIP_1_1, W, B
00289e   0108     movlb	0x8                	BANKSEL	_AppConfig
0028a0   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
0028a2   010b     movlb	0xb                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
0028a4   51b7     movf	0xb7, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 1), W, B
0028a6   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
0028a8   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
0028aa   010b     movlb	0xb                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
0028ac   51b8     movf	0xb8, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 2), W, B
0028ae   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
0028b0   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
0028b2   010b     movlb	0xb                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
0028b4   51b9     movf	0xb9, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 3), W, B
0028b6   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
0028b8   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
0028ba   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0028bc   f008
0028be   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0028c0   f007
0028c2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0028c4   f006
0028c6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0028c8   f005
0028ca   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028cc   f004
0028ce   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028d0   f003
0028d2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028d4   f002
0028d6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028d8   f001
0028da   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028dc   f000
0028de   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028e0   ffd9
0028e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPReceive	code
                                           __DHCPReceive:
                                           ;	.line	720; TCPIP_Stack/DHCP.c	static BYTE _DHCPReceive(void)
00001c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   0102     movlb	0x2                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	766; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
00003e   6b3f     clrf	0x3f, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           ;	.line	768; TCPIP_Stack/DHCP.c	UDPGet(&v);                             // op
000040   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000042   6e01     movwf	0x1, 0             	MOVWF	r0x01
000044   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
000046   6e00     movwf	0, 0               	MOVWF	r0x00
000048   0e80     movlw	0x80               	MOVLW	0x80
00004a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00004c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00004e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000050   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000054   5000     movf	0, 0, 0             	MOVF	r0x00, W
000056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000058   ec03     call	0xa206, 0           	CALL	_UDPGet
00005a   f051
00005c   0e03     movlw	0x3                	MOVLW	0x03
00005e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	771; TCPIP_Stack/DHCP.c	if ( v == BOOT_REPLY )
000060   c241     movff	0x241, 0           	MOVFF	__DHCPReceive_v_1_1, r0x00
000062   f000
000064   6a01     clrf	0x1, 0              	CLRF	r0x01
000066   5000     movf	0, 0, 0             	MOVF	r0x00, W
000068   0a02     xorlw	0x2                	XORLW	0x02
00006a   e102     bnz	0x70                 	BNZ	_00424_DS_
00006c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00006e   e002     bz	0x74                  	BZ	_00425_DS_
                                           _00424_DS_:
000070   ef3a     goto	0x674               	GOTO	_00345_DS_
000072   f003
                                           _00425_DS_:
                                           ;	.line	774; TCPIP_Stack/DHCP.c	for ( i = 0; i < 15u; i++ ) UDPGet(&v);
000074   0e0f     movlw	0xf                	MOVLW	0x0f
000076   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00354_DS_:
000078   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00007a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00007c   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e80     movlw	0x80               	MOVLW	0x80
000082   6e03     movwf	0x3, 0             	MOVWF	r0x03
000084   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000088   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00008a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00008c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00008e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000090   ec03     call	0xa206, 0           	CALL	_UDPGet
000092   f051
000094   0e03     movlw	0x3                	MOVLW	0x03
000096   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000098   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   e1ed     bnz	0x78                 	BNZ	_00354_DS_
00009e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	777; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0000a0   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0000a2   d016     bra	0xd0                 	BRA	_00294_DS_
                                           ;	.line	780; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0000a4   0e04     movlw	0x4                	MOVLW	0x04
0000a6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00357_DS_:
0000a8   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0000aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000ac   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0000ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000b0   0e80     movlw	0x80               	MOVLW	0x80
0000b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c0   ec03     call	0xa206, 0           	CALL	_UDPGet
0000c2   f051
0000c4   0e03     movlw	0x3                	MOVLW	0x03
0000c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000c8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0000ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000cc   e1ed     bnz	0xa8                 	BNZ	_00357_DS_
0000ce   d016     bra	0xfc                 	BRA	_00295_DS_
                                           _00294_DS_:
                                           ;	.line	785; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempIPAddress, 
0000d0   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 15)
0000d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000d4   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
0000d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d8   0e80     movlw	0x80               	MOVLW	0x80
0000da   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	786; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0000dc   0e00     movlw	0                  	MOVLW	0x00
0000de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e0   0e04     movlw	0x4                	MOVLW	0x04
0000e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f0   ecae     call	0x915c, 0           	CALL	_UDPGetArray
0000f2   f048
0000f4   0e05     movlw	0x5                	MOVLW	0x05
0000f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000f8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	787; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.IPAddress = 1;
0000fa   8137     bsf	0x37, 0, 0x1         	BSF	(_DHCPClient + 27), 0, B
                                           _00295_DS_:
                                           ;	.line	791; TCPIP_Stack/DHCP.c	for ( i = 0; i < 8u; i++ ) UDPGet(&v);
0000fc   0e08     movlw	0x8                	MOVLW	0x08
0000fe   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00360_DS_:
000100   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
000106   6e01     movwf	0x1, 0             	MOVWF	r0x01
000108   0e80     movlw	0x80               	MOVLW	0x80
00010a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00010c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00010e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000110   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000114   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000118   ec03     call	0xa206, 0           	CALL	_UDPGet
00011a   f051
00011c   0e03     movlw	0x3                	MOVLW	0x03
00011e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000120   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000122   5000     movf	0, 0, 0             	MOVF	r0x00, W
000124   e1ed     bnz	0x100                	BNZ	_00360_DS_
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
000126   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00361_DS_:
000128   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00012a   f002
00012c   6a03     clrf	0x3, 0              	CLRF	r0x03
00012e   0e00     movlw	0                  	MOVLW	0x00
000130   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000132   e102     bnz	0x138                	BNZ	_00426_DS_
000134   0e06     movlw	0x6                	MOVLW	0x06
000136   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00426_DS_:
000138   e224     bc	0x182                 	BC	_00364_DS_
                                           ;	.line	796; TCPIP_Stack/DHCP.c	UDPGet(&v);
00013a   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00013c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00013e   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
000140   6e02     movwf	0x2, 0             	MOVWF	r0x02
000142   0e80     movlw	0x80               	MOVLW	0x80
000144   6e04     movwf	0x4, 0             	MOVWF	r0x04
000146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00014c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000152   ec03     call	0xa206, 0           	CALL	_UDPGet
000154   f051
000156   0e03     movlw	0x3                	MOVLW	0x03
000158   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	797; TCPIP_Stack/DHCP.c	if ( v != AppConfig.MyMACAddr.v[i])	goto UDPInvalid;
00015a   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
00015c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00015e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000160   6a03     clrf	0x3, 0              	CLRF	r0x03
000162   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
000164   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000166   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000168   ffe9
00016a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00016c   ffea
00016e   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000170   f002
000172   0102     movlb	0x2                	BANKSEL	__DHCPReceive_v_1_1
000174   5141     movf	0x41, 0, 0x1        	MOVF	__DHCPReceive_v_1_1, W, B
000176   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
000178   e002     bz	0x17e                 	BZ	_00428_DS_
00017a   ef71     goto	0x6e2               	GOTO	_00351_DS_
00017c   f003
                                           _00428_DS_:
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
00017e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000180   d7d3     bra	0x128                	BRA	_00361_DS_
                                           _00364_DS_:
                                           ;	.line	802; TCPIP_Stack/DHCP.c	for ( i = 0; i < 206u; i++ ) UDPGet(&v);
000182   0ece     movlw	0xce               	MOVLW	0xce
000184   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00367_DS_:
000186   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
00018c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00018e   0e80     movlw	0x80               	MOVLW	0x80
000190   6e03     movwf	0x3, 0             	MOVWF	r0x03
000192   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00019c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019e   ec03     call	0xa206, 0           	CALL	_UDPGet
0001a0   f051
0001a2   0e03     movlw	0x3                	MOVLW	0x03
0001a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001a6   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0001a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001aa   e1ed     bnz	0x186                	BNZ	_00367_DS_
                                           ;	.line	804; TCPIP_Stack/DHCP.c	lbDone = FALSE;
0001ac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00341_DS_:
                                           ;	.line	810; TCPIP_Stack/DHCP.c	if(!UDPGet(&v))
0001ae   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0001b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001b2   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0001b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001b6   0e80     movlw	0x80               	MOVLW	0x80
0001b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0001ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0001bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c6   ec03     call	0xa206, 0           	CALL	_UDPGet
0001c8   f051
0001ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001cc   0e03     movlw	0x3                	MOVLW	0x03
0001ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0001d4   ef3a     goto	0x674               	GOTO	_00345_DS_
0001d6   f003
                                           ;	.line	816; TCPIP_Stack/DHCP.c	switch(v)
0001d8   c241     movff	0x241, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0001da   f002
0001dc   6a03     clrf	0x3, 0              	CLRF	r0x03
0001de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001e0   0a01     xorlw	0x1                	XORLW	0x01
0001e2   e103     bnz	0x1ea                	BNZ	_00430_DS_
0001e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001e6   e101     bnz	0x1ea                	BNZ	_00430_DS_
0001e8   d058     bra	0x29a                	BRA	_00307_DS_
                                           _00430_DS_:
0001ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ec   0a03     xorlw	0x3                	XORLW	0x03
0001ee   e103     bnz	0x1f6                	BNZ	_00432_DS_
0001f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001f2   e101     bnz	0x1f6                	BNZ	_00432_DS_
0001f4   d09c     bra	0x32e                	BRA	_00314_DS_
                                           _00432_DS_:
0001f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001f8   0a33     xorlw	0x33               	XORLW	0x33
0001fa   e103     bnz	0x202                	BNZ	_00434_DS_
0001fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001fe   e101     bnz	0x202                	BNZ	_00434_DS_
000200   d15a     bra	0x4b6                	BRA	_00329_DS_
                                           _00434_DS_:
000202   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000204   0a35     xorlw	0x35               	XORLW	0x35
000206   e102     bnz	0x20c                	BNZ	_00436_DS_
000208   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00020a   e00e     bz	0x228                 	BZ	_00300_DS_
                                           _00436_DS_:
00020c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00020e   0a36     xorlw	0x36               	XORLW	0x36
000210   e103     bnz	0x218                	BNZ	_00438_DS_
000212   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000214   e101     bnz	0x218                	BNZ	_00438_DS_
000216   d0f2     bra	0x3fc                	BRA	_00324_DS_
                                           _00438_DS_:
000218   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00021a   0aff     xorlw	0xff               	XORLW	0xff
00021c   e103     bnz	0x224                	BNZ	_00440_DS_
00021e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000220   e101     bnz	0x224                	BNZ	_00440_DS_
000222   d146     bra	0x4b0                	BRA	_00328_DS_
                                           _00440_DS_:
000224   ef07     goto	0x60e               	GOTO	_00336_DS_
000226   f003
                                           _00300_DS_:
                                           ;	.line	819; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
000228   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00022a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00022c   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
00022e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000230   0e80     movlw	0x80               	MOVLW	0x80
000232   6e04     movwf	0x4, 0             	MOVWF	r0x04
000234   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000236   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000238   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00023a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00023e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000240   ec03     call	0xa206, 0           	CALL	_UDPGet
000242   f051
000244   0e03     movlw	0x3                	MOVLW	0x03
000246   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	821; TCPIP_Stack/DHCP.c	if ( v == 1u )
000248   c241     movff	0x241, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
00024a   f002
00024c   6a03     clrf	0x3, 0              	CLRF	r0x03
00024e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000250   0a01     xorlw	0x1                	XORLW	0x01
000252   e102     bnz	0x258                	BNZ	_00441_DS_
000254   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000256   e002     bz	0x25c                 	BZ	_00442_DS_
                                           _00441_DS_:
000258   ef71     goto	0x6e2               	GOTO	_00351_DS_
00025a   f003
                                           _00442_DS_:
                                           ;	.line	823; TCPIP_Stack/DHCP.c	UDPGet(&type);                  // Get type
00025c   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_type_1_1)
00025e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000260   0e3f     movlw	0x3f               	MOVLW	LOW(__DHCPReceive_type_1_1)
000262   6e02     movwf	0x2, 0             	MOVWF	r0x02
000264   0e80     movlw	0x80               	MOVLW	0x80
000266   6e04     movwf	0x4, 0             	MOVWF	r0x04
000268   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00026a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00026e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000270   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000274   ec03     call	0xa206, 0           	CALL	_UDPGet
000276   f051
000278   0e03     movlw	0x3                	MOVLW	0x03
00027a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00027c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	827; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived && 
00027e   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000280   ef36     goto	0x66c               	GOTO	_00342_DS_
000282   f003
                                           ;	.line	828; TCPIP_Stack/DHCP.c	(type == DHCP_OFFER_MESSAGE))
000284   c23f     movff	0x23f, 0x2         	MOVFF	__DHCPReceive_type_1_1, r0x02
000286   f002
000288   6a03     clrf	0x3, 0              	CLRF	r0x03
00028a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00028c   0a02     xorlw	0x2                	XORLW	0x02
00028e   e104     bnz	0x298                	BNZ	_00444_DS_
000290   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000292   e102     bnz	0x298                	BNZ	_00444_DS_
000294   ef71     goto	0x6e2               	GOTO	_00351_DS_
000296   f003
                                           _00444_DS_:
                                           ;	.line	835; TCPIP_Stack/DHCP.c	break;
000298   d1e9     bra	0x66c                	BRA	_00342_DS_
                                           _00307_DS_:
                                           ;	.line	838; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
00029a   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00029c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00029e   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002a2   0e80     movlw	0x80               	MOVLW	0x80
0002a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b2   ec03     call	0xa206, 0           	CALL	_UDPGet
0002b4   f051
0002b6   0e03     movlw	0x3                	MOVLW	0x03
0002b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	840; TCPIP_Stack/DHCP.c	if ( v == 4u )
0002ba   c241     movff	0x241, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0002bc   f002
0002be   6a03     clrf	0x3, 0              	CLRF	r0x03
0002c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c2   0a04     xorlw	0x4                	XORLW	0x04
0002c4   e102     bnz	0x2ca                	BNZ	_00445_DS_
0002c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002c8   e002     bz	0x2ce                 	BZ	_00446_DS_
                                           _00445_DS_:
0002ca   ef71     goto	0x6e2               	GOTO	_00351_DS_
0002cc   f003
                                           _00446_DS_:
0002ce   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	843; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0002d0   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0002d2   d016     bra	0x300                	BRA	_00309_DS_
                                           ;	.line	847; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0002d4   0e04     movlw	0x4                	MOVLW	0x04
0002d6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00370_DS_:
0002d8   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0002da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002dc   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002e0   0e80     movlw	0x80               	MOVLW	0x80
0002e2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f0   ec03     call	0xa206, 0           	CALL	_UDPGet
0002f2   f051
0002f4   0e03     movlw	0x3                	MOVLW	0x03
0002f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002f8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002fc   e1ed     bnz	0x2d8                	BNZ	_00370_DS_
0002fe   d1b6     bra	0x66c                	BRA	_00342_DS_
                                           _00309_DS_:
                                           ;	.line	851; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempMask, 
000300   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 23)
000302   6e03     movwf	0x3, 0             	MOVWF	r0x03
000304   0e33     movlw	0x33               	MOVLW	LOW(_DHCPClient + 23)
000306   6e02     movwf	0x2, 0             	MOVWF	r0x02
000308   0e80     movlw	0x80               	MOVLW	0x80
00030a   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	852; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempMask));
00030c   0e00     movlw	0                  	MOVLW	0x00
00030e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000310   0e04     movlw	0x4                	MOVLW	0x04
000312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000314   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000318   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00031a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00031e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000320   ecae     call	0x915c, 0           	CALL	_UDPGetArray
000322   f048
000324   0e05     movlw	0x5                	MOVLW	0x05
000326   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000328   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	853; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Mask = 1;
00032a   8537     bsf	0x37, 0x2, 0x1       	BSF	(_DHCPClient + 27), 2, B
00032c   d19f     bra	0x66c                	BRA	_00342_DS_
                                           _00314_DS_:
                                           ;	.line	861; TCPIP_Stack/DHCP.c	UDPGet(&j);
00032e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000330   6e03     movwf	0x3, 0             	MOVWF	r0x03
000332   0e40     movlw	0x40               	MOVLW	LOW(__DHCPReceive_j_1_1)
000334   6e02     movwf	0x2, 0             	MOVWF	r0x02
000336   0e80     movlw	0x80               	MOVLW	0x80
000338   6e04     movwf	0x4, 0             	MOVWF	r0x04
00033a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00033c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00033e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000346   ec03     call	0xa206, 0           	CALL	_UDPGet
000348   f051
00034a   0e03     movlw	0x3                	MOVLW	0x03
00034c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	863; TCPIP_Stack/DHCP.c	if ( j >= 4u )
00034e   c240     movff	0x240, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
000350   f002
000352   6a03     clrf	0x3, 0              	CLRF	r0x03
000354   0e00     movlw	0                  	MOVLW	0x00
000356   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000358   e102     bnz	0x35e                	BNZ	_00447_DS_
00035a   0e04     movlw	0x4                	MOVLW	0x04
00035c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00447_DS_:
00035e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000360   d1c0     bra	0x6e2                	BRA	_00351_DS_
000362   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	866; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
000364   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000366   d016     bra	0x394                	BRA	_00316_DS_
                                           ;	.line	870; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
000368   0e04     movlw	0x4                	MOVLW	0x04
00036a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00373_DS_:
00036c   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00036e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000370   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
000372   6e02     movwf	0x2, 0             	MOVWF	r0x02
000374   0e80     movlw	0x80               	MOVLW	0x80
000376   6e04     movwf	0x4, 0             	MOVWF	r0x04
000378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00037a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00037e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000380   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000384   ec03     call	0xa206, 0           	CALL	_UDPGet
000386   f051
000388   0e03     movlw	0x3                	MOVLW	0x03
00038a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00038c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00038e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000390   e1ed     bnz	0x36c                	BNZ	_00373_DS_
000392   d016     bra	0x3c0                	BRA	_00320_DS_
                                           _00316_DS_:
                                           ;	.line	874; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempGateway, 
000394   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 19)
000396   6e03     movwf	0x3, 0             	MOVWF	r0x03
000398   0e2f     movlw	0x2f               	MOVLW	LOW(_DHCPClient + 19)
00039a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00039c   0e80     movlw	0x80               	MOVLW	0x80
00039e   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	875; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempGateway));
0003a0   0e00     movlw	0                  	MOVLW	0x00
0003a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a4   0e04     movlw	0x4                	MOVLW	0x04
0003a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b4   ecae     call	0x915c, 0           	CALL	_UDPGetArray
0003b6   f048
0003b8   0e05     movlw	0x5                	MOVLW	0x05
0003ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003bc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	876; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Gateway = 1;
0003be   8337     bsf	0x37, 0x1, 0x1       	BSF	(_DHCPClient + 27), 1, B
                                           _00320_DS_:
                                           ;	.line	882; TCPIP_Stack/DHCP.c	j -= 4;
0003c0   0efc     movlw	0xfc               	MOVLW	0xfc
0003c2   0102     movlb	0x2                	BANKSEL	__DHCPReceive_j_1_1
0003c4   2740     addwf	0x40, 0x1, 0x1     	ADDWF	__DHCPReceive_j_1_1, F, B
                                           ;	.line	883; TCPIP_Stack/DHCP.c	while(j--) UDPGet(&v);
0003c6   c240     movff	0x240, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
0003c8   f002
                                           _00321_DS_:
0003ca   c002     movff	0x2, 0x3           	MOVFF	r0x02, r0x03
0003cc   f003
0003ce   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
0003d0   c002     movff	0x2, 0x240         	MOVFF	r0x02, __DHCPReceive_j_1_1
0003d2   f240
0003d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003d6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0003d8   d144     bra	0x662                	BRA	_00422_DS_
0003da   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003de   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0003e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003e2   0e80     movlw	0x80               	MOVLW	0x80
0003e4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0003e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003f2   ec03     call	0xa206, 0           	CALL	_UDPGet
0003f4   f051
0003f6   0e03     movlw	0x3                	MOVLW	0x03
0003f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003fa   d7e7     bra	0x3ca                	BRA	_00321_DS_
                                           _00324_DS_:
                                           ;	.line	945; TCPIP_Stack/DHCP.c	UDPGet(&v);    // Get len
0003fc   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000400   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
000402   6e03     movwf	0x3, 0             	MOVWF	r0x03
000404   0e80     movlw	0x80               	MOVLW	0x80
000406   6e05     movwf	0x5, 0             	MOVWF	r0x05
000408   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00040a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00040c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00040e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000410   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000414   ec03     call	0xa206, 0           	CALL	_UDPGet
000416   f051
000418   0e03     movlw	0x3                	MOVLW	0x03
00041a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	947; TCPIP_Stack/DHCP.c	if ( v == 4u )
00041c   c241     movff	0x241, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
00041e   f003
000420   6a04     clrf	0x4, 0              	CLRF	r0x04
000422   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000424   0a04     xorlw	0x4                	XORLW	0x04
000426   e102     bnz	0x42c                	BNZ	_00448_DS_
000428   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00042a   e001     bz	0x42e                 	BZ	_00449_DS_
                                           _00448_DS_:
00042c   d15a     bra	0x6e2                	BRA	_00351_DS_
                                           _00449_DS_:
                                           ;	.line	949; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[3]);   // Get the id
00042e   0e0b     movlw	0xb                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 3)
000430   6e04     movwf	0x4, 0             	MOVWF	r0x04
000432   0eb5     movlw	0xb5               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 3)
000434   6e03     movwf	0x3, 0             	MOVWF	r0x03
000436   0e80     movlw	0x80               	MOVLW	0x80
000438   6e05     movwf	0x5, 0             	MOVWF	r0x05
00043a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00043c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00043e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000442   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000446   ec03     call	0xa206, 0           	CALL	_UDPGet
000448   f051
00044a   0e03     movlw	0x3                	MOVLW	0x03
00044c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	950; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[2]);
00044e   0e0b     movlw	0xb                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 2)
000450   6e04     movwf	0x4, 0             	MOVWF	r0x04
000452   0eb4     movlw	0xb4               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 2)
000454   6e03     movwf	0x3, 0             	MOVWF	r0x03
000456   0e80     movlw	0x80               	MOVLW	0x80
000458   6e05     movwf	0x5, 0             	MOVWF	r0x05
00045a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00045c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000462   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000466   ec03     call	0xa206, 0           	CALL	_UDPGet
000468   f051
00046a   0e03     movlw	0x3                	MOVLW	0x03
00046c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	951; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[1]);
00046e   0e0b     movlw	0xb                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 1)
000470   6e04     movwf	0x4, 0             	MOVWF	r0x04
000472   0eb3     movlw	0xb3               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 1)
000474   6e03     movwf	0x3, 0             	MOVWF	r0x03
000476   0e80     movlw	0x80               	MOVLW	0x80
000478   6e05     movwf	0x5, 0             	MOVWF	r0x05
00047a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00047c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00047e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000486   ec03     call	0xa206, 0           	CALL	_UDPGet
000488   f051
00048a   0e03     movlw	0x3                	MOVLW	0x03
00048c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	952; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[0]);
00048e   0e0b     movlw	0xb                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1)
000490   6e04     movwf	0x4, 0             	MOVWF	r0x04
000492   0eb2     movlw	0xb2               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1)
000494   6e03     movwf	0x3, 0             	MOVWF	r0x03
000496   0e80     movlw	0x80               	MOVLW	0x80
000498   6e05     movwf	0x5, 0             	MOVWF	r0x05
00049a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00049c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00049e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a6   ec03     call	0xa206, 0           	CALL	_UDPGet
0004a8   f051
0004aa   0e03     movlw	0x3                	MOVLW	0x03
0004ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0004ae   d0de     bra	0x66c                	BRA	_00342_DS_
                                           _00328_DS_:
                                           ;	.line	958; TCPIP_Stack/DHCP.c	lbDone = TRUE;
0004b0   0e01     movlw	0x1                	MOVLW	0x01
0004b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	959; TCPIP_Stack/DHCP.c	break;
0004b4   d0db     bra	0x66c                	BRA	_00342_DS_
                                           _00329_DS_:
                                           ;	.line	962; TCPIP_Stack/DHCP.c	UDPGet(&v);            // Get len
0004b6   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004ba   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004be   0e80     movlw	0x80               	MOVLW	0x80
0004c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0004c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   ec03     call	0xa206, 0           	CALL	_UDPGet
0004d0   f051
0004d2   0e03     movlw	0x3                	MOVLW	0x03
0004d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/DHCP.c	if ( v == 4u )
0004d6   c241     movff	0x241, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
0004d8   f003
0004da   6a04     clrf	0x4, 0              	CLRF	r0x04
0004dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004de   0a04     xorlw	0x4                	XORLW	0x04
0004e0   e102     bnz	0x4e6                	BNZ	_00450_DS_
0004e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004e4   e001     bz	0x4e8                 	BZ	_00451_DS_
                                           _00450_DS_:
0004e6   d0fd     bra	0x6e2                	BRA	_00351_DS_
                                           _00451_DS_:
0004e8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	967; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0004ea   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0004ec   d015     bra	0x518                	BRA	_00331_DS_
                                           ;	.line	970; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0004ee   0e04     movlw	0x4                	MOVLW	0x04
0004f0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00376_DS_:
0004f2   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004f6   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004fa   0e80     movlw	0x80               	MOVLW	0x80
0004fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000502   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000506   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   ec03     call	0xa206, 0           	CALL	_UDPGet
00050c   f051
00050e   0e03     movlw	0x3                	MOVLW	0x03
000510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000512   2e00     decfsz	0, 0x1, 0         	DECFSZ	r0x00, F
000514   d7ee     bra	0x4f2                	BRA	_00376_DS_
000516   d0aa     bra	0x66c                	BRA	_00342_DS_
                                           _00331_DS_:
                                           ;	.line	974; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[3]));
000518   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 10)
00051a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00051c   0e26     movlw	0x26               	MOVLW	LOW(_DHCPClient + 10)
00051e   6e00     movwf	0, 0               	MOVWF	r0x00
000520   0e80     movlw	0x80               	MOVLW	0x80
000522   6e04     movwf	0x4, 0             	MOVWF	r0x04
000524   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000528   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00052a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00052c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00052e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000530   ec03     call	0xa206, 0           	CALL	_UDPGet
000532   f051
000534   0e03     movlw	0x3                	MOVLW	0x03
000536   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	975; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[2]));
000538   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 9)
00053a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00053c   0e25     movlw	0x25               	MOVLW	LOW(_DHCPClient + 9)
00053e   6e00     movwf	0, 0               	MOVWF	r0x00
000540   0e80     movlw	0x80               	MOVLW	0x80
000542   6e04     movwf	0x4, 0             	MOVWF	r0x04
000544   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000548   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00054a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00054c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000550   ec03     call	0xa206, 0           	CALL	_UDPGet
000552   f051
000554   0e03     movlw	0x3                	MOVLW	0x03
000556   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	976; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[1]));
000558   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 8)
00055a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00055c   0e24     movlw	0x24               	MOVLW	LOW(_DHCPClient + 8)
00055e   6e00     movwf	0, 0               	MOVWF	r0x00
000560   0e80     movlw	0x80               	MOVLW	0x80
000562   6e04     movwf	0x4, 0             	MOVWF	r0x04
000564   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   ec03     call	0xa206, 0           	CALL	_UDPGet
000572   f051
000574   0e03     movlw	0x3                	MOVLW	0x03
000576   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	977; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[0]));
000578   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 7)
00057a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00057c   0e23     movlw	0x23               	MOVLW	LOW(_DHCPClient + 7)
00057e   6e00     movwf	0, 0               	MOVWF	r0x00
000580   0e80     movlw	0x80               	MOVLW	0x80
000582   6e04     movwf	0x4, 0             	MOVWF	r0x04
000584   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000590   ec03     call	0xa206, 0           	CALL	_UDPGet
000592   f051
000594   0e03     movlw	0x3                	MOVLW	0x03
000596   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000598   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
                                           ;	.line	981; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime -= DHCPClient.dwLeaseTime>>5;
00059a   3923     swapf	0x23, 0, 0x1       	SWAPF	(_DHCPClient + 7), W, B
00059c   0b0f     andlw	0xf                	ANDLW	0x0f
00059e   6e00     movwf	0, 0               	MOVWF	r0x00
0005a0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
0005a2   3924     swapf	0x24, 0, 0x1       	SWAPF	(_DHCPClient + 8), W, B
0005a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005a6   0bf0     andlw	0xf0               	ANDLW	0xf0
0005a8   1a03     xorwf	0x3, 0x1, 0        	XORWF	r0x03, F
0005aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005ac   3203     rrcf	0x3, 0x1, 0         	RRCF	r0x03, F
0005ae   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
0005b0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
0005b2   5125     movf	0x25, 0, 0x1        	MOVF	(_DHCPClient + 9), W, B
0005b4   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005b6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0005b8   0bf8     andlw	0xf8               	ANDLW	0xf8
0005ba   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0005bc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
0005be   3925     swapf	0x25, 0, 0x1       	SWAPF	(_DHCPClient + 9), W, B
0005c0   0b0f     andlw	0xf                	ANDLW	0x0f
0005c2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005c4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
0005c6   3926     swapf	0x26, 0, 0x1       	SWAPF	(_DHCPClient + 10), W, B
0005c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005ca   0bf0     andlw	0xf0               	ANDLW	0xf0
0005cc   1a05     xorwf	0x5, 0x1, 0        	XORWF	r0x05, F
0005ce   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005d0   3205     rrcf	0x5, 0x1, 0         	RRCF	r0x05, F
0005d2   3204     rrcf	0x4, 0x1, 0         	RRCF	r0x04, F
0005d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
0005d8   5d23     subwf	0x23, 0, 0x1       	SUBWF	(_DHCPClient + 7), W, B
0005da   6e00     movwf	0, 0               	MOVWF	r0x00
0005dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005de   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
0005e0   5924     subwfb	0x24, 0, 0x1      	SUBWFB	(_DHCPClient + 8), W, B
0005e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005e6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
0005e8   5925     subwfb	0x25, 0, 0x1      	SUBWFB	(_DHCPClient + 9), W, B
0005ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005ee   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
0005f0   5926     subwfb	0x26, 0, 0x1      	SUBWFB	(_DHCPClient + 10), W, B
0005f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005f6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
0005f8   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
0005fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005fc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
0005fe   6f24     movwf	0x24, 0x1          	MOVWF	(_DHCPClient + 8), B
000600   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000602   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
000604   6f25     movwf	0x25, 0x1          	MOVWF	(_DHCPClient + 9), B
000606   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000608   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
00060a   6f26     movwf	0x26, 0x1          	MOVWF	(_DHCPClient + 10), B
00060c   d02f     bra	0x66c                	BRA	_00342_DS_
                                           _00336_DS_:
                                           ;	.line	989; TCPIP_Stack/DHCP.c	UDPGet(&j);       // Get option len
00060e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000610   6e03     movwf	0x3, 0             	MOVWF	r0x03
000612   0e40     movlw	0x40               	MOVLW	LOW(__DHCPReceive_j_1_1)
000614   6e00     movwf	0, 0               	MOVWF	r0x00
000616   0e80     movlw	0x80               	MOVLW	0x80
000618   6e04     movwf	0x4, 0             	MOVWF	r0x04
00061a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000622   5000     movf	0, 0, 0             	MOVF	r0x00, W
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   ec03     call	0xa206, 0           	CALL	_UDPGet
000628   f051
00062a   0e03     movlw	0x3                	MOVLW	0x03
00062c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	990; TCPIP_Stack/DHCP.c	while( j-- )      // Ignore option values
00062e   c240     movff	0x240, 0           	MOVFF	__DHCPReceive_j_1_1, r0x00
000630   f000
                                           _00337_DS_:
000632   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000634   f003
000636   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000638   c000     movff	0, 0x240           	MOVFF	r0x00, __DHCPReceive_j_1_1
00063a   f240
00063c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00063e   e014     bz	0x668                 	BZ	_00423_DS_
                                           ;	.line	991; TCPIP_Stack/DHCP.c	UDPGet(&v);
000640   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000642   6e04     movwf	0x4, 0             	MOVWF	r0x04
000644   0e41     movlw	0x41               	MOVLW	LOW(__DHCPReceive_v_1_1)
000646   6e03     movwf	0x3, 0             	MOVWF	r0x03
000648   0e80     movlw	0x80               	MOVLW	0x80
00064a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00064c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00064e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000650   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000654   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000658   ec03     call	0xa206, 0           	CALL	_UDPGet
00065a   f051
00065c   0e03     movlw	0x3                	MOVLW	0x03
00065e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000660   d7e8     bra	0x632                	BRA	_00337_DS_
                                           _00422_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000662   c002     movff	0x2, 0x240         	MOVFF	r0x02, __DHCPReceive_j_1_1
000664   f240
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
000666   d002     bra	0x66c                	BRA	_00342_DS_
                                           _00423_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000668   c000     movff	0, 0x240           	MOVFF	r0x00, __DHCPReceive_j_1_1
00066a   f240
                                           _00342_DS_:
                                           ;	.line	993; TCPIP_Stack/DHCP.c	} while( !lbDone );
00066c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00066e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000670   efd7     goto	0x1ae               	GOTO	_00341_DS_
000672   f000
                                           _00345_DS_:
                                           ;	.line	997; TCPIP_Stack/DHCP.c	if ( type == DHCP_OFFER_MESSAGE )
000674   c23f     movff	0x23f, 0           	MOVFF	__DHCPReceive_type_1_1, r0x00
000676   f000
000678   6a01     clrf	0x1, 0              	CLRF	r0x01
00067a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00067c   0a02     xorlw	0x2                	XORLW	0x02
00067e   e116     bnz	0x6ac                	BNZ	_00349_DS_
000680   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000682   e001     bz	0x686                 	BZ	_00455_DS_
                                           _00454_DS_:
000684   d013     bra	0x6ac                	BRA	_00349_DS_
                                           _00455_DS_:
000686   010b     movlb	0xb                	BANKSEL	__DHCPReceive_tempServerID_1_1
                                           ;	.line	999; TCPIP_Stack/DHCP.c	DHCPClient.dwServerID = tempServerID.Val;
000688   51b2     movf	0xb2, 0, 0x1        	MOVF	__DHCPReceive_tempServerID_1_1, W, B
00068a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 11)
00068c   6f27     movwf	0x27, 0x1          	MOVWF	(_DHCPClient + 11), B
00068e   010b     movlb	0xb                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
000690   51b3     movf	0xb3, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
000692   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 12)
000694   6f28     movwf	0x28, 0x1          	MOVWF	(_DHCPClient + 12), B
000696   010b     movlb	0xb                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
000698   51b4     movf	0xb4, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
00069a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 13)
00069c   6f29     movwf	0x29, 0x1          	MOVWF	(_DHCPClient + 13), B
00069e   010b     movlb	0xb                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006a0   51b5     movf	0xb5, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006a2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 14)
0006a4   6f2a     movwf	0x2a, 0x1          	MOVWF	(_DHCPClient + 14), B
0006a6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1000; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = TRUE;
0006a8   851e     bsf	0x1e, 0x2, 0x1       	BSF	(_DHCPClient + 2), 2, B
0006aa   d016     bra	0x6d8                	BRA	_00350_DS_
                                           _00349_DS_:
0006ac   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1006; TCPIP_Stack/DHCP.c	if ( DHCPClient.dwServerID != tempServerID.Val )
0006ae   5127     movf	0x27, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
0006b0   010b     movlb	0xb                	BANKSEL	__DHCPReceive_tempServerID_1_1
0006b2   19b2     xorwf	0xb2, 0, 0x1       	XORWF	__DHCPReceive_tempServerID_1_1, W, B
0006b4   e10f     bnz	0x6d4                	BNZ	_00457_DS_
0006b6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 12)
0006b8   5128     movf	0x28, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
0006ba   010b     movlb	0xb                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
0006bc   19b3     xorwf	0xb3, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
0006be   e10a     bnz	0x6d4                	BNZ	_00457_DS_
0006c0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 13)
0006c2   5129     movf	0x29, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
0006c4   010b     movlb	0xb                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
0006c6   19b4     xorwf	0xb4, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
0006c8   e105     bnz	0x6d4                	BNZ	_00457_DS_
0006ca   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 14)
0006cc   512a     movf	0x2a, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
0006ce   010b     movlb	0xb                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006d0   19b5     xorwf	0xb5, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006d2   e002     bz	0x6d8                 	BZ	_00350_DS_
                                           _00457_DS_:
0006d4   0102     movlb	0x2                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1007; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
0006d6   6b3f     clrf	0x3f, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           _00350_DS_:
                                           ;	.line	1010; TCPIP_Stack/DHCP.c	UDPDiscard();  // We are done with this packet
0006d8   ecc8     call	0xad90, 0           	CALL	_UDPDiscard
0006da   f056
0006dc   0102     movlb	0x2                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1011; TCPIP_Stack/DHCP.c	return type;
0006de   513f     movf	0x3f, 0, 0x1        	MOVF	__DHCPReceive_type_1_1, W, B
0006e0   d003     bra	0x6e8                	BRA	_00377_DS_
                                           _00351_DS_:
                                           ;	.line	1014; TCPIP_Stack/DHCP.c	UDPDiscard();
0006e2   ecc8     call	0xad90, 0           	CALL	_UDPDiscard
0006e4   f056
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
0006e6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00377_DS_:
0006e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006ea   f005
0006ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006ee   f004
0006f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006f2   f003
0006f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006f6   f002
0006f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006fa   f001
0006fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006fe   f000
000700   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000702   ffd9
000704   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPTask	code
                                           _DHCPTask:
                                           ;	.line	485; TCPIP_Stack/DHCP.c	void DHCPTask(void)
000706   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000708   ffe5
00070a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00070c   ffd9
00070e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000710   ffe5
000712   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000714   ffe5
000716   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000718   ffe5
00071a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00071c   ffe5
00071e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000720   ffe5
000722   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000724   ffe5
000726   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000728   ffe5
00072a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00072c   ffe5
00072e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000730   ffe5
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000732   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00227_DS_:
000734   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000736   f001
000738   6a02     clrf	0x2, 0              	CLRF	r0x02
00073a   0e00     movlw	0                  	MOVLW	0x00
00073c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00073e   e102     bnz	0x744                	BNZ	_00259_DS_
000740   0e01     movlw	0x1                	MOVLW	0x01
000742   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
000744   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000746   efe3     goto	0xdc6               	GOTO	_00231_DS_
000748   f006
                                           ;	.line	491; TCPIP_Stack/DHCP.c	LoadState(i);
00074a   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	492; TCPIP_Stack/DHCP.c	switch(DHCPClient.smState)
00074c   cb1d     movff	0xb1d, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
00074e   f001
000750   0e0d     movlw	0xd                	MOVLW	0x0d
000752   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000754   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000756   efe0     goto	0xdc0               	GOTO	_00229_DS_
000758   f006
00075a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00075c   ffe5
00075e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000760   ffe5
000762   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000764   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000766   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
000768   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00076a   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
00076c   0bfc     andlw	0xfc               	ANDLW	0xfc
00076e   6e09     movwf	0x9, 0             	MOVWF	r0x09
000770   0e00     movlw	0                  	MOVLW	UPPER(_00261_DS_)
000772   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000774   0e07     movlw	0x7                	MOVLW	HIGH(_00261_DS_)
000776   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000778   0e90     movlw	0x90               	MOVLW	LOW(_00261_DS_)
00077a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00077c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00077e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000780   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000782   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000784   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000786   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000788   f00a
00078a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00078c   f009
00078e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00261_DS_:
000790   efe2     goto	0x7c4               	GOTO	_00169_DS_
000792   f003
000794   efe4     goto	0x7c8               	GOTO	_00170_DS_
000796   f003
000798   ef07     goto	0x80e               	GOTO	_00173_DS_
00079a   f004
00079c   ef78     goto	0x8f0               	GOTO	_00178_DS_
00079e   f004
0007a0   efbf     goto	0x97e               	GOTO	_00185_DS_
0007a2   f004
0007a4   ef0a     goto	0xa14               	GOTO	_00188_DS_
0007a6   f005
0007a8   efb1     goto	0xb62               	GOTO	_00202_DS_
0007aa   f005
0007ac   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007ae   f006
0007b0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007b2   f006
0007b4   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007b6   f006
0007b8   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007ba   f006
0007bc   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007be   f006
0007c0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007c2   f006
                                           _00169_DS_:
                                           ;	.line	496; TCPIP_Stack/DHCP.c	break;
0007c4   efe0     goto	0xdc0               	GOTO	_00229_DS_
0007c6   f006
                                           _00170_DS_:
                                           ;	.line	501; TCPIP_Stack/DHCP.c	UDPOpen(DHCP_CLIENT_PORT, NULL, DHCP_SERVER_PORT);
0007c8   0e00     movlw	0                  	MOVLW	0x00
0007ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007cc   0e43     movlw	0x43               	MOVLW	0x43
0007ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d0   0e00     movlw	0                  	MOVLW	0x00
0007d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d4   0e00     movlw	0                  	MOVLW	0x00
0007d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d8   0e00     movlw	0                  	MOVLW	0x00
0007da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007dc   0e00     movlw	0                  	MOVLW	0x00
0007de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e0   0e44     movlw	0x44               	MOVLW	0x44
0007e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e4   eccc     call	0x4f98, 0           	CALL	_UDPOpen
0007e6   f027
0007e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007ea   0e07     movlw	0x7                	MOVLW	0x07
0007ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007f0   010b     movlb	0xb                	BANKSEL	_DHCPClient
0007f2   6f1c     movwf	0x1c, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	502; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
0007f4   cb1c     movff	0xb1c, 0x1         	MOVFF	_DHCPClient, r0x01
0007f6   f001
0007f8   6a02     clrf	0x2, 0              	CLRF	r0x02
0007fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007fc   0aff     xorlw	0xff               	XORLW	0xff
0007fe   e104     bnz	0x808                	BNZ	_00263_DS_
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   e102     bnz	0x808                	BNZ	_00263_DS_
000804   efe0     goto	0xdc0               	GOTO	_00229_DS_
000806   f006
                                           _00263_DS_:
                                           ;	.line	504; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000808   0e02     movlw	0x2                	MOVLW	0x02
00080a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00080c   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00173_DS_:
                                           ;	.line	512; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime = 60;
00080e   0e3c     movlw	0x3c               	MOVLW	0x3c
000810   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
000812   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
000814   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
000816   6b24     clrf	0x24, 0x1           	CLRF	(_DHCPClient + 8), B
000818   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
00081a   6b25     clrf	0x25, 0x1           	CLRF	(_DHCPClient + 9), B
00081c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
00081e   6b26     clrf	0x26, 0x1           	CLRF	(_DHCPClient + 10), B
000820   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	513; TCPIP_Stack/DHCP.c	DHCPClient.validValues.val = 0x00;
000822   6b37     clrf	0x37, 0x1           	CLRF	(_DHCPClient + 27), B
000824   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	514; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;	
000826   911e     bcf	0x1e, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
000828   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	515; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
00082a   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	519; TCPIP_Stack/DHCP.c	if(!MACIsLinked()) break;
00082c   ecb4     call	0xab68, 0           	CALL	_MACIsLinked
00082e   f055
000830   6e01     movwf	0x1, 0             	MOVWF	r0x01
000832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000834   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000836   efe0     goto	0xdc0               	GOTO	_00229_DS_
000838   f006
00083a   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	522; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 300u) break;
00083c   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
00083e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000840   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
000842   f050
000844   6e01     movwf	0x1, 0             	MOVWF	r0x01
000846   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000848   f002
00084a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00084c   0e01     movlw	0x1                	MOVLW	0x01
00084e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000850   e102     bnz	0x856                	BNZ	_00264_DS_
000852   0e2c     movlw	0x2c               	MOVLW	0x2c
000854   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00264_DS_:
000856   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000858   efe0     goto	0xdc0               	GOTO	_00229_DS_
00085a   f006
                                           ;	.line	528; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode ^= 1;
00085c   6a01     clrf	0x1, 0              	CLRF	r0x01
00085e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
000860   b91e     btfsc	0x1e, 0x4, 0x1     	BTFSC	(_DHCPClient + 2), 4, B
000862   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000864   0e01     movlw	0x1                	MOVLW	0x01
000866   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
000868   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00086a   0b01     andlw	0x1                	ANDLW	0x01
00086c   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
00086e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000870   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
000872   511e     movf	0x1e, 0, 0x1        	MOVF	(_DHCPClient + 2), W, B
000874   0bef     andlw	0xef               	ANDLW	0xef
000876   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000878   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
00087a   6f1e     movwf	0x1e, 0x1          	MOVWF	(_DHCPClient + 2), B
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00087c   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	533; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
00087e   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000880   0d0e     mullw	0xe                	MULLW	0x0e
000882   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000884   f001
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00088a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00088c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00088e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	534; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
000890   0e00     movlw	0                  	MOVLW	0x00
000892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000894   0e0a     movlw	0xa                	MOVLW	0x0a
000896   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000898   0eff     movlw	0xff               	MOVLW	0xff
00089a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a4   ec49     call	0x9692, 0           	CALL	_memset
0008a6   f04b
0008a8   0e05     movlw	0x5                	MOVLW	0x05
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_DISCOVER_MESSAGE, FALSE);
0008ac   0e00     movlw	0                  	MOVLW	0x00
0008ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b0   0e01     movlw	0x1                	MOVLW	0x01
0008b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b4   ecc2     call	0x2584, 0           	CALL	__DHCPSend
0008b6   f012
0008b8   0e02     movlw	0x2                	MOVLW	0x02
0008ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	540; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0008bc   ec01     call	0xae02, 0           	CALL	_TickGet
0008be   f057
0008c0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c2   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008c4   f002
0008c6   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0008c8   f003
0008ca   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0008cc   f004
0008ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
0008d2   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
0008d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008d6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
0008d8   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
0008da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008dc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
0008de   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
0008e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008e2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
0008e4   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	541; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_OFFER;
0008e6   0e03     movlw	0x3                	MOVLW	0x03
0008e8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
0008ea   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	542; TCPIP_Stack/DHCP.c	break;
0008ec   efe0     goto	0xdc0               	GOTO	_00229_DS_
0008ee   f006
                                           _00178_DS_:
0008f0   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	546; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
0008f2   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   ec38     call	0xa670, 0           	CALL	_UDPIsGetReady
0008f8   f053
0008fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008fc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008fe   f002
000900   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000902   0e00     movlw	0                  	MOVLW	0x00
000904   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000906   e102     bnz	0x90c                	BNZ	_00266_DS_
000908   0efa     movlw	0xfa               	MOVLW	0xfa
00090a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00266_DS_:
00090c   e228     bc	0x95e                 	BC	_00182_DS_
                                           ;	.line	550; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
00090e   ec01     call	0xae02, 0           	CALL	_TickGet
000910   f057
000912   6e01     movwf	0x1, 0             	MOVWF	r0x01
000914   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000916   f002
000918   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00091a   f003
00091c   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00091e   f004
000920   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000922   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000924   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000926   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000928   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
00092a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
00092c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
00092e   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000930   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000932   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000934   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000936   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000938   0e00     movlw	0                  	MOVLW	0x00
00093a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00093c   e108     bnz	0x94e                	BNZ	_00267_DS_
00093e   0e01     movlw	0x1                	MOVLW	0x01
000940   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000942   e105     bnz	0x94e                	BNZ	_00267_DS_
000944   0e3d     movlw	0x3d               	MOVLW	0x3d
000946   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000948   e102     bnz	0x94e                	BNZ	_00267_DS_
00094a   0ee4     movlw	0xe4               	MOVLW	0xe4
00094c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00267_DS_:
00094e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000950   efe0     goto	0xdc0               	GOTO	_00229_DS_
000952   f006
                                           ;	.line	551; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000954   0e02     movlw	0x2                	MOVLW	0x02
000956   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000958   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	552; TCPIP_Stack/DHCP.c	break;
00095a   efe0     goto	0xdc0               	GOTO	_00229_DS_
00095c   f006
                                           _00182_DS_:
00095e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	557; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bDHCPServerDetected = TRUE;
000960   871e     bsf	0x1e, 0x3, 0x1       	BSF	(_DHCPClient + 2), 3, B
                                           ;	.line	560; TCPIP_Stack/DHCP.c	if(_DHCPReceive() != DHCP_OFFER_MESSAGE) break;
000962   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000964   f000
000966   6e01     movwf	0x1, 0             	MOVWF	r0x01
000968   6a02     clrf	0x2, 0              	CLRF	r0x02
00096a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00096c   0a02     xorlw	0x2                	XORLW	0x02
00096e   e102     bnz	0x974                	BNZ	_00268_DS_
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   e002     bz	0x978                 	BZ	_00269_DS_
                                           _00268_DS_:
000974   efe0     goto	0xdc0               	GOTO	_00229_DS_
000976   f006
                                           _00269_DS_:
                                           ;	.line	561; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_REQUEST;
000978   0e04     movlw	0x4                	MOVLW	0x04
00097a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00097c   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00185_DS_:
00097e   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	565; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000980   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
000986   f050
000988   6e01     movwf	0x1, 0             	MOVWF	r0x01
00098a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00098c   f002
00098e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000990   0e01     movlw	0x1                	MOVLW	0x01
000992   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000994   e102     bnz	0x99a                	BNZ	_00270_DS_
000996   0e02     movlw	0x2                	MOVLW	0x02
000998   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00270_DS_:
00099a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00099c   efe0     goto	0xdc0               	GOTO	_00229_DS_
00099e   f006
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0009a0   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	572; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
0009a2   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
0009a4   0d0e     mullw	0xe                	MULLW	0x0e
0009a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0009a8   f001
0009aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0009ac   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0009ae   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0009b0   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0009b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	573; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
0009b4   0e00     movlw	0                  	MOVLW	0x00
0009b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b8   0e0a     movlw	0xa                	MOVLW	0x0a
0009ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009bc   0eff     movlw	0xff               	MOVLW	0xff
0009be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c8   ec49     call	0x9692, 0           	CALL	_memset
0009ca   f04b
0009cc   0e05     movlw	0x5                	MOVLW	0x05
0009ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	576; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, FALSE);	
0009d0   0e00     movlw	0                  	MOVLW	0x00
0009d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d4   0e03     movlw	0x3                	MOVLW	0x03
0009d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d8   ecc2     call	0x2584, 0           	CALL	__DHCPSend
0009da   f012
0009dc   0e02     movlw	0x2                	MOVLW	0x02
0009de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0009e0   ec01     call	0xae02, 0           	CALL	_TickGet
0009e2   f057
0009e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009e6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0009e8   f002
0009ea   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0009ec   f003
0009ee   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0009f0   f004
0009f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009f4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
0009f6   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
0009f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009fa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
0009fc   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
0009fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a00   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000a02   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a06   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000a08   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	580; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_REQUEST_ACK;
000a0a   0e05     movlw	0x5                	MOVLW	0x05
000a0c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000a0e   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	581; TCPIP_Stack/DHCP.c	break;
000a10   efe0     goto	0xdc0               	GOTO	_00229_DS_
000a12   f006
                                           _00188_DS_:
000a14   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	585; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000a16   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   ec38     call	0xa670, 0           	CALL	_UDPIsGetReady
000a1c   f053
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a22   f002
000a24   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000a26   0e00     movlw	0                  	MOVLW	0x00
000a28   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a2a   e102     bnz	0xa30                	BNZ	_00271_DS_
000a2c   0efa     movlw	0xfa               	MOVLW	0xfa
000a2e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00271_DS_:
000a30   e226     bc	0xa7e                 	BC	_00192_DS_
                                           ;	.line	589; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
000a32   ec01     call	0xae02, 0           	CALL	_TickGet
000a34   f057
000a36   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a38   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a3a   f002
000a3c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000a3e   f003
000a40   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000a42   f004
000a44   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000a46   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000a48   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000a4a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000a4c   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000a4e   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000a50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000a52   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000a54   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000a56   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000a58   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000a5a   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000a5c   0e00     movlw	0                  	MOVLW	0x00
000a5e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000a60   e108     bnz	0xa72                	BNZ	_00272_DS_
000a62   0e01     movlw	0x1                	MOVLW	0x01
000a64   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000a66   e105     bnz	0xa72                	BNZ	_00272_DS_
000a68   0e3d     movlw	0x3d               	MOVLW	0x3d
000a6a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a6c   e102     bnz	0xa72                	BNZ	_00272_DS_
000a6e   0ee4     movlw	0xe4               	MOVLW	0xe4
000a70   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00272_DS_:
000a72   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a74   d1a5     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	590; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000a76   0e02     movlw	0x2                	MOVLW	0x02
000a78   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000a7a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	591; TCPIP_Stack/DHCP.c	break;
000a7c   d1a1     bra	0xdc0                	BRA	_00229_DS_
                                           _00192_DS_:
                                           ;	.line	595; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000a7e   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000a80   f000
000a82   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a84   6a02     clrf	0x2, 0              	CLRF	r0x02
000a86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a88   0a05     xorlw	0x5                	XORLW	0x05
000a8a   e102     bnz	0xa90                	BNZ	_00274_DS_
000a8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a8e   e007     bz	0xa9e                 	BZ	_00193_DS_
                                           _00274_DS_:
000a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a92   0a06     xorlw	0x6                	XORLW	0x06
000a94   e103     bnz	0xa9c                	BNZ	_00276_DS_
000a96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a98   e101     bnz	0xa9c                	BNZ	_00276_DS_
000a9a   d05f     bra	0xb5a                	BRA	_00200_DS_
                                           _00276_DS_:
000a9c   d191     bra	0xdc0                	BRA	_00229_DS_
                                           _00193_DS_:
000a9e   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	598; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000aa0   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   ec7a     call	0xa0f4, 0           	CALL	_UDPClose
000aa6   f050
000aa8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000aaa   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	599; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000aac   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	600; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000aae   ec01     call	0xae02, 0           	CALL	_TickGet
000ab0   f057
000ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ab6   f002
000ab8   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000aba   f003
000abc   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000abe   f004
000ac0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000ac4   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000ac6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000aca   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000acc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ace   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000ad0   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000ad6   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	601; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000ad8   0e06     movlw	0x6                	MOVLW	0x06
000ada   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000adc   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000ade   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	602; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000ae0   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
000ae2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	603; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = TRUE;	
000ae4   811e     bsf	0x1e, 0, 0x1         	BSF	(_DHCPClient + 2), 0, B
000ae6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	605; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.IPAddress)
000ae8   a137     btfss	0x37, 0, 0x1       	BTFSS	(_DHCPClient + 27), 0, B
000aea   d010     bra	0xb0c                	BRA	_00195_DS_
000aec   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	606; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = DHCPClient.tempIPAddress.Val;
000aee   512b     movf	0x2b, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
000af0   0108     movlb	0x8                	BANKSEL	_AppConfig
000af2   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
000af4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 16)
000af6   512c     movf	0x2c, 0, 0x1        	MOVF	(_DHCPClient + 16), W, B
000af8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
000afa   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
000afc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 17)
000afe   512d     movf	0x2d, 0, 0x1        	MOVF	(_DHCPClient + 17), W, B
000b00   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
000b02   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
000b04   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 18)
000b06   512e     movf	0x2e, 0, 0x1        	MOVF	(_DHCPClient + 18), W, B
000b08   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
000b0a   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
                                           _00195_DS_:
000b0c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	607; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Mask)
000b0e   a537     btfss	0x37, 0x2, 0x1     	BTFSS	(_DHCPClient + 27), 2, B
000b10   d010     bra	0xb32                	BRA	_00197_DS_
000b12   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 23)
                                           ;	.line	608; TCPIP_Stack/DHCP.c	AppConfig.MyMask.Val = DHCPClient.tempMask.Val;
000b14   5133     movf	0x33, 0, 0x1        	MOVF	(_DHCPClient + 23), W, B
000b16   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
000b18   6fcc     movwf	0xcc, 0x1          	MOVWF	(_AppConfig + 4), B
000b1a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 24)
000b1c   5134     movf	0x34, 0, 0x1        	MOVF	(_DHCPClient + 24), W, B
000b1e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
000b20   6fcd     movwf	0xcd, 0x1          	MOVWF	(_AppConfig + 5), B
000b22   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 25)
000b24   5135     movf	0x35, 0, 0x1        	MOVF	(_DHCPClient + 25), W, B
000b26   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
000b28   6fce     movwf	0xce, 0x1          	MOVWF	(_AppConfig + 6), B
000b2a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 26)
000b2c   5136     movf	0x36, 0, 0x1        	MOVF	(_DHCPClient + 26), W, B
000b2e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
000b30   6fcf     movwf	0xcf, 0x1          	MOVWF	(_AppConfig + 7), B
                                           _00197_DS_:
000b32   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	609; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Gateway)
000b34   a337     btfss	0x37, 0x1, 0x1     	BTFSS	(_DHCPClient + 27), 1, B
000b36   d144     bra	0xdc0                	BRA	_00229_DS_
000b38   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 19)
                                           ;	.line	610; TCPIP_Stack/DHCP.c	AppConfig.MyGateway.Val = DHCPClient.tempGateway.Val;
000b3a   512f     movf	0x2f, 0, 0x1        	MOVF	(_DHCPClient + 19), W, B
000b3c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 8)
000b3e   6fd0     movwf	0xd0, 0x1          	MOVWF	(_AppConfig + 8), B
000b40   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 20)
000b42   5130     movf	0x30, 0, 0x1        	MOVF	(_DHCPClient + 20), W, B
000b44   0108     movlb	0x8                	BANKSEL	(_AppConfig + 9)
000b46   6fd1     movwf	0xd1, 0x1          	MOVWF	(_AppConfig + 9), B
000b48   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 21)
000b4a   5131     movf	0x31, 0, 0x1        	MOVF	(_DHCPClient + 21), W, B
000b4c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 10)
000b4e   6fd2     movwf	0xd2, 0x1          	MOVWF	(_AppConfig + 10), B
000b50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 22)
000b52   5132     movf	0x32, 0, 0x1        	MOVF	(_DHCPClient + 22), W, B
000b54   0108     movlb	0x8                	BANKSEL	(_AppConfig + 11)
000b56   6fd3     movwf	0xd3, 0x1          	MOVWF	(_AppConfig + 11), B
                                           ;	.line	624; TCPIP_Stack/DHCP.c	break;
000b58   d133     bra	0xdc0                	BRA	_00229_DS_
                                           _00200_DS_:
                                           ;	.line	627; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000b5a   0e02     movlw	0x2                	MOVLW	0x02
000b5c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000b5e   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	630; TCPIP_Stack/DHCP.c	break;
000b60   d12f     bra	0xdc0                	BRA	_00229_DS_
                                           _00202_DS_:
                                           ;	.line	633; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer < TICK_SECOND) break;
000b62   ec01     call	0xae02, 0           	CALL	_TickGet
000b64   f057
000b66   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b68   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b6a   f002
000b6c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b6e   f003
000b70   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b72   f004
000b74   cb1f     movff	0xb1f, 0x5         	MOVFF	(_DHCPClient + 3), r0x05
000b76   f005
000b78   cb20     movff	0xb20, 0x6         	MOVFF	(_DHCPClient + 4), r0x06
000b7a   f006
000b7c   cb21     movff	0xb21, 0x7         	MOVFF	(_DHCPClient + 5), r0x07
000b7e   f007
000b80   cb22     movff	0xb22, 0x8         	MOVFF	(_DHCPClient + 6), r0x08
000b82   f008
000b84   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b86   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000b88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b8a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000b8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b8e   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000b90   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000b92   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000b94   0e00     movlw	0                  	MOVLW	0x00
000b96   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000b98   e108     bnz	0xbaa                	BNZ	_00277_DS_
000b9a   0e00     movlw	0                  	MOVLW	0x00
000b9c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b9e   e105     bnz	0xbaa                	BNZ	_00277_DS_
000ba0   0e9e     movlw	0x9e               	MOVLW	0x9e
000ba2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000ba4   e102     bnz	0xbaa                	BNZ	_00277_DS_
000ba6   0ef2     movlw	0xf2               	MOVLW	0xf2
000ba8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00277_DS_:
000baa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000bac   d109     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	637; TCPIP_Stack/DHCP.c	if(DHCPClient.dwLeaseTime >= 2ul)
000bae   cb23     movff	0xb23, 0x1         	MOVFF	(_DHCPClient + 7), r0x01
000bb0   f001
000bb2   cb24     movff	0xb24, 0x2         	MOVFF	(_DHCPClient + 8), r0x02
000bb4   f002
000bb6   cb25     movff	0xb25, 0x3         	MOVFF	(_DHCPClient + 9), r0x03
000bb8   f003
000bba   cb26     movff	0xb26, 0x4         	MOVFF	(_DHCPClient + 10), r0x04
000bbc   f004
000bbe   0e00     movlw	0                  	MOVLW	0x00
000bc0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000bc2   e108     bnz	0xbd4                	BNZ	_00278_DS_
000bc4   0e00     movlw	0                  	MOVLW	0x00
000bc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000bc8   e105     bnz	0xbd4                	BNZ	_00278_DS_
000bca   0e00     movlw	0                  	MOVLW	0x00
000bcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000bce   e102     bnz	0xbd4                	BNZ	_00278_DS_
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00278_DS_:
000bd4   e329     bnc	0xc28                	BNC	_00206_DS_
                                           ;	.line	639; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer += TICK_SECOND;
000bd6   0ef2     movlw	0xf2               	MOVLW	0xf2
000bd8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000bda   0e9e     movlw	0x9e               	MOVLW	0x9e
000bdc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000bde   0e00     movlw	0                  	MOVLW	0x00
000be0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000be2   0e00     movlw	0                  	MOVLW	0x00
000be4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000be6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000bea   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000bec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bee   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000bf0   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000bf2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bf4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000bf6   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000bf8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bfa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000bfc   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	640; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime--;
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c06   0eff     movlw	0xff               	MOVLW	0xff
000c08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c0a   0eff     movlw	0xff               	MOVLW	0xff
000c0c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000c0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c10   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
000c12   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
000c14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c16   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
000c18   6f24     movwf	0x24, 0x1          	MOVWF	(_DHCPClient + 8), B
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
000c1e   6f25     movwf	0x25, 0x1          	MOVWF	(_DHCPClient + 9), B
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
000c24   6f26     movwf	0x26, 0x1          	MOVWF	(_DHCPClient + 10), B
                                           ;	.line	641; TCPIP_Stack/DHCP.c	break;
000c26   d0cc     bra	0xdc0                	BRA	_00229_DS_
                                           _00206_DS_:
                                           ;	.line	646; TCPIP_Stack/DHCP.c	NULL, DHCP_SERVER_PORT);
000c28   0e00     movlw	0                  	MOVLW	0x00
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e43     movlw	0x43               	MOVLW	0x43
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   0e00     movlw	0                  	MOVLW	0x00
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   0e00     movlw	0                  	MOVLW	0x00
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   0e00     movlw	0                  	MOVLW	0x00
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c40   0e44     movlw	0x44               	MOVLW	0x44
000c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c44   eccc     call	0x4f98, 0           	CALL	_UDPOpen
000c46   f027
000c48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c4a   0e07     movlw	0x7                	MOVLW	0x07
000c4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c50   010b     movlb	0xb                	BANKSEL	_DHCPClient
000c52   6f1c     movwf	0x1c, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	647; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
000c54   cb1c     movff	0xb1c, 0x1         	MOVFF	_DHCPClient, r0x01
000c56   f001
000c58   6a02     clrf	0x2, 0              	CLRF	r0x02
000c5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c5c   0aff     xorlw	0xff               	XORLW	0xff
000c5e   e103     bnz	0xc66                	BNZ	_00280_DS_
000c60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c62   e101     bnz	0xc66                	BNZ	_00280_DS_
000c64   d0ad     bra	0xdc0                	BRA	_00229_DS_
                                           _00280_DS_:
                                           ;	.line	649; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_RENEW;
000c66   0e07     movlw	0x7                	MOVLW	0x07
000c68   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000c6a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00211_DS_:
000c6c   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	655; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000c6e   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ec32     call	0xa064, 0           	CALL	_UDPIsPutReady
000c74   f050
000c76   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c78   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c7a   f002
000c7c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000c7e   0e01     movlw	0x1                	MOVLW	0x01
000c80   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c82   e102     bnz	0xc88                	BNZ	_00281_DS_
000c84   0e02     movlw	0x2                	MOVLW	0x02
000c86   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00281_DS_:
000c88   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c8a   d09a     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	658; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, TRUE);
000c8c   0e01     movlw	0x1                	MOVLW	0x01
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   0e03     movlw	0x3                	MOVLW	0x03
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ecc2     call	0x2584, 0           	CALL	__DHCPSend
000c96   f012
000c98   0e02     movlw	0x2                	MOVLW	0x02
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c9c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	659; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
000c9e   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	662; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000ca0   ec01     call	0xae02, 0           	CALL	_TickGet
000ca2   f057
000ca4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ca8   f002
000caa   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000cac   f003
000cae   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000cb0   f004
000cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000cb6   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000cb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cba   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000cbc   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000cbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000cc2   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000cc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000cc8   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	663; TCPIP_Stack/DHCP.c	DHCPClient.smState++;
000cca   cb1d     movff	0xb1d, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
000ccc   f001
000cce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cd2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000cd4   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	664; TCPIP_Stack/DHCP.c	break;
000cd6   d074     bra	0xdc0                	BRA	_00229_DS_
                                           _00216_DS_:
000cd8   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	670; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000cda   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ec38     call	0xa670, 0           	CALL	_UDPIsGetReady
000ce0   f053
000ce2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ce6   f002
000ce8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cea   0e00     movlw	0                  	MOVLW	0x00
000cec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000cee   e102     bnz	0xcf4                	BNZ	_00282_DS_
000cf0   0efa     movlw	0xfa               	MOVLW	0xfa
000cf2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00282_DS_:
000cf4   e230     bc	0xd56                 	BC	_00222_DS_
                                           ;	.line	674; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >=  DHCP_TIMEOUT)
000cf6   ec01     call	0xae02, 0           	CALL	_TickGet
000cf8   f057
000cfa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cfc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000cfe   f002
000d00   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d02   f003
000d04   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d06   f004
000d08   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000d0a   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000d0c   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000d0e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000d10   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000d12   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000d14   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000d16   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000d18   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000d1a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000d1c   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000d1e   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000d20   0e00     movlw	0                  	MOVLW	0x00
000d22   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000d24   e108     bnz	0xd36                	BNZ	_00283_DS_
000d26   0e01     movlw	0x1                	MOVLW	0x01
000d28   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000d2a   e105     bnz	0xd36                	BNZ	_00283_DS_
000d2c   0e3d     movlw	0x3d               	MOVLW	0x3d
000d2e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000d30   e102     bnz	0xd36                	BNZ	_00283_DS_
000d32   0ee4     movlw	0xe4               	MOVLW	0xe4
000d34   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00283_DS_:
000d36   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d38   d043     bra	0xdc0                	BRA	_00229_DS_
000d3a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	676; TCPIP_Stack/DHCP.c	if(++DHCPClient.smState > SM_DHCP_GET_RENEW_ACK3)
000d3c   291d     incf	0x1d, 0, 0x1        	INCF	(_DHCPClient + 1), W, B
000d3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d42   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000d44   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000d46   0e0d     movlw	0xd                	MOVLW	0x0d
000d48   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000d4a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d4c   d039     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	677; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000d4e   0e02     movlw	0x2                	MOVLW	0x02
000d50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000d52   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	679; TCPIP_Stack/DHCP.c	break;
000d54   d035     bra	0xdc0                	BRA	_00229_DS_
                                           _00222_DS_:
                                           ;	.line	683; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000d56   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000d58   f000
000d5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d5c   6a02     clrf	0x2, 0              	CLRF	r0x02
000d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d60   0a05     xorlw	0x5                	XORLW	0x05
000d62   e102     bnz	0xd68                	BNZ	_00286_DS_
000d64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d66   e006     bz	0xd74                 	BZ	_00223_DS_
                                           _00286_DS_:
000d68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d6a   0a06     xorlw	0x6                	XORLW	0x06
000d6c   e129     bnz	0xdc0                	BNZ	_00229_DS_
000d6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d70   e024     bz	0xdba                 	BZ	_00224_DS_
                                           _00288_DS_:
000d72   d026     bra	0xdc0                	BRA	_00229_DS_
                                           _00223_DS_:
000d74   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	686; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000d76   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   ec7a     call	0xa0f4, 0           	CALL	_UDPClose
000d7c   f050
000d7e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000d80   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	687; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000d82   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	688; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000d84   ec01     call	0xae02, 0           	CALL	_TickGet
000d86   f057
000d88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d8a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000d8c   f002
000d8e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d90   f003
000d92   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d94   f004
000d96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d98   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000d9a   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000da0   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000da4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000da6   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000dac   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	689; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000dae   0e06     movlw	0x6                	MOVLW	0x06
000db0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000db2   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000db4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	690; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000db6   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
                                           ;	.line	691; TCPIP_Stack/DHCP.c	break;
000db8   d003     bra	0xdc0                	BRA	_00229_DS_
                                           _00224_DS_:
                                           ;	.line	694; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000dba   0e02     movlw	0x2                	MOVLW	0x02
000dbc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000dbe   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00229_DS_:
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000dc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dc2   ef9a     goto	0x734               	GOTO	_00227_DS_
000dc4   f003
                                           _00231_DS_:
000dc6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000dc8   f008
000dca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000dcc   f007
000dce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000dd0   f006
000dd2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000dd4   f005
000dd6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000dd8   f004
000dda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ddc   f003
000dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000de0   f002
000de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000de4   f001
000de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de8   f000
000dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dec   ffd9
000dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsServerDetected	code
                                           _DHCPIsServerDetected:
                                           ;	.line	457; TCPIP_Stack/DHCP.c	BOOL DHCPIsServerDetected(BYTE vInterface)
00ae46   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ae48   ffe5
00ae4a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ae4c   ffd9
00ae4e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ae50   ffe5
                                           ;	.line	460; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bDHCPServerDetected;
00ae52   6a00     clrf	0, 0                	CLRF	r0x00
00ae54   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
00ae56   b71e     btfsc	0x1e, 0x3, 0x1     	BTFSC	(_DHCPClient + 2), 3, B
00ae58   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00ae5a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ae5c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ae5e   f000
00ae60   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ae62   ffd9
00ae64   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPStateChanged	code
                                           _DHCPStateChanged:
                                           ;	.line	420; TCPIP_Stack/DHCP.c	BOOL DHCPStateChanged(BYTE vInterface)
00aec4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aec6   ffe5
00aec8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aeca   ffd9
00aecc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	423; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bEvent)
00aece   a31e     btfss	0x1e, 0x1, 0x1     	BTFSS	(_DHCPClient + 2), 1, B
00aed0   d004     bra	0xaeda               	BRA	_00158_DS_
00aed2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	425; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 0;
00aed4   931e     bcf	0x1e, 0x1, 0x1       	BCF	(_DHCPClient + 2), 1, B
                                           ;	.line	426; TCPIP_Stack/DHCP.c	return TRUE;
00aed6   0e01     movlw	0x1                	MOVLW	0x01
00aed8   d001     bra	0xaedc               	BRA	_00159_DS_
                                           _00158_DS_:
                                           ;	.line	428; TCPIP_Stack/DHCP.c	return FALSE;
00aeda   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00159_DS_:
00aedc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aede   ffd9
00aee0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsBound	code
                                           _DHCPIsBound:
                                           ;	.line	386; TCPIP_Stack/DHCP.c	BOOL DHCPIsBound(BYTE vInterface)
00ae66   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ae68   ffe5
00ae6a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ae6c   ffd9
00ae6e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ae70   ffe5
                                           ;	.line	389; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bIsBound;
00ae72   6a00     clrf	0, 0                	CLRF	r0x00
00ae74   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
00ae76   b11e     btfsc	0x1e, 0, 0x1       	BTFSC	(_DHCPClient + 2), 0, B
00ae78   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00ae7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ae7c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ae7e   f000
00ae80   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ae82   ffd9
00ae84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsEnabled	code
                                           _DHCPIsEnabled:
                                           ;	.line	355; TCPIP_Stack/DHCP.c	BOOL DHCPIsEnabled(BYTE vInterface)
00ace2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ace4   ffe5
00ace6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ace8   ffd9
00acea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00acec   ffe5
                                           ;	.line	358; TCPIP_Stack/DHCP.c	return DHCPClient.smState != SM_DHCP_DISABLED;
00acee   6a00     clrf	0, 0                	CLRF	r0x00
00acf0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00acf2   511d     movf	0x1d, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
00acf4   e101     bnz	0xacf8               	BNZ	_00147_DS_
00acf6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00147_DS_:
00acf8   5000     movf	0, 0, 0             	MOVF	r0x00, W
00acfa   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00acfc   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00acfe   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00ad00   6a00     clrf	0, 0                	CLRF	r0x00
00ad02   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00ad04   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ad06   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ad08   f000
00ad0a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ad0c   ffd9
00ad0e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPEnable	code
                                           _DHCPEnable:
                                           ;	.line	324; TCPIP_Stack/DHCP.c	void DHCPEnable(BYTE vInterface)
00aee2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aee4   ffe5
00aee6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aee8   ffd9
00aeea   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	328; TCPIP_Stack/DHCP.c	if(DHCPClient.smState == SM_DHCP_DISABLED)
00aeec   511d     movf	0x1d, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
00aeee   e105     bnz	0xaefa               	BNZ	_00139_DS_
                                           ;	.line	330; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
00aef0   0e01     movlw	0x1                	MOVLW	0x01
00aef2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00aef4   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
00aef6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	331; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;
00aef8   911e     bcf	0x1e, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
                                           _00139_DS_:
00aefa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aefc   ffd9
00aefe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPDisable	code
                                           _DHCPDisable:
                                           ;	.line	289; TCPIP_Stack/DHCP.c	void DHCPDisable(BYTE vInterface)
00aa46   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aa48   ffe5
00aa4a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aa4c   ffd9
00aa4e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00aa50   ffe5
00aa52   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00aa54   ffe5
00aa56   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00aa58   ffe5
                                           ;	.line	293; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
00aa5a   cb1c     movff	0xb1c, 0           	MOVFF	_DHCPClient, r0x00
00aa5c   f000
00aa5e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00aa60   f001
00aa62   6a02     clrf	0x2, 0              	CLRF	r0x02
00aa64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00aa66   0aff     xorlw	0xff               	XORLW	0xff
00aa68   e102     bnz	0xaa6e               	BNZ	_00132_DS_
00aa6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00aa6c   e007     bz	0xaa7c                	BZ	_00127_DS_
                                           _00132_DS_:
                                           ;	.line	295; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
00aa6e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00aa70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa72   ec7a     call	0xa0f4, 0           	CALL	_UDPClose
00aa74   f050
00aa76   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00aa78   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	296; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00aa7a   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           _00127_DS_:
00aa7c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	299; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_DISABLED;
00aa7e   6b1d     clrf	0x1d, 0x1           	CLRF	(_DHCPClient + 1), B
00aa80   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00aa82   f002
00aa84   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00aa86   f001
00aa88   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aa8a   f000
00aa8c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aa8e   ffd9
00aa90   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPInit	code
                                           _DHCPInit:
                                           ;	.line	223; TCPIP_Stack/DHCP.c	void DHCPInit(BYTE vInterface)
00a28c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a28e   ffe5
00a290   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a292   ffd9
00a294   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a296   ffe5
00a298   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a29a   ffe5
00a29c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a29e   ffe5
00a2a0   010e     movlb	0xe                	BANKSEL	_DHCPClientInitializedOnce
                                           ;	.line	229; TCPIP_Stack/DHCP.c	if(!DHCPClientInitializedOnce)
00a2a2   5152     movf	0x52, 0, 0x1        	MOVF	_DHCPClientInitializedOnce, W, B
00a2a4   e112     bnz	0xa2ca               	BNZ	_00106_DS_
                                           ;	.line	231; TCPIP_Stack/DHCP.c	DHCPClientInitializedOnce = TRUE;
00a2a6   0e01     movlw	0x1                	MOVLW	0x01
00a2a8   010e     movlb	0xe                	BANKSEL	_DHCPClientInitializedOnce
00a2aa   6f52     movwf	0x52, 0x1          	MOVWF	_DHCPClientInitializedOnce, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
00a2ac   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00109_DS_:
00a2ae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00a2b0   f001
00a2b2   6a02     clrf	0x2, 0              	CLRF	r0x02
00a2b4   0e00     movlw	0                  	MOVLW	0x00
00a2b6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00a2b8   e102     bnz	0xa2be               	BNZ	_00119_DS_
00a2ba   0e01     movlw	0x1                	MOVLW	0x01
00a2bc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00119_DS_:
00a2be   e205     bc	0xa2ca                	BC	_00106_DS_
00a2c0   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	235; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00a2c2   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
00a2c4   0e01     movlw	0x1                	MOVLW	0x01
00a2c6   6e00     movwf	0, 0               	MOVWF	r0x00
00a2c8   d7f2     bra	0xa2ae               	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	242; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
00a2ca   cb1c     movff	0xb1c, 0           	MOVFF	_DHCPClient, r0x00
00a2cc   f000
00a2ce   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00a2d0   f001
00a2d2   6a02     clrf	0x2, 0              	CLRF	r0x02
00a2d4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a2d6   0aff     xorlw	0xff               	XORLW	0xff
00a2d8   e102     bnz	0xa2de               	BNZ	_00121_DS_
00a2da   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a2dc   e007     bz	0xa2ec                	BZ	_00108_DS_
                                           _00121_DS_:
                                           ;	.line	244; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
00a2de   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a2e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a2e2   ec7a     call	0xa0f4, 0           	CALL	_UDPClose
00a2e4   f050
00a2e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00a2e8   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	245; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00a2ea   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           _00108_DS_:
                                           ;	.line	249; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
00a2ec   0e01     movlw	0x1                	MOVLW	0x01
00a2ee   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00a2f0   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
00a2f2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	250; TCPIP_Stack/DHCP.c	DHCPClient.flags.val = 0;
00a2f4   6b1e     clrf	0x1e, 0x1           	CLRF	(_DHCPClient + 2), B
00a2f6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	251; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode = TRUE; // This flag toggles before 
00a2f8   891e     bsf	0x1e, 0x4, 0x1       	BSF	(_DHCPClient + 2), 4, B
00a2fa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	255; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = TRUE;
00a2fc   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
00a2fe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a300   f002
00a302   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a304   f001
00a306   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a308   f000
00a30a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a30c   ffd9
00a30e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4782 (0x12ae) bytes ( 3.65%)
                                           ;           	 2391 (0x0957) words
                                           ; udata size:	   39 (0x0027) bytes ( 1.02%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _MACInit
                                           	global _MACIsLinked
                                           	global _MACIsTxReady
                                           	global _MACDiscardRx
                                           	global _MACGetFreeRxSize
                                           	global _MACGetHeader
                                           	global _MACPutHeader
                                           	global _MACFlush
                                           	global _MACSetReadPtrInRx
                                           	global _MACSetWritePtr
                                           	global _MACSetReadPtr
                                           	global _MACCalcRxChecksum
                                           	global _CalcIPBufferChecksum
                                           	global _MACMemCopyAsync
                                           	global _MACIsMemCopyDone
                                           	global _MACGet
                                           	global _MACGetArray
                                           	global _MACPut
                                           	global _MACPutArray
                                           	global _ReadPHYReg
                                           	global _WritePHYReg
                                           	global _MACPowerDown
                                           	global _MACPowerUp
                                           	global _MACPrintHeader
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrget1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _DisplayString
                                           	extern _swaps
                                           	extern _TickGet
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_ETH97J60_0	udata
                                           _NextPacketLocation	res	2
                                           
                                           udata_ETH97J60_1	udata
                                           _CurrentPacketLocation	res	2
                                           
                                           udata_ETH97J60_2	udata
                                           _WasDiscarded	res	1
                                           
                                           udata_ETH97J60_3	udata
                                           _wTXWatchdog	res	2
                                           
                                           udata_ETH97J60_4	udata
                                           _MACIsLinked_pr_1_1	res	2
                                           
                                           udata_ETH97J60_5	udata
                                           _MACDiscardRx_NewRXRDLocation_1_1	res	2
                                           
                                           udata_ETH97J60_6	udata
                                           _MACGetFreeRxSize_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_7	udata
                                           _MACGetFreeRxSize_WritePT_1_1	res	2
                                           
                                           udata_ETH97J60_8	udata
                                           _MACGetHeader_header_1_1	res	20
                                           
                                           udata_ETH97J60_9	udata
                                           _MACFlush_i_2_2	res	1
                                           
                                           udata_ETH97J60_10	udata
                                           _MACSetReadPtrInRx_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_11	udata
                                           _CalcIPBufferChecksum_ChunkLen_1_1	res	2
                                           
                                           udata_ETH97J60_12	udata
                                           _CalcIPBufferChecksum_Checksum_1_1	res	4
                                           
                                           udata_ETH97J60_13	udata
                                           _CalcIPBufferChecksum_DataBuffer_1_1	res	20
                                           
                                           udata_ETH97J60_14	udata
                                           _MACMemCopyAsync_destAddr_1_1	res	2
                                           
                                           udata_ETH97J60_15	udata
                                           _MACMemCopyAsync_sourceAddr_1_1	res	2
                                           
                                           udata_ETH97J60_16	udata
                                           _MACMemCopyAsync_ReadSave_1_1	res	2
                                           
                                           udata_ETH97J60_17	udata
                                           _MACMemCopyAsync_WriteSave_1_1	res	2
                                           
                                           udata_ETH97J60_18	udata
                                           _MACGetArray_i_1_1	res	1
                                           
                                           udata_ETH97J60_19	udata
                                           _ReadPHYReg_Result_1_1	res	2
                                           
                                           udata_ETH97J60_20	udata
                                           _WritePHYReg_Data_1_1	res	2
                                           
                                           udata_ETH97J60_21	udata
                                           _MACPrintHeader_header_1_1	res	64
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPrintHeader	code
                                           _MACPrintHeader:
                                           ;	.line	1452; TCPIP_Stack/ETH97J60.c	void MACPrintHeader(BYTE woffset)
007954   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007956   ffe5
007958   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00795a   ffd9
00795c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00795e   ffe5
007960   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007962   ffe5
007964   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007966   ffe5
007968   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00796a   ffe5
00796c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00796e   ffe5
007970   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007972   ffe5
007974   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007976   ffe5
007978   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00797a   ffe5
00797c   0e02     movlw	0x2                	MOVLW	0x02
00797e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007980   f000
                                           ;	.line	1458; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(TXSTART + 1) ;
007982   0e0b     movlw	0xb                	MOVLW	0x0b
007984   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	1459; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(TXSTART + 1) ;
007986   0e1a     movlw	0x1a               	MOVLW	0x1a
007988   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	1462; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header[0], sizeof(header));
00798a   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
00798c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00798e   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
007990   6e01     movwf	0x1, 0             	MOVWF	r0x01
007992   0e80     movlw	0x80               	MOVLW	0x80
007994   6e03     movwf	0x3, 0             	MOVWF	r0x03
007996   0e00     movlw	0                  	MOVLW	0x00
007998   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00799a   0e40     movlw	0x40               	MOVLW	0x40
00799c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00799e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0079a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0079a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0079a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079aa   ec20     call	0x9240, 0           	CALL	_MACGetArray
0079ac   f049
0079ae   0e05     movlw	0x5                	MOVLW	0x05
0079b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
0079b2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0079b4   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0079b6   6a01     clrf	0x1, 0              	CLRF	r0x01
0079b8   6a02     clrf	0x2, 0              	CLRF	r0x02
0079ba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00492_DS_:
0079bc   0e10     movlw	0x10               	MOVLW	0x10
0079be   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0079c0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0079c2   d057     bra	0x7a72               	BRA	_00495_DS_
                                           ;	.line	1466; TCPIP_Stack/ETH97J60.c	c = (header[i+2*woffset]>>4)&0x0F;
0079c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0079c6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0079c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0079ca   6a05     clrf	0x5, 0              	CLRF	r0x05
0079cc   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
0079ce   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0079d0   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
0079d2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0079d4   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0079d6   ffe9
0079d8   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0079da   ffea
0079dc   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
0079de   f004
0079e0   3804     swapf	0x4, 0, 0          	SWAPF	r0x04, W
0079e2   0b0f     andlw	0xf                	ANDLW	0x0f
0079e4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0079e6   0e0f     movlw	0xf                	MOVLW	0x0f
0079e8   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
                                           ;	.line	1467; TCPIP_Stack/ETH97J60.c	LCDText[2*i] = c + (c < 0x0A ? '0' : 'A');
0079ea   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0079ec   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
0079ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
0079f0   6a06     clrf	0x6, 0              	CLRF	r0x06
0079f2   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0079f4   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0079f6   0e0a     movlw	0xa                	MOVLW	0x0a
0079f8   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0079fa   e203     bc	0x7a02                	BC	_00498_DS_
0079fc   0e30     movlw	0x30               	MOVLW	0x30
0079fe   6e07     movwf	0x7, 0             	MOVWF	r0x07
007a00   d002     bra	0x7a06               	BRA	_00499_DS_
                                           _00498_DS_:
007a02   0e41     movlw	0x41               	MOVLW	0x41
007a04   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00499_DS_:
007a06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007a08   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
007a0a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007a0c   ffe9
007a0e   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
007a10   ffea
007a12   c007     movff	0x7, 0xfef         	MOVFF	r0x07, INDF0
007a14   ffef
                                           ;	.line	1468; TCPIP_Stack/ETH97J60.c	c = header[i+2*woffset]&0x0F;
007a16   5000     movf	0, 0, 0             	MOVF	r0x00, W
007a18   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
007a1a   6e05     movwf	0x5, 0             	MOVWF	r0x05
007a1c   6a06     clrf	0x6, 0              	CLRF	r0x06
007a1e   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
007a20   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
007a22   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
007a24   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
007a26   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007a28   ffe9
007a2a   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
007a2c   ffea
007a2e   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
007a30   f005
007a32   0e0f     movlw	0xf                	MOVLW	0x0f
007a34   1405     andwf	0x5, 0, 0          	ANDWF	r0x05, W
007a36   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	1469; TCPIP_Stack/ETH97J60.c	LCDText[2*i+1] = c + (c < 0x0A ? '0' : 'A');
007a38   2803     incf	0x3, 0, 0           	INCF	r0x03, W
007a3a   6e05     movwf	0x5, 0             	MOVWF	r0x05
007a3c   6a06     clrf	0x6, 0              	CLRF	r0x06
007a3e   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
007a40   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
007a42   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007a44   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
007a46   0e0a     movlw	0xa                	MOVLW	0x0a
007a48   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
007a4a   e203     bc	0x7a52                	BC	_00500_DS_
007a4c   0e30     movlw	0x30               	MOVLW	0x30
007a4e   6e07     movwf	0x7, 0             	MOVWF	r0x07
007a50   d002     bra	0x7a56               	BRA	_00501_DS_
                                           _00500_DS_:
007a52   0e41     movlw	0x41               	MOVLW	0x41
007a54   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00501_DS_:
007a56   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007a58   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
007a5a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007a5c   ffe9
007a5e   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
007a60   ffea
007a62   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
007a64   ffef
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
007a66   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
007a68   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
007a6a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
007a6c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
007a6e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
007a70   d7a5     bra	0x79bc               	BRA	_00492_DS_
                                           _00495_DS_:
007a72   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	1471; TCPIP_Stack/ETH97J60.c	LCDText[32]=0;
007a74   6b42     clrf	0x42, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	1473; TCPIP_Stack/ETH97J60.c	LCDUpdate();
007a76   ec97     call	0x4d2e, 0           	CALL	_LCDUpdate
007a78   f026
007a7a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007a7c   f007
007a7e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007a80   f006
007a82   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007a84   f005
007a86   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007a88   f004
007a8a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007a8c   f003
007a8e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007a90   f002
007a92   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007a94   f001
007a96   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007a98   f000
007a9a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a9c   ffd9
007a9e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerUp	code
                                           _MACPowerUp:
                                           ;	.line	1357; TCPIP_Stack/ETH97J60.c	void MACPowerUp(void)
00af1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00af20   ffe5
00af22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00af24   ffd9
00af26   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1360; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;
00af28   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00484_DS_:
00af2a   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1363; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY)
00af2c   b1fd     btfsc	0xfd, 0, 0x1       	BTFSC	_ESTATbits, 0, B
00af2e   d002     bra	0xaf34               	BRA	_00487_DS_
                                           ;	.line	1366; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
00af30   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
00af32   d7fb     bra	0xaf2a               	BRA	_00484_DS_
                                           _00487_DS_:
00af34   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00af36   ffd9
00af38   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerDown	code
                                           _MACPowerDown:
                                           ;	.line	1320; TCPIP_Stack/ETH97J60.c	void MACPowerDown(void)
00af00   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00af02   ffe5
00af04   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00af06   ffd9
                                           ;	.line	1323; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 0;
00af08   94d2     bcf	0xd2, 0x2, 0         	BCF	_ECON1bits, 2
                                           _00473_DS_:
00af0a   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1327; TCPIP_Stack/ETH97J60.c	while(ESTATbits.RXBUSY);
00af0c   b5fd     btfsc	0xfd, 0x2, 0x1     	BTFSC	_ESTATbits, 2, B
00af0e   d7fd     bra	0xaf0a               	BRA	_00473_DS_
                                           _00476_DS_:
                                           ;	.line	1330; TCPIP_Stack/ETH97J60.c	while(ECON1bits.TXRTS);
00af10   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
00af12   d7fe     bra	0xaf10               	BRA	_00476_DS_
00af14   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1333; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 0;
00af16   9bfe     bcf	0xfe, 0x5, 0x1       	BCF	_ECON2bits, 5, B
00af18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00af1a   ffd9
00af1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__WritePHYReg	code
                                           _WritePHYReg:
                                           ;	.line	1251; TCPIP_Stack/ETH97J60.c	void WritePHYReg(BYTE Register, WORD Data)
00a9f8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a9fa   ffe5
00a9fc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a9fe   ffd9
00aa00   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00aa02   ffe5
00aa04   0e02     movlw	0x2                	MOVLW	0x02
00aa06   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
00aa08   feb4
00aa0a   0e03     movlw	0x3                	MOVLW	0x03
00aa0c   cfdb     movff	0xfdb, 0x21e       	MOVFF	PLUSW2, _WritePHYReg_Data_1_1
00aa0e   f21e
00aa10   0e04     movlw	0x4                	MOVLW	0x04
00aa12   cfdb     movff	0xfdb, 0x21f       	MOVFF	PLUSW2, (_WritePHYReg_Data_1_1 + 1)
00aa14   f21f
                                           ;	.line	1268; TCPIP_Stack/ETH97J60.c	PRODL = ((WORD_VAL*)&Data)->v[0];
00aa16   c21e     movff	0x21e, 0xff3       	MOVFF	_WritePHYReg_Data_1_1, _PRODL
00aa18   fff3
                                           ;	.line	1269; TCPIP_Stack/ETH97J60.c	PRODH = ((WORD_VAL*)&Data)->v[1];
00aa1a   c21f     movff	0x21f, 0xff4       	MOVFF	(_WritePHYReg_Data_1_1 + 1), _PRODH
00aa1c   fff4
                                           ;	.line	1270; TCPIP_Stack/ETH97J60.c	GIESave = INTCON & 0xC0;	 // Save GIEH and GIEL bits
00aa1e   0ec0     movlw	0xc0               	MOVLW	0xc0
00aa20   14f2     andwf	0xf2, 0, 0         	ANDWF	_INTCON, W
00aa22   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	1271; TCPIP_Stack/ETH97J60.c	INTCON &= 0x3F;		 // Clear INTCONbits.GIEH and INTCONbits.GIEL
00aa24   0e3f     movlw	0x3f               	MOVLW	0x3f
00aa26   16f2     andwf	0xf2, 0x1, 0       	ANDWF	_INTCON, F
00aa28   cff3     movff	0xff3, 0xeb6       	movff _PRODL, _MIWRL
00aa2a   feb6
00aa2c   0000     nop                      	nop
00aa2e   cff4     movff	0xff4, 0xeb7       	movff _PRODH, _MIWRH
00aa30   feb7
                                           	
                                           ;	.line	1289; TCPIP_Stack/ETH97J60.c	INTCON |= GIESave;		       // Restore GIEH and GIEL value
00aa32   5000     movf	0, 0, 0             	MOVF	r0x00, W
00aa34   12f2     iorwf	0xf2, 0x1, 0       	IORWF	_INTCON, F
                                           _00465_DS_:
00aa36   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1293; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
00aa38   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
00aa3a   d7fd     bra	0xaa36               	BRA	_00465_DS_
00aa3c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aa3e   f000
00aa40   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aa42   ffd9
00aa44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__ReadPHYReg	code
                                           _ReadPHYReg:
                                           ;	.line	1208; TCPIP_Stack/ETH97J60.c	WORD ReadPHYReg(BYTE Register)
00ab24   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ab26   ffe5
00ab28   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ab2a   ffd9
00ab2c   0e02     movlw	0x2                	MOVLW	0x02
00ab2e   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
00ab30   feb4
00ab32   0000     nop                      	nop 
                                           ;	.line	1215; TCPIP_Stack/ETH97J60.c	MICMD = MICMD_MIIRD; Nop();
00ab34   0e01     movlw	0x1                	MOVLW	0x01
00ab36   010e     movlb	0xe                	BANKSEL	_MICMD
00ab38   6fb2     movwf	0xb2, 0x1          	MOVWF	_MICMD, B
00ab3a   0000     nop                      	nop 
                                           _00451_DS_:
00ab3c   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1219; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
00ab3e   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
00ab40   d7fd     bra	0xab3c               	BRA	_00451_DS_
00ab42   010e     movlb	0xe                	BANKSEL	_MICMD
                                           ;	.line	1222; TCPIP_Stack/ETH97J60.c	MICMD = 0x00; Nop();
00ab44   6bb2     clrf	0xb2, 0x1           	CLRF	_MICMD, B
00ab46   0000     nop                      	nop 
00ab48   010e     movlb	0xe                	BANKSEL	_MIRDL
                                           ;	.line	1225; TCPIP_Stack/ETH97J60.c	Result.VAL.v[0] = MIRDL;
00ab4a   51b8     movf	0xb8, 0, 0x1        	MOVF	_MIRDL, W, B
00ab4c   0102     movlb	0x2                	BANKSEL	_ReadPHYReg_Result_1_1
00ab4e   6f1c     movwf	0x1c, 0x1          	MOVWF	_ReadPHYReg_Result_1_1, B
00ab50   0000     nop                      	nop 
00ab52   010e     movlb	0xe                	BANKSEL	_MIRDH
                                           ;	.line	1227; TCPIP_Stack/ETH97J60.c	Result.VAL.v[1] = MIRDH;
00ab54   51b9     movf	0xb9, 0, 0x1        	MOVF	_MIRDH, W, B
00ab56   0102     movlb	0x2                	BANKSEL	(_ReadPHYReg_Result_1_1 + 1)
00ab58   6f1d     movwf	0x1d, 0x1          	MOVWF	(_ReadPHYReg_Result_1_1 + 1), B
                                           ;	.line	1229; TCPIP_Stack/ETH97J60.c	return Result2;
00ab5a   c21d     movff	0x21d, 0xff3       	MOVFF	(_ReadPHYReg_Result_1_1 + 1), PRODL
00ab5c   fff3
00ab5e   0102     movlb	0x2                	BANKSEL	_ReadPHYReg_Result_1_1
00ab60   511c     movf	0x1c, 0, 0x1        	MOVF	_ReadPHYReg_Result_1_1, W, B
00ab62   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ab64   ffd9
00ab66   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutArray	code
                                           _MACPutArray:
                                           ;	.line	1149; TCPIP_Stack/ETH97J60.c	void MACPutArray(BYTE *val, WORD len)
009e12   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009e14   ffe5
009e16   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009e18   ffd9
009e1a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009e1c   ffe5
009e1e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009e20   ffe5
009e22   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009e24   ffe5
009e26   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009e28   ffe5
009e2a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009e2c   ffe5
009e2e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009e30   ffe5
009e32   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009e34   ffe5
009e36   0e02     movlw	0x2                	MOVLW	0x02
009e38   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009e3a   f000
009e3c   0e03     movlw	0x3                	MOVLW	0x03
009e3e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009e40   f001
009e42   0e04     movlw	0x4                	MOVLW	0x04
009e44   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009e46   f002
009e48   0e05     movlw	0x5                	MOVLW	0x05
009e4a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009e4c   f003
009e4e   0e06     movlw	0x6                	MOVLW	0x06
009e50   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009e52   f004
                                           _00437_DS_:
                                           ;	.line	1151; TCPIP_Stack/ETH97J60.c	while(len--)
009e54   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
009e56   f005
009e58   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
009e5a   f006
009e5c   0eff     movlw	0xff               	MOVLW	0xff
009e5e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
009e60   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
009e62   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
009e64   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009e66   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
009e68   e00e     bz	0x9e86                	BZ	_00440_DS_
                                           ;	.line	1167; TCPIP_Stack/ETH97J60.c	EDATA = *val++; 
009e6a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
009e6c   ffe9
009e6e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
009e70   fff3
009e72   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009e74   ec12     call	0xae24, 0           	CALL	__gptrget1
009e76   f057
009e78   6e61     movwf	0x61, 0            	MOVWF	_EDATA
009e7a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
009e7c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009e7e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
009e80   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009e82   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
009e84   d7e7     bra	0x9e54               	BRA	_00437_DS_
                                           _00440_DS_:
009e86   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009e88   f006
009e8a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009e8c   f005
009e8e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009e90   f004
009e92   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009e94   f003
009e96   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009e98   f002
009e9a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009e9c   f001
009e9e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009ea0   f000
009ea2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009ea4   ffd9
009ea6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPut	code
                                           _MACPut:
                                           ;	.line	1104; TCPIP_Stack/ETH97J60.c	void MACPut(BYTE val)
00afa2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00afa4   ffe5
00afa6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00afa8   ffd9
00afaa   0e02     movlw	0x2                	MOVLW	0x02
00afac   cfdb     movff	0xfdb, 0xf61       	MOVFF	PLUSW2, _EDATA
00afae   ff61
                                           ;	.line	1121; TCPIP_Stack/ETH97J60.c	EDATA = val;
00afb0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00afb2   ffd9
00afb4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetArray	code
                                           _MACGetArray:
                                           ;	.line	1062; TCPIP_Stack/ETH97J60.c	WORD MACGetArray(BYTE *val, WORD len)
009240   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009242   ffe5
009244   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009246   ffd9
009248   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00924a   ffe5
00924c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00924e   ffe5
009250   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009252   ffe5
009254   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009256   ffe5
009258   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00925a   ffe5
00925c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00925e   ffe5
009260   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009262   ffe5
009264   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009266   ffe5
009268   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00926a   ffe5
00926c   0e02     movlw	0x2                	MOVLW	0x02
00926e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009270   f000
009272   0e03     movlw	0x3                	MOVLW	0x03
009274   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009276   f001
009278   0e04     movlw	0x4                	MOVLW	0x04
00927a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00927c   f002
00927e   0e05     movlw	0x5                	MOVLW	0x05
009280   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009282   f003
009284   0e06     movlw	0x6                	MOVLW	0x06
009286   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009288   f004
                                           ;	.line	1068; TCPIP_Stack/ETH97J60.c	if(val)
00928a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00928c   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00928e   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
009290   e01e     bz	0x92ce                	BZ	_00427_DS_
                                           ;	.line	1070; TCPIP_Stack/ETH97J60.c	while(w--)
009292   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
009294   f005
009296   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
009298   f006
                                           _00413_DS_:
00929a   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
00929c   f007
00929e   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
0092a0   f008
0092a2   0eff     movlw	0xff               	MOVLW	0xff
0092a4   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0092a6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0092a8   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
0092aa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0092ac   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0092ae   e021     bz	0x92f2                	BZ	_00421_DS_
                                           ;	.line	1072; TCPIP_Stack/ETH97J60.c	*val++ = EDATA;
0092b0   cf61     movff	0xf61, 0xfe5       	MOVFF	_EDATA, POSTDEC1
0092b2   ffe5
0092b4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0092b6   ffe9
0092b8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0092ba   fff3
0092bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0092be   ece5     call	0xafca, 0           	CALL	__gptrput1
0092c0   f057
0092c2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0092c4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0092c6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0092c8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0092ca   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0092cc   d7e6     bra	0x929a               	BRA	_00413_DS_
                                           _00427_DS_:
                                           ;	.line	1077; TCPIP_Stack/ETH97J60.c	while(w--)
0092ce   c003     movff	0x3, 0             	MOVFF	r0x03, r0x00
0092d0   f000
0092d2   c004     movff	0x4, 0x1           	MOVFF	r0x04, r0x01
0092d4   f001
                                           _00416_DS_:
0092d6   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0092d8   f002
0092da   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0092dc   f005
0092de   0eff     movlw	0xff               	MOVLW	0xff
0092e0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0092e2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0092e4   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
0092e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0092e8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0092ea   e003     bz	0x92f2                	BZ	_00421_DS_
                                           ;	.line	1079; TCPIP_Stack/ETH97J60.c	i = EDATA;
0092ec   cf61     movff	0xf61, 0x244       	MOVFF	_EDATA, _MACGetArray_i_1_1
0092ee   f244
0092f0   d7f2     bra	0x92d6               	BRA	_00416_DS_
                                           _00421_DS_:
                                           ;	.line	1083; TCPIP_Stack/ETH97J60.c	return len;
0092f2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0092f4   fff3
0092f6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0092f8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0092fa   f008
0092fc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0092fe   f007
009300   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009302   f006
009304   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009306   f005
009308   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00930a   f004
00930c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00930e   f003
009310   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009312   f002
009314   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009316   f001
009318   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00931a   f000
00931c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00931e   ffd9
009320   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGet	code
                                           _MACGet:
                                           ;	.line	1037; TCPIP_Stack/ETH97J60.c	BYTE MACGet()
00afde   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00afe0   ffe5
00afe2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00afe4   ffd9
                                           ;	.line	1039; TCPIP_Stack/ETH97J60.c	return EDATA;
00afe6   5061     movf	0x61, 0, 0          	MOVF	_EDATA, W
00afe8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00afea   ffd9
00afec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsMemCopyDone	code
                                           _MACIsMemCopyDone:
                                           ;	.line	1014; TCPIP_Stack/ETH97J60.c	BOOL MACIsMemCopyDone(void)
00ad3c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ad3e   ffe5
00ad40   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ad42   ffd9
00ad44   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ad46   ffe5
                                           ;	.line	1016; TCPIP_Stack/ETH97J60.c	return !ECON1bits.DMAST;
00ad48   6a00     clrf	0, 0                	CLRF	r0x00
00ad4a   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
00ad4c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00ad4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ad50   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00ad52   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00ad54   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00ad56   6a00     clrf	0, 0                	CLRF	r0x00
00ad58   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00ad5a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ad5c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ad5e   f000
00ad60   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ad62   ffd9
00ad64   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACMemCopyAsync	code
                                           _MACMemCopyAsync:
                                           ;	.line	899; TCPIP_Stack/ETH97J60.c	void MACMemCopyAsync(WORD destAddr, WORD sourceAddr, WORD len)
0028e4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028e6   ffe5
0028e8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028ea   ffd9
0028ec   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028ee   ffe5
0028f0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028f2   ffe5
0028f4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028f6   ffe5
0028f8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028fa   ffe5
0028fc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028fe   ffe5
002900   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002902   ffe5
002904   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002906   ffe5
002908   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00290a   ffe5
00290c   0e02     movlw	0x2                	MOVLW	0x02
00290e   cfdb     movff	0xfdb, 0x214       	MOVFF	PLUSW2, _MACMemCopyAsync_destAddr_1_1
002910   f214
002912   0e03     movlw	0x3                	MOVLW	0x03
002914   cfdb     movff	0xfdb, 0x215       	MOVFF	PLUSW2, (_MACMemCopyAsync_destAddr_1_1 + 1)
002916   f215
002918   0e04     movlw	0x4                	MOVLW	0x04
00291a   cfdb     movff	0xfdb, 0x216       	MOVFF	PLUSW2, _MACMemCopyAsync_sourceAddr_1_1
00291c   f216
00291e   0e05     movlw	0x5                	MOVLW	0x05
002920   cfdb     movff	0xfdb, 0x217       	MOVFF	PLUSW2, (_MACMemCopyAsync_sourceAddr_1_1 + 1)
002922   f217
002924   0e06     movlw	0x6                	MOVLW	0x06
002926   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002928   f000
00292a   0e07     movlw	0x7                	MOVLW	0x07
00292c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00292e   f001
                                           ;	.line	902; TCPIP_Stack/ETH97J60.c	BOOL UpdateWritePointer = FALSE;
002930   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           ;	.line	903; TCPIP_Stack/ETH97J60.c	BOOL UpdateReadPointer = FALSE;
002932   6a03     clrf	0x3, 0              	CLRF	r0x03
002934   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	905; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&destAddr)->bits.b15)
002936   af15     btfss	0x15, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_destAddr_1_1 + 1), 7, B
002938   d013     bra	0x2960               	BRA	_00325_DS_
                                           ;	.line	907; TCPIP_Stack/ETH97J60.c	UpdateWritePointer = TRUE;
00293a   0e01     movlw	0x1                	MOVLW	0x01
00293c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	908; TCPIP_Stack/ETH97J60.c	destAddr = ((WORD)EWRPTH)<<8|EWRPTL;
00293e   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
002940   f004
002942   6a05     clrf	0x5, 0              	CLRF	r0x05
002944   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002946   6e07     movwf	0x7, 0             	MOVWF	r0x07
002948   6a06     clrf	0x6, 0              	CLRF	r0x06
00294a   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
00294c   f004
00294e   6a05     clrf	0x5, 0              	CLRF	r0x05
002950   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002952   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002954   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
002956   6f14     movwf	0x14, 0x1          	MOVWF	_MACMemCopyAsync_destAddr_1_1, B
002958   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00295a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00295c   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
00295e   6f15     movwf	0x15, 0x1          	MOVWF	(_MACMemCopyAsync_destAddr_1_1 + 1), B
                                           _00325_DS_:
002960   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	910; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&sourceAddr)->bits.b15)
002962   af17     btfss	0x17, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_sourceAddr_1_1 + 1), 7, B
002964   d013     bra	0x298c               	BRA	_00327_DS_
                                           ;	.line	912; TCPIP_Stack/ETH97J60.c	UpdateReadPointer = TRUE;
002966   0e01     movlw	0x1                	MOVLW	0x01
002968   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	913; TCPIP_Stack/ETH97J60.c	sourceAddr = ((WORD)ERDPTH)<<8|ERDPTL;
00296a   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
00296c   f004
00296e   6a05     clrf	0x5, 0              	CLRF	r0x05
002970   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002972   6e07     movwf	0x7, 0             	MOVWF	r0x07
002974   6a06     clrf	0x6, 0              	CLRF	r0x06
002976   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
002978   f004
00297a   6a05     clrf	0x5, 0              	CLRF	r0x05
00297c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00297e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002980   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
002982   6f16     movwf	0x16, 0x1          	MOVWF	_MACMemCopyAsync_sourceAddr_1_1, B
002984   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002986   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002988   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
00298a   6f17     movwf	0x17, 0x1          	MOVWF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), B
                                           _00327_DS_:
                                           ;	.line	918; TCPIP_Stack/ETH97J60.c	if(len <= 1u)
00298c   0e00     movlw	0                  	MOVLW	0x00
00298e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
002990   e102     bnz	0x2996               	BNZ	_00376_DS_
002992   0e02     movlw	0x2                	MOVLW	0x02
002994   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00376_DS_:
002996   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002998   d07c     bra	0x2a92               	BRA	_00352_DS_
                                           ;	.line	920; TCPIP_Stack/ETH97J60.c	ReadSave.Val = ((WORD)ERDPTH)<<8|ERDPTL;
00299a   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
00299c   f004
00299e   6a05     clrf	0x5, 0              	CLRF	r0x05
0029a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029a2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0029a4   6a06     clrf	0x6, 0              	CLRF	r0x06
0029a6   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
0029a8   f004
0029aa   6a05     clrf	0x5, 0              	CLRF	r0x05
0029ac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029ae   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
0029b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029b2   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
0029b4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029b6   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
0029b8   6f18     movwf	0x18, 0x1          	MOVWF	_MACMemCopyAsync_ReadSave_1_1, B
0029ba   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0029bc   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
0029be   6f19     movwf	0x19, 0x1          	MOVWF	(_MACMemCopyAsync_ReadSave_1_1 + 1), B
                                           ;	.line	921; TCPIP_Stack/ETH97J60.c	WriteSave.Val =  ((WORD)EWRPTH)<<8|EWRPTL;
0029c0   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
0029c2   f004
0029c4   6a05     clrf	0x5, 0              	CLRF	r0x05
0029c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029c8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0029ca   6a06     clrf	0x6, 0              	CLRF	r0x06
0029cc   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
0029ce   f004
0029d0   6a05     clrf	0x5, 0              	CLRF	r0x05
0029d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029d4   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
0029d6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029d8   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
0029da   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029dc   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
0029de   6f1a     movwf	0x1a, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
0029e0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0029e2   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
0029e4   6f1b     movwf	0x1b, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
0029e6   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	922; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(sourceAddr);
0029e8   5116     movf	0x16, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
0029ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0029ec   6a05     clrf	0x5, 0              	CLRF	r0x05
0029ee   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029f0   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
0029f2   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	923; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(sourceAddr);
0029f4   5117     movf	0x17, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
0029f6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0029f8   6a05     clrf	0x5, 0              	CLRF	r0x05
0029fa   6a05     clrf	0x5, 0              	CLRF	r0x05
0029fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029fe   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
002a00   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	924; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(destAddr);
002a02   5114     movf	0x14, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
002a04   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a06   6a05     clrf	0x5, 0              	CLRF	r0x05
002a08   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a0a   010e     movlb	0xe                	BANKSEL	_EWRPTL
002a0c   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
002a0e   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	925; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(destAddr);
002a10   5115     movf	0x15, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
002a12   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a14   6a05     clrf	0x5, 0              	CLRF	r0x05
002a16   6a05     clrf	0x5, 0              	CLRF	r0x05
002a18   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a1a   010e     movlb	0xe                	BANKSEL	_EWRPTH
002a1c   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	926; TCPIP_Stack/ETH97J60.c	while(len--) MACPut(MACGet());
002a1e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002a20   f004
002a22   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002a24   f005
                                           _00328_DS_:
002a26   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
002a28   f006
002a2a   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
002a2c   f007
002a2e   0eff     movlw	0xff               	MOVLW	0xff
002a30   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
002a32   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002a34   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
002a36   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002a38   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002a3a   e009     bz	0x2a4e                	BZ	_00330_DS_
002a3c   ecef     call	0xafde, 0           	CALL	_MACGet
002a3e   f057
002a40   6e06     movwf	0x6, 0             	MOVWF	r0x06
002a42   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a46   ecd1     call	0xafa2, 0           	CALL	_MACPut
002a48   f057
002a4a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002a4c   d7ec     bra	0x2a26               	BRA	_00328_DS_
                                           _00330_DS_:
                                           ;	.line	927; TCPIP_Stack/ETH97J60.c	if(!UpdateReadPointer)
002a4e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a50   e10d     bnz	0x2a6c               	BNZ	_00332_DS_
002a52   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
                                           ;	.line	929; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(ReadSave.Val);
002a54   5118     movf	0x18, 0, 0x1        	MOVF	_MACMemCopyAsync_ReadSave_1_1, W, B
002a56   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a58   6a05     clrf	0x5, 0              	CLRF	r0x05
002a5a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a5c   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
002a5e   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
                                           ;	.line	930; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(ReadSave.Val);
002a60   5119     movf	0x19, 0, 0x1        	MOVF	(_MACMemCopyAsync_ReadSave_1_1 + 1), W, B
002a62   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a64   6a05     clrf	0x5, 0              	CLRF	r0x05
002a66   6a05     clrf	0x5, 0              	CLRF	r0x05
002a68   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a6a   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00332_DS_:
                                           ;	.line	932; TCPIP_Stack/ETH97J60.c	if(!UpdateWritePointer)
002a6c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a6e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
002a70   d0d5     bra	0x2c1c               	BRA	_00354_DS_
002a72   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
                                           ;	.line	934; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
002a74   511a     movf	0x1a, 0, 0x1        	MOVF	_MACMemCopyAsync_WriteSave_1_1, W, B
002a76   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a78   6a05     clrf	0x5, 0              	CLRF	r0x05
002a7a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a7c   010e     movlb	0xe                	BANKSEL	_EWRPTL
002a7e   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
002a80   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
                                           ;	.line	935; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
002a82   511b     movf	0x1b, 0, 0x1        	MOVF	(_MACMemCopyAsync_WriteSave_1_1 + 1), W, B
002a84   6e04     movwf	0x4, 0             	MOVWF	r0x04
002a86   6a05     clrf	0x5, 0              	CLRF	r0x05
002a88   6a05     clrf	0x5, 0              	CLRF	r0x05
002a8a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a8c   010e     movlb	0xe                	BANKSEL	_EWRPTH
002a8e   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
002a90   d0c5     bra	0x2c1c               	BRA	_00354_DS_
                                           _00352_DS_:
                                           ;	.line	940; TCPIP_Stack/ETH97J60.c	if(UpdateWritePointer)
002a92   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a94   e023     bz	0x2adc                	BZ	_00336_DS_
                                           ;	.line	942; TCPIP_Stack/ETH97J60.c	WriteSave.Val = destAddr + len;
002a96   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a98   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
002a9a   2514     addwf	0x14, 0, 0x1       	ADDWF	_MACMemCopyAsync_destAddr_1_1, W, B
002a9c   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a9e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002aa0   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
002aa2   2115     addwfc	0x15, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
002aa4   6e04     movwf	0x4, 0             	MOVWF	r0x04
002aa6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002aa8   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
002aaa   6f1a     movwf	0x1a, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
002aac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002aae   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
002ab0   6f1b     movwf	0x1b, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
                                           ;	.line	943; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
002ab2   c21a     movff	0x21a, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
002ab4   ffe8
002ab6   c21b     movff	0x21b, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
002ab8   ffe8
002aba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002abc   6e05     movwf	0x5, 0             	MOVWF	r0x05
002abe   6a06     clrf	0x6, 0              	CLRF	r0x06
002ac0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ac2   010e     movlb	0xe                	BANKSEL	_EWRPTL
002ac4   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	944; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
002ac6   c21a     movff	0x21a, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
002ac8   ffe8
002aca   c21b     movff	0x21b, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
002acc   ffe8
002ace   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ad0   6e02     movwf	0x2, 0             	MOVWF	r0x02
002ad2   6a04     clrf	0x4, 0              	CLRF	r0x04
002ad4   6a04     clrf	0x4, 0              	CLRF	r0x04
002ad6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ad8   010e     movlb	0xe                	BANKSEL	_EWRPTH
002ada   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           _00336_DS_:
002adc   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	946; TCPIP_Stack/ETH97J60.c	len += sourceAddr - 1;
002ade   5116     movf	0x16, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
002ae0   0fff     addlw	0xff               	ADDLW	0xff
002ae2   6e02     movwf	0x2, 0             	MOVWF	r0x02
002ae4   0eff     movlw	0xff               	MOVLW	0xff
002ae6   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
002ae8   2117     addwfc	0x17, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
002aea   6e04     movwf	0x4, 0             	MOVWF	r0x04
002aec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002aee   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002af0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002af2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           _00337_DS_:
                                           ;	.line	947; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);
002af4   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
002af6   d7fe     bra	0x2af4               	BRA	_00337_DS_
002af8   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	948; TCPIP_Stack/ETH97J60.c	EDMASTL = LOW(sourceAddr);
002afa   5116     movf	0x16, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
002afc   6e02     movwf	0x2, 0             	MOVWF	r0x02
002afe   6a04     clrf	0x4, 0              	CLRF	r0x04
002b00   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b02   010e     movlb	0xe                	BANKSEL	_EDMASTL
002b04   6ff0     movwf	0xf0, 0x1          	MOVWF	_EDMASTL, B
002b06   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	949; TCPIP_Stack/ETH97J60.c	EDMASTH = HIGH(sourceAddr);
002b08   5117     movf	0x17, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
002b0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
002b0c   6a04     clrf	0x4, 0              	CLRF	r0x04
002b0e   6a04     clrf	0x4, 0              	CLRF	r0x04
002b10   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b12   010e     movlb	0xe                	BANKSEL	_EDMASTH
002b14   6ff1     movwf	0xf1, 0x1          	MOVWF	_EDMASTH, B
002b16   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	950; TCPIP_Stack/ETH97J60.c	EDMADSTL = LOW(destAddr);
002b18   5114     movf	0x14, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
002b1a   6e02     movwf	0x2, 0             	MOVWF	r0x02
002b1c   6a04     clrf	0x4, 0              	CLRF	r0x04
002b1e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b20   010e     movlb	0xe                	BANKSEL	_EDMADSTL
002b22   6ff4     movwf	0xf4, 0x1          	MOVWF	_EDMADSTL, B
002b24   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	951; TCPIP_Stack/ETH97J60.c	EDMADSTH = HIGH(destAddr);
002b26   5115     movf	0x15, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
002b28   6e02     movwf	0x2, 0             	MOVWF	r0x02
002b2a   6a04     clrf	0x4, 0              	CLRF	r0x04
002b2c   6a04     clrf	0x4, 0              	CLRF	r0x04
002b2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b30   010e     movlb	0xe                	BANKSEL	_EDMADSTH
002b32   6ff5     movwf	0xf5, 0x1          	MOVWF	_EDMADSTH, B
                                           ;	.line	952; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
002b34   c216     movff	0x216, 0x2         	MOVFF	_MACMemCopyAsync_sourceAddr_1_1, r0x02
002b36   f002
002b38   c217     movff	0x217, 0x4         	MOVFF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), r0x04
002b3a   f004
002b3c   6a05     clrf	0x5, 0              	CLRF	r0x05
002b3e   6a06     clrf	0x6, 0              	CLRF	r0x06
002b40   0e00     movlw	0                  	MOVLW	0x00
002b42   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002b44   e108     bnz	0x2b56               	BNZ	_00394_DS_
002b46   0e00     movlw	0                  	MOVLW	0x00
002b48   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002b4a   e105     bnz	0x2b56               	BNZ	_00394_DS_
002b4c   0e1a     movlw	0x1a               	MOVLW	0x1a
002b4e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
002b50   e102     bnz	0x2b56               	BNZ	_00394_DS_
002b52   0e0a     movlw	0xa                	MOVLW	0x0a
002b54   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00394_DS_:
002b56   6a02     clrf	0x2, 0              	CLRF	r0x02
002b58   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
002b5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b5c   e11e     bnz	0x2b9a               	BNZ	_00341_DS_
002b5e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002b60   f004
002b62   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002b64   f005
002b66   6a06     clrf	0x6, 0              	CLRF	r0x06
002b68   6a07     clrf	0x7, 0              	CLRF	r0x07
002b6a   0e00     movlw	0                  	MOVLW	0x00
002b6c   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
002b6e   e108     bnz	0x2b80               	BNZ	_00395_DS_
002b70   0e00     movlw	0                  	MOVLW	0x00
002b72   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002b74   e105     bnz	0x2b80               	BNZ	_00395_DS_
002b76   0e1a     movlw	0x1a               	MOVLW	0x1a
002b78   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002b7a   e102     bnz	0x2b80               	BNZ	_00395_DS_
002b7c   0e0a     movlw	0xa                	MOVLW	0x0a
002b7e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00395_DS_:
002b80   e30c     bnc	0x2b9a               	BNC	_00341_DS_
                                           ;	.line	953; TCPIP_Stack/ETH97J60.c	len -= RXSIZE; //it is a circular buffer
002b82   0ef6     movlw	0xf6               	MOVLW	0xf6
002b84   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
002b86   0ee5     movlw	0xe5               	MOVLW	0xe5
002b88   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002b8a   0eff     movlw	0xff               	MOVLW	0xff
002b8c   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002b8e   0eff     movlw	0xff               	MOVLW	0xff
002b90   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
002b92   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002b94   6e00     movwf	0, 0               	MOVWF	r0x00
002b96   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002b98   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00341_DS_:
                                           ;	.line	954; TCPIP_Stack/ETH97J60.c	EDMANDL = LOW(len);
002b9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b9c   6e04     movwf	0x4, 0             	MOVWF	r0x04
002b9e   6a05     clrf	0x5, 0              	CLRF	r0x05
002ba0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ba2   010e     movlb	0xe                	BANKSEL	_EDMANDL
002ba4   6ff2     movwf	0xf2, 0x1          	MOVWF	_EDMANDL, B
                                           ;	.line	955; TCPIP_Stack/ETH97J60.c	EDMANDH = HIGH(len);
002ba6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ba8   6e04     movwf	0x4, 0             	MOVWF	r0x04
002baa   6a05     clrf	0x5, 0              	CLRF	r0x05
002bac   6a05     clrf	0x5, 0              	CLRF	r0x05
002bae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002bb0   010e     movlb	0xe                	BANKSEL	_EDMANDH
002bb2   6ff3     movwf	0xf3, 0x1          	MOVWF	_EDMANDH, B
                                           ;	.line	956; TCPIP_Stack/ETH97J60.c	ECON1bits.CSUMEN = 0;
002bb4   98d2     bcf	0xd2, 0x4, 0         	BCF	_ECON1bits, 4
                                           ;	.line	957; TCPIP_Stack/ETH97J60.c	ECON1bits.DMAST = 1;
002bb6   8ad2     bsf	0xd2, 0x5, 0         	BSF	_ECON1bits, 5
                                           _00343_DS_:
                                           ;	.line	958; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);	// DMA requires that you must not 
002bb8   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
002bba   d7fe     bra	0x2bb8               	BRA	_00343_DS_
                                           ;	.line	961; TCPIP_Stack/ETH97J60.c	if(UpdateReadPointer)
002bbc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002bbe   e02e     bz	0x2c1c                	BZ	_00354_DS_
                                           ;	.line	963; TCPIP_Stack/ETH97J60.c	len++;
002bc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002bc2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002bc4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
                                           ;	.line	964; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
002bc6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002bc8   e11e     bnz	0x2c06               	BNZ	_00347_DS_
002bca   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
002bcc   f002
002bce   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
002bd0   f003
002bd2   6a04     clrf	0x4, 0              	CLRF	r0x04
002bd4   6a05     clrf	0x5, 0              	CLRF	r0x05
002bd6   0e00     movlw	0                  	MOVLW	0x00
002bd8   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002bda   e108     bnz	0x2bec               	BNZ	_00398_DS_
002bdc   0e00     movlw	0                  	MOVLW	0x00
002bde   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
002be0   e105     bnz	0x2bec               	BNZ	_00398_DS_
002be2   0e1a     movlw	0x1a               	MOVLW	0x1a
002be4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
002be6   e102     bnz	0x2bec               	BNZ	_00398_DS_
002be8   0e0a     movlw	0xa                	MOVLW	0x0a
002bea   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00398_DS_:
002bec   e30c     bnc	0x2c06               	BNC	_00347_DS_
                                           ;	.line	965; TCPIP_Stack/ETH97J60.c	len -= RXSIZE;
002bee   0ef6     movlw	0xf6               	MOVLW	0xf6
002bf0   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
002bf2   0ee5     movlw	0xe5               	MOVLW	0xe5
002bf4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002bf6   0eff     movlw	0xff               	MOVLW	0xff
002bf8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002bfa   0eff     movlw	0xff               	MOVLW	0xff
002bfc   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002bfe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c00   6e00     movwf	0, 0               	MOVWF	r0x00
002c02   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002c04   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00347_DS_:
                                           ;	.line	966; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(len);
002c06   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c08   6e02     movwf	0x2, 0             	MOVWF	r0x02
002c0a   6a03     clrf	0x3, 0              	CLRF	r0x03
002c0c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002c0e   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	967; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(len);
002c10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002c12   6e00     movwf	0, 0               	MOVWF	r0x00
002c14   6a01     clrf	0x1, 0              	CLRF	r0x01
002c16   6a01     clrf	0x1, 0              	CLRF	r0x01
002c18   5000     movf	0, 0, 0             	MOVF	r0x00, W
002c1a   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00354_DS_:
002c1c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002c1e   f007
002c20   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002c22   f006
002c24   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002c26   f005
002c28   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002c2a   f004
002c2c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c2e   f003
002c30   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c32   f002
002c34   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c36   f001
002c38   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c3a   f000
002c3c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c3e   ffd9
002c40   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__CalcIPBufferChecksum	code
                                           _CalcIPBufferChecksum:
                                           ;	.line	824; TCPIP_Stack/ETH97J60.c	WORD CalcIPBufferChecksum(WORD len)
001ad4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ad6   ffe5
001ad8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ada   ffd9
001adc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001ade   ffe5
001ae0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001ae2   ffe5
001ae4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001ae6   ffe5
001ae8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001aea   ffe5
001aec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001aee   ffe5
001af0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001af2   ffe5
001af4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001af6   ffe5
001af8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001afa   ffe5
001afc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001afe   ffe5
001b00   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001b02   ffe5
001b04   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001b06   ffe5
001b08   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001b0a   ffe5
001b0c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001b0e   ffe5
001b10   0e02     movlw	0x2                	MOVLW	0x02
001b12   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001b14   f000
001b16   0e03     movlw	0x3                	MOVLW	0x03
001b18   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001b1a   f001
001b1c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	827; TCPIP_Stack/ETH97J60.c	DWORD_VAL Checksum = {0x00000000ul};
001b1e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b20   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b22   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b24   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001b26   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001b28   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001b2a   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001b2c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b2e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b30   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b32   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b34   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001b36   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001b38   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001b3a   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001b3c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b3e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b40   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b42   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b44   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001b46   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001b48   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001b4a   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001b4c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b4e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b50   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b52   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b54   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001b56   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001b58   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001b5a   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001b5c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b5e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b60   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b62   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b64   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001b66   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001b68   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001b6a   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001b6c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b6e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b70   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b72   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b74   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b76   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b78   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b7a   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b7c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b7e   6bba     clrf	0xba, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
001b80   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001b82   6bbb     clrf	0xbb, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001b84   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b86   91ba     bcf	0xba, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
001b88   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b8a   93ba     bcf	0xba, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
001b8c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b8e   95ba     bcf	0xba, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
001b90   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b92   97ba     bcf	0xba, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
001b94   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b96   99ba     bcf	0xba, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
001b98   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b9a   9bba     bcf	0xba, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
001b9c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001b9e   9dba     bcf	0xba, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
001ba0   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001ba2   9fba     bcf	0xba, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
001ba4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001ba6   91bb     bcf	0xbb, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
001ba8   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001baa   93bb     bcf	0xbb, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
001bac   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001bae   95bb     bcf	0xbb, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
001bb0   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001bb2   97bb     bcf	0xbb, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
001bb4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001bb6   99bb     bcf	0xbb, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
001bb8   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001bba   9bbb     bcf	0xbb, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
001bbc   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001bbe   9dbb     bcf	0xbb, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
001bc0   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001bc2   9fbb     bcf	0xbb, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
001bc4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bc6   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001bc8   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001bca   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001bcc   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bce   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001bd0   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001bd2   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001bd4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bd6   6bbc     clrf	0xbc, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001bd8   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001bda   6bbd     clrf	0xbd, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001bdc   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bde   91bc     bcf	0xbc, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
001be0   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001be2   93bc     bcf	0xbc, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
001be4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001be6   95bc     bcf	0xbc, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
001be8   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bea   97bc     bcf	0xbc, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
001bec   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bee   99bc     bcf	0xbc, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
001bf0   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bf2   9bbc     bcf	0xbc, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
001bf4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bf6   9dbc     bcf	0xbc, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
001bf8   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001bfa   9fbc     bcf	0xbc, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
001bfc   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001bfe   91bd     bcf	0xbd, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
001c00   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c02   93bd     bcf	0xbd, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
001c04   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c06   95bd     bcf	0xbd, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
001c08   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c0a   97bd     bcf	0xbd, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
001c0c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c0e   99bd     bcf	0xbd, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
001c10   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c12   9bbd     bcf	0xbd, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
001c14   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c16   9dbd     bcf	0xbd, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
001c18   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c1a   9fbd     bcf	0xbd, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
001c1c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c1e   91ba     bcf	0xba, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
001c20   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c22   93ba     bcf	0xba, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
001c24   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c26   95ba     bcf	0xba, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
001c28   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c2a   97ba     bcf	0xba, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
001c2c   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c2e   99ba     bcf	0xba, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
001c30   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c32   9bba     bcf	0xba, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
001c34   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c36   9dba     bcf	0xba, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
001c38   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001c3a   9fba     bcf	0xba, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
001c3c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c3e   91bb     bcf	0xbb, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
001c40   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c42   93bb     bcf	0xbb, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
001c44   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c46   95bb     bcf	0xbb, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
001c48   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c4a   97bb     bcf	0xbb, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
001c4c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c4e   99bb     bcf	0xbb, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
001c50   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c52   9bbb     bcf	0xbb, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
001c54   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c56   9dbb     bcf	0xbb, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
001c58   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001c5a   9fbb     bcf	0xbb, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
001c5c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c5e   91bc     bcf	0xbc, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
001c60   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c62   93bc     bcf	0xbc, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
001c64   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c66   95bc     bcf	0xbc, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
001c68   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c6a   97bc     bcf	0xbc, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
001c6c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c6e   99bc     bcf	0xbc, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
001c70   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c72   9bbc     bcf	0xbc, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
001c74   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c76   9dbc     bcf	0xbc, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
001c78   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001c7a   9fbc     bcf	0xbc, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
001c7c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c7e   91bd     bcf	0xbd, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
001c80   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c82   93bd     bcf	0xbd, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
001c84   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c86   95bd     bcf	0xbd, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
001c88   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c8a   97bd     bcf	0xbd, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
001c8c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c8e   99bd     bcf	0xbd, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
001c90   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c92   9bbd     bcf	0xbd, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
001c94   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c96   9dbd     bcf	0xbd, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
001c98   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001c9a   9fbd     bcf	0xbd, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
                                           ;	.line	833; TCPIP_Stack/ETH97J60.c	Start = ((WORD)ERDPTH)<<8|ERDPTL;
001c9c   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
001c9e   f002
001ca0   6a03     clrf	0x3, 0              	CLRF	r0x03
001ca2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ca4   6e05     movwf	0x5, 0             	MOVWF	r0x05
001ca6   6a04     clrf	0x4, 0              	CLRF	r0x04
001ca8   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
001caa   f002
001cac   6a03     clrf	0x3, 0              	CLRF	r0x03
001cae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cb0   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
001cb2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cb4   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
                                           _00305_DS_:
                                           ;	.line	835; TCPIP_Stack/ETH97J60.c	while(len)
001cb6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cb8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001cba   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001cbc   d07d     bra	0x1db8               	BRA	_00307_DS_
                                           ;	.line	839; TCPIP_Stack/ETH97J60.c	ChunkLen = len > sizeof(DataBuffer) ? sizeof(DataBuffer) : len;
001cbe   0e00     movlw	0                  	MOVLW	0x00
001cc0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
001cc2   e102     bnz	0x1cc8               	BNZ	_00319_DS_
001cc4   0e15     movlw	0x15               	MOVLW	0x15
001cc6   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00319_DS_:
001cc8   e304     bnc	0x1cd2               	BNC	_00310_DS_
001cca   0e14     movlw	0x14               	MOVLW	0x14
001ccc   6e04     movwf	0x4, 0             	MOVWF	r0x04
001cce   6a05     clrf	0x5, 0              	CLRF	r0x05
001cd0   d004     bra	0x1cda               	BRA	_00311_DS_
                                           _00310_DS_:
001cd2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001cd4   f004
001cd6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001cd8   f005
                                           _00311_DS_:
001cda   c004     movff	0x4, 0x212         	MOVFF	r0x04, _CalcIPBufferChecksum_ChunkLen_1_1
001cdc   f212
001cde   c005     movff	0x5, 0x213         	MOVFF	r0x05, (_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001ce0   f213
                                           ;	.line	840; TCPIP_Stack/ETH97J60.c	MACGetArray(DataBuffer, ChunkLen);
001ce2   0e0a     movlw	0xa                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001ce4   6e07     movwf	0x7, 0             	MOVWF	r0x07
001ce6   0eea     movlw	0xea               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001ce8   6e06     movwf	0x6, 0             	MOVWF	r0x06
001cea   0e80     movlw	0x80               	MOVLW	0x80
001cec   6e08     movwf	0x8, 0             	MOVWF	r0x08
001cee   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cf2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cf6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cfa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cfe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d02   ec20     call	0x9240, 0           	CALL	_MACGetArray
001d04   f049
001d06   0e05     movlw	0x5                	MOVLW	0x05
001d08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	842; TCPIP_Stack/ETH97J60.c	len -= ChunkLen;
001d0a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d0c   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
001d0e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d10   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
001d12   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	845; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&ChunkLen)->bits.b0)
001d14   a112     btfss	0x12, 0, 0x1       	BTFSS	_CalcIPBufferChecksum_ChunkLen_1_1, 0, B
001d16   d013     bra	0x1d3e               	BRA	_00301_DS_
                                           ;	.line	847; TCPIP_Stack/ETH97J60.c	DataBuffer[ChunkLen] = 0x00;
001d18   0eea     movlw	0xea               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001d1a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
001d1c   2512     addwf	0x12, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_ChunkLen_1_1, W, B
001d1e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d20   0e0a     movlw	0xa                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001d22   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001d24   2113     addwfc	0x13, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), W, B
001d26   6e05     movwf	0x5, 0             	MOVWF	r0x05
001d28   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001d2a   ffe9
001d2c   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001d2e   ffea
001d30   0e00     movlw	0                  	MOVLW	0x00
001d32   6eef     movwf	0xef, 0            	MOVWF	INDF0
001d34   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	848; TCPIP_Stack/ETH97J60.c	ChunkLen++;
001d36   2b12     incf	0x12, 0x1, 0x1      	INCF	_CalcIPBufferChecksum_ChunkLen_1_1, F, B
001d38   e302     bnc	0x1d3e               	BNC	_10492_DS_
001d3a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001d3c   2b13     incf	0x13, 0x1, 0x1      	INCF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), F, B
                                           _10492_DS_:
                                           _00301_DS_:
                                           ;	.line	852; TCPIP_Stack/ETH97J60.c	DataPtr = (WORD*)&DataBuffer[0];
001d3e   0e0a     movlw	0xa                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001d40   6e05     movwf	0x5, 0             	MOVWF	r0x05
001d42   0eea     movlw	0xea               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001d44   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d46   0e80     movlw	0x80               	MOVLW	0x80
001d48   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/ETH97J60.c	while(ChunkLen)
001d4a   c212     movff	0x212, 0x7         	MOVFF	_CalcIPBufferChecksum_ChunkLen_1_1, r0x07
001d4c   f007
001d4e   c213     movff	0x213, 0x8         	MOVFF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), r0x08
001d50   f008
                                           _00302_DS_:
001d52   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d54   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001d56   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001d58   d7ae     bra	0x1cb6               	BRA	_00305_DS_
                                           ;	.line	855; TCPIP_Stack/ETH97J60.c	Checksum.Val += *DataPtr++;
001d5a   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001d5c   ffe9
001d5e   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
001d60   fff3
001d62   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d64   ec88     call	0xad10, 0           	CALL	__gptrget2
001d66   f056
001d68   6e09     movwf	0x9, 0             	MOVWF	r0x09
001d6a   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001d6c   f00a
001d6e   0e02     movlw	0x2                	MOVLW	0x02
001d70   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001d72   0e00     movlw	0                  	MOVLW	0x00
001d74   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001d76   0e00     movlw	0                  	MOVLW	0x00
001d78   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001d7a   6a0b     clrf	0xb, 0              	CLRF	r0x0b
001d7c   6a0c     clrf	0xc, 0              	CLRF	r0x0c
001d7e   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001d80   51ba     movf	0xba, 0, 0x1        	MOVF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001d82   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
001d84   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001d86   51bb     movf	0xbb, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001d88   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
001d8a   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001d8c   51bc     movf	0xbc, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
001d8e   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
001d90   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001d92   51bd     movf	0xbd, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
001d94   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
001d96   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001d98   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001d9a   6fba     movwf	0xba, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001d9c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001d9e   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001da0   6fbb     movwf	0xbb, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001da2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001da4   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001da6   6fbc     movwf	0xbc, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001da8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001daa   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001dac   6fbd     movwf	0xbd, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
                                           ;	.line	856; TCPIP_Stack/ETH97J60.c	ChunkLen -= 2;
001dae   0efe     movlw	0xfe               	MOVLW	0xfe
001db0   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
001db2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001db4   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
001db6   d7cd     bra	0x1d52               	BRA	_00302_DS_
                                           _00307_DS_:
                                           ;	.line	861; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(Start);
001db8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dba   6e00     movwf	0, 0               	MOVWF	r0x00
001dbc   6a01     clrf	0x1, 0              	CLRF	r0x01
001dbe   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dc0   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	862; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(Start);
001dc2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dc4   6e02     movwf	0x2, 0             	MOVWF	r0x02
001dc6   6a03     clrf	0x3, 0              	CLRF	r0x03
001dc8   6a03     clrf	0x3, 0              	CLRF	r0x03
001dca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dcc   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	865; TCPIP_Stack/ETH97J60.c	Checksum.Val = (DWORD)Checksum.w[0] + (DWORD)Checksum.w[1];
001dce   cbba     movff	0xbba, 0           	MOVFF	_CalcIPBufferChecksum_Checksum_1_1, r0x00
001dd0   f000
001dd2   cbbb     movff	0xbbb, 0x1         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), r0x01
001dd4   f001
001dd6   6a02     clrf	0x2, 0              	CLRF	r0x02
001dd8   6a03     clrf	0x3, 0              	CLRF	r0x03
001dda   cbbc     movff	0xbbc, 0x4         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), r0x04
001ddc   f004
001dde   cbbd     movff	0xbbd, 0x5         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), r0x05
001de0   f005
001de2   6a06     clrf	0x6, 0              	CLRF	r0x06
001de4   6a07     clrf	0x7, 0              	CLRF	r0x07
001de6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001de8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001dea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001dee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001df0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001df2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001df4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001df6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001df8   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001dfa   6fba     movwf	0xba, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001dfc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001dfe   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001e00   6fbb     movwf	0xbb, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001e02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e04   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001e06   6fbc     movwf	0xbc, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001e08   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e0a   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001e0c   6fbd     movwf	0xbd, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001e0e   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
                                           ;	.line	869; TCPIP_Stack/ETH97J60.c	Checksum.w[0] += Checksum.w[1];
001e10   51bc     movf	0xbc, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
001e12   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001e14   25ba     addwf	0xba, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001e16   6e00     movwf	0, 0               	MOVWF	r0x00
001e18   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001e1a   51bd     movf	0xbd, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
001e1c   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001e1e   21bb     addwfc	0xbb, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001e20   6e01     movwf	0x1, 0             	MOVWF	r0x01
001e22   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e24   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001e26   6fba     movwf	0xba, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001e28   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e2a   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001e2c   6fbb     movwf	0xbb, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001e2e   010b     movlb	0xb                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	872; TCPIP_Stack/ETH97J60.c	return ~Checksum.w[0];
001e30   1dba     comf	0xba, 0, 0x1        	COMF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001e32   6e00     movwf	0, 0               	MOVWF	r0x00
001e34   010b     movlb	0xb                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001e36   1dbb     comf	0xbb, 0, 0x1        	COMF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001e38   6e01     movwf	0x1, 0             	MOVWF	r0x01
001e3a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001e3c   fff3
001e3e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e40   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001e42   f00c
001e44   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001e46   f00b
001e48   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001e4a   f00a
001e4c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001e4e   f009
001e50   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001e52   f008
001e54   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001e56   f007
001e58   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001e5a   f006
001e5c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e5e   f005
001e60   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e62   f004
001e64   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e66   f003
001e68   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e6a   f002
001e6c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e6e   f001
001e70   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e72   f000
001e74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e76   ffd9
001e78   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACCalcRxChecksum	code
                                           _MACCalcRxChecksum:
                                           ;	.line	699; TCPIP_Stack/ETH97J60.c	WORD MACCalcRxChecksum(WORD offset, WORD len)
0081da   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0081dc   ffe5
0081de   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0081e0   ffd9
0081e2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0081e4   ffe5
0081e6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0081e8   ffe5
0081ea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0081ec   ffe5
0081ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0081f0   ffe5
0081f2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0081f4   ffe5
0081f6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0081f8   ffe5
0081fa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0081fc   ffe5
0081fe   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008200   ffe5
008202   0e02     movlw	0x2                	MOVLW	0x02
008204   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008206   f000
008208   0e03     movlw	0x3                	MOVLW	0x03
00820a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00820c   f001
00820e   0e04     movlw	0x4                	MOVLW	0x04
008210   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008212   f002
008214   0e05     movlw	0x5                	MOVLW	0x05
008216   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008218   f003
00821a   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	705; TCPIP_Stack/ETH97J60.c	temp = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
00821c   5104     movf	0x4, 0, 0x1         	MOVF	_CurrentPacketLocation, W, B
00821e   0f14     addlw	0x14               	ADDLW	0x14
008220   6e04     movwf	0x4, 0             	MOVWF	r0x04
008222   0e00     movlw	0                  	MOVLW	0x00
008224   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
008226   2105     addwfc	0x5, 0, 0x1       	ADDWFC	(_CurrentPacketLocation + 1), W, B
008228   6e05     movwf	0x5, 0             	MOVWF	r0x05
00822a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00822c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00822e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008230   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           ;	.line	706; TCPIP_Stack/ETH97J60.c	if(temp > RXSTOP)		// Adjust value if a wrap is needed
008232   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
008234   f004
008236   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
008238   f005
00823a   6a06     clrf	0x6, 0              	CLRF	r0x06
00823c   6a07     clrf	0x7, 0              	CLRF	r0x07
00823e   0e00     movlw	0                  	MOVLW	0x00
008240   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
008242   e108     bnz	0x8254               	BNZ	_00295_DS_
008244   0e00     movlw	0                  	MOVLW	0x00
008246   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
008248   e105     bnz	0x8254               	BNZ	_00295_DS_
00824a   0e1a     movlw	0x1a               	MOVLW	0x1a
00824c   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00824e   e102     bnz	0x8254               	BNZ	_00295_DS_
008250   0e0a     movlw	0xa                	MOVLW	0x0a
008252   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00295_DS_:
008254   e30c     bnc	0x826e               	BNC	_00291_DS_
                                           ;	.line	708; TCPIP_Stack/ETH97J60.c	temp -= RXSIZE;
008256   0ef6     movlw	0xf6               	MOVLW	0xf6
008258   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00825a   0ee5     movlw	0xe5               	MOVLW	0xe5
00825c   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00825e   0eff     movlw	0xff               	MOVLW	0xff
008260   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
008262   0eff     movlw	0xff               	MOVLW	0xff
008264   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
008266   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008268   6e00     movwf	0, 0               	MOVWF	r0x00
00826a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00826c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00291_DS_:
                                           ;	.line	711; TCPIP_Stack/ETH97J60.c	RDSave = ((WORD)ERDPTH)<<8|ERDPTL;
00826e   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
008270   f004
008272   6a05     clrf	0x5, 0              	CLRF	r0x05
008274   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008276   6e07     movwf	0x7, 0             	MOVWF	r0x07
008278   6a06     clrf	0x6, 0              	CLRF	r0x06
00827a   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
00827c   f004
00827e   6a05     clrf	0x5, 0              	CLRF	r0x05
008280   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008282   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
008284   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008286   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
                                           ;	.line	712; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(temp);
008288   5000     movf	0, 0, 0             	MOVF	r0x00, W
00828a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00828c   6a05     clrf	0x5, 0              	CLRF	r0x05
00828e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008290   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	713; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(temp);
008292   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008294   6e04     movwf	0x4, 0             	MOVWF	r0x04
008296   6a05     clrf	0x5, 0              	CLRF	r0x05
008298   6a05     clrf	0x5, 0              	CLRF	r0x05
00829a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00829c   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	714; TCPIP_Stack/ETH97J60.c	temp = CalcIPBufferChecksum(len);
00829e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0082a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0082a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0082a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0082a6   ec6a     call	0x1ad4, 0           	CALL	_CalcIPBufferChecksum
0082a8   f00d
0082aa   6e00     movwf	0, 0               	MOVWF	r0x00
0082ac   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0082ae   f001
0082b0   0e02     movlw	0x2                	MOVLW	0x02
0082b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	715; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(RDSave);
0082b4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0082b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0082b8   6a03     clrf	0x3, 0              	CLRF	r0x03
0082ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0082bc   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	716; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(RDSave);
0082be   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0082c0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0082c2   6a07     clrf	0x7, 0              	CLRF	r0x07
0082c4   6a07     clrf	0x7, 0              	CLRF	r0x07
0082c6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0082c8   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	718; TCPIP_Stack/ETH97J60.c	return temp;
0082ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0082cc   fff3
0082ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0082d0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0082d2   f007
0082d4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0082d6   f006
0082d8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0082da   f005
0082dc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0082de   f004
0082e0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0082e2   f003
0082e4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0082e6   f002
0082e8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0082ea   f001
0082ec   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0082ee   f000
0082f0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0082f2   ffd9
0082f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtr	code
                                           _MACSetReadPtr:
                                           ;	.line	669; TCPIP_Stack/ETH97J60.c	WORD MACSetReadPtr(WORD address)
00a394   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a396   ffe5
00a398   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a39a   ffd9
00a39c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a39e   ffe5
00a3a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a3a2   ffe5
00a3a4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a3a6   ffe5
00a3a8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a3aa   ffe5
00a3ac   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a3ae   ffe5
00a3b0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a3b2   ffe5
00a3b4   0e02     movlw	0x2                	MOVLW	0x02
00a3b6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a3b8   f000
00a3ba   0e03     movlw	0x3                	MOVLW	0x03
00a3bc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a3be   f001
                                           ;	.line	673; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)ERDPTH)<<8|ERDPTL;
00a3c0   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
00a3c2   f002
00a3c4   6a03     clrf	0x3, 0              	CLRF	r0x03
00a3c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a3c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a3ca   6a04     clrf	0x4, 0              	CLRF	r0x04
00a3cc   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
00a3ce   f002
00a3d0   6a03     clrf	0x3, 0              	CLRF	r0x03
00a3d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a3d4   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
00a3d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a3d8   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	674; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(address);
00a3da   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a3dc   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a3de   6a03     clrf	0x3, 0              	CLRF	r0x03
00a3e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a3e2   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	675; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(address);
00a3e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a3e6   6e00     movwf	0, 0               	MOVWF	r0x00
00a3e8   6a01     clrf	0x1, 0              	CLRF	r0x01
00a3ea   6a01     clrf	0x1, 0              	CLRF	r0x01
00a3ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a3ee   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	676; TCPIP_Stack/ETH97J60.c	return oldVal;
00a3f0   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00a3f2   fff3
00a3f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a3f6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a3f8   f005
00a3fa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a3fc   f004
00a3fe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a400   f003
00a402   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a404   f002
00a406   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a408   f001
00a40a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a40c   f000
00a40e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a410   ffd9
00a412   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetWritePtr	code
                                           _MACSetWritePtr:
                                           ;	.line	642; TCPIP_Stack/ETH97J60.c	WORD MACSetWritePtr(WORD address)
00a310   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a312   ffe5
00a314   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a316   ffd9
00a318   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a31a   ffe5
00a31c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a31e   ffe5
00a320   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a322   ffe5
00a324   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a326   ffe5
00a328   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a32a   ffe5
00a32c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a32e   ffe5
00a330   0e02     movlw	0x2                	MOVLW	0x02
00a332   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a334   f000
00a336   0e03     movlw	0x3                	MOVLW	0x03
00a338   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a33a   f001
                                           ;	.line	646; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)EWRPTH)<<8|EWRPTL;
00a33c   cee3     movff	0xee3, 0x2         	MOVFF	_EWRPTH, r0x02
00a33e   f002
00a340   6a03     clrf	0x3, 0              	CLRF	r0x03
00a342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a344   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a346   6a04     clrf	0x4, 0              	CLRF	r0x04
00a348   cee2     movff	0xee2, 0x2         	MOVFF	_EWRPTL, r0x02
00a34a   f002
00a34c   6a03     clrf	0x3, 0              	CLRF	r0x03
00a34e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a350   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
00a352   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a354   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	648; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(address);
00a356   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a358   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a35a   6a03     clrf	0x3, 0              	CLRF	r0x03
00a35c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a35e   010e     movlb	0xe                	BANKSEL	_EWRPTL
00a360   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	649; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(address);
00a362   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a364   6e00     movwf	0, 0               	MOVWF	r0x00
00a366   6a01     clrf	0x1, 0              	CLRF	r0x01
00a368   6a01     clrf	0x1, 0              	CLRF	r0x01
00a36a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a36c   010e     movlb	0xe                	BANKSEL	_EWRPTH
00a36e   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	650; TCPIP_Stack/ETH97J60.c	return oldVal;
00a370   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00a372   fff3
00a374   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a376   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a378   f005
00a37a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a37c   f004
00a37e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a380   f003
00a382   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a384   f002
00a386   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a388   f001
00a38a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a38c   f000
00a38e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a390   ffd9
00a392   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtrInRx	code
                                           _MACSetReadPtrInRx:
                                           ;	.line	609; TCPIP_Stack/ETH97J60.c	void MACSetReadPtrInRx(WORD offset)
0098ec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0098ee   ffe5
0098f0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0098f2   ffd9
0098f4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0098f6   ffe5
0098f8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0098fa   ffe5
0098fc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0098fe   ffe5
009900   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009902   ffe5
009904   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009906   ffe5
009908   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00990a   ffe5
00990c   0e02     movlw	0x2                	MOVLW	0x02
00990e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009910   f000
009912   0e03     movlw	0x3                	MOVLW	0x03
009914   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009916   f001
009918   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	615; TCPIP_Stack/ETH97J60.c	ReadPT.Val = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
00991a   5104     movf	0x4, 0, 0x1         	MOVF	_CurrentPacketLocation, W, B
00991c   0f14     addlw	0x14               	ADDLW	0x14
00991e   6e02     movwf	0x2, 0             	MOVWF	r0x02
009920   0e00     movlw	0                  	MOVLW	0x00
009922   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
009924   2105     addwfc	0x5, 0, 0x1       	ADDWFC	(_CurrentPacketLocation + 1), W, B
009926   6e03     movwf	0x3, 0             	MOVWF	r0x03
009928   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00992a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00992c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00992e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009930   5000     movf	0, 0, 0             	MOVF	r0x00, W
009932   0102     movlb	0x2                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
009934   6f10     movwf	0x10, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
009936   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009938   0102     movlb	0x2                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00993a   6f11     movwf	0x11, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           ;	.line	618; TCPIP_Stack/ETH97J60.c	if(ReadPT.Val > RXSTOP)  ReadPT.Val -= RXSIZE;
00993c   c210     movff	0x210, 0x2         	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, r0x02
00993e   f002
009940   c211     movff	0x211, 0x3         	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), r0x03
009942   f003
009944   6a04     clrf	0x4, 0              	CLRF	r0x04
009946   6a05     clrf	0x5, 0              	CLRF	r0x05
009948   0e00     movlw	0                  	MOVLW	0x00
00994a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00994c   e108     bnz	0x995e               	BNZ	_00275_DS_
00994e   0e00     movlw	0                  	MOVLW	0x00
009950   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
009952   e105     bnz	0x995e               	BNZ	_00275_DS_
009954   0e1a     movlw	0x1a               	MOVLW	0x1a
009956   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
009958   e102     bnz	0x995e               	BNZ	_00275_DS_
00995a   0e0a     movlw	0xa                	MOVLW	0x0a
00995c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00275_DS_:
00995e   e310     bnc	0x9980               	BNC	_00271_DS_
009960   6a00     clrf	0, 0                	CLRF	r0x00
009962   6a01     clrf	0x1, 0              	CLRF	r0x01
009964   0ef6     movlw	0xf6               	MOVLW	0xf6
009966   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
009968   0ee5     movlw	0xe5               	MOVLW	0xe5
00996a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00996c   0eff     movlw	0xff               	MOVLW	0xff
00996e   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
009970   0eff     movlw	0xff               	MOVLW	0xff
009972   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009974   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009976   0102     movlb	0x2                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
009978   6f10     movwf	0x10, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
00997a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00997c   0102     movlb	0x2                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00997e   6f11     movwf	0x11, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           _00271_DS_:
                                           ;	.line	621; TCPIP_Stack/ETH97J60.c	ERDPTL = ReadPT.v[0];
009980   c210     movff	0x210, 0xf7a       	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, _ERDPTL
009982   ff7a
                                           ;	.line	622; TCPIP_Stack/ETH97J60.c	ERDPTH = ReadPT.v[1];
009984   c211     movff	0x211, 0xf7b       	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), _ERDPTH
009986   ff7b
009988   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00998a   f005
00998c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00998e   f004
009990   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009992   f003
009994   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009996   f002
009998   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00999a   f001
00999c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00999e   f000
0099a0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0099a2   ffd9
0099a4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACFlush	code
                                           _MACFlush:
                                           ;	.line	563; TCPIP_Stack/ETH97J60.c	void MACFlush(void)
00a6da   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a6dc   ffe5
00a6de   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a6e0   ffd9
00a6e2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a6e4   ffe5
00a6e6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a6e8   ffe5
00a6ea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a6ec   ffe5
00a6ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a6f0   ffe5
                                           ;	.line	569; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 1;
00a6f2   8ed2     bsf	0xd2, 0x7, 0         	BSF	_ECON1bits, 7
                                           ;	.line	570; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 0;
00a6f4   9ed2     bcf	0xd2, 0x7, 0         	BCF	_ECON1bits, 7
                                           ;	.line	574; TCPIP_Stack/ETH97J60.c	{volatile BYTE i = 8; while(i--);}
00a6f6   0e08     movlw	0x8                	MOVLW	0x08
00a6f8   0102     movlb	0x2                	BANKSEL	_MACFlush_i_2_2
00a6fa   6f43     movwf	0x43, 0x1          	MOVWF	_MACFlush_i_2_2, B
                                           _00262_DS_:
00a6fc   c243     movff	0x243, 0           	MOVFF	_MACFlush_i_2_2, r0x00
00a6fe   f000
00a700   0102     movlb	0x2                	BANKSEL	_MACFlush_i_2_2
00a702   0743     decf	0x43, 0x1, 0x1      	DECF	_MACFlush_i_2_2, F, B
00a704   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a706   e1fa     bnz	0xa6fc               	BNZ	_00262_DS_
                                           ;	.line	575; TCPIP_Stack/ETH97J60.c	EIRbits.TXERIF = 0;
00a708   9260     bcf	0x60, 0x1, 0         	BCF	_EIRbits, 1
                                           ;	.line	582; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 1;
00a70a   86d2     bsf	0xd2, 0x3, 0         	BSF	_ECON1bits, 3
                                           ;	.line	583; TCPIP_Stack/ETH97J60.c	wTXWatchdog = TickGet();
00a70c   ec01     call	0xae02, 0           	CALL	_TickGet
00a70e   f057
00a710   6e00     movwf	0, 0               	MOVWF	r0x00
00a712   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00a714   f001
00a716   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00a718   f002
00a71a   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00a71c   f003
00a71e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a720   0102     movlb	0x2                	BANKSEL	_wTXWatchdog
00a722   6f06     movwf	0x6, 0x1           	MOVWF	_wTXWatchdog, B
00a724   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a726   0102     movlb	0x2                	BANKSEL	(_wTXWatchdog + 1)
00a728   6f07     movwf	0x7, 0x1           	MOVWF	(_wTXWatchdog + 1), B
00a72a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a72c   f003
00a72e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a730   f002
00a732   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a734   f001
00a736   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a738   f000
00a73a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a73c   ffd9
00a73e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutHeader	code
                                           _MACPutHeader:
                                           ;	.line	515; TCPIP_Stack/ETH97J60.c	void MACPutHeader(MAC_ADDR *remote, BYTE type, WORD dataLen)
007be0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007be2   ffe5
007be4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007be6   ffd9
007be8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007bea   ffe5
007bec   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007bee   ffe5
007bf0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007bf2   ffe5
007bf4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007bf6   ffe5
007bf8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007bfa   ffe5
007bfc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007bfe   ffe5
007c00   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007c02   ffe5
007c04   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007c06   ffe5
007c08   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007c0a   ffe5
007c0c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007c0e   ffe5
007c10   0e02     movlw	0x2                	MOVLW	0x02
007c12   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007c14   f000
007c16   0e03     movlw	0x3                	MOVLW	0x03
007c18   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007c1a   f001
007c1c   0e04     movlw	0x4                	MOVLW	0x04
007c1e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007c20   f002
007c22   0e05     movlw	0x5                	MOVLW	0x05
007c24   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
007c26   f003
007c28   0e06     movlw	0x6                	MOVLW	0x06
007c2a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007c2c   f004
007c2e   0e07     movlw	0x7                	MOVLW	0x07
007c30   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
007c32   f005
                                           ;	.line	518; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART + 1);
007c34   0e0b     movlw	0xb                	MOVLW	0x0b
007c36   010e     movlb	0xe                	BANKSEL	_EWRPTL
007c38   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	519; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART + 1);
007c3a   0e1a     movlw	0x1a               	MOVLW	0x1a
007c3c   010e     movlb	0xe                	BANKSEL	_EWRPTH
007c3e   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	522; TCPIP_Stack/ETH97J60.c	dataLen += (WORD)sizeof(ETHER_HEADER) + TXSTART;
007c40   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
007c42   f006
007c44   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
007c46   f007
007c48   6a08     clrf	0x8, 0              	CLRF	r0x08
007c4a   6a09     clrf	0x9, 0              	CLRF	r0x09
007c4c   0e18     movlw	0x18               	MOVLW	0x18
007c4e   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
007c50   0e1a     movlw	0x1a               	MOVLW	0x1a
007c52   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
007c54   0e00     movlw	0                  	MOVLW	0x00
007c56   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
007c58   0e00     movlw	0                  	MOVLW	0x00
007c5a   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
007c5c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007c5e   6e04     movwf	0x4, 0             	MOVWF	r0x04
007c60   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007c62   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	525; TCPIP_Stack/ETH97J60.c	ETXNDL = LOW(dataLen);
007c64   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007c66   6e06     movwf	0x6, 0             	MOVWF	r0x06
007c68   6a07     clrf	0x7, 0              	CLRF	r0x07
007c6a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007c6c   010e     movlb	0xe                	BANKSEL	_ETXNDL
007c6e   6fe6     movwf	0xe6, 0x1          	MOVWF	_ETXNDL, B
                                           ;	.line	526; TCPIP_Stack/ETH97J60.c	ETXNDH = HIGH(dataLen);
007c70   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007c72   6e04     movwf	0x4, 0             	MOVWF	r0x04
007c74   6a05     clrf	0x5, 0              	CLRF	r0x05
007c76   6a05     clrf	0x5, 0              	CLRF	r0x05
007c78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007c7a   010e     movlb	0xe                	BANKSEL	_ETXNDH
007c7c   6fe7     movwf	0xe7, 0x1          	MOVWF	_ETXNDH, B
                                           ;	.line	530; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)remote, sizeof(*remote));
007c7e   0e00     movlw	0                  	MOVLW	0x00
007c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c82   0e06     movlw	0x6                	MOVLW	0x06
007c84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007c88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c8a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007c8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007c90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c92   ec09     call	0x9e12, 0           	CALL	_MACPutArray
007c94   f04f
007c96   0e05     movlw	0x5                	MOVLW	0x05
007c98   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	533; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
007c9a   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
007c9c   6e01     movwf	0x1, 0             	MOVWF	r0x01
007c9e   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
007ca0   6e00     movwf	0, 0               	MOVWF	r0x00
007ca2   0e80     movlw	0x80               	MOVLW	0x80
007ca4   6e02     movwf	0x2, 0             	MOVWF	r0x02
007ca6   0e00     movlw	0                  	MOVLW	0x00
007ca8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007caa   0e06     movlw	0x6                	MOVLW	0x06
007cac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007cb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007cb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cb6   5000     movf	0, 0, 0             	MOVF	r0x00, W
007cb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cba   ec09     call	0x9e12, 0           	CALL	_MACPutArray
007cbc   f04f
007cbe   0e05     movlw	0x5                	MOVLW	0x05
007cc0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	536; TCPIP_Stack/ETH97J60.c	MACPut(0x08);
007cc2   0e08     movlw	0x8                	MOVLW	0x08
007cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cc6   ecd1     call	0xafa2, 0           	CALL	_MACPut
007cc8   f057
007cca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/ETH97J60.c	MACPut((type == MAC_IP) ? ETHER_IP : ETHER_ARP);
007ccc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007cce   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
007cd0   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
007cd2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007cd4   6a03     clrf	0x3, 0              	CLRF	r0x03
007cd6   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
007cd8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007cda   e003     bz	0x7ce2                	BZ	_00256_DS_
007cdc   6a00     clrf	0, 0                	CLRF	r0x00
007cde   6a01     clrf	0x1, 0              	CLRF	r0x01
007ce0   d003     bra	0x7ce8               	BRA	_00257_DS_
                                           _00256_DS_:
007ce2   0e06     movlw	0x6                	MOVLW	0x06
007ce4   6e00     movwf	0, 0               	MOVWF	r0x00
007ce6   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00257_DS_:
007ce8   5000     movf	0, 0, 0             	MOVF	r0x00, W
007cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cec   ecd1     call	0xafa2, 0           	CALL	_MACPut
007cee   f057
007cf0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007cf2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007cf4   f009
007cf6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007cf8   f008
007cfa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007cfc   f007
007cfe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007d00   f006
007d02   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007d04   f005
007d06   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007d08   f004
007d0a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007d0c   f003
007d0e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007d10   f002
007d12   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007d14   f001
007d16   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007d18   f000
007d1a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d1c   ffd9
007d1e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetHeader	code
                                           _MACGetHeader:
                                           ;	.line	425; TCPIP_Stack/ETH97J60.c	BOOL MACGetHeader(MAC_ADDR *remote, BYTE* type)
005d44   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005d46   ffe5
005d48   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005d4a   ffd9
005d4c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005d4e   ffe5
005d50   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005d52   ffe5
005d54   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005d56   ffe5
005d58   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005d5a   ffe5
005d5c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005d5e   ffe5
005d60   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005d62   ffe5
005d64   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005d66   ffe5
005d68   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005d6a   ffe5
005d6c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005d6e   ffe5
005d70   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005d72   ffe5
005d74   0e02     movlw	0x2                	MOVLW	0x02
005d76   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005d78   f000
005d7a   0e03     movlw	0x3                	MOVLW	0x03
005d7c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005d7e   f001
005d80   0e04     movlw	0x4                	MOVLW	0x04
005d82   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005d84   f002
005d86   0e05     movlw	0x5                	MOVLW	0x05
005d88   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005d8a   f003
005d8c   0e06     movlw	0x6                	MOVLW	0x06
005d8e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005d90   f004
005d92   0e07     movlw	0x7                	MOVLW	0x07
005d94   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005d96   f005
005d98   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	430; TCPIP_Stack/ETH97J60.c	if(EPKTCNT == 0u)
005d9a   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
005d9c   e102     bnz	0x5da2               	BNZ	_00213_DS_
                                           ;	.line	432; TCPIP_Stack/ETH97J60.c	return FALSE;
005d9e   6ae8     clrf	0xe8, 0             	CLRF	WREG
005da0   d0c3     bra	0x5f28               	BRA	_00230_DS_
                                           _00213_DS_:
005da2   0102     movlb	0x2                	BANKSEL	_WasDiscarded
                                           ;	.line	436; TCPIP_Stack/ETH97J60.c	if(WasDiscarded == FALSE)
005da4   5142     movf	0x42, 0, 0x1        	MOVF	_WasDiscarded, W, B
005da6   e104     bnz	0x5db0               	BNZ	_00215_DS_
                                           ;	.line	438; TCPIP_Stack/ETH97J60.c	MACDiscardRx();
005da8   ec9f     call	0x9f3e, 0           	CALL	_MACDiscardRx
005daa   f04f
                                           ;	.line	439; TCPIP_Stack/ETH97J60.c	return FALSE;
005dac   6ae8     clrf	0xe8, 0             	CLRF	WREG
005dae   d0bc     bra	0x5f28               	BRA	_00230_DS_
                                           _00215_DS_:
005db0   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
                                           ;	.line	442; TCPIP_Stack/ETH97J60.c	CurrentPacketLocation.Val = NextPacketLocation.Val;
005db2   5102     movf	0x2, 0, 0x1         	MOVF	_NextPacketLocation, W, B
005db4   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
005db6   6f04     movwf	0x4, 0x1           	MOVWF	_CurrentPacketLocation, B
005db8   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
005dba   5103     movf	0x3, 0, 0x1         	MOVF	(_NextPacketLocation + 1), W, B
005dbc   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
005dbe   6f05     movwf	0x5, 0x1           	MOVWF	(_CurrentPacketLocation + 1), B
005dc0   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
                                           ;	.line	445; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(CurrentPacketLocation.Val);
005dc2   5105     movf	0x5, 0, 0x1         	MOVF	(_CurrentPacketLocation + 1), W, B
005dc4   6e06     movwf	0x6, 0             	MOVWF	r0x06
005dc6   6a07     clrf	0x7, 0              	CLRF	r0x07
005dc8   6a07     clrf	0x7, 0              	CLRF	r0x07
005dca   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005dcc   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
005dce   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	446; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(CurrentPacketLocation.Val);
005dd0   5104     movf	0x4, 0, 0x1         	MOVF	_CurrentPacketLocation, W, B
005dd2   6e06     movwf	0x6, 0             	MOVWF	r0x06
005dd4   6a07     clrf	0x7, 0              	CLRF	r0x07
005dd6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005dd8   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	449; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header, sizeof(header));
005dda   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1)
005ddc   6e07     movwf	0x7, 0             	MOVWF	r0x07
005dde   0eec     movlw	0xec               	MOVLW	LOW(_MACGetHeader_header_1_1)
005de0   6e06     movwf	0x6, 0             	MOVWF	r0x06
005de2   0e80     movlw	0x80               	MOVLW	0x80
005de4   6e08     movwf	0x8, 0             	MOVWF	r0x08
005de6   0e00     movlw	0                  	MOVLW	0x00
005de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dea   0e14     movlw	0x14               	MOVLW	0x14
005dec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dee   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005df0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005df2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005df4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005df6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005df8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dfa   ec20     call	0x9240, 0           	CALL	_MACGetArray
005dfc   f049
005dfe   0e05     movlw	0x5                	MOVLW	0x05
005e00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005e02   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
                                           ;	.line	453; TCPIP_Stack/ETH97J60.c	header.Type.Val = swaps(header.Type.Val);
005e04   51ff     movf	0xff, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 19), W, B
005e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e08   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
005e0a   51fe     movf	0xfe, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 18), W, B
005e0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e0e   ec81     call	0xa902, 0           	CALL	_swaps
005e10   f054
005e12   6e06     movwf	0x6, 0             	MOVWF	r0x06
005e14   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
005e16   f007
005e18   0e02     movlw	0x2                	MOVLW	0x02
005e1a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005e1c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005e1e   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
005e20   6ffe     movwf	0xfe, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 18), B
005e22   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005e24   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
005e26   6fff     movwf	0xff, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 19), B
                                           ;	.line	458; TCPIP_Stack/ETH97J60.c	if(header.NextPacketPointer > RXSTOP || 
005e28   c0ec     movff	0xec, 0x6          	MOVFF	_MACGetHeader_header_1_1, r0x06
005e2a   f006
005e2c   c0ed     movff	0xed, 0x7          	MOVFF	(_MACGetHeader_header_1_1 + 1), r0x07
005e2e   f007
005e30   6a08     clrf	0x8, 0              	CLRF	r0x08
005e32   6a09     clrf	0x9, 0              	CLRF	r0x09
005e34   0e00     movlw	0                  	MOVLW	0x00
005e36   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
005e38   e108     bnz	0x5e4a               	BNZ	_00244_DS_
005e3a   0e00     movlw	0                  	MOVLW	0x00
005e3c   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
005e3e   e105     bnz	0x5e4a               	BNZ	_00244_DS_
005e40   0e1a     movlw	0x1a               	MOVLW	0x1a
005e42   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
005e44   e102     bnz	0x5e4a               	BNZ	_00244_DS_
005e46   0e0a     movlw	0xa                	MOVLW	0x0a
005e48   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00244_DS_:
005e4a   e214     bc	0x5e74                	BC	_00219_DS_
005e4c   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	459; TCPIP_Stack/ETH97J60.c	((BYTE_VAL*)(&header.NextPacketPointer))->bits.b0 ||
005e4e   b1ec     btfsc	0xec, 0, 0x1       	BTFSC	_MACGetHeader_header_1_1, 0, B
005e50   d011     bra	0x5e74               	BRA	_00219_DS_
005e52   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 5)
                                           ;	.line	460; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.Zero ||
005e54   bff1     btfsc	0xf1, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 5), 7, B
005e56   d00e     bra	0x5e74               	BRA	_00219_DS_
005e58   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	461; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.CRCError ||
005e5a   b9f0     btfsc	0xf0, 0x4, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 4, B
005e5c   d00b     bra	0x5e74               	BRA	_00219_DS_
                                           ;	.line	462; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.ByteCount > 1518u ||
005e5e   0e05     movlw	0x5                	MOVLW	0x05
005e60   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 3)
005e62   5def     subwf	0xef, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 3), W, B
005e64   e103     bnz	0x5e6c               	BNZ	_00245_DS_
005e66   0eef     movlw	0xef               	MOVLW	0xef
005e68   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 2)
005e6a   5dee     subwf	0xee, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 2), W, B
                                           _00245_DS_:
005e6c   e203     bc	0x5e74                	BC	_00219_DS_
005e6e   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	463; TCPIP_Stack/ETH97J60.c	!header.StatusVector.bits.ReceiveOk)
005e70   bff0     btfsc	0xf0, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 7, B
005e72   d00d     bra	0x5e8e               	BRA	_00220_DS_
                                           _00219_DS_:
                                           ;	.line	465; TCPIP_Stack/ETH97J60.c	DisplayString(0,"error reading hdr");while(1);//////////////////////ML
005e74   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
005e76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e78   0e85     movlw	0x85               	MOVLW	HIGH(__str_0)
005e7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e7c   0e16     movlw	0x16               	MOVLW	LOW(__str_0)
005e7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e80   0e00     movlw	0                  	MOVLW	0x00
005e82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e84   ecde     call	0x95bc, 0           	CALL	_DisplayString
005e86   f04a
005e88   0e04     movlw	0x4                	MOVLW	0x04
005e8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00217_DS_:
005e8c   d7ff     bra	0x5e8c               	BRA	_00217_DS_
                                           _00220_DS_:
005e8e   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	470; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = header.NextPacketPointer;
005e90   51ec     movf	0xec, 0, 0x1        	MOVF	_MACGetHeader_header_1_1, W, B
005e92   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
005e94   6f02     movwf	0x2, 0x1           	MOVWF	_NextPacketLocation, B
005e96   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 1)
005e98   51ed     movf	0xed, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 1), W, B
005e9a   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
005e9c   6f03     movwf	0x3, 0x1           	MOVWF	(_NextPacketLocation + 1), B
                                           ;	.line	475; TCPIP_Stack/ETH97J60.c	memcpy((void*)remote->v, (void*)header.SourceMACAddr.v, sizeof(*remote));
005e9e   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1 + 12)
005ea0   6e07     movwf	0x7, 0             	MOVWF	r0x07
005ea2   0ef8     movlw	0xf8               	MOVLW	LOW(_MACGetHeader_header_1_1 + 12)
005ea4   6e06     movwf	0x6, 0             	MOVWF	r0x06
005ea6   0e80     movlw	0x80               	MOVLW	0x80
005ea8   6e08     movwf	0x8, 0             	MOVWF	r0x08
005eaa   0e00     movlw	0                  	MOVLW	0x00
005eac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eae   0e06     movlw	0x6                	MOVLW	0x06
005eb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eb2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005eb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eb6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005eb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005ebc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ebe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005ec0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ec2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005ec4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ec6   5000     movf	0, 0, 0             	MOVF	r0x00, W
005ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eca   ecd1     call	0x8ba2, 0           	CALL	_memcpy
005ecc   f045
005ece   0e08     movlw	0x8                	MOVLW	0x08
005ed0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	478; TCPIP_Stack/ETH97J60.c	*type = MAC_UNKNOWN;
005ed2   0eff     movlw	0xff               	MOVLW	0xff
005ed4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ed6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005ed8   ffe9
005eda   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005edc   fff3
005ede   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005ee0   ece5     call	0xafca, 0           	CALL	__gptrput1
005ee2   f057
                                           ;	.line	479; TCPIP_Stack/ETH97J60.c	if( (header.Type.v[1] == 0x08u) &&
005ee4   c0ff     movff	0xff, 0            	MOVFF	(_MACGetHeader_header_1_1 + 19), r0x00
005ee6   f000
005ee8   6a01     clrf	0x1, 0              	CLRF	r0x01
005eea   5000     movf	0, 0, 0             	MOVF	r0x00, W
005eec   0a08     xorlw	0x8                	XORLW	0x08
005eee   e102     bnz	0x5ef4               	BNZ	_00246_DS_
005ef0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005ef2   e001     bz	0x5ef6                	BZ	_00247_DS_
                                           _00246_DS_:
005ef4   d016     bra	0x5f22               	BRA	_00227_DS_
                                           _00247_DS_:
                                           ;	.line	480; TCPIP_Stack/ETH97J60.c	((header.Type.v[0] == ETHER_IP) || (header.Type.v[0] == ETHER_ARP)) )
005ef6   c0fe     movff	0xfe, 0            	MOVFF	(_MACGetHeader_header_1_1 + 18), r0x00
005ef8   f000
005efa   5000     movf	0, 0, 0             	MOVF	r0x00, W
005efc   e009     bz	0x5f10                	BZ	_00226_DS_
005efe   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005f00   f001
005f02   6a02     clrf	0x2, 0              	CLRF	r0x02
005f04   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005f06   0a06     xorlw	0x6                	XORLW	0x06
005f08   e102     bnz	0x5f0e               	BNZ	_00248_DS_
005f0a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005f0c   e001     bz	0x5f10                	BZ	_00226_DS_
                                           _00248_DS_:
005f0e   d009     bra	0x5f22               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	482; TCPIP_Stack/ETH97J60.c	*type = header.Type.v[0];
005f10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005f12   ffe5
005f14   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005f16   ffe9
005f18   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005f1a   fff3
005f1c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005f1e   ece5     call	0xafca, 0           	CALL	__gptrput1
005f20   f057
                                           _00227_DS_:
005f22   0102     movlb	0x2                	BANKSEL	_WasDiscarded
                                           ;	.line	486; TCPIP_Stack/ETH97J60.c	WasDiscarded = FALSE;
005f24   6b42     clrf	0x42, 0x1           	CLRF	_WasDiscarded, B
                                           ;	.line	487; TCPIP_Stack/ETH97J60.c	return TRUE;
005f26   0e01     movlw	0x1                	MOVLW	0x01
                                           _00230_DS_:
005f28   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005f2a   f009
005f2c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005f2e   f008
005f30   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005f32   f007
005f34   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005f36   f006
005f38   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005f3a   f005
005f3c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005f3e   f004
005f40   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005f42   f003
005f44   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005f46   f002
005f48   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005f4a   f001
005f4c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005f4e   f000
005f50   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005f52   ffd9
005f54   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetFreeRxSize	code
                                           _MACGetFreeRxSize:
                                           ;	.line	367; TCPIP_Stack/ETH97J60.c	WORD MACGetFreeRxSize(void)
00863e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008640   ffe5
008642   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008644   ffd9
008646   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008648   ffe5
00864a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00864c   ffe5
00864e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008650   ffe5
008652   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008654   ffe5
008656   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008658   ffe5
00865a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00865c   ffe5
                                           _00186_DS_:
00865e   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	377; TCPIP_Stack/ETH97J60.c	ReadPT.v[0] = EPKTCNT;
008660   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
008662   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
008664   6f0c     movwf	0xc, 0x1           	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
                                           ;	.line	379; TCPIP_Stack/ETH97J60.c	WritePT.Val = ((WORD)ERXWRPTH)<<8|ERXWRPTL;
008666   ceef     movff	0xeef, 0           	MOVFF	_ERXWRPTH, r0x00
008668   f000
00866a   6a01     clrf	0x1, 0              	CLRF	r0x01
00866c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00866e   6e03     movwf	0x3, 0             	MOVWF	r0x03
008670   6a02     clrf	0x2, 0              	CLRF	r0x02
008672   ceee     movff	0xeee, 0           	MOVFF	_ERXWRPTL, r0x00
008674   f000
008676   6a01     clrf	0x1, 0              	CLRF	r0x01
008678   5000     movf	0, 0, 0             	MOVF	r0x00, W
00867a   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
00867c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00867e   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
008680   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008682   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
008684   6f0e     movwf	0xe, 0x1           	MOVWF	_MACGetFreeRxSize_WritePT_1_1, B
008686   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008688   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
00868a   6f0f     movwf	0xf, 0x1           	MOVWF	(_MACGetFreeRxSize_WritePT_1_1 + 1), B
00868c   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	380; TCPIP_Stack/ETH97J60.c	} while(EPKTCNT != ReadPT.v[0]);
00868e   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
008690   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
008692   190c     xorwf	0xc, 0, 0x1        	XORWF	_MACGetFreeRxSize_ReadPT_1_1, W, B
008694   e1e4     bnz	0x865e               	BNZ	_00186_DS_
                                           ;	.line	383; TCPIP_Stack/ETH97J60.c	ReadPT.Val = ERXRDPTH<<8|ERXRDPTL;
008696   ceed     movff	0xeed, 0           	MOVFF	_ERXRDPTH, r0x00
008698   f000
00869a   6a01     clrf	0x1, 0              	CLRF	r0x01
00869c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00869e   6e03     movwf	0x3, 0             	MOVWF	r0x03
0086a0   6a02     clrf	0x2, 0              	CLRF	r0x02
0086a2   ceec     movff	0xeec, 0           	MOVFF	_ERXRDPTL, r0x00
0086a4   f000
0086a6   6a01     clrf	0x1, 0              	CLRF	r0x01
0086a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0086aa   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
0086ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0086ae   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0086b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0086b2   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
0086b4   6f0c     movwf	0xc, 0x1           	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
0086b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0086b8   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_ReadPT_1_1 + 1)
0086ba   6f0d     movwf	0xd, 0x1           	MOVWF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), B
                                           ;	.line	388; TCPIP_Stack/ETH97J60.c	if(WritePT.Val > ReadPT.Val)
0086bc   c20c     movff	0x20c, 0           	MOVFF	_MACGetFreeRxSize_ReadPT_1_1, r0x00
0086be   f000
0086c0   c20d     movff	0x20d, 0x1         	MOVFF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), r0x01
0086c2   f001
0086c4   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
0086c6   510f     movf	0xf, 0, 0x1         	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
0086c8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0086ca   e103     bnz	0x86d2               	BNZ	_00205_DS_
0086cc   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
0086ce   510e     movf	0xe, 0, 0x1         	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
0086d0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00205_DS_:
0086d2   e217     bc	0x8702                	BC	_00193_DS_
                                           ;	.line	390; TCPIP_Stack/ETH97J60.c	return (RXSTOP - RXSTART) - (WritePT.Val - ReadPT.Val);
0086d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0086d6   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
0086d8   5d0e     subwf	0xe, 0, 0x1        	SUBWF	_MACGetFreeRxSize_WritePT_1_1, W, B
0086da   6e02     movwf	0x2, 0             	MOVWF	r0x02
0086dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0086de   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
0086e0   590f     subwfb	0xf, 0, 0x1       	SUBWFB	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
0086e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0086e4   6a04     clrf	0x4, 0              	CLRF	r0x04
0086e6   6a05     clrf	0x5, 0              	CLRF	r0x05
0086e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0086ea   0809     sublw	0x9                	SUBLW	0x09
0086ec   6e02     movwf	0x2, 0             	MOVWF	r0x02
0086ee   0e1a     movlw	0x1a               	MOVLW	0x1a
0086f0   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
0086f2   0e00     movlw	0                  	MOVLW	0x00
0086f4   5604     subfwb	0x4, 0x1, 0       	SUBFWB	r0x04, F
0086f6   0e00     movlw	0                  	MOVLW	0x00
0086f8   5605     subfwb	0x5, 0x1, 0       	SUBFWB	r0x05, F
0086fa   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
0086fc   fff3
0086fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008700   d01a     bra	0x8736               	BRA	_00195_DS_
                                           _00193_DS_:
008702   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	392; TCPIP_Stack/ETH97J60.c	else if(WritePT.Val == ReadPT.Val)
008704   510e     movf	0xe, 0, 0x1         	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
008706   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
008708   e104     bnz	0x8712               	BNZ	_00206_DS_
00870a   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
00870c   510f     movf	0xf, 0, 0x1         	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
00870e   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
008710   e001     bz	0x8714                	BZ	_00207_DS_
                                           _00206_DS_:
008712   d004     bra	0x871c               	BRA	_00190_DS_
                                           _00207_DS_:
                                           ;	.line	394; TCPIP_Stack/ETH97J60.c	return RXSIZE - 1;
008714   0e1a     movlw	0x1a               	MOVLW	0x1a
008716   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
008718   0e09     movlw	0x9                	MOVLW	0x09
00871a   d00d     bra	0x8736               	BRA	_00195_DS_
                                           _00190_DS_:
00871c   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	398; TCPIP_Stack/ETH97J60.c	return ReadPT.Val - WritePT.Val - 1;
00871e   510e     movf	0xe, 0, 0x1         	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
008720   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
008722   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
008724   510f     movf	0xf, 0, 0x1         	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
008726   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
008728   0eff     movlw	0xff               	MOVLW	0xff
00872a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00872c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00872e   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
008730   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
008732   fff3
008734   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00195_DS_:
008736   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008738   f005
00873a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00873c   f004
00873e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008740   f003
008742   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008744   f002
008746   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008748   f001
00874a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00874c   f000
00874e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008750   ffd9
008752   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACDiscardRx	code
                                           _MACDiscardRx:
                                           ;	.line	313; TCPIP_Stack/ETH97J60.c	void MACDiscardRx(void)
009f3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009f40   ffe5
009f42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009f44   ffd9
009f46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009f48   ffe5
009f4a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009f4c   ffe5
009f4e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009f50   ffe5
009f52   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009f54   ffe5
009f56   0102     movlb	0x2                	BANKSEL	_WasDiscarded
                                           ;	.line	318; TCPIP_Stack/ETH97J60.c	if(WasDiscarded) return;
009f58   5142     movf	0x42, 0, 0x1        	MOVF	_WasDiscarded, W, B
009f5a   e130     bnz	0x9fbc               	BNZ	_00177_DS_
                                           ;	.line	319; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
009f5c   0e01     movlw	0x1                	MOVLW	0x01
009f5e   0102     movlb	0x2                	BANKSEL	_WasDiscarded
009f60   6f42     movwf	0x42, 0x1          	MOVWF	_WasDiscarded, B
009f62   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
                                           ;	.line	325; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = NextPacketLocation.Val - 1;
009f64   5102     movf	0x2, 0, 0x1         	MOVF	_NextPacketLocation, W, B
009f66   0fff     addlw	0xff               	ADDLW	0xff
009f68   6e00     movwf	0, 0               	MOVWF	r0x00
009f6a   0eff     movlw	0xff               	MOVLW	0xff
009f6c   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
009f6e   2103     addwfc	0x3, 0, 0x1       	ADDWFC	(_NextPacketLocation + 1), W, B
009f70   6e01     movwf	0x1, 0             	MOVWF	r0x01
009f72   5000     movf	0, 0, 0             	MOVF	r0x00, W
009f74   0102     movlb	0x2                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
009f76   6f0a     movwf	0xa, 0x1           	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
009f78   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009f7a   0102     movlb	0x2                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
009f7c   6f0b     movwf	0xb, 0x1           	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           ;	.line	327; TCPIP_Stack/ETH97J60.c	if(NewRXRDLocation.Val > RXSTOP)
009f7e   c20a     movff	0x20a, 0xfe8       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, WREG
009f80   ffe8
009f82   c20b     movff	0x20b, 0xfe8       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), WREG
009f84   ffe8
009f86   6a02     clrf	0x2, 0              	CLRF	r0x02
009f88   6a03     clrf	0x3, 0              	CLRF	r0x03
009f8a   0e00     movlw	0                  	MOVLW	0x00
009f8c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
009f8e   e108     bnz	0x9fa0               	BNZ	_00181_DS_
009f90   0e00     movlw	0                  	MOVLW	0x00
009f92   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
009f94   e105     bnz	0x9fa0               	BNZ	_00181_DS_
009f96   0e1a     movlw	0x1a               	MOVLW	0x1a
009f98   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
009f9a   e102     bnz	0x9fa0               	BNZ	_00181_DS_
009f9c   0e0a     movlw	0xa                	MOVLW	0x0a
009f9e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00181_DS_:
009fa0   e306     bnc	0x9fae               	BNC	_00176_DS_
                                           ;	.line	332; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = RXSTOP;
009fa2   0e09     movlw	0x9                	MOVLW	0x09
009fa4   0102     movlb	0x2                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
009fa6   6f0a     movwf	0xa, 0x1           	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
009fa8   0e1a     movlw	0x1a               	MOVLW	0x1a
009faa   0102     movlb	0x2                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
009fac   6f0b     movwf	0xb, 0x1           	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           _00176_DS_:
009fae   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	336; TCPIP_Stack/ETH97J60.c	ECON2bits.PKTDEC = 1;
009fb0   8dfe     bsf	0xfe, 0x6, 0x1       	BSF	_ECON2bits, 6, B
                                           ;	.line	341; TCPIP_Stack/ETH97J60.c	ERXRDPTL = NewRXRDLocation.v[0];
009fb2   c20a     movff	0x20a, 0xeec       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, _ERXRDPTL
009fb4   feec
                                           ;	.line	342; TCPIP_Stack/ETH97J60.c	ERXRDPTH = NewRXRDLocation.v[1];
009fb6   c20b     movff	0x20b, 0xeed       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), _ERXRDPTH
009fb8   feed
                                           ;	.line	347; TCPIP_Stack/ETH97J60.c	EIRbits.PKTIF = 0;
009fba   9c60     bcf	0x60, 0x6, 0         	BCF	_EIRbits, 6
                                           _00177_DS_:
009fbc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009fbe   f003
009fc0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009fc2   f002
009fc4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009fc6   f001
009fc8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009fca   f000
009fcc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009fce   ffd9
009fd0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsTxReady	code
                                           _MACIsTxReady:
                                           ;	.line	278; TCPIP_Stack/ETH97J60.c	BOOL MACIsTxReady(void)
00a512   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a514   ffe5
00a516   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a518   ffd9
00a51a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a51c   ffe5
00a51e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a520   ffe5
00a522   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a524   ffe5
00a526   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a528   ffe5
                                           ;	.line	280; TCPIP_Stack/ETH97J60.c	if(!ECON1bits.TXRTS)
00a52a   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
00a52c   d002     bra	0xa532               	BRA	_00161_DS_
                                           ;	.line	281; TCPIP_Stack/ETH97J60.c	return TRUE;
00a52e   0e01     movlw	0x1                	MOVLW	0x01
00a530   d021     bra	0xa574               	BRA	_00164_DS_
                                           _00161_DS_:
                                           ;	.line	285; TCPIP_Stack/ETH97J60.c	if((WORD)TickGet() - wTXWatchdog >= (3ull*TICK_SECOND/1000ull))
00a532   ec01     call	0xae02, 0           	CALL	_TickGet
00a534   f057
00a536   6e00     movwf	0, 0               	MOVWF	r0x00
00a538   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00a53a   f001
00a53c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00a53e   f002
00a540   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00a542   f003
00a544   0102     movlb	0x2                	BANKSEL	_wTXWatchdog
00a546   5106     movf	0x6, 0, 0x1         	MOVF	_wTXWatchdog, W, B
00a548   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00a54a   0102     movlb	0x2                	BANKSEL	(_wTXWatchdog + 1)
00a54c   5107     movf	0x7, 0, 0x1         	MOVF	(_wTXWatchdog + 1), W, B
00a54e   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
00a550   6a02     clrf	0x2, 0              	CLRF	r0x02
00a552   6a03     clrf	0x3, 0              	CLRF	r0x03
00a554   0e00     movlw	0                  	MOVLW	0x00
00a556   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00a558   e108     bnz	0xa56a               	BNZ	_00168_DS_
00a55a   0e00     movlw	0                  	MOVLW	0x00
00a55c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00a55e   e105     bnz	0xa56a               	BNZ	_00168_DS_
00a560   0e00     movlw	0                  	MOVLW	0x00
00a562   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00a564   e102     bnz	0xa56a               	BNZ	_00168_DS_
00a566   0e7a     movlw	0x7a               	MOVLW	0x7a
00a568   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00168_DS_:
00a56a   e303     bnc	0xa572               	BNC	_00163_DS_
                                           ;	.line	287; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 0;
00a56c   96d2     bcf	0xd2, 0x3, 0         	BCF	_ECON1bits, 3
                                           ;	.line	288; TCPIP_Stack/ETH97J60.c	MACFlush();
00a56e   ec6d     call	0xa6da, 0           	CALL	_MACFlush
00a570   f053
                                           _00163_DS_:
                                           ;	.line	290; TCPIP_Stack/ETH97J60.c	return FALSE;
00a572   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00164_DS_:
00a574   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a576   f003
00a578   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a57a   f002
00a57c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a57e   f001
00a580   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a582   f000
00a584   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a586   ffd9
00a588   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsLinked	code
                                           _MACIsLinked:
                                           ;	.line	244; TCPIP_Stack/ETH97J60.c	BOOL MACIsLinked(void)
00ab68   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ab6a   ffe5
00ab6c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ab6e   ffd9
00ab70   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ab72   ffe5
00ab74   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00ab76   ffe5
                                           ;	.line	253; TCPIP_Stack/ETH97J60.c	pr.Val= ReadPHYReg(PHSTAT1);
00ab78   0e01     movlw	0x1                	MOVLW	0x01
00ab7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00ab7c   ec92     call	0xab24, 0           	CALL	_ReadPHYReg
00ab7e   f055
00ab80   6e00     movwf	0, 0               	MOVWF	r0x00
00ab82   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00ab84   f001
00ab86   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00ab88   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ab8a   0102     movlb	0x2                	BANKSEL	_MACIsLinked_pr_1_1
00ab8c   6f08     movwf	0x8, 0x1           	MOVWF	_MACIsLinked_pr_1_1, B
00ab8e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00ab90   0102     movlb	0x2                	BANKSEL	(_MACIsLinked_pr_1_1 + 1)
00ab92   6f09     movwf	0x9, 0x1           	MOVWF	(_MACIsLinked_pr_1_1 + 1), B
                                           ;	.line	254; TCPIP_Stack/ETH97J60.c	return pr.PHSTAT1bits.LLSTAT;
00ab94   6a00     clrf	0, 0                	CLRF	r0x00
00ab96   0102     movlb	0x2                	BANKSEL	_MACIsLinked_pr_1_1
00ab98   b508     btfsc	0x8, 0x2, 0x1      	BTFSC	_MACIsLinked_pr_1_1, 2, B
00ab9a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00ab9c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ab9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00aba0   f001
00aba2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aba4   f000
00aba6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aba8   ffd9
00abaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACInit	code
                                           _MACInit:
                                           ;	.line	131; TCPIP_Stack/ETH97J60.c	void MACInit(void)
008410   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008412   ffe5
008414   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008416   ffd9
                                           ;	.line	135; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA0 = 0; // Set LEDA as output (green on ethernet connector)
008418   9092     bcf	0x92, 0, 0           	BCF	_TRISAbits, 0
                                           ;	.line	136; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA1 = 0; // Set LEDB as output (yellow on ethernet connector)
00841a   9292     bcf	0x92, 0x1, 0         	BCF	_TRISAbits, 1
00841c   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	137; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;    // Enable Ethernet!
00841e   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00105_DS_:
008420   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	140; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY);
008422   a1fd     btfss	0xfd, 0, 0x1       	BTFSS	_ESTATbits, 0, B
008424   d7fd     bra	0x8420               	BRA	_00105_DS_
                                           ;	.line	144; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
008426   0e01     movlw	0x1                	MOVLW	0x01
008428   0102     movlb	0x2                	BANKSEL	_WasDiscarded
00842a   6f42     movwf	0x42, 0x1          	MOVWF	_WasDiscarded, B
00842c   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
                                           ;	.line	145; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = RXSTART;
00842e   6b02     clrf	0x2, 0x1            	CLRF	_NextPacketLocation, B
008430   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
008432   6b03     clrf	0x3, 0x1            	CLRF	(_NextPacketLocation + 1), B
008434   010e     movlb	0xe                	BANKSEL	_ERXSTL
                                           ;	.line	146; TCPIP_Stack/ETH97J60.c	ERXSTL = LOW(RXSTART);
008436   6be8     clrf	0xe8, 0x1           	CLRF	_ERXSTL, B
008438   010e     movlb	0xe                	BANKSEL	_ERXSTH
                                           ;	.line	147; TCPIP_Stack/ETH97J60.c	ERXSTH = HIGH(RXSTART);
00843a   6be9     clrf	0xe9, 0x1           	CLRF	_ERXSTH, B
                                           ;	.line	149; TCPIP_Stack/ETH97J60.c	ERXRDPTL = LOW(RXSTOP);	// Write low byte first
00843c   0e09     movlw	0x9                	MOVLW	0x09
00843e   010e     movlb	0xe                	BANKSEL	_ERXRDPTL
008440   6fec     movwf	0xec, 0x1          	MOVWF	_ERXRDPTL, B
                                           ;	.line	150; TCPIP_Stack/ETH97J60.c	ERXRDPTH = HIGH(RXSTOP);    // Write high byte last
008442   0e1a     movlw	0x1a               	MOVLW	0x1a
008444   010e     movlb	0xe                	BANKSEL	_ERXRDPTH
008446   6fed     movwf	0xed, 0x1          	MOVWF	_ERXRDPTH, B
                                           ;	.line	152; TCPIP_Stack/ETH97J60.c	ERXNDL = LOW(RXSTOP);
008448   0e09     movlw	0x9                	MOVLW	0x09
00844a   010e     movlb	0xe                	BANKSEL	_ERXNDL
00844c   6fea     movwf	0xea, 0x1          	MOVWF	_ERXNDL, B
                                           ;	.line	153; TCPIP_Stack/ETH97J60.c	ERXNDH = HIGH(RXSTOP);
00844e   0e1a     movlw	0x1a               	MOVLW	0x1a
008450   010e     movlb	0xe                	BANKSEL	_ERXNDH
008452   6feb     movwf	0xeb, 0x1          	MOVWF	_ERXNDH, B
                                           ;	.line	155; TCPIP_Stack/ETH97J60.c	ETXSTL = LOW(TXSTART);
008454   0e0a     movlw	0xa                	MOVLW	0x0a
008456   010e     movlb	0xe                	BANKSEL	_ETXSTL
008458   6fe4     movwf	0xe4, 0x1          	MOVWF	_ETXSTL, B
                                           ;	.line	156; TCPIP_Stack/ETH97J60.c	ETXSTH = HIGH(TXSTART);
00845a   0e1a     movlw	0x1a               	MOVLW	0x1a
00845c   010e     movlb	0xe                	BANKSEL	_ETXSTH
00845e   6fe5     movwf	0xe5, 0x1          	MOVWF	_ETXSTH, B
                                           ;	.line	159; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART);
008460   0e0a     movlw	0xa                	MOVLW	0x0a
008462   010e     movlb	0xe                	BANKSEL	_EWRPTL
008464   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	160; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART);
008466   0e1a     movlw	0x1a               	MOVLW	0x1a
008468   010e     movlb	0xe                	BANKSEL	_EWRPTH
00846a   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	161; TCPIP_Stack/ETH97J60.c	EDATA = 0x00;
00846c   6a61     clrf	0x61, 0             	CLRF	_EDATA
                                           ;	.line	171; TCPIP_Stack/ETH97J60.c	MACON1 = MACON1_TXPAUS | MACON1_RXPAUS | MACON1_MARXEN; Nop();
00846e   0e0d     movlw	0xd                	MOVLW	0x0d
008470   010e     movlb	0xe                	BANKSEL	_MACON1
008472   6fa0     movwf	0xa0, 0x1          	MOVWF	_MACON1, B
008474   0000     nop                      	nop 
                                           ;	.line	179; TCPIP_Stack/ETH97J60.c	MACON3 = MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN; Nop();
008476   0e32     movlw	0x32               	MOVLW	0x32
008478   010e     movlb	0xe                	BANKSEL	_MACON3
00847a   6fa2     movwf	0xa2, 0x1          	MOVWF	_MACON3, B
00847c   0000     nop                      	nop 
                                           ;	.line	180; TCPIP_Stack/ETH97J60.c	MABBIPG = 0x12; Nop();
00847e   0e12     movlw	0x12               	MOVLW	0x12
008480   010e     movlb	0xe                	BANKSEL	_MABBIPG
008482   6fa4     movwf	0xa4, 0x1          	MOVWF	_MABBIPG, B
008484   0000     nop                      	nop 
                                           ;	.line	186; TCPIP_Stack/ETH97J60.c	MACON4 = MACON4_DEFER; Nop();
008486   0e40     movlw	0x40               	MOVLW	0x40
008488   010e     movlb	0xe                	BANKSEL	_MACON4
00848a   6fa3     movwf	0xa3, 0x1          	MOVWF	_MACON4, B
00848c   0000     nop                      	nop 
                                           ;	.line	191; TCPIP_Stack/ETH97J60.c	MAIPGL = 0x12; Nop();
00848e   0e12     movlw	0x12               	MOVLW	0x12
008490   010e     movlb	0xe                	BANKSEL	_MAIPGL
008492   6fa6     movwf	0xa6, 0x1          	MOVWF	_MAIPGL, B
008494   0000     nop                      	nop 
                                           ;	.line	192; TCPIP_Stack/ETH97J60.c	MAIPGH = 0x0C; Nop();
008496   0e0c     movlw	0xc                	MOVLW	0x0c
008498   010e     movlb	0xe                	BANKSEL	_MAIPGH
00849a   6fa7     movwf	0xa7, 0x1          	MOVWF	_MAIPGH, B
00849c   0000     nop                      	nop 
                                           ;	.line	195; TCPIP_Stack/ETH97J60.c	MAMXFLL = LOW(6+6+2+1500+4); Nop();
00849e   0eee     movlw	0xee               	MOVLW	0xee
0084a0   010e     movlb	0xe                	BANKSEL	_MAMXFLL
0084a2   6faa     movwf	0xaa, 0x1          	MOVWF	_MAMXFLL, B
0084a4   0000     nop                      	nop 
                                           ;	.line	196; TCPIP_Stack/ETH97J60.c	MAMXFLH = HIGH(6+6+2+1500+4); Nop();
0084a6   0e05     movlw	0x5                	MOVLW	0x05
0084a8   010e     movlb	0xe                	BANKSEL	_MAMXFLH
0084aa   6fab     movwf	0xab, 0x1          	MOVWF	_MAMXFLH, B
0084ac   0000     nop                      	nop 
                                           ;	.line	199; TCPIP_Stack/ETH97J60.c	MAADR1 = AppConfig.MyMACAddr.v[0]; Nop();
0084ae   c8f5     movff	0x8f5, 0xe84       	MOVFF	(_AppConfig + 45), _MAADR1
0084b0   fe84
0084b2   0000     nop                      	nop 
                                           ;	.line	200; TCPIP_Stack/ETH97J60.c	MAADR2 = AppConfig.MyMACAddr.v[1]; Nop();
0084b4   c8f6     movff	0x8f6, 0xe85       	MOVFF	(_AppConfig + 46), _MAADR2
0084b6   fe85
0084b8   0000     nop                      	nop 
                                           ;	.line	201; TCPIP_Stack/ETH97J60.c	MAADR3 = AppConfig.MyMACAddr.v[2]; Nop();
0084ba   c8f7     movff	0x8f7, 0xe82       	MOVFF	(_AppConfig + 47), _MAADR3
0084bc   fe82
0084be   0000     nop                      	nop 
                                           ;	.line	202; TCPIP_Stack/ETH97J60.c	MAADR4 = AppConfig.MyMACAddr.v[3]; Nop();
0084c0   c8f8     movff	0x8f8, 0xe83       	MOVFF	(_AppConfig + 48), _MAADR4
0084c2   fe83
0084c4   0000     nop                      	nop 
                                           ;	.line	203; TCPIP_Stack/ETH97J60.c	MAADR5 = AppConfig.MyMACAddr.v[4]; Nop();
0084c6   c8f9     movff	0x8f9, 0xe80       	MOVFF	(_AppConfig + 49), _MAADR5
0084c8   fe80
0084ca   0000     nop                      	nop 
                                           ;	.line	204; TCPIP_Stack/ETH97J60.c	MAADR6 = AppConfig.MyMACAddr.v[5]; Nop();
0084cc   c8fa     movff	0x8fa, 0xe81       	MOVFF	(_AppConfig + 50), _MAADR6
0084ce   fe81
0084d0   0000     nop                      	nop 
                                           ;	.line	207; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON2, PHCON2_HDLDIS | PHCON2_RXAPDIS);
0084d2   0e01     movlw	0x1                	MOVLW	0x01
0084d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084d6   0e10     movlw	0x10               	MOVLW	0x10
0084d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084da   0e10     movlw	0x10               	MOVLW	0x10
0084dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084de   ecfc     call	0xa9f8, 0           	CALL	_WritePHYReg
0084e0   f054
0084e2   0e03     movlw	0x3                	MOVLW	0x03
0084e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; TCPIP_Stack/ETH97J60.c	SetLEDConfig(0x3472);
0084e6   0e34     movlw	0x34               	MOVLW	0x34
0084e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084ea   0e72     movlw	0x72               	MOVLW	0x72
0084ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084ee   0e14     movlw	0x14               	MOVLW	0x14
0084f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084f2   ecfc     call	0xa9f8, 0           	CALL	_WritePHYReg
0084f4   f054
0084f6   0e03     movlw	0x3                	MOVLW	0x03
0084f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON1, 0x0000);
0084fa   0e00     movlw	0                  	MOVLW	0x00
0084fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084fe   0e00     movlw	0                  	MOVLW	0x00
008500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008502   0e00     movlw	0                  	MOVLW	0x00
008504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008506   ecfc     call	0xa9f8, 0           	CALL	_WritePHYReg
008508   f054
00850a   0e03     movlw	0x3                	MOVLW	0x03
00850c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	220; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
00850e   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
008510   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008512   ffd9
008514   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
008516   7265     btg	0x65, 0x1, 0         	DB	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e
008518   6f72     movwf	0x72, 0x1          
00851a   2072     addwfc	0x72, 0, 0        
00851c   6572     cpfsgt	0x72, 0x1         
00851e   6461     cpfsgt	0x61, 0           
008520   6e69     movwf	0x69, 0            
008522   2067     addwfc	0x67, 0, 0        	DB	0x67, 0x20, 0x68, 0x64, 0x72, 0x00
008524   6468     cpfsgt	0x68, 0           
008526   0072     dw	0x72  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5346 (0x14e2) bytes ( 4.08%)
                                           ;           	 2673 (0x0a71) words
                                           ; udata size:	  141 (0x008d) bytes ( 3.67%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _GenerateRandomDWORD
                                           	global _StringToIPAddress
                                           	global _btohexa_high
                                           	global _btohexa_low
                                           	global _swaps
                                           	global _swapl
                                           	global _CalcIPChecksum
                                           	global _leftRotateDWORD
                                           	global _strnchr
                                           	global _toRotate
                                           	global _hexatob
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _rand
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           
                                           udata_Helpers_0	udata
                                           _GenerateRandomDWORD_wTime_1_1	res	2
                                           
                                           udata_Helpers_1	udata
                                           _StringToIPAddress_dwVal_1_1	res	4
                                           
                                           udata_Helpers_2	udata
                                           _hexatob_AsciiChars_1_1	res	2
                                           
                                           udata_Helpers_3	udata
                                           _swaps_t_1_1	res	2
                                           
                                           udata_Helpers_4	udata
                                           _swapl_v_1_1	res	4
                                           
                                           udata_Helpers_5	udata
                                           _CalcIPChecksum_count_1_1	res	2
                                           
                                           udata_Helpers_6	udata
                                           _CalcIPChecksum_sum_1_1	res	4
                                           
                                           udata_Helpers_7	udata
                                           _toRotate	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Helpers__strnchr	code
                                           _strnchr:
                                           ;	.line	1359; TCPIP_Stack/Helpers.c	char * strnchr(const char *searchString, size_t count, char c)
008cac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008cae   ffe5
008cb0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008cb2   ffd9
008cb4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008cb6   ffe5
008cb8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008cba   ffe5
008cbc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008cbe   ffe5
008cc0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008cc2   ffe5
008cc4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008cc6   ffe5
008cc8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008cca   ffe5
008ccc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
008cce   ffe5
008cd0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008cd2   ffe5
008cd4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
008cd6   ffe5
008cd8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
008cda   ffe5
008cdc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
008cde   ffe5
008ce0   0e02     movlw	0x2                	MOVLW	0x02
008ce2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008ce4   f000
008ce6   0e03     movlw	0x3                	MOVLW	0x03
008ce8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008cea   f001
008cec   0e04     movlw	0x4                	MOVLW	0x04
008cee   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008cf0   f002
008cf2   0e05     movlw	0x5                	MOVLW	0x05
008cf4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008cf6   f003
008cf8   0e06     movlw	0x6                	MOVLW	0x06
008cfa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
008cfc   f004
008cfe   0e07     movlw	0x7                	MOVLW	0x07
008d00   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
008d02   f005
                                           ;	.line	1363; TCPIP_Stack/Helpers.c	while(count--)
008d04   c000     movff	0, 0x6             	MOVFF	r0x00, r0x06
008d06   f006
008d08   c001     movff	0x1, 0x7           	MOVFF	r0x01, r0x07
008d0a   f007
008d0c   c002     movff	0x2, 0x8           	MOVFF	r0x02, r0x08
008d0e   f008
                                           _00311_DS_:
008d10   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
008d12   f009
008d14   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
008d16   f00a
008d18   0eff     movlw	0xff               	MOVLW	0xff
008d1a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
008d1c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
008d1e   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
008d20   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
008d22   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
008d24   e025     bz	0x8d70                	BZ	_00313_DS_
                                           ;	.line	1365; TCPIP_Stack/Helpers.c	c2  = *searchString++;
008d26   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
008d28   ffe9
008d2a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
008d2c   fff3
008d2e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
008d30   ec12     call	0xae24, 0           	CALL	__gptrget1
008d32   f057
008d34   6e09     movwf	0x9, 0             	MOVWF	r0x09
008d36   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
008d38   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
008d3a   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
008d3c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
008d3e   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
                                           ;	.line	1366; TCPIP_Stack/Helpers.c	if(c2 == 0u)
008d40   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
008d42   e104     bnz	0x8d4c               	BNZ	_00308_DS_
                                           ;	.line	1367; TCPIP_Stack/Helpers.c	return NULL;
008d44   6af4     clrf	0xf4, 0             	CLRF	PRODH
008d46   6af3     clrf	0xf3, 0             	CLRF	PRODL
008d48   6ae8     clrf	0xe8, 0             	CLRF	WREG
008d4a   d015     bra	0x8d76               	BRA	_00314_DS_
                                           _00308_DS_:
                                           ;	.line	1368; TCPIP_Stack/Helpers.c	if(c2 == c)
008d4c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
008d4e   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
008d50   e1df     bnz	0x8d10               	BNZ	_00311_DS_
                                           ;	.line	1369; TCPIP_Stack/Helpers.c	return (char*)--searchString;
008d52   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008d54   0fff     addlw	0xff               	ADDLW	0xff
008d56   6e00     movwf	0, 0               	MOVWF	r0x00
008d58   0eff     movlw	0xff               	MOVLW	0xff
008d5a   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
008d5c   6e01     movwf	0x1, 0             	MOVWF	r0x01
008d5e   0eff     movlw	0xff               	MOVLW	0xff
008d60   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
008d62   6e02     movwf	0x2, 0             	MOVWF	r0x02
008d64   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
008d66   fff4
008d68   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
008d6a   fff3
008d6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
008d6e   d003     bra	0x8d76               	BRA	_00314_DS_
                                           _00313_DS_:
                                           ;	.line	1371; TCPIP_Stack/Helpers.c	return NULL;
008d70   6af4     clrf	0xf4, 0             	CLRF	PRODH
008d72   6af3     clrf	0xf3, 0             	CLRF	PRODL
008d74   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00314_DS_:
008d76   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
008d78   f00a
008d7a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
008d7c   f009
008d7e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
008d80   f008
008d82   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008d84   f007
008d86   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008d88   f006
008d8a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008d8c   f005
008d8e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008d90   f004
008d92   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008d94   f003
008d96   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008d98   f002
008d9a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008d9c   f001
008d9e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008da0   f000
008da2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008da4   ffd9
008da6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__leftRotateDWORD	code
                                           _leftRotateDWORD:
                                           ;	.line	1235; TCPIP_Stack/Helpers.c	DWORD leftRotateDWORD(DWORD val, BYTE bits)
009322   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009324   ffe5
009326   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009328   ffd9
00932a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00932c   ffe5
00932e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009330   ffe5
009332   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009334   ffe5
009336   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009338   ffe5
00933a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00933c   ffe5
00933e   0e02     movlw	0x2                	MOVLW	0x02
009340   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009342   f000
009344   0e03     movlw	0x3                	MOVLW	0x03
009346   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009348   f001
00934a   0e04     movlw	0x4                	MOVLW	0x04
00934c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00934e   f002
009350   0e05     movlw	0x5                	MOVLW	0x05
009352   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009354   f003
009356   0e06     movlw	0x6                	MOVLW	0x06
009358   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00935a   f004
                                           ;	.line	1239; TCPIP_Stack/Helpers.c	toRotate.Val = val;
00935c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00935e   010b     movlb	0xb                	BANKSEL	_toRotate
009360   6fca     movwf	0xca, 0x1          	MOVWF	_toRotate, B
009362   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009364   010b     movlb	0xb                	BANKSEL	(_toRotate + 1)
009366   6fcb     movwf	0xcb, 0x1          	MOVWF	(_toRotate + 1), B
009368   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00936a   010b     movlb	0xb                	BANKSEL	(_toRotate + 2)
00936c   6fcc     movwf	0xcc, 0x1          	MOVWF	(_toRotate + 2), B
00936e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009370   010b     movlb	0xb                	BANKSEL	(_toRotate + 3)
009372   6fcd     movwf	0xcd, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
009374   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
009376   f000
                                           _00284_DS_:
009378   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00937a   f001
00937c   6a02     clrf	0x2, 0              	CLRF	r0x02
00937e   0e00     movlw	0                  	MOVLW	0x00
009380   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
009382   e102     bnz	0x9388               	BNZ	_00300_DS_
009384   0e08     movlw	0x8                	MOVLW	0x08
009386   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00300_DS_:
009388   e317     bnc	0x93b8               	BNC	_00288_DS_
                                           ;	.line	1243; TCPIP_Stack/Helpers.c	t = toRotate.v[3];
00938a   cbcd     movff	0xbcd, 0x1         	MOVFF	(_toRotate + 3), r0x01
00938c   f001
                                           ;	.line	1244; TCPIP_Stack/Helpers.c	toRotate.v[3] = toRotate.v[2];
00938e   cbcc     movff	0xbcc, 0x2         	MOVFF	(_toRotate + 2), r0x02
009390   f002
009392   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009394   010b     movlb	0xb                	BANKSEL	(_toRotate + 3)
009396   6fcd     movwf	0xcd, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1245; TCPIP_Stack/Helpers.c	toRotate.v[2] = toRotate.v[1];
009398   cbcb     movff	0xbcb, 0x2         	MOVFF	(_toRotate + 1), r0x02
00939a   f002
00939c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00939e   010b     movlb	0xb                	BANKSEL	(_toRotate + 2)
0093a0   6fcc     movwf	0xcc, 0x1          	MOVWF	(_toRotate + 2), B
                                           ;	.line	1246; TCPIP_Stack/Helpers.c	toRotate.v[1] = toRotate.v[0];
0093a2   cbca     movff	0xbca, 0x2         	MOVFF	_toRotate, r0x02
0093a4   f002
0093a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0093a8   010b     movlb	0xb                	BANKSEL	(_toRotate + 1)
0093aa   6fcb     movwf	0xcb, 0x1          	MOVWF	(_toRotate + 1), B
                                           ;	.line	1247; TCPIP_Stack/Helpers.c	toRotate.v[0] = t;
0093ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0093ae   010b     movlb	0xb                	BANKSEL	_toRotate
0093b0   6fca     movwf	0xca, 0x1          	MOVWF	_toRotate, B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
0093b2   0ef8     movlw	0xf8               	MOVLW	0xf8
0093b4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0093b6   d7e0     bra	0x9378               	BRA	_00284_DS_
                                           _00288_DS_:
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
0093b8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0093ba   f001
0093bc   6a02     clrf	0x2, 0              	CLRF	r0x02
0093be   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0093c0   e102     bnz	0x93c6               	BNZ	_00302_DS_
0093c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0093c4   e00a     bz	0x93da                	BZ	_00291_DS_
                                           _00301_DS_:
                                           _00302_DS_:
0093c6   010b     movlb	0xb                	movlb _toRotate
0093c8   90d8     bcf	0xd8, 0, 0           	bcf STATUS,0,0
0093ca   bfcd     btfsc	0xcd, 0x7, 0x1     	btfsc _toRotate+3,7,1
0093cc   80d8     bsf	0xd8, 0, 0           	bsf STATUS,0,0
0093ce   37ca     rlcf	0xca, 0x1, 0x1      	rlcf _toRotate+0,1,1
0093d0   37cb     rlcf	0xcb, 0x1, 0x1      	rlcf _toRotate+1,1,1
0093d2   37cc     rlcf	0xcc, 0x1, 0x1      	rlcf _toRotate+2,1,1
0093d4   37cd     rlcf	0xcd, 0x1, 0x1      	rlcf _toRotate+3,1,1
                                           	
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
0093d6   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0093d8   d7ef     bra	0x93b8               	BRA	_00288_DS_
                                           _00291_DS_:
                                           ;	.line	1281; TCPIP_Stack/Helpers.c	return toRotate.Val;
0093da   cbcd     movff	0xbcd, 0xfe9       	MOVFF	(_toRotate + 3), FSR0L
0093dc   ffe9
0093de   cbcc     movff	0xbcc, 0xff4       	MOVFF	(_toRotate + 2), PRODH
0093e0   fff4
0093e2   cbcb     movff	0xbcb, 0xff3       	MOVFF	(_toRotate + 1), PRODL
0093e4   fff3
0093e6   010b     movlb	0xb                	BANKSEL	_toRotate
0093e8   51ca     movf	0xca, 0, 0x1        	MOVF	_toRotate, W, B
0093ea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0093ec   f004
0093ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0093f0   f003
0093f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0093f4   f002
0093f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0093f8   f001
0093fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0093fc   f000
0093fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009400   ffd9
009402   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__CalcIPChecksum	code
                                           _CalcIPChecksum:
                                           ;	.line	1062; TCPIP_Stack/Helpers.c	WORD CalcIPChecksum(BYTE* buffer, WORD count)
0032cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032ce   ffe5
0032d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032d2   ffd9
0032d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0032d6   ffe5
0032d8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0032da   ffe5
0032dc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0032de   ffe5
0032e0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0032e2   ffe5
0032e4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0032e6   ffe5
0032e8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0032ea   ffe5
0032ec   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0032ee   ffe5
0032f0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0032f2   ffe5
0032f4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0032f6   ffe5
0032f8   0e02     movlw	0x2                	MOVLW	0x02
0032fa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0032fc   f000
0032fe   0e03     movlw	0x3                	MOVLW	0x03
003300   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003302   f001
003304   0e04     movlw	0x4                	MOVLW	0x04
003306   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003308   f002
00330a   0e05     movlw	0x5                	MOVLW	0x05
00330c   cfdb     movff	0xfdb, 0x226       	MOVFF	PLUSW2, _CalcIPChecksum_count_1_1
00330e   f226
003310   0e06     movlw	0x6                	MOVLW	0x06
003312   cfdb     movff	0xfdb, 0x227       	MOVFF	PLUSW2, (_CalcIPChecksum_count_1_1 + 1)
003314   f227
003316   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1066; TCPIP_Stack/Helpers.c	DWORD_VAL sum = {0x00000000ul};
003318   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00331a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00331c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00331e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003320   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
003322   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003324   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003326   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003328   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00332a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00332c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00332e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003330   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
003332   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003334   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003336   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003338   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00333a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00333c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00333e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003340   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
003342   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003344   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003346   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003348   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00334a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00334c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00334e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003350   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
003352   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003354   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003356   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003358   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00335a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00335c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00335e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003360   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
003362   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003364   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003366   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003368   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00336a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00336c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00336e   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003370   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
003372   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003374   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
003376   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003378   6bc6     clrf	0xc6, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00337a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00337c   6bc7     clrf	0xc7, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00337e   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003380   91c6     bcf	0xc6, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
003382   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003384   93c6     bcf	0xc6, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
003386   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003388   95c6     bcf	0xc6, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
00338a   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
00338c   97c6     bcf	0xc6, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
00338e   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003390   99c6     bcf	0xc6, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
003392   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003394   9bc6     bcf	0xc6, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
003396   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003398   9dc6     bcf	0xc6, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
00339a   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
00339c   9fc6     bcf	0xc6, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
00339e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033a0   91c7     bcf	0xc7, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
0033a2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033a4   93c7     bcf	0xc7, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
0033a6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033a8   95c7     bcf	0xc7, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
0033aa   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033ac   97c7     bcf	0xc7, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
0033ae   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033b0   99c7     bcf	0xc7, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
0033b2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033b4   9bc7     bcf	0xc7, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
0033b6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033b8   9dc7     bcf	0xc7, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
0033ba   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0033bc   9fc7     bcf	0xc7, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
0033be   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033c0   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
0033c2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0033c4   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
0033c6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033c8   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
0033ca   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0033cc   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
0033ce   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033d0   6bc8     clrf	0xc8, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
0033d2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0033d4   6bc9     clrf	0xc9, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
0033d6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033d8   91c8     bcf	0xc8, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
0033da   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033dc   93c8     bcf	0xc8, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
0033de   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033e0   95c8     bcf	0xc8, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
0033e2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033e4   97c8     bcf	0xc8, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
0033e6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033e8   99c8     bcf	0xc8, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
0033ea   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033ec   9bc8     bcf	0xc8, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
0033ee   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033f0   9dc8     bcf	0xc8, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
0033f2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0033f4   9fc8     bcf	0xc8, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
0033f6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0033f8   91c9     bcf	0xc9, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
0033fa   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0033fc   93c9     bcf	0xc9, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
0033fe   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003400   95c9     bcf	0xc9, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
003402   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003404   97c9     bcf	0xc9, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
003406   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003408   99c9     bcf	0xc9, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
00340a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00340c   9bc9     bcf	0xc9, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
00340e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003410   9dc9     bcf	0xc9, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
003412   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003414   9fc9     bcf	0xc9, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
003416   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003418   91c6     bcf	0xc6, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
00341a   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
00341c   93c6     bcf	0xc6, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
00341e   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003420   95c6     bcf	0xc6, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
003422   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003424   97c6     bcf	0xc6, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
003426   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003428   99c6     bcf	0xc6, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
00342a   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
00342c   9bc6     bcf	0xc6, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
00342e   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003430   9dc6     bcf	0xc6, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
003432   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003434   9fc6     bcf	0xc6, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
003436   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003438   91c7     bcf	0xc7, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
00343a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00343c   93c7     bcf	0xc7, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
00343e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003440   95c7     bcf	0xc7, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
003442   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003444   97c7     bcf	0xc7, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
003446   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003448   99c7     bcf	0xc7, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
00344a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00344c   9bc7     bcf	0xc7, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
00344e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003450   9dc7     bcf	0xc7, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
003452   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003454   9fc7     bcf	0xc7, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
003456   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003458   91c8     bcf	0xc8, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
00345a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00345c   93c8     bcf	0xc8, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00345e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003460   95c8     bcf	0xc8, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
003462   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003464   97c8     bcf	0xc8, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
003466   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003468   99c8     bcf	0xc8, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
00346a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00346c   9bc8     bcf	0xc8, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00346e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003470   9dc8     bcf	0xc8, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
003472   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003474   9fc8     bcf	0xc8, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
003476   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003478   91c9     bcf	0xc9, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
00347a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00347c   93c9     bcf	0xc9, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
00347e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003480   95c9     bcf	0xc9, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
003482   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003484   97c9     bcf	0xc9, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
003486   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003488   99c9     bcf	0xc9, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
00348a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00348c   9bc9     bcf	0xc9, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
00348e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003490   9dc9     bcf	0xc9, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
003492   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003494   9fc9     bcf	0xc9, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
                                           ;	.line	1068; TCPIP_Stack/Helpers.c	i = count >> 1;
003496   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003498   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_count_1_1 + 1)
00349a   3127     rrcf	0x27, 0, 0x1        	RRCF	(_CalcIPChecksum_count_1_1 + 1), W, B
00349c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00349e   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_count_1_1
0034a0   3126     rrcf	0x26, 0, 0x1        	RRCF	_CalcIPChecksum_count_1_1, W, B
0034a2   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00274_DS_:
                                           ;	.line	1072; TCPIP_Stack/Helpers.c	while(i--)
0034a4   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
0034a6   f005
0034a8   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0034aa   f006
0034ac   0eff     movlw	0xff               	MOVLW	0xff
0034ae   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0034b0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0034b2   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0034b4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0034b8   e02b     bz	0x3510                	BZ	_00276_DS_
                                           ;	.line	1073; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*val++;
0034ba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0034bc   ffe9
0034be   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0034c0   fff3
0034c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0034c4   ec88     call	0xad10, 0           	CALL	__gptrget2
0034c6   f056
0034c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0034ca   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0034cc   f006
0034ce   0e02     movlw	0x2                	MOVLW	0x02
0034d0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0034d2   0e00     movlw	0                  	MOVLW	0x00
0034d4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0034d6   0e00     movlw	0                  	MOVLW	0x00
0034d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0034da   6a07     clrf	0x7, 0              	CLRF	r0x07
0034dc   6a08     clrf	0x8, 0              	CLRF	r0x08
0034de   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
0034e0   51c6     movf	0xc6, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
0034e2   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0034e4   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0034e6   51c7     movf	0xc7, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
0034e8   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0034ea   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0034ec   51c8     movf	0xc8, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
0034ee   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0034f0   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0034f2   51c9     movf	0xc9, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
0034f4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
0034f6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034f8   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
0034fa   6fc6     movwf	0xc6, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0034fc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0034fe   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003500   6fc7     movwf	0xc7, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
003502   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003504   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003506   6fc8     movwf	0xc8, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
003508   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00350a   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00350c   6fc9     movwf	0xc9, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
00350e   d7ca     bra	0x34a4               	BRA	_00274_DS_
                                           _00276_DS_:
003510   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_count_1_1
                                           ;	.line	1076; TCPIP_Stack/Helpers.c	if(((WORD_VAL*)&count)->bits.b0)
003512   a126     btfss	0x26, 0, 0x1       	BTFSS	_CalcIPChecksum_count_1_1, 0, B
003514   d023     bra	0x355c               	BRA	_00278_DS_
                                           ;	.line	1077; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*(BYTE*)val;
003516   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003518   ffe9
00351a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00351c   fff3
00351e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003520   ec12     call	0xae24, 0           	CALL	__gptrget1
003522   f057
003524   6e00     movwf	0, 0               	MOVWF	r0x00
003526   6a01     clrf	0x1, 0              	CLRF	r0x01
003528   6a02     clrf	0x2, 0              	CLRF	r0x02
00352a   6a03     clrf	0x3, 0              	CLRF	r0x03
00352c   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
00352e   51c6     movf	0xc6, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
003530   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003532   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003534   51c7     movf	0xc7, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
003536   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003538   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00353a   51c8     movf	0xc8, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
00353c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00353e   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003540   51c9     movf	0xc9, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
003542   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003544   5000     movf	0, 0, 0             	MOVF	r0x00, W
003546   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003548   6fc6     movwf	0xc6, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
00354a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00354c   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00354e   6fc7     movwf	0xc7, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
003550   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003552   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003554   6fc8     movwf	0xc8, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
003556   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003558   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00355a   6fc9     movwf	0xc9, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
                                           _00278_DS_:
                                           ;	.line	1080; TCPIP_Stack/Helpers.c	sum.Val = (DWORD)sum.w[0] + (DWORD)sum.w[1];
00355c   cbc6     movff	0xbc6, 0           	MOVFF	_CalcIPChecksum_sum_1_1, r0x00
00355e   f000
003560   cbc7     movff	0xbc7, 0x1         	MOVFF	(_CalcIPChecksum_sum_1_1 + 1), r0x01
003562   f001
003564   6a02     clrf	0x2, 0              	CLRF	r0x02
003566   6a03     clrf	0x3, 0              	CLRF	r0x03
003568   cbc8     movff	0xbc8, 0x4         	MOVFF	(_CalcIPChecksum_sum_1_1 + 2), r0x04
00356a   f004
00356c   cbc9     movff	0xbc9, 0x5         	MOVFF	(_CalcIPChecksum_sum_1_1 + 3), r0x05
00356e   f005
003570   6a06     clrf	0x6, 0              	CLRF	r0x06
003572   6a07     clrf	0x7, 0              	CLRF	r0x07
003574   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003576   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003578   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00357a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00357c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00357e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003580   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003582   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003584   5000     movf	0, 0, 0             	MOVF	r0x00, W
003586   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
003588   6fc6     movwf	0xc6, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
00358a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00358c   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00358e   6fc7     movwf	0xc7, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
003590   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003592   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003594   6fc8     movwf	0xc8, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
003596   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003598   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00359a   6fc9     movwf	0xc9, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
00359c   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
                                           ;	.line	1084; TCPIP_Stack/Helpers.c	sum.w[0] += sum.w[1];
00359e   51c8     movf	0xc8, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
0035a0   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
0035a2   25c6     addwf	0xc6, 0, 0x1       	ADDWF	_CalcIPChecksum_sum_1_1, W, B
0035a4   6e00     movwf	0, 0               	MOVWF	r0x00
0035a6   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0035a8   51c9     movf	0xc9, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
0035aa   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0035ac   21c7     addwfc	0xc7, 0, 0x1      	ADDWFC	(_CalcIPChecksum_sum_1_1 + 1), W, B
0035ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0035b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035b2   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
0035b4   6fc6     movwf	0xc6, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0035b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0035b8   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0035ba   6fc7     movwf	0xc7, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0035bc   010b     movlb	0xb                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1087; TCPIP_Stack/Helpers.c	return ~sum.w[0];
0035be   1dc6     comf	0xc6, 0, 0x1        	COMF	_CalcIPChecksum_sum_1_1, W, B
0035c0   6e00     movwf	0, 0               	MOVWF	r0x00
0035c2   010b     movlb	0xb                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0035c4   1dc7     comf	0xc7, 0, 0x1        	COMF	(_CalcIPChecksum_sum_1_1 + 1), W, B
0035c6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0035c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0035ca   fff3
0035cc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035ce   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0035d0   f008
0035d2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0035d4   f007
0035d6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0035d8   f006
0035da   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0035dc   f005
0035de   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0035e0   f004
0035e2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0035e4   f003
0035e6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0035e8   f002
0035ea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0035ec   f001
0035ee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0035f0   f000
0035f2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0035f4   ffd9
0035f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swapl	code
                                           _swapl:
                                           ;	.line	1020; TCPIP_Stack/Helpers.c	DWORD swapl(DWORD v)
009b0c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009b0e   ffe5
009b10   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009b12   ffd9
009b14   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009b16   ffe5
009b18   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009b1a   ffe5
009b1c   0e02     movlw	0x2                	MOVLW	0x02
009b1e   cfdb     movff	0xfdb, 0xbc2       	MOVFF	PLUSW2, _swapl_v_1_1
009b20   fbc2
009b22   0e03     movlw	0x3                	MOVLW	0x03
009b24   cfdb     movff	0xfdb, 0xbc3       	MOVFF	PLUSW2, (_swapl_v_1_1 + 1)
009b26   fbc3
009b28   0e04     movlw	0x4                	MOVLW	0x04
009b2a   cfdb     movff	0xfdb, 0xbc4       	MOVFF	PLUSW2, (_swapl_v_1_1 + 2)
009b2c   fbc4
009b2e   0e05     movlw	0x5                	MOVLW	0x05
009b30   cfdb     movff	0xfdb, 0xbc5       	MOVFF	PLUSW2, (_swapl_v_1_1 + 3)
009b32   fbc5
                                           ;	.line	1023; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
009b34   cbc5     movff	0xbc5, 0           	MOVFF	(_swapl_v_1_1 + 3), r0x00
009b36   f000
009b38   5000     movf	0, 0, 0             	MOVF	r0x00, W
009b3a   010b     movlb	0xb                	BANKSEL	_swapl_v_1_1
009b3c   19c2     xorwf	0xc2, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
009b3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
009b40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009b42   010b     movlb	0xb                	BANKSEL	_swapl_v_1_1
009b44   6fc2     movwf	0xc2, 0x1          	MOVWF	_swapl_v_1_1, B
009b46   010b     movlb	0xb                	BANKSEL	_swapl_v_1_1
                                           ;	.line	1024; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[3] ^= ((DWORD_VAL*)&v)->v[0];
009b48   51c2     movf	0xc2, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
009b4a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
009b4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
009b4e   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 3)
009b50   6fc5     movwf	0xc5, 0x1          	MOVWF	(_swapl_v_1_1 + 3), B
009b52   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 3)
                                           ;	.line	1025; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
009b54   51c5     movf	0xc5, 0, 0x1        	MOVF	(_swapl_v_1_1 + 3), W, B
009b56   010b     movlb	0xb                	BANKSEL	_swapl_v_1_1
009b58   19c2     xorwf	0xc2, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
009b5a   6e00     movwf	0, 0               	MOVWF	r0x00
009b5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
009b5e   010b     movlb	0xb                	BANKSEL	_swapl_v_1_1
009b60   6fc2     movwf	0xc2, 0x1          	MOVWF	_swapl_v_1_1, B
                                           ;	.line	1028; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
009b62   cbc4     movff	0xbc4, 0           	MOVFF	(_swapl_v_1_1 + 2), r0x00
009b64   f000
009b66   5000     movf	0, 0, 0             	MOVF	r0x00, W
009b68   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 1)
009b6a   19c3     xorwf	0xc3, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
009b6c   6e01     movwf	0x1, 0             	MOVWF	r0x01
009b6e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009b70   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 1)
009b72   6fc3     movwf	0xc3, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
009b74   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 1)
                                           ;	.line	1029; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[2] ^= ((DWORD_VAL*)&v)->v[1];
009b76   51c3     movf	0xc3, 0, 0x1        	MOVF	(_swapl_v_1_1 + 1), W, B
009b78   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
009b7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
009b7c   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 2)
009b7e   6fc4     movwf	0xc4, 0x1          	MOVWF	(_swapl_v_1_1 + 2), B
009b80   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 2)
                                           ;	.line	1030; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
009b82   51c4     movf	0xc4, 0, 0x1        	MOVF	(_swapl_v_1_1 + 2), W, B
009b84   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 1)
009b86   19c3     xorwf	0xc3, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
009b88   6e00     movwf	0, 0               	MOVWF	r0x00
009b8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
009b8c   010b     movlb	0xb                	BANKSEL	(_swapl_v_1_1 + 1)
009b8e   6fc3     movwf	0xc3, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
                                           ;	.line	1032; TCPIP_Stack/Helpers.c	return v;
009b90   cbc5     movff	0xbc5, 0xfe9       	MOVFF	(_swapl_v_1_1 + 3), FSR0L
009b92   ffe9
009b94   cbc4     movff	0xbc4, 0xff4       	MOVFF	(_swapl_v_1_1 + 2), PRODH
009b96   fff4
009b98   cbc3     movff	0xbc3, 0xff3       	MOVFF	(_swapl_v_1_1 + 1), PRODL
009b9a   fff3
009b9c   010b     movlb	0xb                	BANKSEL	_swapl_v_1_1
009b9e   51c2     movf	0xc2, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
009ba0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009ba2   f001
009ba4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009ba6   f000
009ba8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009baa   ffd9
009bac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swaps	code
                                           _swaps:
                                           ;	.line	991; TCPIP_Stack/Helpers.c	WORD swaps(WORD v)
00a902   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a904   ffe5
00a906   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a908   ffd9
00a90a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a90c   ffe5
00a90e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a910   ffe5
00a912   0e02     movlw	0x2                	MOVLW	0x02
00a914   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a916   f000
00a918   0e03     movlw	0x3                	MOVLW	0x03
00a91a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a91c   f001
                                           ;	.line	996; TCPIP_Stack/Helpers.c	t.Val   = v;
00a91e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a920   0102     movlb	0x2                	BANKSEL	_swaps_t_1_1
00a922   6f24     movwf	0x24, 0x1          	MOVWF	_swaps_t_1_1, B
00a924   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a926   0102     movlb	0x2                	BANKSEL	(_swaps_t_1_1 + 1)
00a928   6f25     movwf	0x25, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	997; TCPIP_Stack/Helpers.c	b       = t.v[1];
00a92a   c225     movff	0x225, 0           	MOVFF	(_swaps_t_1_1 + 1), r0x00
00a92c   f000
                                           ;	.line	998; TCPIP_Stack/Helpers.c	t.v[1]  = t.v[0];
00a92e   c224     movff	0x224, 0x1         	MOVFF	_swaps_t_1_1, r0x01
00a930   f001
00a932   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a934   0102     movlb	0x2                	BANKSEL	(_swaps_t_1_1 + 1)
00a936   6f25     movwf	0x25, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	999; TCPIP_Stack/Helpers.c	t.v[0]  = b;
00a938   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a93a   0102     movlb	0x2                	BANKSEL	_swaps_t_1_1
00a93c   6f24     movwf	0x24, 0x1          	MOVWF	_swaps_t_1_1, B
                                           ;	.line	1001; TCPIP_Stack/Helpers.c	return t.Val;
00a93e   c225     movff	0x225, 0xff3       	MOVFF	(_swaps_t_1_1 + 1), PRODL
00a940   fff3
00a942   0102     movlb	0x2                	BANKSEL	_swaps_t_1_1
00a944   5124     movf	0x24, 0, 0x1        	MOVF	_swaps_t_1_1, W, B
00a946   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a948   f001
00a94a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a94c   f000
00a94e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a950   ffd9
00a952   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_low	code
                                           _btohexa_low:
                                           ;	.line	904; TCPIP_Stack/Helpers.c	BYTE btohexa_low(BYTE b)
00a954   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a956   ffe5
00a958   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a95a   ffd9
00a95c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a95e   ffe5
00a960   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a962   ffe5
00a964   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a966   ffe5
00a968   0e02     movlw	0x2                	MOVLW	0x02
00a96a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a96c   f000
                                           ;	.line	906; TCPIP_Stack/Helpers.c	b &= 0x0F;
00a96e   0e0f     movlw	0xf                	MOVLW	0x0f
00a970   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
                                           ;	.line	907; TCPIP_Stack/Helpers.c	return (b>9u) ? b+'A'-10:b+'0';
00a972   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00a974   f001
00a976   6a02     clrf	0x2, 0              	CLRF	r0x02
00a978   0e00     movlw	0                  	MOVLW	0x00
00a97a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00a97c   e102     bnz	0xa982               	BNZ	_00259_DS_
00a97e   0e0a     movlw	0xa                	MOVLW	0x0a
00a980   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
00a982   e304     bnc	0xa98c               	BNC	_00255_DS_
00a984   0e37     movlw	0x37               	MOVLW	0x37
00a986   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00a988   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a98a   d003     bra	0xa992               	BRA	_00256_DS_
                                           _00255_DS_:
00a98c   0e30     movlw	0x30               	MOVLW	0x30
00a98e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00a990   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00256_DS_:
00a992   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a994   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a996   f002
00a998   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a99a   f001
00a99c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a99e   f000
00a9a0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a9a2   ffd9
00a9a4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_high	code
                                           _btohexa_high:
                                           ;	.line	878; TCPIP_Stack/Helpers.c	BYTE btohexa_high(BYTE b)
00a8ae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a8b0   ffe5
00a8b2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a8b4   ffd9
00a8b6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a8b8   ffe5
00a8ba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a8bc   ffe5
00a8be   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a8c0   ffe5
00a8c2   0e02     movlw	0x2                	MOVLW	0x02
00a8c4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a8c6   f000
                                           ;	.line	880; TCPIP_Stack/Helpers.c	b >>= 4;
00a8c8   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
00a8ca   0b0f     andlw	0xf                	ANDLW	0x0f
00a8cc   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	881; TCPIP_Stack/Helpers.c	return (b>0x9u) ? b+'A'-10:b+'0';
00a8ce   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00a8d0   f001
00a8d2   6a02     clrf	0x2, 0              	CLRF	r0x02
00a8d4   0e00     movlw	0                  	MOVLW	0x00
00a8d6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00a8d8   e102     bnz	0xa8de               	BNZ	_00248_DS_
00a8da   0e0a     movlw	0xa                	MOVLW	0x0a
00a8dc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00248_DS_:
00a8de   e304     bnc	0xa8e8               	BNC	_00245_DS_
00a8e0   0e37     movlw	0x37               	MOVLW	0x37
00a8e2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00a8e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a8e6   d003     bra	0xa8ee               	BRA	_00246_DS_
                                           _00245_DS_:
00a8e8   0e30     movlw	0x30               	MOVLW	0x30
00a8ea   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00a8ec   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00246_DS_:
00a8ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a8f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a8f2   f002
00a8f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a8f6   f001
00a8f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a8fa   f000
00a8fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a8fe   ffd9
00a900   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__hexatob	code
                                           _hexatob:
                                           ;	.line	829; TCPIP_Stack/Helpers.c	BYTE hexatob(WORD AsciiCharsarg)
008754   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008756   ffe5
008758   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00875a   ffd9
00875c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00875e   ffe5
008760   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008762   ffe5
008764   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008766   ffe5
008768   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00876a   ffe5
00876c   0e02     movlw	0x2                	MOVLW	0x02
00876e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008770   f000
008772   0e03     movlw	0x3                	MOVLW	0x03
008774   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008776   f001
                                           ;	.line	832; TCPIP_Stack/Helpers.c	AsciiChars.v[0] = (BYTE)AsciiCharsarg&0xFF; //ML
008778   5000     movf	0, 0, 0             	MOVF	r0x00, W
00877a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00877c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00877e   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
008780   6f22     movwf	0x22, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           ;	.line	833; TCPIP_Stack/Helpers.c	AsciiChars.v[1] = (BYTE)(AsciiCharsarg>>8)&0xFF; //ML
008782   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008784   6e00     movwf	0, 0               	MOVWF	r0x00
008786   6a01     clrf	0x1, 0              	CLRF	r0x01
008788   5000     movf	0, 0, 0             	MOVF	r0x00, W
00878a   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
00878c   6f23     movwf	0x23, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           ;	.line	836; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'F')
00878e   c223     movff	0x223, 0x1         	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x01
008790   f001
008792   6a02     clrf	0x2, 0              	CLRF	r0x02
008794   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008796   0f80     addlw	0x80               	ADDLW	0x80
008798   0f80     addlw	0x80               	ADDLW	0x80
00879a   e102     bnz	0x87a0               	BNZ	_00235_DS_
00879c   0e47     movlw	0x47               	MOVLW	0x47
00879e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00235_DS_:
0087a0   e305     bnc	0x87ac               	BNC	_00220_DS_
                                           ;	.line	837; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'a'-(int)'A';
0087a2   0ee0     movlw	0xe0               	MOVLW	0xe0
0087a4   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0087a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0087a8   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
0087aa   6f23     movwf	0x23, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00220_DS_:
                                           ;	.line	838; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'F')
0087ac   c222     movff	0x222, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
0087ae   f000
0087b0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0087b2   f001
0087b4   6a02     clrf	0x2, 0              	CLRF	r0x02
0087b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0087b8   0f80     addlw	0x80               	ADDLW	0x80
0087ba   0f80     addlw	0x80               	ADDLW	0x80
0087bc   e102     bnz	0x87c2               	BNZ	_00236_DS_
0087be   0e47     movlw	0x47               	MOVLW	0x47
0087c0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00236_DS_:
0087c2   e305     bnc	0x87ce               	BNC	_00222_DS_
                                           ;	.line	839; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'a'-(int)'A';
0087c4   0ee0     movlw	0xe0               	MOVLW	0xe0
0087c6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0087c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0087ca   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
0087cc   6f22     movwf	0x22, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00222_DS_:
                                           ;	.line	842; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'9')
0087ce   c223     movff	0x223, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
0087d0   f000
0087d2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0087d4   f001
0087d6   6a02     clrf	0x2, 0              	CLRF	r0x02
0087d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0087da   0f80     addlw	0x80               	ADDLW	0x80
0087dc   0f80     addlw	0x80               	ADDLW	0x80
0087de   e102     bnz	0x87e4               	BNZ	_00237_DS_
0087e0   0e3a     movlw	0x3a               	MOVLW	0x3a
0087e2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00237_DS_:
0087e4   e307     bnc	0x87f4               	BNC	_00224_DS_
                                           ;	.line	843; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'A' - 10;
0087e6   0ec9     movlw	0xc9               	MOVLW	0xc9
0087e8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0087ea   6e01     movwf	0x1, 0             	MOVWF	r0x01
0087ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0087ee   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
0087f0   6f23     movwf	0x23, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
0087f2   d005     bra	0x87fe               	BRA	_00225_DS_
                                           _00224_DS_:
                                           ;	.line	845; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= '0';
0087f4   0ed0     movlw	0xd0               	MOVLW	0xd0
0087f6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0087f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0087fa   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
0087fc   6f23     movwf	0x23, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00225_DS_:
                                           ;	.line	847; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'9')
0087fe   c222     movff	0x222, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
008800   f000
008802   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
008804   f001
008806   6a02     clrf	0x2, 0              	CLRF	r0x02
008808   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00880a   0f80     addlw	0x80               	ADDLW	0x80
00880c   0f80     addlw	0x80               	ADDLW	0x80
00880e   e102     bnz	0x8814               	BNZ	_00238_DS_
008810   0e3a     movlw	0x3a               	MOVLW	0x3a
008812   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00238_DS_:
008814   e307     bnc	0x8824               	BNC	_00227_DS_
                                           ;	.line	848; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'A' - 10;
008816   0ec9     movlw	0xc9               	MOVLW	0xc9
008818   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00881a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00881c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00881e   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
008820   6f22     movwf	0x22, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
008822   d005     bra	0x882e               	BRA	_00228_DS_
                                           _00227_DS_:
                                           ;	.line	850; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'0';
008824   0ed0     movlw	0xd0               	MOVLW	0xd0
008826   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
008828   5000     movf	0, 0, 0             	MOVF	r0x00, W
00882a   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
00882c   6f22     movwf	0x22, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00228_DS_:
                                           ;	.line	854; TCPIP_Stack/Helpers.c	return (WORD)((AsciiChars.v[1]<<4) |  AsciiChars.v[0]);
00882e   c223     movff	0x223, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
008830   f000
008832   6a01     clrf	0x1, 0              	CLRF	r0x01
008834   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
008836   0bf0     andlw	0xf0               	ANDLW	0xf0
008838   6e03     movwf	0x3, 0             	MOVWF	r0x03
00883a   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
00883c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00883e   0b0f     andlw	0xf                	ANDLW	0x0f
008840   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
008842   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
008844   c222     movff	0x222, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
008846   f000
008848   6a01     clrf	0x1, 0              	CLRF	r0x01
00884a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00884c   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
00884e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008850   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
008852   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008854   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008856   f003
008858   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00885a   f002
00885c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00885e   f001
008860   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008862   f000
008864   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008866   ffd9
008868   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__StringToIPAddress	code
                                           _StringToIPAddress:
                                           ;	.line	330; TCPIP_Stack/Helpers.c	BOOL StringToIPAddress(BYTE* str, IP_ADDR* IPAddress)
0035f8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0035fa   ffe5
0035fc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0035fe   ffd9
003600   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003602   ffe5
003604   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003606   ffe5
003608   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00360a   ffe5
00360c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00360e   ffe5
003610   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003612   ffe5
003614   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003616   ffe5
003618   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00361a   ffe5
00361c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00361e   ffe5
003620   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003622   ffe5
003624   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003626   ffe5
003628   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00362a   ffe5
00362c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00362e   ffe5
003630   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003632   ffe5
003634   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003636   ffe5
003638   0e02     movlw	0x2                	MOVLW	0x02
00363a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00363c   f000
00363e   0e03     movlw	0x3                	MOVLW	0x03
003640   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003642   f001
003644   0e04     movlw	0x4                	MOVLW	0x04
003646   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003648   f002
00364a   0e05     movlw	0x5                	MOVLW	0x05
00364c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00364e   f003
003650   0e06     movlw	0x6                	MOVLW	0x06
003652   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003654   f004
003656   0e07     movlw	0x7                	MOVLW	0x07
003658   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00365a   f005
                                           ;	.line	335; TCPIP_Stack/Helpers.c	charLen = 0;
00365c   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           ;	.line	336; TCPIP_Stack/Helpers.c	currentOctet = 0;
00365e   6a07     clrf	0x7, 0              	CLRF	r0x07
003660   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	337; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
003662   6bbe     clrf	0xbe, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
003664   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003666   6bbf     clrf	0xbf, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
003668   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00366a   6bc0     clrf	0xc0, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
00366c   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00366e   6bc1     clrf	0xc1, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           _00161_DS_:
                                           ;	.line	338; TCPIP_Stack/Helpers.c	while((i = *str++))
003670   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003672   ffe9
003674   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003676   fff3
003678   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00367a   ec12     call	0xae24, 0           	CALL	__gptrget1
00367c   f057
00367e   6e08     movwf	0x8, 0             	MOVWF	r0x08
003680   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003682   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003684   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003686   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003688   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00368a   c008     movff	0x8, 0x9           	MOVFF	r0x08, r0x09
00368c   f009
00368e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003690   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003692   d0d0     bra	0x3834               	BRA	_00163_DS_
                                           ;	.line	340; TCPIP_Stack/Helpers.c	if(currentOctet > 3u)
003694   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
003696   f008
003698   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00369a   0e00     movlw	0                  	MOVLW	0x00
00369c   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
00369e   e102     bnz	0x36a4               	BNZ	_00193_DS_
0036a0   0e04     movlw	0x4                	MOVLW	0x04
0036a2   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00193_DS_:
0036a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0036a6   d0c6     bra	0x3834               	BRA	_00163_DS_
                                           ;	.line	343; TCPIP_Stack/Helpers.c	i -= '0';
0036a8   0ed0     movlw	0xd0               	MOVLW	0xd0
0036aa   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
                                           ;	.line	347; TCPIP_Stack/Helpers.c	if(charLen == 0u)
0036ac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0036ae   e10c     bnz	0x36c8               	BNZ	_00159_DS_
                                           ;	.line	349; TCPIP_Stack/Helpers.c	if(i > 9u)
0036b0   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
0036b2   f008
0036b4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0036b6   0e00     movlw	0                  	MOVLW	0x00
0036b8   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0036ba   e102     bnz	0x36c0               	BNZ	_00194_DS_
0036bc   0e0a     movlw	0xa                	MOVLW	0x0a
0036be   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00194_DS_:
0036c0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0036c2   d09d     bra	0x37fe               	BRA	_00160_DS_
                                           ;	.line	350; TCPIP_Stack/Helpers.c	return FALSE;
0036c4   6ae8     clrf	0xe8, 0             	CLRF	WREG
0036c6   d107     bra	0x38d6               	BRA	_00173_DS_
                                           _00159_DS_:
                                           ;	.line	352; TCPIP_Stack/Helpers.c	else if(charLen == 3u)
0036c8   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
0036ca   f008
0036cc   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0036ce   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0036d0   0a03     xorlw	0x3                	XORLW	0x03
0036d2   e102     bnz	0x36d8               	BNZ	_00195_DS_
0036d4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0036d6   e001     bz	0x36da                	BZ	_00196_DS_
                                           _00195_DS_:
0036d8   d044     bra	0x3762               	BRA	_00156_DS_
                                           _00196_DS_:
                                           ;	.line	354; TCPIP_Stack/Helpers.c	if(i != (BYTE)('.' - '0'))
0036da   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0036dc   0afe     xorlw	0xfe               	XORLW	0xfe
0036de   e002     bz	0x36e4                	BZ	_00146_DS_
                                           ;	.line	355; TCPIP_Stack/Helpers.c	return FALSE;
0036e0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0036e2   d0f9     bra	0x38d6               	BRA	_00173_DS_
                                           _00146_DS_:
                                           ;	.line	357; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
0036e4   0e00     movlw	0                  	MOVLW	0x00
0036e6   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
0036e8   5dc1     subwf	0xc1, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
0036ea   e10b     bnz	0x3702               	BNZ	_00199_DS_
0036ec   0e02     movlw	0x2                	MOVLW	0x02
0036ee   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0036f0   5dc0     subwf	0xc0, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0036f2   e107     bnz	0x3702               	BNZ	_00199_DS_
0036f4   0e05     movlw	0x5                	MOVLW	0x05
0036f6   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0036f8   5dbf     subwf	0xbf, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0036fa   e103     bnz	0x3702               	BNZ	_00199_DS_
0036fc   0e06     movlw	0x6                	MOVLW	0x06
0036fe   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
003700   5dbe     subwf	0xbe, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00199_DS_:
003702   e302     bnc	0x3708               	BNC	_00148_DS_
                                           ;	.line	358; TCPIP_Stack/Helpers.c	return FALSE;
003704   6ae8     clrf	0xe8, 0             	CLRF	WREG
003706   d0e7     bra	0x38d6               	BRA	_00173_DS_
                                           _00148_DS_:
                                           ;	.line	360; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
003708   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
00370a   f008
00370c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00370e   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003710   6a0b     clrf	0xb, 0              	CLRF	r0x0b
003712   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003714   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
003716   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003718   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
00371a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00371c   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00371e   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003720   51c0     movf	0xc0, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003722   0d64     mullw	0x64               	MULLW	0x64
003724   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
003726   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003728   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00372a   51bf     movf	0xbf, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
00372c   0d0a     mullw	0xa                	MULLW	0x0a
00372e   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
003730   f00d
003732   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003734   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
003736   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
003738   51be     movf	0xbe, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
00373a   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
00373c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00373e   ffe5
003740   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003742   ffe9
003744   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
003746   fff3
003748   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00374a   ece5     call	0xafca, 0           	CALL	__gptrput1
00374c   f057
                                           ;	.line	361; TCPIP_Stack/Helpers.c	charLen = 0;
00374e   6a06     clrf	0x6, 0              	CLRF	r0x06
003750   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	362; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
003752   6bbe     clrf	0xbe, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
003754   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003756   6bbf     clrf	0xbf, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
003758   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00375a   6bc0     clrf	0xc0, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
00375c   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00375e   6bc1     clrf	0xc1, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	363; TCPIP_Stack/Helpers.c	continue;
003760   d787     bra	0x3670               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	367; TCPIP_Stack/Helpers.c	if(i == (BYTE)('.' - '0'))
003762   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003764   0afe     xorlw	0xfe               	XORLW	0xfe
003766   e001     bz	0x376a                	BZ	_00201_DS_
003768   d03f     bra	0x37e8               	BRA	_00152_DS_
                                           _00201_DS_:
                                           ;	.line	369; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
00376a   0e00     movlw	0                  	MOVLW	0x00
00376c   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00376e   5dc1     subwf	0xc1, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
003770   e10b     bnz	0x3788               	BNZ	_00202_DS_
003772   0e02     movlw	0x2                	MOVLW	0x02
003774   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003776   5dc0     subwf	0xc0, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003778   e107     bnz	0x3788               	BNZ	_00202_DS_
00377a   0e05     movlw	0x5                	MOVLW	0x05
00377c   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00377e   5dbf     subwf	0xbf, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003780   e103     bnz	0x3788               	BNZ	_00202_DS_
003782   0e06     movlw	0x6                	MOVLW	0x06
003784   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
003786   5dbe     subwf	0xbe, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00202_DS_:
003788   e302     bnc	0x378e               	BNC	_00150_DS_
                                           ;	.line	370; TCPIP_Stack/Helpers.c	return FALSE;
00378a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00378c   d0a4     bra	0x38d6               	BRA	_00173_DS_
                                           _00150_DS_:
                                           ;	.line	372; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
00378e   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
003790   f008
003792   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
003794   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003796   6a0b     clrf	0xb, 0              	CLRF	r0x0b
003798   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00379a   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
00379c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00379e   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0037a0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0037a2   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0037a4   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0037a6   51c0     movf	0xc0, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0037a8   0d64     mullw	0x64               	MULLW	0x64
0037aa   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
0037ac   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0037ae   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0037b0   51bf     movf	0xbf, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0037b2   0d0a     mullw	0xa                	MULLW	0x0a
0037b4   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0037b6   f00d
0037b8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0037ba   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0037bc   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
0037be   51be     movf	0xbe, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0037c0   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0037c2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0037c4   ffe5
0037c6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0037c8   ffe9
0037ca   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0037cc   fff3
0037ce   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0037d0   ece5     call	0xafca, 0           	CALL	__gptrput1
0037d2   f057
                                           ;	.line	373; TCPIP_Stack/Helpers.c	charLen = 0;
0037d4   6a06     clrf	0x6, 0              	CLRF	r0x06
0037d6   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	374; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
0037d8   6bbe     clrf	0xbe, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
0037da   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0037dc   6bbf     clrf	0xbf, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
0037de   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0037e0   6bc0     clrf	0xc0, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
0037e2   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
0037e4   6bc1     clrf	0xc1, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	375; TCPIP_Stack/Helpers.c	continue;
0037e6   d744     bra	0x3670               	BRA	_00161_DS_
                                           _00152_DS_:
                                           ;	.line	377; TCPIP_Stack/Helpers.c	if(i > 9u)
0037e8   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
0037ea   f008
0037ec   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0037ee   0e00     movlw	0                  	MOVLW	0x00
0037f0   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0037f2   e102     bnz	0x37f8               	BNZ	_00203_DS_
0037f4   0e0a     movlw	0xa                	MOVLW	0x0a
0037f6   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00203_DS_:
0037f8   e302     bnc	0x37fe               	BNC	_00160_DS_
                                           ;	.line	378; TCPIP_Stack/Helpers.c	return FALSE;
0037fa   6ae8     clrf	0xe8, 0             	CLRF	WREG
0037fc   d06c     bra	0x38d6               	BRA	_00173_DS_
                                           _00160_DS_:
                                           ;	.line	381; TCPIP_Stack/Helpers.c	charLen++;
0037fe   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
003800   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
                                           ;	.line	382; TCPIP_Stack/Helpers.c	dwVal.Val <<= 8;
003802   51c0     movf	0xc0, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003804   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003806   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003808   51bf     movf	0xbf, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
00380a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00380c   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
00380e   51be     movf	0xbe, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
003810   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003812   6a08     clrf	0x8, 0              	CLRF	r0x08
003814   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003816   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
003818   6fbe     movwf	0xbe, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
00381a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00381c   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00381e   6fbf     movwf	0xbf, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 1), B
003820   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003822   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003824   6fc0     movwf	0xc0, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 2), B
003826   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003828   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00382a   6fc1     movwf	0xc1, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	383; TCPIP_Stack/Helpers.c	dwVal.v[0] = i;
00382c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00382e   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
003830   6fbe     movwf	0xbe, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
003832   d71e     bra	0x3670               	BRA	_00161_DS_
                                           _00163_DS_:
                                           ;	.line	389; TCPIP_Stack/Helpers.c	if(i != 0u && i != (int)'/' && i != (int)'\r' && i != (int)'\n' && i !=(int) ' ' && i != (int)'\t')
003834   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003836   e01e     bz	0x3874                	BZ	_00165_DS_
003838   c009     movff	0x9, 0             	MOVFF	r0x09, r0x00
00383a   f000
00383c   6a01     clrf	0x1, 0              	CLRF	r0x01
00383e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003840   0a2f     xorlw	0x2f               	XORLW	0x2f
003842   e102     bnz	0x3848               	BNZ	_00205_DS_
003844   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003846   e016     bz	0x3874                	BZ	_00165_DS_
                                           _00205_DS_:
003848   5000     movf	0, 0, 0             	MOVF	r0x00, W
00384a   0a0d     xorlw	0xd                	XORLW	0x0d
00384c   e102     bnz	0x3852               	BNZ	_00207_DS_
00384e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003850   e011     bz	0x3874                	BZ	_00165_DS_
                                           _00207_DS_:
003852   5000     movf	0, 0, 0             	MOVF	r0x00, W
003854   0a0a     xorlw	0xa                	XORLW	0x0a
003856   e102     bnz	0x385c               	BNZ	_00209_DS_
003858   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00385a   e00c     bz	0x3874                	BZ	_00165_DS_
                                           _00209_DS_:
00385c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00385e   0a20     xorlw	0x20               	XORLW	0x20
003860   e102     bnz	0x3866               	BNZ	_00211_DS_
003862   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003864   e007     bz	0x3874                	BZ	_00165_DS_
                                           _00211_DS_:
003866   5000     movf	0, 0, 0             	MOVF	r0x00, W
003868   0a09     xorlw	0x9                	XORLW	0x09
00386a   e102     bnz	0x3870               	BNZ	_00213_DS_
00386c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00386e   e002     bz	0x3874                	BZ	_00165_DS_
                                           _00213_DS_:
                                           ;	.line	390; TCPIP_Stack/Helpers.c	return FALSE;
003870   6ae8     clrf	0xe8, 0             	CLRF	WREG
003872   d031     bra	0x38d6               	BRA	_00173_DS_
                                           _00165_DS_:
                                           ;	.line	393; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
003874   0e00     movlw	0                  	MOVLW	0x00
003876   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003878   5dc1     subwf	0xc1, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
00387a   e10b     bnz	0x3892               	BNZ	_00214_DS_
00387c   0e02     movlw	0x2                	MOVLW	0x02
00387e   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003880   5dc0     subwf	0xc0, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003882   e107     bnz	0x3892               	BNZ	_00214_DS_
003884   0e05     movlw	0x5                	MOVLW	0x05
003886   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003888   5dbf     subwf	0xbf, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
00388a   e103     bnz	0x3892               	BNZ	_00214_DS_
00388c   0e06     movlw	0x6                	MOVLW	0x06
00388e   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
003890   5dbe     subwf	0xbe, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00214_DS_:
003892   e302     bnc	0x3898               	BNC	_00172_DS_
                                           ;	.line	394; TCPIP_Stack/Helpers.c	return FALSE;
003894   6ae8     clrf	0xe8, 0             	CLRF	WREG
003896   d01f     bra	0x38d6               	BRA	_00173_DS_
                                           _00172_DS_:
                                           ;	.line	396; TCPIP_Stack/Helpers.c	IPAddress->v[3] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
003898   0e03     movlw	0x3                	MOVLW	0x03
00389a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00389c   0e00     movlw	0                  	MOVLW	0x00
00389e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0038a0   0e00     movlw	0                  	MOVLW	0x00
0038a2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0038a4   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0038a6   51c0     movf	0xc0, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0038a8   0d64     mullw	0x64               	MULLW	0x64
0038aa   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0038ac   f000
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0038ae   010b     movlb	0xb                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0038b0   51bf     movf	0xbf, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0038b2   0d0a     mullw	0xa                	MULLW	0x0a
0038b4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0038b6   f001
0038b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0038ba   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0038bc   010b     movlb	0xb                	BANKSEL	_StringToIPAddress_dwVal_1_1
0038be   51be     movf	0xbe, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0038c0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0038c2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0038c4   ffe5
0038c6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0038c8   ffe9
0038ca   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0038cc   fff3
0038ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0038d0   ece5     call	0xafca, 0           	CALL	__gptrput1
0038d2   f057
                                           ;	.line	398; TCPIP_Stack/Helpers.c	return TRUE;
0038d4   0e01     movlw	0x1                	MOVLW	0x01
                                           _00173_DS_:
0038d6   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0038d8   f00d
0038da   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0038dc   f00c
0038de   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0038e0   f00b
0038e2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0038e4   f00a
0038e6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0038e8   f009
0038ea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0038ec   f008
0038ee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0038f0   f007
0038f2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0038f4   f006
0038f6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0038f8   f005
0038fa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0038fc   f004
0038fe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003900   f003
003902   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003904   f002
003906   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003908   f001
00390a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00390c   f000
00390e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003910   ffd9
003912   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__GenerateRandomDWORD	code
                                           _GenerateRandomDWORD:
                                           ;	.line	106; TCPIP_Stack/Helpers.c	DWORD GenerateRandomDWORD(void)
0047d0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0047d2   ffe5
0047d4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0047d6   ffd9
0047d8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0047da   ffe5
0047dc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0047de   ffe5
0047e0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0047e2   ffe5
0047e4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0047e6   ffe5
0047e8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0047ea   ffe5
0047ec   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0047ee   ffe5
0047f0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0047f2   ffe5
0047f4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0047f6   ffe5
0047f8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0047fa   ffe5
0047fc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0047fe   ffe5
004800   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004802   ffe5
004804   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004806   ffe5
004808   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00480a   ffe5
00480c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00480e   ffe5
004810   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
004812   ffe5
004814   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
004816   ffe5
004818   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00481a   ffe5
00481c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00481e   ffe5
004820   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
004822   ffe5
004824   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
004826   ffe5
004828   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00482a   ffe5
00482c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00482e   ffe5
004830   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
004832   ffe5
004834   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
004836   ffe5
004838   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
00483a   ffe5
00483c   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
00483e   ffe5
004840   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
004842   ffe5
004844   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
004846   ffe5
004848   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
00484a   ffe5
00484c   c01d     movff	0x1d, 0xfe5        	MOVFF	r0x1d, POSTDEC1
00484e   ffe5
                                           ;	.line	119; TCPIP_Stack/Helpers.c	ADCON0Save = ADCON0;
004850   cfc2     movff	0xfc2, 0           	MOVFF	_ADCON0, r0x00
004852   f000
                                           ;	.line	120; TCPIP_Stack/Helpers.c	ADCON2Save = ADCON2;
004854   cfc0     movff	0xfc0, 0x1         	MOVFF	_ADCON2, r0x01
004856   f001
                                           ;	.line	121; TCPIP_Stack/Helpers.c	T0CONSave = T0CON;
004858   cfd5     movff	0xfd5, 0x2         	MOVFF	_T0CON, r0x02
00485a   f002
                                           ;	.line	122; TCPIP_Stack/Helpers.c	TMR0LSave = TMR0L;
00485c   cfd6     movff	0xfd6, 0x3         	MOVFF	_TMR0L, r0x03
00485e   f003
                                           ;	.line	123; TCPIP_Stack/Helpers.c	TMR0HSave = TMR0H;
004860   cfd7     movff	0xfd7, 0x4         	MOVFF	_TMR0H, r0x04
004862   f004
                                           ;	.line	126; TCPIP_Stack/Helpers.c	ADCON0 = 0x01;	// Turn on the A/D module
004864   0e01     movlw	0x1                	MOVLW	0x01
004866   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	127; TCPIP_Stack/Helpers.c	ADCON2 = 0x3F;	// 20 Tad acquisition, Frc A/D clock used for conversion
004868   0e3f     movlw	0x3f               	MOVLW	0x3f
00486a   6ec0     movwf	0xc0, 0            	MOVWF	_ADCON2
                                           ;	.line	128; TCPIP_Stack/Helpers.c	T0CON = 0x88;	// TMR0ON = 1, no prescalar
00486c   0e88     movlw	0x88               	MOVLW	0x88
00486e   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	130; TCPIP_Stack/Helpers.c	dwTotalTime = 0;
004870   6a05     clrf	0x5, 0              	CLRF	r0x05
004872   6a06     clrf	0x6, 0              	CLRF	r0x06
004874   6a07     clrf	0x7, 0              	CLRF	r0x07
004876   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           ;	.line	131; TCPIP_Stack/Helpers.c	wLastValue = 0;
004878   6a09     clrf	0x9, 0              	CLRF	r0x09
00487a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	132; TCPIP_Stack/Helpers.c	dwRandomResult = rand();
00487c   ecd3     call	0xa9a6, 0           	CALL	_rand
00487e   f054
004880   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
004882   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
004884   f00c
004886   cff4     movff	0xff4, 0xd         	MOVFF	PRODH, r0x0d
004888   f00d
00488a   cfe9     movff	0xfe9, 0xe         	MOVFF	FSR0L, r0x0e
00488c   f00e
                                           ;	.line	133; TCPIP_Stack/Helpers.c	while(1)
00488e   6a0f     clrf	0xf, 0              	CLRF	r0x0f
                                           _00120_DS_:
                                           ;	.line	136; TCPIP_Stack/Helpers.c	TMR0H = 0x00;
004890   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	137; TCPIP_Stack/Helpers.c	TMR0L = 0x00;
004892   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	138; TCPIP_Stack/Helpers.c	ADCON0bits.GO = 1;
004894   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
004896   0004     clrwdt                   	clrwdt 
                                           _00108_DS_:
                                           ;	.line	140; TCPIP_Stack/Helpers.c	while(ADCON0bits.GO);
004898   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
00489a   d7fe     bra	0x4898               	BRA	_00108_DS_
                                           ;	.line	141; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[0] = TMR0L;
00489c   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
00489e   0102     movlb	0x2                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
0048a0   6f20     movwf	0x20, 0x1          	MOVWF	_GenerateRandomDWORD_wTime_1_1, B
                                           ;	.line	142; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[1] = TMR0H;
0048a2   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
0048a4   0102     movlb	0x2                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
0048a6   6f21     movwf	0x21, 0x1          	MOVWF	(_GenerateRandomDWORD_wTime_1_1 + 1), B
                                           ;	.line	143; TCPIP_Stack/Helpers.c	w = rand();
0048a8   ecd3     call	0xa9a6, 0           	CALL	_rand
0048aa   f054
0048ac   6e10     movwf	0x10, 0            	MOVWF	r0x10
0048ae   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
0048b0   f011
0048b2   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
0048b4   f012
0048b6   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
0048b8   f013
                                           ;	.line	146; TCPIP_Stack/Helpers.c	dwTotalTime += wTime;
0048ba   c220     movff	0x220, 0x12        	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x12
0048bc   f012
0048be   c221     movff	0x221, 0x13        	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x13
0048c0   f013
0048c2   6a14     clrf	0x14, 0             	CLRF	r0x14
0048c4   6a15     clrf	0x15, 0             	CLRF	r0x15
0048c6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0048c8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0048ca   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0048cc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0048ce   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0048d0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0048d2   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0048d4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
                                           ;	.line	147; TCPIP_Stack/Helpers.c	if(dwTotalTime >= GetInstructionClock())
0048d6   0e00     movlw	0                  	MOVLW	0x00
0048d8   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
0048da   e108     bnz	0x48ec               	BNZ	_00130_DS_
0048dc   0e9e     movlw	0x9e               	MOVLW	0x9e
0048de   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
0048e0   e105     bnz	0x48ec               	BNZ	_00130_DS_
0048e2   0ef2     movlw	0xf2               	MOVLW	0xf2
0048e4   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
0048e6   e102     bnz	0x48ec               	BNZ	_00130_DS_
0048e8   0e1a     movlw	0x1a               	MOVLW	0x1a
0048ea   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00130_DS_:
0048ec   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0048ee   d048     bra	0x4980               	BRA	_00112_DS_
                                           ;	.line	149; TCPIP_Stack/Helpers.c	dwRandomResult ^= rand() | (((DWORD)rand())<<15ul) | (((DWORD)rand())<<30ul);
0048f0   ecd3     call	0xa9a6, 0           	CALL	_rand
0048f2   f054
0048f4   6e12     movwf	0x12, 0            	MOVWF	r0x12
0048f6   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
0048f8   f013
0048fa   cff4     movff	0xff4, 0x14        	MOVFF	PRODH, r0x14
0048fc   f014
0048fe   cfe9     movff	0xfe9, 0x15        	MOVFF	FSR0L, r0x15
004900   f015
004902   ecd3     call	0xa9a6, 0           	CALL	_rand
004904   f054
004906   6e16     movwf	0x16, 0            	MOVWF	r0x16
004908   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00490a   f017
00490c   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
00490e   f018
004910   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
004912   f019
004914   3018     rrcf	0x18, 0, 0          	RRCF	r0x18, W
004916   3017     rrcf	0x17, 0, 0          	RRCF	r0x17, W
004918   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
00491a   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
00491c   321c     rrcf	0x1c, 0x1, 0        	RRCF	r0x1c, F
00491e   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
004920   0b80     andlw	0x80               	ANDLW	0x80
004922   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
004924   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
004926   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
004928   0b7f     andlw	0x7f               	ANDLW	0x7f
00492a   121c     iorwf	0x1c, 0x1, 0       	IORWF	r0x1c, F
00492c   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
00492e   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
004930   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
004932   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
004934   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
004936   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
004938   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
00493a   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
00493c   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
00493e   ecd3     call	0xa9a6, 0           	CALL	_rand
004940   f054
004942   6e16     movwf	0x16, 0            	MOVWF	r0x16
004944   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
004946   f017
004948   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
00494a   f018
00494c   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
00494e   f019
004950   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
004952   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
004954   0bc0     andlw	0xc0               	ANDLW	0xc0
004956   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
004958   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
00495a   6a1b     clrf	0x1b, 0             	CLRF	r0x1b
00495c   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
00495e   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
004960   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
004962   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
004964   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
004966   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
004968   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
00496a   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
00496c   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
00496e   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
004970   1a0b     xorwf	0xb, 0x1, 0        	XORWF	r0x0b, F
004972   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
004974   1a0c     xorwf	0xc, 0x1, 0        	XORWF	r0x0c, F
004976   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
004978   1a0d     xorwf	0xd, 0x1, 0        	XORWF	r0x0d, F
00497a   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00497c   1a0e     xorwf	0xe, 0x1, 0        	XORWF	r0x0e, F
                                           ;	.line	150; TCPIP_Stack/Helpers.c	break;
00497e   d047     bra	0x4a0e               	BRA	_00121_DS_
                                           _00112_DS_:
                                           ;	.line	154; TCPIP_Stack/Helpers.c	if(wLastValue == wTime)
004980   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004982   0102     movlb	0x2                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
004984   1920     xorwf	0x20, 0, 0x1       	XORWF	_GenerateRandomDWORD_wTime_1_1, W, B
004986   e105     bnz	0x4992               	BNZ	_00135_DS_
004988   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00498a   0102     movlb	0x2                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
00498c   1921     xorwf	0x21, 0, 0x1       	XORWF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
00498e   e101     bnz	0x4992               	BNZ	_00135_DS_
004990   d77f     bra	0x4890               	BRA	_00120_DS_
                                           _00135_DS_:
004992   0102     movlb	0x2                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
                                           ;	.line	158; TCPIP_Stack/Helpers.c	srand(w + (wLastValue - wTime));
004994   5120     movf	0x20, 0, 0x1        	MOVF	_GenerateRandomDWORD_wTime_1_1, W, B
004996   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
004998   6e12     movwf	0x12, 0            	MOVWF	r0x12
00499a   0102     movlb	0x2                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
00499c   5121     movf	0x21, 0, 0x1        	MOVF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
00499e   580a     subwfb	0xa, 0, 0         	SUBWFB	r0x0a, W
0049a0   6e13     movwf	0x13, 0            	MOVWF	r0x13
0049a2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0049a4   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0049a6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0049a8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
0049aa   6a12     clrf	0x12, 0             	CLRF	r0x12
0049ac   6a13     clrf	0x13, 0             	CLRF	r0x13
0049ae   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0049b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0049b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b6   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0049b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049ba   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0049bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049be   ecdd     call	0xadba, 0           	CALL	_srand
0049c0   f056
0049c2   0e04     movlw	0x4                	MOVLW	0x04
0049c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	159; TCPIP_Stack/Helpers.c	wLastValue = wTime;
0049c6   c220     movff	0x220, 0x9         	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x09
0049c8   f009
0049ca   c221     movff	0x221, 0xa         	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x0a
0049cc   f00a
                                           ;	.line	162; TCPIP_Stack/Helpers.c	dwRandomResult <<= 1;
0049ce   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0049d0   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
0049d2   360c     rlcf	0xc, 0x1, 0         	RLCF	r0x0c, F
0049d4   360d     rlcf	0xd, 0x1, 0         	RLCF	r0x0d, F
0049d6   360e     rlcf	0xe, 0x1, 0         	RLCF	r0x0e, F
                                           ;	.line	163; TCPIP_Stack/Helpers.c	if(rand() >= 16384)
0049d8   ecd3     call	0xa9a6, 0           	CALL	_rand
0049da   f054
0049dc   6e10     movwf	0x10, 0            	MOVWF	r0x10
0049de   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
0049e0   f011
0049e2   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
0049e4   f012
0049e6   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
0049e8   f013
0049ea   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0049ec   0f80     addlw	0x80               	ADDLW	0x80
0049ee   0f80     addlw	0x80               	ADDLW	0x80
0049f0   e108     bnz	0x4a02               	BNZ	_00136_DS_
0049f2   0e00     movlw	0                  	MOVLW	0x00
0049f4   5c12     subwf	0x12, 0, 0         	SUBWF	r0x12, W
0049f6   e105     bnz	0x4a02               	BNZ	_00136_DS_
0049f8   0e40     movlw	0x40               	MOVLW	0x40
0049fa   5c11     subwf	0x11, 0, 0         	SUBWF	r0x11, W
0049fc   e102     bnz	0x4a02               	BNZ	_00136_DS_
0049fe   0e00     movlw	0                  	MOVLW	0x00
004a00   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
                                           _00136_DS_:
004a02   e301     bnc	0x4a06               	BNC	_00116_DS_
                                           ;	.line	164; TCPIP_Stack/Helpers.c	dwRandomResult |= 0x1;
004a04   800b     bsf	0xb, 0, 0            	BSF	r0x0b, 0
                                           _00116_DS_:
                                           ;	.line	167; TCPIP_Stack/Helpers.c	if(++vBitCount == 0u)
004a06   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
004a08   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
004a0a   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004a0c   d741     bra	0x4890               	BRA	_00120_DS_
                                           _00121_DS_:
                                           ;	.line	172; TCPIP_Stack/Helpers.c	ADCON0 = ADCON0Save;
004a0e   c000     movff	0, 0xfc2           	MOVFF	r0x00, _ADCON0
004a10   ffc2
                                           ;	.line	173; TCPIP_Stack/Helpers.c	ADCON2 = ADCON2Save;
004a12   c001     movff	0x1, 0xfc0         	MOVFF	r0x01, _ADCON2
004a14   ffc0
                                           ;	.line	174; TCPIP_Stack/Helpers.c	TMR0H = TMR0HSave;
004a16   c004     movff	0x4, 0xfd7         	MOVFF	r0x04, _TMR0H
004a18   ffd7
                                           ;	.line	175; TCPIP_Stack/Helpers.c	TMR0L = TMR0LSave;
004a1a   c003     movff	0x3, 0xfd6         	MOVFF	r0x03, _TMR0L
004a1c   ffd6
                                           ;	.line	176; TCPIP_Stack/Helpers.c	T0CON = T0CONSave;
004a1e   c002     movff	0x2, 0xfd5         	MOVFF	r0x02, _T0CON
004a20   ffd5
                                           ;	.line	254; TCPIP_Stack/Helpers.c	return dwRandomResult;
004a22   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
004a24   ffe9
004a26   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
004a28   fff4
004a2a   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
004a2c   fff3
004a2e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
004a30   cfe4     movff	0xfe4, 0x1d        	MOVFF	PREINC1, r0x1d
004a32   f01d
004a34   cfe4     movff	0xfe4, 0x1c        	MOVFF	PREINC1, r0x1c
004a36   f01c
004a38   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
004a3a   f01b
004a3c   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
004a3e   f01a
004a40   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
004a42   f019
004a44   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
004a46   f018
004a48   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
004a4a   f017
004a4c   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
004a4e   f016
004a50   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
004a52   f015
004a54   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
004a56   f014
004a58   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
004a5a   f013
004a5c   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
004a5e   f012
004a60   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
004a62   f011
004a64   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
004a66   f010
004a68   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
004a6a   f00f
004a6c   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
004a6e   f00e
004a70   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
004a72   f00d
004a74   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
004a76   f00c
004a78   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
004a7a   f00b
004a7c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004a7e   f00a
004a80   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004a82   f009
004a84   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004a86   f008
004a88   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004a8a   f007
004a8c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004a8e   f006
004a90   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004a92   f005
004a94   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004a96   f004
004a98   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004a9a   f003
004a9c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004a9e   f002
004aa0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004aa2   f001
004aa4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004aa6   f000
004aa8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004aaa   ffd9
004aac   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3510 (0x0db6) bytes ( 2.68%)
                                           ;           	 1755 (0x06db) words
                                           ; udata size:	   24 (0x0018) bytes ( 0.62%)
                                           ; access size:	   30 (0x001e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:55 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ICMPProcess
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACMemCopyAsync
                                           	extern _MACIsMemCopyDone
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_ICMP_0	udata
                                           _ICMPProcess_dwVal_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ICMP__ICMPProcess	code
                                           _ICMPProcess:
                                           ;	.line	132; TCPIP_Stack/ICMP.c	void ICMPProcess(NODE_INFO *remote, WORD len)
00721e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007220   ffe5
007222   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007224   ffd9
007226   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007228   ffe5
00722a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00722c   ffe5
00722e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007230   ffe5
007232   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007234   ffe5
007236   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007238   ffe5
00723a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00723c   ffe5
00723e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007240   ffe5
007242   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007244   ffe5
007246   0e02     movlw	0x2                	MOVLW	0x02
007248   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00724a   f000
00724c   0e03     movlw	0x3                	MOVLW	0x03
00724e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007250   f001
007252   0e04     movlw	0x4                	MOVLW	0x04
007254   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007256   f002
007258   0e05     movlw	0x5                	MOVLW	0x05
00725a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00725c   f003
00725e   0e06     movlw	0x6                	MOVLW	0x06
007260   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007262   f004
                                           ;	.line	137; TCPIP_Stack/ICMP.c	MACGetArray((BYTE*)&dwVal, sizeof(dwVal));
007264   0e0b     movlw	0xb                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
007266   6e06     movwf	0x6, 0             	MOVWF	r0x06
007268   0ece     movlw	0xce               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
00726a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00726c   0e80     movlw	0x80               	MOVLW	0x80
00726e   6e07     movwf	0x7, 0             	MOVWF	r0x07
007270   0e00     movlw	0                  	MOVLW	0x00
007272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007274   0e04     movlw	0x4                	MOVLW	0x04
007276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007278   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00727a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00727c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00727e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007280   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007284   ec20     call	0x9240, 0           	CALL	_MACGetArray
007286   f049
007288   0e05     movlw	0x5                	MOVLW	0x05
00728a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00728c   010b     movlb	0xb                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	140; TCPIP_Stack/ICMP.c	if(dwVal.w[0] == 0x0008u)
00728e   51ce     movf	0xce, 0, 0x1        	MOVF	_ICMPProcess_dwVal_1_1, W, B
007290   0a08     xorlw	0x8                	XORLW	0x08
007292   e103     bnz	0x729a               	BNZ	_00129_DS_
007294   010b     movlb	0xb                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 1)
007296   51cf     movf	0xcf, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 1), W, B
007298   e001     bz	0x729c                	BZ	_00130_DS_
                                           _00129_DS_:
00729a   d07e     bra	0x7398               	BRA	_00119_DS_
                                           _00130_DS_:
                                           ;	.line	146; TCPIP_Stack/ICMP.c	if(MACCalcRxChecksum(0+sizeof(IP_HEADER), len))
00729c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00729e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072a0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0072a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072a4   0e00     movlw	0                  	MOVLW	0x00
0072a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072a8   0e14     movlw	0x14               	MOVLW	0x14
0072aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072ac   eced     call	0x81da, 0           	CALL	_MACCalcRxChecksum
0072ae   f040
0072b0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0072b2   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0072b4   f006
0072b6   0e04     movlw	0x4                	MOVLW	0x04
0072b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0072ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0072bc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0072be   e001     bz	0x72c2                	BZ	_00106_DS_
                                           ;	.line	147; TCPIP_Stack/ICMP.c	return;
0072c0   d06b     bra	0x7398               	BRA	_00119_DS_
                                           _00106_DS_:
0072c2   010b     movlb	0xb                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	150; TCPIP_Stack/ICMP.c	dwVal.v[0] = 0x00;	// Type: 0 (ICMP echo/ping reply)
0072c4   6bce     clrf	0xce, 0x1           	CLRF	_ICMPProcess_dwVal_1_1, B
                                           ;	.line	151; TCPIP_Stack/ICMP.c	dwVal.v[2] += 8;	// Subtract 0x0800 from the checksum
0072c6   0e08     movlw	0x8                	MOVLW	0x08
0072c8   010b     movlb	0xb                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
0072ca   25d0     addwf	0xd0, 0, 0x1       	ADDWF	(_ICMPProcess_dwVal_1_1 + 2), W, B
0072cc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0072ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0072d0   010b     movlb	0xb                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
0072d2   6fd0     movwf	0xd0, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           ;	.line	152; TCPIP_Stack/ICMP.c	if(dwVal.v[2] < 8u)
0072d4   cbd0     movff	0xbd0, 0x6         	MOVFF	(_ICMPProcess_dwVal_1_1 + 2), r0x06
0072d6   f006
0072d8   6a07     clrf	0x7, 0              	CLRF	r0x07
0072da   0e00     movlw	0                  	MOVLW	0x00
0072dc   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
0072de   e102     bnz	0x72e4               	BNZ	_00131_DS_
0072e0   0e08     movlw	0x8                	MOVLW	0x08
0072e2   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00131_DS_:
0072e4   e20d     bc	0x7300                	BC	_00111_DS_
                                           ;	.line	154; TCPIP_Stack/ICMP.c	dwVal.v[3]++;
0072e6   cbd1     movff	0xbd1, 0x5         	MOVFF	(_ICMPProcess_dwVal_1_1 + 3), r0x05
0072e8   f005
0072ea   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0072ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0072ee   010b     movlb	0xb                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
0072f0   6fd1     movwf	0xd1, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 3), B
0072f2   010b     movlb	0xb                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
                                           ;	.line	155; TCPIP_Stack/ICMP.c	if(dwVal.v[3] == 0u) dwVal.v[2]++;
0072f4   51d1     movf	0xd1, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 3), W, B
0072f6   e104     bnz	0x7300               	BNZ	_00111_DS_
0072f8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0072fa   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0072fc   010b     movlb	0xb                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
0072fe   6fd0     movwf	0xd0, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           _00111_DS_:
                                           ;	.line	160; TCPIP_Stack/ICMP.c	while(!IPIsTxReady());
007300   ec89     call	0xa512, 0           	CALL	_MACIsTxReady
007302   f052
007304   6e05     movwf	0x5, 0             	MOVWF	r0x05
007306   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007308   e0fb     bz	0x7300                	BZ	_00111_DS_
                                           ;	.line	165; TCPIP_Stack/ICMP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
00730a   0e1a     movlw	0x1a               	MOVLW	0x1a
00730c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00730e   0e19     movlw	0x19               	MOVLW	0x19
007310   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007312   ec88     call	0xa310, 0           	CALL	_MACSetWritePtr
007314   f051
007316   0e02     movlw	0x2                	MOVLW	0x02
007318   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	168; TCPIP_Stack/ICMP.c	IPPutHeader(remote, IP_PROT_ICMP, len);
00731a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00731c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00731e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007322   0e01     movlw	0x1                	MOVLW	0x01
007324   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007326   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007328   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00732a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00732c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00732e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007330   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007332   eca6     call	0x694c, 0           	CALL	_IPPutHeader
007334   f034
007336   0e06     movlw	0x6                	MOVLW	0x06
007338   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; TCPIP_Stack/ICMP.c	MACPutArray((BYTE*)&dwVal, sizeof(dwVal));
00733a   0e0b     movlw	0xb                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
00733c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00733e   0ece     movlw	0xce               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
007340   6e00     movwf	0, 0               	MOVWF	r0x00
007342   0e80     movlw	0x80               	MOVLW	0x80
007344   6e02     movwf	0x2, 0             	MOVWF	r0x02
007346   0e00     movlw	0                  	MOVLW	0x00
007348   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00734a   0e04     movlw	0x4                	MOVLW	0x04
00734c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00734e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007350   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007352   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007354   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007356   5000     movf	0, 0, 0             	MOVF	r0x00, W
007358   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00735a   ec09     call	0x9e12, 0           	CALL	_MACPutArray
00735c   f04f
00735e   0e05     movlw	0x5                	MOVLW	0x05
007360   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; TCPIP_Stack/ICMP.c	MACMemCopyAsync(-1, -1, len-4);
007362   0efc     movlw	0xfc               	MOVLW	0xfc
007364   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
007366   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
007368   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
00736a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00736c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00736e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007370   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007372   0eff     movlw	0xff               	MOVLW	0xff
007374   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007376   0eff     movlw	0xff               	MOVLW	0xff
007378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00737a   0eff     movlw	0xff               	MOVLW	0xff
00737c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00737e   0eff     movlw	0xff               	MOVLW	0xff
007380   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007382   ec72     call	0x28e4, 0           	CALL	_MACMemCopyAsync
007384   f014
007386   0e06     movlw	0x6                	MOVLW	0x06
007388   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00114_DS_:
                                           ;	.line	173; TCPIP_Stack/ICMP.c	while(!MACIsMemCopyDone());
00738a   ec9e     call	0xad3c, 0           	CALL	_MACIsMemCopyDone
00738c   f056
00738e   6e00     movwf	0, 0               	MOVWF	r0x00
007390   5000     movf	0, 0, 0             	MOVF	r0x00, W
007392   e0fb     bz	0x738a                	BZ	_00114_DS_
                                           ;	.line	176; TCPIP_Stack/ICMP.c	MACFlush();
007394   ec6d     call	0xa6da, 0           	CALL	_MACFlush
007396   f053
                                           _00119_DS_:
007398   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00739a   f007
00739c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00739e   f006
0073a0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0073a2   f005
0073a4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0073a6   f004
0073a8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0073aa   f003
0073ac   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0073ae   f002
0073b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0073b2   f001
0073b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0073b6   f000
0073b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0073ba   ffd9
0073bc   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  416 (0x01a0) bytes ( 0.32%)
                                           ;           	  208 (0x00d0) words
                                           ; udata size:	    4 (0x0004) bytes ( 0.10%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:56 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _IPGetHeader
                                           	global _IPPutHeader
                                           	global _IPSetRxBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput4
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetReadPtrInRx
                                           	extern _MACGetArray
                                           	extern _MACPutHeader
                                           	extern _MACPutArray
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           __Identifier	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_IP_0	udata
                                           _IPHeaderLen	res	1
                                           
                                           udata_IP_1	udata
                                           _IPGetHeader_header_1_1	res	20
                                           
                                           udata_IP_2	udata
                                           _IPGetHeader_CalcChecksum_1_1	res	2
                                           
                                           udata_IP_3	udata
                                           _IPPutHeader_header_1_1	res	20
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_IP__SwapIPHeader	code
                                           _SwapIPHeader:
                                           ;	.line	302; TCPIP_Stack/IP.c	static void SwapIPHeader(IP_HEADER* h)
007804   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007806   ffe5
007808   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00780a   ffd9
00780c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00780e   ffe5
007810   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007812   ffe5
007814   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007816   ffe5
007818   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00781a   ffe5
00781c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00781e   ffe5
007820   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007822   ffe5
007824   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007826   ffe5
007828   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00782a   ffe5
00782c   0e02     movlw	0x2                	MOVLW	0x02
00782e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007830   f000
007832   0e03     movlw	0x3                	MOVLW	0x03
007834   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007836   f001
007838   0e04     movlw	0x4                	MOVLW	0x04
00783a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00783c   f002
                                           ;	.line	304; TCPIP_Stack/IP.c	h->TotalLength      = swaps(h->TotalLength);
00783e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007840   0f02     addlw	0x2                	ADDLW	0x02
007842   6e03     movwf	0x3, 0             	MOVWF	r0x03
007844   0e00     movlw	0                  	MOVLW	0x00
007846   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007848   6e04     movwf	0x4, 0             	MOVWF	r0x04
00784a   0e00     movlw	0                  	MOVLW	0x00
00784c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00784e   6e05     movwf	0x5, 0             	MOVWF	r0x05
007850   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007852   ffe9
007854   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007856   fff3
007858   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00785a   ec88     call	0xad10, 0           	CALL	__gptrget2
00785c   f056
00785e   6e06     movwf	0x6, 0             	MOVWF	r0x06
007860   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007862   f007
007864   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007866   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007868   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00786a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00786c   ec81     call	0xa902, 0           	CALL	_swaps
00786e   f054
007870   6e06     movwf	0x6, 0             	MOVWF	r0x06
007872   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007874   f007
007876   0e02     movlw	0x2                	MOVLW	0x02
007878   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00787a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00787c   ffe5
00787e   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
007880   fff4
007882   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007884   ffe9
007886   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007888   fff3
00788a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00788c   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
00788e   f057
                                           ;	.line	305; TCPIP_Stack/IP.c	h->Identification   = swaps(h->Identification);
007890   5000     movf	0, 0, 0             	MOVF	r0x00, W
007892   0f04     addlw	0x4                	ADDLW	0x04
007894   6e03     movwf	0x3, 0             	MOVWF	r0x03
007896   0e00     movlw	0                  	MOVLW	0x00
007898   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00789a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00789c   0e00     movlw	0                  	MOVLW	0x00
00789e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0078a0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0078a2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0078a4   ffe9
0078a6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0078a8   fff3
0078aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0078ac   ec88     call	0xad10, 0           	CALL	__gptrget2
0078ae   f056
0078b0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0078b2   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0078b4   f007
0078b6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0078b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078ba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0078bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078be   ec81     call	0xa902, 0           	CALL	_swaps
0078c0   f054
0078c2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0078c4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0078c6   f007
0078c8   0e02     movlw	0x2                	MOVLW	0x02
0078ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0078cc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0078ce   ffe5
0078d0   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0078d2   fff4
0078d4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0078d6   ffe9
0078d8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0078da   fff3
0078dc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0078de   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
0078e0   f057
                                           ;	.line	306; TCPIP_Stack/IP.c	h->HeaderChecksum   = swaps(h->HeaderChecksum);
0078e2   0e0a     movlw	0xa                	MOVLW	0x0a
0078e4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0078e6   0e00     movlw	0                  	MOVLW	0x00
0078e8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0078ea   0e00     movlw	0                  	MOVLW	0x00
0078ec   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0078ee   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0078f0   ffe9
0078f2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0078f4   fff3
0078f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0078f8   ec88     call	0xad10, 0           	CALL	__gptrget2
0078fa   f056
0078fc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0078fe   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007900   f004
007902   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007906   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007908   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00790a   ec81     call	0xa902, 0           	CALL	_swaps
00790c   f054
00790e   6e03     movwf	0x3, 0             	MOVWF	r0x03
007910   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007912   f004
007914   0e02     movlw	0x2                	MOVLW	0x02
007916   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007918   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00791a   ffe5
00791c   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00791e   fff4
007920   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007922   ffe9
007924   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007926   fff3
007928   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00792a   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
00792c   f057
00792e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007930   f007
007932   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007934   f006
007936   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007938   f005
00793a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00793c   f004
00793e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007940   f003
007942   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007944   f002
007946   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007948   f001
00794a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00794c   f000
00794e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007950   ffd9
007952   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPSetRxBuffer	code
                                           _IPSetRxBuffer:
                                           ;	.line	295; TCPIP_Stack/IP.c	void IPSetRxBuffer(WORD Offset) 
00a800   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a802   ffe5
00a804   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a806   ffd9
00a808   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a80a   ffe5
00a80c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a80e   ffe5
00a810   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a812   ffe5
00a814   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a816   ffe5
00a818   0e02     movlw	0x2                	MOVLW	0x02
00a81a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a81c   f000
00a81e   0e03     movlw	0x3                	MOVLW	0x03
00a820   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a822   f001
                                           ;	.line	297; TCPIP_Stack/IP.c	MACSetReadPtrInRx(Offset+IPHeaderLen);
00a824   c245     movff	0x245, 0x2         	MOVFF	_IPHeaderLen, r0x02
00a826   f002
00a828   6a03     clrf	0x3, 0              	CLRF	r0x03
00a82a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a82c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a82e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a830   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a834   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a836   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a838   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a83a   ec76     call	0x98ec, 0           	CALL	_MACSetReadPtrInRx
00a83c   f04c
00a83e   0e02     movlw	0x2                	MOVLW	0x02
00a840   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00a842   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a844   f003
00a846   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a848   f002
00a84a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a84c   f001
00a84e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a850   f000
00a852   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a854   ffd9
00a856   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPPutHeader	code
                                           _IPPutHeader:
                                           ;	.line	247; TCPIP_Stack/IP.c	WORD IPPutHeader(NODE_INFO *remote,
00694c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00694e   ffe5
006950   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006952   ffd9
006954   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006956   ffe5
006958   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00695a   ffe5
00695c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00695e   ffe5
006960   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006962   ffe5
006964   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006966   ffe5
006968   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00696a   ffe5
00696c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00696e   ffe5
006970   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006972   ffe5
006974   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006976   ffe5
006978   0e02     movlw	0x2                	MOVLW	0x02
00697a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00697c   f000
00697e   0e03     movlw	0x3                	MOVLW	0x03
006980   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006982   f001
006984   0e04     movlw	0x4                	MOVLW	0x04
006986   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006988   f002
00698a   0e05     movlw	0x5                	MOVLW	0x05
00698c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00698e   f003
006990   0e06     movlw	0x6                	MOVLW	0x06
006992   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006994   f004
006996   0e07     movlw	0x7                	MOVLW	0x07
006998   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00699a   f005
                                           ;	.line	253; TCPIP_Stack/IP.c	IPHeaderLen = sizeof(IP_HEADER);
00699c   0e14     movlw	0x14               	MOVLW	0x14
00699e   0102     movlb	0x2                	BANKSEL	_IPHeaderLen
0069a0   6f45     movwf	0x45, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	255; TCPIP_Stack/IP.c	header.VersionIHL       = IP_VERSION | IP_IHL;
0069a2   0e45     movlw	0x45               	MOVLW	0x45
0069a4   0109     movlb	0x9                	BANKSEL	_IPPutHeader_header_1_1
0069a6   6fea     movwf	0xea, 0x1          	MOVWF	_IPPutHeader_header_1_1, B
0069a8   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 1)
                                           ;	.line	256; TCPIP_Stack/IP.c	header.TypeOfService    = IP_SERVICE;
0069aa   6beb     clrf	0xeb, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 1), B
                                           ;	.line	257; TCPIP_Stack/IP.c	header.TotalLength      = sizeof(header) + len;
0069ac   0e14     movlw	0x14               	MOVLW	0x14
0069ae   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0069b0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0069b2   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0069b4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0069b6   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 2)
0069b8   6fec     movwf	0xec, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 2), B
0069ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0069bc   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 3)
0069be   6fed     movwf	0xed, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 3), B
0069c0   010e     movlb	0xe                	BANKSEL	__Identifier
                                           ;	.line	258; TCPIP_Stack/IP.c	header.Identification   = ++_Identifier;
0069c2   2b53     incf	0x53, 0x1, 0x1      	INCF	__Identifier, F, B
0069c4   e302     bnc	0x69ca               	BNC	_10137_DS_
0069c6   010e     movlb	0xe                	BANKSEL	(__Identifier + 1)
0069c8   2b54     incf	0x54, 0x1, 0x1      	INCF	(__Identifier + 1), F, B
                                           _10137_DS_:
0069ca   010e     movlb	0xe                	BANKSEL	__Identifier
0069cc   5153     movf	0x53, 0, 0x1        	MOVF	__Identifier, W, B
0069ce   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 4)
0069d0   6fee     movwf	0xee, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 4), B
0069d2   010e     movlb	0xe                	BANKSEL	(__Identifier + 1)
0069d4   5154     movf	0x54, 0, 0x1        	MOVF	(__Identifier + 1), W, B
0069d6   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 5)
0069d8   6fef     movwf	0xef, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 5), B
0069da   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 6)
                                           ;	.line	259; TCPIP_Stack/IP.c	header.FragmentInfo     = 0;
0069dc   6bf0     clrf	0xf0, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 6), B
0069de   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 7)
0069e0   6bf1     clrf	0xf1, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 7), B
                                           ;	.line	260; TCPIP_Stack/IP.c	header.TimeToLive       = MY_IP_TTL;
0069e2   0e64     movlw	0x64               	MOVLW	0x64
0069e4   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 8)
0069e6   6ff2     movwf	0xf2, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 8), B
                                           ;	.line	261; TCPIP_Stack/IP.c	header.Protocol         = protocol;
0069e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0069ea   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 9)
0069ec   6ff3     movwf	0xf3, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 9), B
0069ee   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
                                           ;	.line	262; TCPIP_Stack/IP.c	header.HeaderChecksum   = 0;
0069f0   6bf4     clrf	0xf4, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 10), B
0069f2   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
0069f4   6bf5     clrf	0xf5, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 11), B
0069f6   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	264; TCPIP_Stack/IP.c	header.SourceAddress.Val 	= AppConfig.MyIPAddr.Val;
0069f8   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
0069fa   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 12)
0069fc   6ff6     movwf	0xf6, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 12), B
0069fe   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
006a00   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
006a02   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 13)
006a04   6ff7     movwf	0xf7, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 13), B
006a06   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
006a08   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
006a0a   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 14)
006a0c   6ff8     movwf	0xf8, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 14), B
006a0e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
006a10   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
006a12   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 15)
006a14   6ff9     movwf	0xf9, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 15), B
                                           ;	.line	266; TCPIP_Stack/IP.c	header.DestAddress.Val = remote->IPAddr.Val;
006a16   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006a18   ffe9
006a1a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006a1c   fff3
006a1e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006a20   ec18     call	0xac30, 0           	CALL	__gptrget4
006a22   f056
006a24   6e03     movwf	0x3, 0             	MOVWF	r0x03
006a26   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
006a28   f006
006a2a   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
006a2c   f007
006a2e   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
006a30   f008
006a32   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006a34   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 16)
006a36   6ffa     movwf	0xfa, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 16), B
006a38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006a3a   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 17)
006a3c   6ffb     movwf	0xfb, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 17), B
006a3e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006a40   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 18)
006a42   6ffc     movwf	0xfc, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 18), B
006a44   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006a46   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 19)
006a48   6ffd     movwf	0xfd, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 19), B
                                           ;	.line	268; TCPIP_Stack/IP.c	SwapIPHeader(&header);
006a4a   0e09     movlw	0x9                	MOVLW	HIGH(_IPPutHeader_header_1_1)
006a4c   6e06     movwf	0x6, 0             	MOVWF	r0x06
006a4e   0eea     movlw	0xea               	MOVLW	LOW(_IPPutHeader_header_1_1)
006a50   6e03     movwf	0x3, 0             	MOVWF	r0x03
006a52   0e80     movlw	0x80               	MOVLW	0x80
006a54   6e07     movwf	0x7, 0             	MOVWF	r0x07
006a56   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a5a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006a5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a5e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006a60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a62   ec02     call	0x7804, 0           	CALL	_SwapIPHeader
006a64   f03c
006a66   0e03     movlw	0x3                	MOVLW	0x03
006a68   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; TCPIP_Stack/IP.c	header.HeaderChecksum   = CalcIPChecksum((BYTE*)&header, sizeof(header));
006a6a   0e09     movlw	0x9                	MOVLW	HIGH(_IPPutHeader_header_1_1)
006a6c   6e06     movwf	0x6, 0             	MOVWF	r0x06
006a6e   0eea     movlw	0xea               	MOVLW	LOW(_IPPutHeader_header_1_1)
006a70   6e03     movwf	0x3, 0             	MOVWF	r0x03
006a72   0e80     movlw	0x80               	MOVLW	0x80
006a74   6e07     movwf	0x7, 0             	MOVWF	r0x07
006a76   0e00     movlw	0                  	MOVLW	0x00
006a78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a7a   0e14     movlw	0x14               	MOVLW	0x14
006a7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a7e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006a80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a82   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006a84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a86   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006a88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a8a   ec66     call	0x32cc, 0           	CALL	_CalcIPChecksum
006a8c   f019
006a8e   6e03     movwf	0x3, 0             	MOVWF	r0x03
006a90   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
006a92   f006
006a94   0e05     movlw	0x5                	MOVLW	0x05
006a96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006a98   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006a9a   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
006a9c   6ff4     movwf	0xf4, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 10), B
006a9e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006aa0   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
006aa2   6ff5     movwf	0xf5, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 11), B
                                           ;	.line	272; TCPIP_Stack/IP.c	MACPutHeader(&remote->MACAddr, MAC_IP, (sizeof(header)+len));
006aa4   0e04     movlw	0x4                	MOVLW	0x04
006aa6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006aa8   0e00     movlw	0                  	MOVLW	0x00
006aaa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006aac   0e00     movlw	0                  	MOVLW	0x00
006aae   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006ab0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006ab2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ab4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006ab6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ab8   0e00     movlw	0                  	MOVLW	0x00
006aba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006abc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006abe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ac0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006ac2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ac4   5000     movf	0, 0, 0             	MOVF	r0x00, W
006ac6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ac8   ecf0     call	0x7be0, 0           	CALL	_MACPutHeader
006aca   f03d
006acc   0e06     movlw	0x6                	MOVLW	0x06
006ace   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	273; TCPIP_Stack/IP.c	MACPutArray((BYTE*)&header, sizeof(header));
006ad0   0e09     movlw	0x9                	MOVLW	HIGH(_IPPutHeader_header_1_1)
006ad2   6e01     movwf	0x1, 0             	MOVWF	r0x01
006ad4   0eea     movlw	0xea               	MOVLW	LOW(_IPPutHeader_header_1_1)
006ad6   6e00     movwf	0, 0               	MOVWF	r0x00
006ad8   0e80     movlw	0x80               	MOVLW	0x80
006ada   6e02     movwf	0x2, 0             	MOVWF	r0x02
006adc   0e00     movlw	0                  	MOVLW	0x00
006ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ae0   0e14     movlw	0x14               	MOVLW	0x14
006ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ae4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ae8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006aec   5000     movf	0, 0, 0             	MOVF	r0x00, W
006aee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006af0   ec09     call	0x9e12, 0           	CALL	_MACPutArray
006af2   f04f
006af4   0e05     movlw	0x5                	MOVLW	0x05
006af6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	275; TCPIP_Stack/IP.c	return 0x0000;
006af8   6af3     clrf	0xf3, 0             	CLRF	PRODL
006afa   6ae8     clrf	0xe8, 0             	CLRF	WREG
006afc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006afe   f008
006b00   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006b02   f007
006b04   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006b06   f006
006b08   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006b0a   f005
006b0c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006b0e   f004
006b10   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006b12   f003
006b14   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006b16   f002
006b18   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006b1a   f001
006b1c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006b1e   f000
006b20   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006b22   ffd9
006b24   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPGetHeader	code
                                           _IPGetHeader:
                                           ;	.line	136; TCPIP_Stack/IP.c	BOOL IPGetHeader(IP_ADDR *localIP,
005456   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005458   ffe5
00545a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00545c   ffd9
00545e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005460   ffe5
005462   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005464   ffe5
005466   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005468   ffe5
00546a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00546c   ffe5
00546e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005470   ffe5
005472   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005474   ffe5
005476   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005478   ffe5
00547a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00547c   ffe5
00547e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005480   ffe5
005482   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005484   ffe5
005486   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
005488   ffe5
00548a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00548c   ffe5
00548e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
005490   ffe5
005492   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
005494   ffe5
005496   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
005498   ffe5
00549a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00549c   ffe5
00549e   0e02     movlw	0x2                	MOVLW	0x02
0054a0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0054a2   f000
0054a4   0e03     movlw	0x3                	MOVLW	0x03
0054a6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0054a8   f001
0054aa   0e04     movlw	0x4                	MOVLW	0x04
0054ac   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0054ae   f002
0054b0   0e05     movlw	0x5                	MOVLW	0x05
0054b2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0054b4   f003
0054b6   0e06     movlw	0x6                	MOVLW	0x06
0054b8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0054ba   f004
0054bc   0e07     movlw	0x7                	MOVLW	0x07
0054be   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0054c0   f005
0054c2   0e08     movlw	0x8                	MOVLW	0x08
0054c4   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0054c6   f006
0054c8   0e09     movlw	0x9                	MOVLW	0x09
0054ca   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0054cc   f007
0054ce   0e0a     movlw	0xa                	MOVLW	0x0a
0054d0   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0054d2   f008
0054d4   0e0b     movlw	0xb                	MOVLW	0x0b
0054d6   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
0054d8   f009
0054da   0e0c     movlw	0xc                	MOVLW	0x0c
0054dc   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
0054de   f00a
0054e0   0e0d     movlw	0xd                	MOVLW	0x0d
0054e2   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
0054e4   f00b
                                           ;	.line	153; TCPIP_Stack/IP.c	MACGetArray((BYTE*)&header, sizeof(header));
0054e6   0e01     movlw	0x1                	MOVLW	HIGH(_IPGetHeader_header_1_1)
0054e8   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0054ea   0eea     movlw	0xea               	MOVLW	LOW(_IPGetHeader_header_1_1)
0054ec   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0054ee   0e80     movlw	0x80               	MOVLW	0x80
0054f0   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0054f2   0e00     movlw	0                  	MOVLW	0x00
0054f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054f6   0e14     movlw	0x14               	MOVLW	0x14
0054f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054fa   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0054fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054fe   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005502   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005506   ec20     call	0x9240, 0           	CALL	_MACGetArray
005508   f049
00550a   0e05     movlw	0x5                	MOVLW	0x05
00550c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	156; TCPIP_Stack/IP.c	if((header.VersionIHL & 0xf0) != IP_VERSION) return FALSE;
00550e   0ef0     movlw	0xf0               	MOVLW	0xf0
005510   0101     movlb	0x1                	BANKSEL	_IPGetHeader_header_1_1
005512   15ea     andwf	0xea, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
005514   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005516   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005518   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00551a   0a40     xorlw	0x40               	XORLW	0x40
00551c   e102     bnz	0x5522               	BNZ	_00121_DS_
00551e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005520   e002     bz	0x5526                	BZ	_00106_DS_
                                           _00121_DS_:
005522   6ae8     clrf	0xe8, 0             	CLRF	WREG
005524   d0a0     bra	0x5666               	BRA	_00113_DS_
                                           _00106_DS_:
005526   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 6)
                                           ;	.line	160; TCPIP_Stack/IP.c	if(header.FragmentInfo & 0xFF1F) return FALSE;
005528   51f0     movf	0xf0, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 6), W, B
00552a   0b1f     andlw	0x1f               	ANDLW	0x1f
00552c   e103     bnz	0x5534               	BNZ	_00122_DS_
00552e   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 7)
005530   51f1     movf	0xf1, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 7), W, B
005532   e002     bz	0x5538                	BZ	_00108_DS_
                                           _00122_DS_:
005534   6ae8     clrf	0xe8, 0             	CLRF	WREG
005536   d097     bra	0x5666               	BRA	_00113_DS_
                                           _00108_DS_:
                                           ;	.line	162; TCPIP_Stack/IP.c	IPHeaderLen = (header.VersionIHL & 0x0f) << 2;
005538   0e0f     movlw	0xf                	MOVLW	0x0f
00553a   0101     movlb	0x1                	BANKSEL	_IPGetHeader_header_1_1
00553c   15ea     andwf	0xea, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
00553e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005540   440c     rlncf	0xc, 0, 0          	RLNCF	r0x0c, W
005542   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005544   0bfc     andlw	0xfc               	ANDLW	0xfc
005546   0102     movlb	0x2                	BANKSEL	_IPHeaderLen
005548   6f45     movwf	0x45, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	169; TCPIP_Stack/IP.c	CalcChecksum.Val = MACCalcRxChecksum(0, IPHeaderLen);
00554a   c245     movff	0x245, 0xc         	MOVFF	_IPHeaderLen, r0x0c
00554c   f00c
00554e   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005550   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005552   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005554   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005556   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005558   0e00     movlw	0                  	MOVLW	0x00
00555a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00555c   0e00     movlw	0                  	MOVLW	0x00
00555e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005560   eced     call	0x81da, 0           	CALL	_MACCalcRxChecksum
005562   f040
005564   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005566   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
005568   f00d
00556a   0e04     movlw	0x4                	MOVLW	0x04
00556c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00556e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005570   0102     movlb	0x2                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
005572   6f28     movwf	0x28, 0x1          	MOVWF	_IPGetHeader_CalcChecksum_1_1, B
005574   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005576   0102     movlb	0x2                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
005578   6f29     movwf	0x29, 0x1          	MOVWF	(_IPGetHeader_CalcChecksum_1_1 + 1), B
                                           ;	.line	172; TCPIP_Stack/IP.c	MACSetReadPtrInRx(IPHeaderLen);
00557a   c245     movff	0x245, 0xc         	MOVFF	_IPHeaderLen, r0x0c
00557c   f00c
00557e   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005580   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005584   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005588   ec76     call	0x98ec, 0           	CALL	_MACSetReadPtrInRx
00558a   f04c
00558c   0e02     movlw	0x2                	MOVLW	0x02
00558e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005590   0102     movlb	0x2                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
                                           ;	.line	174; TCPIP_Stack/IP.c	if(CalcChecksum.Val)
005592   5128     movf	0x28, 0, 0x1        	MOVF	_IPGetHeader_CalcChecksum_1_1, W, B
005594   0102     movlb	0x2                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
005596   1129     iorwf	0x29, 0, 0x1       	IORWF	(_IPGetHeader_CalcChecksum_1_1 + 1), W, B
005598   e002     bz	0x559e                	BZ	_00110_DS_
                                           ;	.line	209; TCPIP_Stack/IP.c	return FALSE;
00559a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00559c   d064     bra	0x5666               	BRA	_00113_DS_
                                           _00110_DS_:
                                           ;	.line	213; TCPIP_Stack/IP.c	SwapIPHeader(&header);
00559e   0e01     movlw	0x1                	MOVLW	HIGH(_IPGetHeader_header_1_1)
0055a0   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0055a2   0eea     movlw	0xea               	MOVLW	LOW(_IPGetHeader_header_1_1)
0055a4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0055a6   0e80     movlw	0x80               	MOVLW	0x80
0055a8   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0055aa   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0055ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055ae   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0055b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055b2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0055b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055b6   ec02     call	0x7804, 0           	CALL	_SwapIPHeader
0055b8   f03c
0055ba   0e03     movlw	0x3                	MOVLW	0x03
0055bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; TCPIP_Stack/IP.c	if ( localIP ) localIP->Val = header.DestAddress.Val;
0055be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0055c0   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0055c2   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
0055c4   e017     bz	0x55f4                	BZ	_00112_DS_
0055c6   c1fa     movff	0x1fa, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 16), r0x0c
0055c8   f00c
0055ca   c1fb     movff	0x1fb, 0xd         	MOVFF	(_IPGetHeader_header_1_1 + 17), r0x0d
0055cc   f00d
0055ce   c1fc     movff	0x1fc, 0xe         	MOVFF	(_IPGetHeader_header_1_1 + 18), r0x0e
0055d0   f00e
0055d2   c1fd     movff	0x1fd, 0xf         	MOVFF	(_IPGetHeader_header_1_1 + 19), r0x0f
0055d4   f00f
0055d6   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0055d8   ffe5
0055da   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
0055dc   fff4
0055de   c00e     movff	0xe, 0xff6         	MOVFF	r0x0e, TBLPTRL
0055e0   fff6
0055e2   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
0055e4   fff7
0055e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0055e8   ffe9
0055ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0055ec   fff3
0055ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0055f0   ec43     call	0xae86, 0           	CALL	__gptrput4
0055f2   f057
                                           _00112_DS_:
                                           ;	.line	219; TCPIP_Stack/IP.c	remote->IPAddr.Val  = header.SourceAddress.Val;
0055f4   c1f6     movff	0x1f6, 0           	MOVFF	(_IPGetHeader_header_1_1 + 12), r0x00
0055f6   f000
0055f8   c1f7     movff	0x1f7, 0x1         	MOVFF	(_IPGetHeader_header_1_1 + 13), r0x01
0055fa   f001
0055fc   c1f8     movff	0x1f8, 0x2         	MOVFF	(_IPGetHeader_header_1_1 + 14), r0x02
0055fe   f002
005600   c1f9     movff	0x1f9, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 15), r0x0c
005602   f00c
005604   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005606   ffe5
005608   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
00560a   fff4
00560c   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
00560e   fff6
005610   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
005612   fff7
005614   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005616   ffe9
005618   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00561a   fff3
00561c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00561e   ec43     call	0xae86, 0           	CALL	__gptrput4
005620   f057
                                           ;	.line	220; TCPIP_Stack/IP.c	*protocol           = header.Protocol;
005622   c1f3     movff	0x1f3, 0           	MOVFF	(_IPGetHeader_header_1_1 + 9), r0x00
005624   f000
005626   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005628   ffe5
00562a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00562c   ffe9
00562e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005630   fff3
005632   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005634   ece5     call	0xafca, 0           	CALL	__gptrput1
005636   f057
                                           ;	.line	221; TCPIP_Stack/IP.c	*len 		= header.TotalLength - IPHeaderLen;
005638   c245     movff	0x245, 0           	MOVFF	_IPHeaderLen, r0x00
00563a   f000
00563c   6a01     clrf	0x1, 0              	CLRF	r0x01
00563e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005640   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 2)
005642   5dec     subwf	0xec, 0, 0x1       	SUBWF	(_IPGetHeader_header_1_1 + 2), W, B
005644   6e00     movwf	0, 0               	MOVWF	r0x00
005646   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005648   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 3)
00564a   59ed     subwfb	0xed, 0, 0x1      	SUBWFB	(_IPGetHeader_header_1_1 + 3), W, B
00564c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00564e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005650   ffe5
005652   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
005654   fff4
005656   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005658   ffe9
00565a   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
00565c   fff3
00565e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005660   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
005662   f057
                                           ;	.line	223; TCPIP_Stack/IP.c	return TRUE;
005664   0e01     movlw	0x1                	MOVLW	0x01
                                           _00113_DS_:
005666   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
005668   f00f
00566a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00566c   f00e
00566e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
005670   f00d
005672   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
005674   f00c
005676   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
005678   f00b
00567a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00567c   f00a
00567e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005680   f009
005682   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005684   f008
005686   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005688   f007
00568a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00568c   f006
00568e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005690   f005
005692   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005694   f004
005696   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005698   f003
00569a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00569c   f002
00569e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0056a0   f001
0056a2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0056a4   f000
0056a6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0056a8   ffd9
0056aa   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   43 (0x002b) bytes ( 1.12%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:56 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
009a5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009a5e   ffe5
009a60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009a62   ffd9
009a64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009a66   ffe5
009a68   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009a6a   ffe5
009a6c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009a6e   ffe5
009a70   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009a72   ffe5
009a74   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009a76   ffe5
009a78   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009a7a   ffe5
009a7c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009a7e   ffe5
009a80   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009a82   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
009a84   0e01     movlw	0x1                	MOVLW	0x01
009a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009a88   0e00     movlw	0                  	MOVLW	0x00
009a8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009a8c   eca0     call	0xa740, 0           	CALL	_LCDWrite
009a8e   f053
009a90   0e02     movlw	0x2                	MOVLW	0x02
009a92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
009a94   0e48     movlw	0x48               	MOVLW	0x48
009a96   6e00     movwf	0, 0               	MOVWF	r0x00
009a98   0e0d     movlw	0xd                	MOVLW	0x0d
009a9a   6e01     movwf	0x1, 0             	MOVWF	r0x01
009a9c   6a02     clrf	0x2, 0              	CLRF	r0x02
009a9e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
009aa0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
009aa2   f004
009aa4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
009aa6   f005
009aa8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
009aaa   f006
009aac   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
009aae   f007
009ab0   0eff     movlw	0xff               	MOVLW	0xff
009ab2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009ab4   0eff     movlw	0xff               	MOVLW	0xff
009ab6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009ab8   0eff     movlw	0xff               	MOVLW	0xff
009aba   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
009abc   0eff     movlw	0xff               	MOVLW	0xff
009abe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
009ac0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009ac2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
009ac4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
009ac6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
009ac8   e1eb     bnz	0x9aa0               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
009aca   0e00     movlw	0                  	MOVLW	0x00
009acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ace   0e20     movlw	0x20               	MOVLW	0x20
009ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ad2   0e20     movlw	0x20               	MOVLW	0x20
009ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ad6   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
009ad8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ada   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
009adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ade   ec49     call	0x9692, 0           	CALL	_memset
009ae0   f04b
009ae2   0e05     movlw	0x5                	MOVLW	0x05
009ae4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009ae6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009ae8   f007
009aea   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009aec   f006
009aee   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009af0   f005
009af2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009af4   f004
009af6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009af8   f003
009afa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009afc   f002
009afe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009b00   f001
009b02   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009b04   f000
009b06   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009b08   ffd9
009b0a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
004d2e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004d30   ffe5
004d32   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004d34   ffd9
004d36   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004d38   ffe5
004d3a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004d3c   ffe5
004d3e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004d40   ffe5
004d42   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004d44   ffe5
004d46   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004d48   ffe5
004d4a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004d4c   ffe5
004d4e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004d50   ffe5
004d52   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004d54   ffe5
004d56   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004d58   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
004d5a   0e02     movlw	0x2                	MOVLW	0x02
004d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d5e   0e00     movlw	0                  	MOVLW	0x00
004d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d62   eca0     call	0xa740, 0           	CALL	_LCDWrite
004d64   f053
004d66   0e02     movlw	0x2                	MOVLW	0x02
004d68   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
004d6a   0e48     movlw	0x48               	MOVLW	0x48
004d6c   6e00     movwf	0, 0               	MOVWF	r0x00
004d6e   0e0d     movlw	0xd                	MOVLW	0x0d
004d70   6e01     movwf	0x1, 0             	MOVWF	r0x01
004d72   6a02     clrf	0x2, 0              	CLRF	r0x02
004d74   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
004d76   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
004d78   f004
004d7a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004d7c   f005
004d7e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004d80   f006
004d82   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004d84   f007
004d86   0eff     movlw	0xff               	MOVLW	0xff
004d88   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004d8a   0eff     movlw	0xff               	MOVLW	0xff
004d8c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004d8e   0eff     movlw	0xff               	MOVLW	0xff
004d90   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004d92   0eff     movlw	0xff               	MOVLW	0xff
004d94   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004d96   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004d98   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
004d9a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004d9c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004d9e   e1eb     bnz	0x4d76               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
004da0   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
004da2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
004da4   f001
004da6   6a02     clrf	0x2, 0              	CLRF	r0x02
004da8   0e00     movlw	0                  	MOVLW	0x00
004daa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
004dac   e102     bnz	0x4db2               	BNZ	_00297_DS_
004dae   0e10     movlw	0x10               	MOVLW	0x10
004db0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
004db2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004db4   d057     bra	0x4e64               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
004db6   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
004db8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
004dba   6e01     movwf	0x1, 0             	MOVWF	r0x01
004dbc   6a02     clrf	0x2, 0              	CLRF	r0x02
004dbe   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004dc0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004dc2   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
004dc4   ffe9
004dc6   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
004dc8   ffea
004dca   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
004dcc   f001
004dce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004dd0   e119     bnz	0x4e04               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
004dd2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
004dd4   f001
                                           _00253_DS_:
004dd6   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
004dd8   f002
004dda   6a03     clrf	0x3, 0              	CLRF	r0x03
004ddc   0e00     movlw	0                  	MOVLW	0x00
004dde   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
004de0   e102     bnz	0x4de6               	BNZ	_00298_DS_
004de2   0e10     movlw	0x10               	MOVLW	0x10
004de4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
004de6   e20e     bc	0x4e04                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
004de8   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
004dea   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004dec   6e02     movwf	0x2, 0             	MOVWF	r0x02
004dee   6a03     clrf	0x3, 0              	CLRF	r0x03
004df0   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004df2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004df4   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
004df6   ffe9
004df8   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
004dfa   ffea
004dfc   0e20     movlw	0x20               	MOVLW	0x20
004dfe   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
004e00   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004e02   d7e9     bra	0x4dd6               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
004e04   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
004e06   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
004e08   6e01     movwf	0x1, 0             	MOVWF	r0x01
004e0a   6a02     clrf	0x2, 0              	CLRF	r0x02
004e0c   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004e0e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004e10   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
004e12   ffe9
004e14   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
004e16   ffea
004e18   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
004e1a   f001
004e1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e20   0e01     movlw	0x1                	MOVLW	0x01
004e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e24   eca0     call	0xa740, 0           	CALL	_LCDWrite
004e26   f053
004e28   0e02     movlw	0x2                	MOVLW	0x02
004e2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
004e2c   0e55     movlw	0x55               	MOVLW	0x55
004e2e   6e01     movwf	0x1, 0             	MOVWF	r0x01
004e30   6a02     clrf	0x2, 0              	CLRF	r0x02
004e32   6a03     clrf	0x3, 0              	CLRF	r0x03
004e34   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
004e36   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004e38   f005
004e3a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004e3c   f006
004e3e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004e40   f007
004e42   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
004e44   f008
004e46   0eff     movlw	0xff               	MOVLW	0xff
004e48   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
004e4a   0eff     movlw	0xff               	MOVLW	0xff
004e4c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004e4e   0eff     movlw	0xff               	MOVLW	0xff
004e50   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004e52   0eff     movlw	0xff               	MOVLW	0xff
004e54   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
004e56   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004e58   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004e5a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004e5c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
004e5e   e1eb     bnz	0x4e36               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
004e60   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004e62   d79f     bra	0x4da2               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
004e64   0ec0     movlw	0xc0               	MOVLW	0xc0
004e66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e68   0e00     movlw	0                  	MOVLW	0x00
004e6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e6c   eca0     call	0xa740, 0           	CALL	_LCDWrite
004e6e   f053
004e70   0e02     movlw	0x2                	MOVLW	0x02
004e72   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
004e74   0e55     movlw	0x55               	MOVLW	0x55
004e76   6e00     movwf	0, 0               	MOVWF	r0x00
004e78   6a01     clrf	0x1, 0              	CLRF	r0x01
004e7a   6a02     clrf	0x2, 0              	CLRF	r0x02
004e7c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
004e7e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
004e80   f004
004e82   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004e84   f005
004e86   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004e88   f006
004e8a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004e8c   f007
004e8e   0eff     movlw	0xff               	MOVLW	0xff
004e90   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004e92   0eff     movlw	0xff               	MOVLW	0xff
004e94   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004e96   0eff     movlw	0xff               	MOVLW	0xff
004e98   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004e9a   0eff     movlw	0xff               	MOVLW	0xff
004e9c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004e9e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004ea0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
004ea2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004ea4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004ea6   e1eb     bnz	0x4e7e               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
004ea8   0e10     movlw	0x10               	MOVLW	0x10
004eaa   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
004eac   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
004eae   f001
004eb0   6a02     clrf	0x2, 0              	CLRF	r0x02
004eb2   0e00     movlw	0                  	MOVLW	0x00
004eb4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
004eb6   e102     bnz	0x4ebc               	BNZ	_00299_DS_
004eb8   0e20     movlw	0x20               	MOVLW	0x20
004eba   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
004ebc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004ebe   d057     bra	0x4f6e               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
004ec0   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
004ec2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
004ec4   6e01     movwf	0x1, 0             	MOVWF	r0x01
004ec6   6a02     clrf	0x2, 0              	CLRF	r0x02
004ec8   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004eca   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004ecc   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
004ece   ffe9
004ed0   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
004ed2   ffea
004ed4   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
004ed6   f001
004ed8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004eda   e119     bnz	0x4f0e               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
004edc   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
004ede   f001
                                           _00261_DS_:
004ee0   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
004ee2   f002
004ee4   6a03     clrf	0x3, 0              	CLRF	r0x03
004ee6   0e00     movlw	0                  	MOVLW	0x00
004ee8   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
004eea   e102     bnz	0x4ef0               	BNZ	_00300_DS_
004eec   0e20     movlw	0x20               	MOVLW	0x20
004eee   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
004ef0   e20e     bc	0x4f0e                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
004ef2   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
004ef4   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004ef6   6e02     movwf	0x2, 0             	MOVWF	r0x02
004ef8   6a03     clrf	0x3, 0              	CLRF	r0x03
004efa   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004efc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004efe   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
004f00   ffe9
004f02   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
004f04   ffea
004f06   0e20     movlw	0x20               	MOVLW	0x20
004f08   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
004f0a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004f0c   d7e9     bra	0x4ee0               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
004f0e   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
004f10   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
004f12   6e01     movwf	0x1, 0             	MOVWF	r0x01
004f14   6a02     clrf	0x2, 0              	CLRF	r0x02
004f16   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004f18   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004f1a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
004f1c   ffe9
004f1e   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
004f20   ffea
004f22   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
004f24   f001
004f26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004f28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f2a   0e01     movlw	0x1                	MOVLW	0x01
004f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f2e   eca0     call	0xa740, 0           	CALL	_LCDWrite
004f30   f053
004f32   0e02     movlw	0x2                	MOVLW	0x02
004f34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
004f36   0e55     movlw	0x55               	MOVLW	0x55
004f38   6e01     movwf	0x1, 0             	MOVWF	r0x01
004f3a   6a02     clrf	0x2, 0              	CLRF	r0x02
004f3c   6a03     clrf	0x3, 0              	CLRF	r0x03
004f3e   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
004f40   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004f42   f005
004f44   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004f46   f006
004f48   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004f4a   f007
004f4c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
004f4e   f008
004f50   0eff     movlw	0xff               	MOVLW	0xff
004f52   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
004f54   0eff     movlw	0xff               	MOVLW	0xff
004f56   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004f58   0eff     movlw	0xff               	MOVLW	0xff
004f5a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004f5c   0eff     movlw	0xff               	MOVLW	0xff
004f5e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
004f60   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004f62   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004f64   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004f66   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
004f68   e1eb     bnz	0x4f40               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
004f6a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004f6c   d79f     bra	0x4eac               	BRA	_00265_DS_
                                           _00269_DS_:
004f6e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004f70   f008
004f72   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004f74   f007
004f76   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004f78   f006
004f7a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004f7c   f005
004f7e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004f80   f004
004f82   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004f84   f003
004f86   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004f88   f002
004f8a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004f8c   f001
004f8e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004f90   f000
004f92   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004f94   ffd9
004f96   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
0051fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0051fc   ffe5
0051fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005200   ffd9
005202   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005204   ffe5
005206   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005208   ffe5
00520a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00520c   ffe5
00520e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005210   ffe5
005212   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005214   ffe5
005216   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005218   ffe5
00521a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00521c   ffe5
00521e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005220   ffe5
005222   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005224   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
005226   0e00     movlw	0                  	MOVLW	0x00
005228   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00522a   0e20     movlw	0x20               	MOVLW	0x20
00522c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00522e   0e20     movlw	0x20               	MOVLW	0x20
005230   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005232   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
005234   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005236   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
005238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00523a   ec49     call	0x9692, 0           	CALL	_memset
00523c   f04b
00523e   0e05     movlw	0x5                	MOVLW	0x05
005240   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005242   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
005244   6b42     clrf	0x42, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
005246   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
005248   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00524a   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00524c   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00524e   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
005250   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
005252   0ea0     movlw	0xa0               	MOVLW	0xa0
005254   6e00     movwf	0, 0               	MOVWF	r0x00
005256   0e09     movlw	0x9                	MOVLW	0x09
005258   6e01     movwf	0x1, 0             	MOVWF	r0x01
00525a   0e01     movlw	0x1                	MOVLW	0x01
00525c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00525e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
005260   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
005262   f004
005264   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005266   f005
005268   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00526a   f006
00526c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00526e   f007
005270   0eff     movlw	0xff               	MOVLW	0xff
005272   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005274   0eff     movlw	0xff               	MOVLW	0xff
005276   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005278   0eff     movlw	0xff               	MOVLW	0xff
00527a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00527c   0eff     movlw	0xff               	MOVLW	0xff
00527e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005280   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005282   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005284   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005286   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005288   e1eb     bnz	0x5260               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
00528a   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
00528c   0e03     movlw	0x3                	MOVLW	0x03
00528e   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
005290   0000     nop                      	nop 
005292   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
005294   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
005296   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005298   f001
00529a   6a02     clrf	0x2, 0              	CLRF	r0x02
00529c   0e00     movlw	0                  	MOVLW	0x00
00529e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0052a0   e102     bnz	0x52a6               	BNZ	_00220_DS_
0052a2   0e03     movlw	0x3                	MOVLW	0x03
0052a4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
0052a6   e239     bc	0x531a                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0052a8   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
0052aa   0e11     movlw	0x11               	MOVLW	0x11
0052ac   6e01     movwf	0x1, 0             	MOVWF	r0x01
0052ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0052b0   6a03     clrf	0x3, 0              	CLRF	r0x03
0052b2   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
0052b4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0052b6   f005
0052b8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0052ba   f006
0052bc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0052be   f007
0052c0   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0052c2   f008
0052c4   0eff     movlw	0xff               	MOVLW	0xff
0052c6   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0052c8   0eff     movlw	0xff               	MOVLW	0xff
0052ca   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0052cc   0eff     movlw	0xff               	MOVLW	0xff
0052ce   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0052d0   0eff     movlw	0xff               	MOVLW	0xff
0052d2   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0052d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0052d6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0052d8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0052da   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0052dc   e1eb     bnz	0x52b4               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0052de   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0052e0   0e48     movlw	0x48               	MOVLW	0x48
0052e2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0052e4   0e0d     movlw	0xd                	MOVLW	0x0d
0052e6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0052e8   6a03     clrf	0x3, 0              	CLRF	r0x03
0052ea   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
0052ec   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0052ee   f005
0052f0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0052f2   f006
0052f4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0052f6   f007
0052f8   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0052fa   f008
0052fc   0eff     movlw	0xff               	MOVLW	0xff
0052fe   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005300   0eff     movlw	0xff               	MOVLW	0xff
005302   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005304   0eff     movlw	0xff               	MOVLW	0xff
005306   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005308   0eff     movlw	0xff               	MOVLW	0xff
00530a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00530c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00530e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005310   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005312   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
005314   e1eb     bnz	0x52ec               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
005316   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
005318   d7be     bra	0x5296               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
00531a   0e38     movlw	0x38               	MOVLW	0x38
00531c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00531e   0e00     movlw	0                  	MOVLW	0x00
005320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005322   eca0     call	0xa740, 0           	CALL	_LCDWrite
005324   f053
005326   0e02     movlw	0x2                	MOVLW	0x02
005328   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00532a   0e55     movlw	0x55               	MOVLW	0x55
00532c   6e00     movwf	0, 0               	MOVWF	r0x00
00532e   6a01     clrf	0x1, 0              	CLRF	r0x01
005330   6a02     clrf	0x2, 0              	CLRF	r0x02
005332   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
005334   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
005336   f004
005338   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00533a   f005
00533c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00533e   f006
005340   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005342   f007
005344   0eff     movlw	0xff               	MOVLW	0xff
005346   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005348   0eff     movlw	0xff               	MOVLW	0xff
00534a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00534c   0eff     movlw	0xff               	MOVLW	0xff
00534e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005350   0eff     movlw	0xff               	MOVLW	0xff
005352   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005354   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005356   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005358   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00535a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00535c   e1eb     bnz	0x5334               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
00535e   0e06     movlw	0x6                	MOVLW	0x06
005360   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005362   0e00     movlw	0                  	MOVLW	0x00
005364   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005366   eca0     call	0xa740, 0           	CALL	_LCDWrite
005368   f053
00536a   0e02     movlw	0x2                	MOVLW	0x02
00536c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00536e   0e55     movlw	0x55               	MOVLW	0x55
005370   6e00     movwf	0, 0               	MOVWF	r0x00
005372   6a01     clrf	0x1, 0              	CLRF	r0x01
005374   6a02     clrf	0x2, 0              	CLRF	r0x02
005376   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
005378   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00537a   f004
00537c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00537e   f005
005380   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005382   f006
005384   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005386   f007
005388   0eff     movlw	0xff               	MOVLW	0xff
00538a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00538c   0eff     movlw	0xff               	MOVLW	0xff
00538e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005390   0eff     movlw	0xff               	MOVLW	0xff
005392   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005394   0eff     movlw	0xff               	MOVLW	0xff
005396   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005398   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00539a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00539c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00539e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0053a0   e1eb     bnz	0x5378               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0053a2   0e0c     movlw	0xc                	MOVLW	0x0c
0053a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053a6   0e00     movlw	0                  	MOVLW	0x00
0053a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053aa   eca0     call	0xa740, 0           	CALL	_LCDWrite
0053ac   f053
0053ae   0e02     movlw	0x2                	MOVLW	0x02
0053b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0053b2   0e55     movlw	0x55               	MOVLW	0x55
0053b4   6e00     movwf	0, 0               	MOVWF	r0x00
0053b6   6a01     clrf	0x1, 0              	CLRF	r0x01
0053b8   6a02     clrf	0x2, 0              	CLRF	r0x02
0053ba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
0053bc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0053be   f004
0053c0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0053c2   f005
0053c4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0053c6   f006
0053c8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0053ca   f007
0053cc   0eff     movlw	0xff               	MOVLW	0xff
0053ce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0053d0   0eff     movlw	0xff               	MOVLW	0xff
0053d2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0053d4   0eff     movlw	0xff               	MOVLW	0xff
0053d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0053d8   0eff     movlw	0xff               	MOVLW	0xff
0053da   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0053dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0053de   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0053e0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0053e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0053e4   e1eb     bnz	0x53bc               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
0053e6   0e01     movlw	0x1                	MOVLW	0x01
0053e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053ea   0e00     movlw	0                  	MOVLW	0x00
0053ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053ee   eca0     call	0xa740, 0           	CALL	_LCDWrite
0053f0   f053
0053f2   0e02     movlw	0x2                	MOVLW	0x02
0053f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0053f6   0e48     movlw	0x48               	MOVLW	0x48
0053f8   6e00     movwf	0, 0               	MOVWF	r0x00
0053fa   0e0d     movlw	0xd                	MOVLW	0x0d
0053fc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0053fe   6a02     clrf	0x2, 0              	CLRF	r0x02
005400   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
005402   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
005404   f004
005406   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005408   f005
00540a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00540c   f006
00540e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005410   f007
005412   0eff     movlw	0xff               	MOVLW	0xff
005414   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005416   0eff     movlw	0xff               	MOVLW	0xff
005418   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00541a   0eff     movlw	0xff               	MOVLW	0xff
00541c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00541e   0eff     movlw	0xff               	MOVLW	0xff
005420   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005422   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005424   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005426   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005428   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00542a   e1eb     bnz	0x5402               	BNZ	_00185_DS_
00542c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00542e   f008
005430   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005432   f007
005434   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005436   f006
005438   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00543a   f005
00543c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00543e   f004
005440   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005442   f003
005444   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005446   f002
005448   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00544a   f001
00544c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00544e   f000
005450   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005452   ffd9
005454   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00a740   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a742   ffe5
00a744   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a746   ffd9
00a748   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a74a   ffe5
00a74c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a74e   ffe5
00a750   0e02     movlw	0x2                	MOVLW	0x02
00a752   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a754   f000
00a756   0e03     movlw	0x3                	MOVLW	0x03
00a758   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a75a   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00a75c   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00a75e   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00a760   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00a762   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
00a764   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a766   0b01     andlw	0x1                	ANDLW	0x01
00a768   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00a76a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00a76c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00a76e   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00a770   0bfb     andlw	0xfb               	ANDLW	0xfb
00a772   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00a774   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
00a776   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
00a778   ff8d
00a77a   0000     nop                      	nop 
00a77c   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00a77e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00a780   0000     nop                      	nop 
00a782   0000     nop                      	nop 
00a784   0000     nop                      	nop 
00a786   0000     nop                      	nop 
00a788   0000     nop                      	nop 
00a78a   0000     nop                      	nop 
00a78c   0000     nop                      	nop 
00a78e   0000     nop                      	nop 
00a790   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00a792   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00a794   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a796   f001
00a798   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a79a   f000
00a79c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a79e   ffd9
00a7a0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:56 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _StackInit
                                           	global _StackTask
                                           	global _StackTaskModified
                                           	global _StackApplications
                                           	global _remoteNode
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _memcpy
                                           	extern _GenerateRandomDWORD
                                           	extern _MACInit
                                           	extern _MACIsLinked
                                           	extern _MACGetHeader
                                           	extern _IPGetHeader
                                           	extern _ARPInit
                                           	extern _ARPProcess
                                           	extern _UDPInit
                                           	extern _UDPTask
                                           	extern _UDPProcess
                                           	extern _UDPDiscard
                                           	extern _DHCPInit
                                           	extern _DHCPTask
                                           	extern _DHCPDisable
                                           	extern _DHCPIsBound
                                           	extern _ICMPProcess
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _StackTaskModified_bLastLinkState_2_2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           
                                           udata_StackTsk_0	udata
                                           _smStack	res	1
                                           
                                           udata_StackTsk_1	udata
                                           _StackTaskModified_tempLocalIP_1_1	res	4
                                           
                                           udata_StackTsk_2	udata
                                           _remoteNode	res	10
                                           
                                           udata_StackTsk_3	udata
                                           _StackTaskModified_cFrameType_1_1	res	1
                                           
                                           udata_StackTsk_4	udata
                                           _StackTaskModified_cIPFrameType_1_1	res	1
                                           
                                           udata_StackTsk_5	udata
                                           _StackTaskModified_dataCount_1_1	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_StackTsk__StackApplications	code
                                           _StackApplications:
                                           ;	.line	386; TCPIP_Stack/StackTsk.c	void StackApplications(void)
00afee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aff0   ffe5
00aff2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aff4   ffd9
                                           ;	.line	443; TCPIP_Stack/StackTsk.c	}
00aff6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aff8   ffd9
00affa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTaskModified	code
                                           _StackTaskModified:
                                           ;	.line	213; TCPIP_Stack/StackTsk.c	void StackTaskModified(IP_ADDR *ip)
001e7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001e7c   ffe5
001e7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001e80   ffd9
001e82   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001e84   ffe5
001e86   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001e88   ffe5
001e8a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001e8c   ffe5
001e8e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001e90   ffe5
001e92   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001e94   ffe5
001e96   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001e98   ffe5
001e9a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001e9c   ffe5
001e9e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001ea0   ffe5
001ea2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001ea4   ffe5
001ea6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001ea8   ffe5
001eaa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001eac   ffe5
001eae   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001eb0   ffe5
001eb2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001eb4   ffe5
001eb6   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001eb8   ffe5
001eba   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001ebc   ffe5
001ebe   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001ec0   ffe5
001ec2   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001ec4   ffe5
001ec6   0e02     movlw	0x2                	MOVLW	0x02
001ec8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001eca   f000
001ecc   0e03     movlw	0x3                	MOVLW	0x03
001ece   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001ed0   f001
001ed2   0e04     movlw	0x4                	MOVLW	0x04
001ed4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001ed6   f002
001ed8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	233; TCPIP_Stack/StackTsk.c	if(AppConfig.Flags.bIsDHCPEnabled)
001eda   adf4     btfss	0xf4, 0x6, 0x1     	BTFSS	(_AppConfig + 44), 6, B
001edc   d047     bra	0x1f6c               	BRA	_00124_DS_
                                           ;	.line	238; TCPIP_Stack/StackTsk.c	bCurrentLinkState = MACIsLinked();
001ede   ecb4     call	0xab68, 0           	CALL	_MACIsLinked
001ee0   f055
001ee2   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	239; TCPIP_Stack/StackTsk.c	if(bCurrentLinkState != bLastLinkState)
001ee4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001ee6   010e     movlb	0xe                	BANKSEL	_StackTaskModified_bLastLinkState_2_2
001ee8   1955     xorwf	0x55, 0, 0x1       	XORWF	_StackTaskModified_bLastLinkState_2_2, W, B
001eea   e101     bnz	0x1eee               	BNZ	_00165_DS_
001eec   d033     bra	0x1f54               	BRA	_00120_DS_
                                           _00165_DS_:
                                           ;	.line	241; TCPIP_Stack/StackTsk.c	bLastLinkState = bCurrentLinkState;
001eee   c003     movff	0x3, 0xe55         	MOVFF	r0x03, _StackTaskModified_bLastLinkState_2_2
001ef0   fe55
                                           ;	.line	242; TCPIP_Stack/StackTsk.c	if(!bCurrentLinkState) //we lost the MAC link
001ef2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001ef4   e12f     bnz	0x1f54               	BNZ	_00120_DS_
                                           ;	.line	244; TCPIP_Stack/StackTsk.c	AppConfig.MyIPAddr.Val = AppConfig.DefaultIPAddr.Val;
001ef6   c8dc     movff	0x8dc, 0x3         	MOVFF	(_AppConfig + 20), r0x03
001ef8   f003
001efa   c8dd     movff	0x8dd, 0x4         	MOVFF	(_AppConfig + 21), r0x04
001efc   f004
001efe   c8de     movff	0x8de, 0x5         	MOVFF	(_AppConfig + 22), r0x05
001f00   f005
001f02   c8df     movff	0x8df, 0x6         	MOVFF	(_AppConfig + 23), r0x06
001f04   f006
001f06   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f08   0108     movlb	0x8                	BANKSEL	_AppConfig
001f0a   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
001f0c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f0e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
001f10   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
001f12   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f14   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
001f16   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
001f18   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f1a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
001f1c   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
                                           ;	.line	245; TCPIP_Stack/StackTsk.c	AppConfig.MyMask.Val = AppConfig.DefaultMask.Val;
001f1e   c8e0     movff	0x8e0, 0x3         	MOVFF	(_AppConfig + 24), r0x03
001f20   f003
001f22   c8e1     movff	0x8e1, 0x4         	MOVFF	(_AppConfig + 25), r0x04
001f24   f004
001f26   c8e2     movff	0x8e2, 0x5         	MOVFF	(_AppConfig + 26), r0x05
001f28   f005
001f2a   c8e3     movff	0x8e3, 0x6         	MOVFF	(_AppConfig + 27), r0x06
001f2c   f006
001f2e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f30   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
001f32   6fcc     movwf	0xcc, 0x1          	MOVWF	(_AppConfig + 4), B
001f34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f36   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
001f38   6fcd     movwf	0xcd, 0x1          	MOVWF	(_AppConfig + 5), B
001f3a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f3c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
001f3e   6fce     movwf	0xce, 0x1          	MOVWF	(_AppConfig + 6), B
001f40   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f42   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
001f44   6fcf     movwf	0xcf, 0x1          	MOVWF	(_AppConfig + 7), B
001f46   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	246; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
001f48   8ff4     bsf	0xf4, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	247; TCPIP_Stack/StackTsk.c	DHCPInit(0);
001f4a   0e00     movlw	0                  	MOVLW	0x00
001f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4e   ec46     call	0xa28c, 0           	CALL	_DHCPInit
001f50   f051
001f52   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00120_DS_:
                                           ;	.line	255; TCPIP_Stack/StackTsk.c	DHCPTask();
001f54   ec83     call	0x706, 0            	CALL	_DHCPTask
001f56   f003
                                           ;	.line	257; TCPIP_Stack/StackTsk.c	if(DHCPIsBound(0))
001f58   0e00     movlw	0                  	MOVLW	0x00
001f5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f5c   ec33     call	0xae66, 0           	CALL	_DHCPIsBound
001f5e   f057
001f60   6e03     movwf	0x3, 0             	MOVWF	r0x03
001f62   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001f64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f66   e002     bz	0x1f6c                	BZ	_00124_DS_
001f68   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	258; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = FALSE;
001f6a   9ff4     bcf	0xf4, 0x7, 0x1       	BCF	(_AppConfig + 44), 7, B
                                           _00124_DS_:
                                           ;	.line	274; TCPIP_Stack/StackTsk.c	UDPTask();
001f6c   ecdb     call	0xafb6, 0           	CALL	_UDPTask
001f6e   f057
                                           _00145_DS_:
                                           ;	.line	289; TCPIP_Stack/StackTsk.c	UDPDiscard();
001f70   ecc8     call	0xad90, 0           	CALL	_UDPDiscard
001f72   f056
                                           ;	.line	294; TCPIP_Stack/StackTsk.c	if(!MACGetHeader(&remoteNode.MACAddr, &cFrameType))
001f74   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode + 4)
001f76   6e04     movwf	0x4, 0             	MOVWF	r0x04
001f78   0e68     movlw	0x68               	MOVLW	LOW(_remoteNode + 4)
001f7a   6e03     movwf	0x3, 0             	MOVWF	r0x03
001f7c   0e80     movlw	0x80               	MOVLW	0x80
001f7e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001f80   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskModified_cFrameType_1_1)
001f82   6e07     movwf	0x7, 0             	MOVWF	r0x07
001f84   0e47     movlw	0x47               	MOVLW	LOW(_StackTaskModified_cFrameType_1_1)
001f86   6e06     movwf	0x6, 0             	MOVWF	r0x06
001f88   0e80     movlw	0x80               	MOVLW	0x80
001f8a   6e08     movwf	0x8, 0             	MOVWF	r0x08
001f8c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f90   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001f92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f94   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f98   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f9c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fa0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001fa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fa4   eca2     call	0x5d44, 0           	CALL	_MACGetHeader
001fa6   f02e
001fa8   6e03     movwf	0x3, 0             	MOVWF	r0x03
001faa   0e06     movlw	0x6                	MOVLW	0x06
001fac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001fae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001fb0   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001fb2   d108     bra	0x21c4               	BRA	_00147_DS_
                                           ;	.line	298; TCPIP_Stack/StackTsk.c	switch(cFrameType)
001fb4   c247     movff	0x247, 0x3         	MOVFF	_StackTaskModified_cFrameType_1_1, r0x03
001fb6   f003
001fb8   6a04     clrf	0x4, 0              	CLRF	r0x04
001fba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001fbc   e102     bnz	0x1fc2               	BNZ	_00167_DS_
001fbe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001fc0   e009     bz	0x1fd4                	BZ	_00128_DS_
                                           _00167_DS_:
001fc2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001fc4   0a06     xorlw	0x6                	XORLW	0x06
001fc6   e102     bnz	0x1fcc               	BNZ	_00168_DS_
001fc8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001fca   e001     bz	0x1fce                	BZ	_00169_DS_
                                           _00168_DS_:
001fcc   d7d1     bra	0x1f70               	BRA	_00145_DS_
                                           _00169_DS_:
                                           ;	.line	302; TCPIP_Stack/StackTsk.c	ARPProcess();
001fce   ec57     call	0x4aae, 0           	CALL	_ARPProcess
001fd0   f025
                                           ;	.line	303; TCPIP_Stack/StackTsk.c	break;
001fd2   d7ce     bra	0x1f70               	BRA	_00145_DS_
                                           _00128_DS_:
                                           ;	.line	307; TCPIP_Stack/StackTsk.c	if(!IPGetHeader(&tempLocalIP, &remoteNode, &cIPFrameType, &dataCount))
001fd4   0e0b     movlw	0xb                	MOVLW	HIGH(_StackTaskModified_tempLocalIP_1_1)
001fd6   6e04     movwf	0x4, 0             	MOVWF	r0x04
001fd8   0ed2     movlw	0xd2               	MOVLW	LOW(_StackTaskModified_tempLocalIP_1_1)
001fda   6e03     movwf	0x3, 0             	MOVWF	r0x03
001fdc   0e80     movlw	0x80               	MOVLW	0x80
001fde   6e05     movwf	0x5, 0             	MOVWF	r0x05
001fe0   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
001fe2   6e07     movwf	0x7, 0             	MOVWF	r0x07
001fe4   0e64     movlw	0x64               	MOVLW	LOW(_remoteNode)
001fe6   6e06     movwf	0x6, 0             	MOVWF	r0x06
001fe8   0e80     movlw	0x80               	MOVLW	0x80
001fea   6e08     movwf	0x8, 0             	MOVWF	r0x08
001fec   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskModified_cIPFrameType_1_1)
001fee   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001ff0   0e48     movlw	0x48               	MOVLW	LOW(_StackTaskModified_cIPFrameType_1_1)
001ff2   6e09     movwf	0x9, 0             	MOVWF	r0x09
001ff4   0e80     movlw	0x80               	MOVLW	0x80
001ff6   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001ff8   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskModified_dataCount_1_1)
001ffa   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001ffc   0e2a     movlw	0x2a               	MOVLW	LOW(_StackTaskModified_dataCount_1_1)
001ffe   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002000   0e80     movlw	0x80               	MOVLW	0x80
002002   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002004   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002008   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00200a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00200c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00200e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002010   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002014   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002018   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00201a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00201c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00201e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002020   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002024   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002028   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00202a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00202c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00202e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002030   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002034   ec2b     call	0x5456, 0           	CALL	_IPGetHeader
002036   f02a
002038   6e03     movwf	0x3, 0             	MOVWF	r0x03
00203a   0e0c     movlw	0xc                	MOVLW	0x0c
00203c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00203e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002040   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002042   d796     bra	0x1f70               	BRA	_00145_DS_
                                           ;	.line	311; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_ICMP)
002044   c248     movff	0x248, 0x3         	MOVFF	_StackTaskModified_cIPFrameType_1_1, r0x03
002046   f003
002048   6a04     clrf	0x4, 0              	CLRF	r0x04
00204a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00204c   0a01     xorlw	0x1                	XORLW	0x01
00204e   e102     bnz	0x2054               	BNZ	_00170_DS_
002050   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002052   e001     bz	0x2056                	BZ	_00171_DS_
                                           _00170_DS_:
002054   d06d     bra	0x2130               	BRA	_00136_DS_
                                           _00171_DS_:
                                           ;	.line	332; TCPIP_Stack/StackTsk.c	if( (tempLocalIP.Val == AppConfig.MyIPAddr.Val) ||
002056   cbd2     movff	0xbd2, 0x5         	MOVFF	_StackTaskModified_tempLocalIP_1_1, r0x05
002058   f005
00205a   cbd3     movff	0xbd3, 0x6         	MOVFF	(_StackTaskModified_tempLocalIP_1_1 + 1), r0x06
00205c   f006
00205e   cbd4     movff	0xbd4, 0x7         	MOVFF	(_StackTaskModified_tempLocalIP_1_1 + 2), r0x07
002060   f007
002062   cbd5     movff	0xbd5, 0x8         	MOVFF	(_StackTaskModified_tempLocalIP_1_1 + 3), r0x08
002064   f008
002066   c8c8     movff	0x8c8, 0x9         	MOVFF	_AppConfig, r0x09
002068   f009
00206a   c8c9     movff	0x8c9, 0xa         	MOVFF	(_AppConfig + 1), r0x0a
00206c   f00a
00206e   c8ca     movff	0x8ca, 0xb         	MOVFF	(_AppConfig + 2), r0x0b
002070   f00b
002072   c8cb     movff	0x8cb, 0xc         	MOVFF	(_AppConfig + 3), r0x0c
002074   f00c
002076   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002078   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00207a   e10a     bnz	0x2090               	BNZ	_00173_DS_
00207c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00207e   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
002080   e107     bnz	0x2090               	BNZ	_00173_DS_
002082   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002084   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
002086   e104     bnz	0x2090               	BNZ	_00173_DS_
002088   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00208a   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
00208c   e101     bnz	0x2090               	BNZ	_00173_DS_
00208e   d039     bra	0x2102               	BRA	_00131_DS_
                                           _00173_DS_:
                                           ;	.line	333; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == 0xFFFFFFFF) ||
002090   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002092   0aff     xorlw	0xff               	XORLW	0xff
002094   e109     bnz	0x20a8               	BNZ	_00175_DS_
002096   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002098   0aff     xorlw	0xff               	XORLW	0xff
00209a   e106     bnz	0x20a8               	BNZ	_00175_DS_
00209c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00209e   0aff     xorlw	0xff               	XORLW	0xff
0020a0   e103     bnz	0x20a8               	BNZ	_00175_DS_
0020a2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0020a4   0aff     xorlw	0xff               	XORLW	0xff
0020a6   e02d     bz	0x2102                	BZ	_00131_DS_
                                           _00175_DS_:
0020a8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	334; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == ((AppConfig.MyIPAddr.Val & AppConfig.MyMask.Val) | ~AppConfig.MyMask.Val)))
0020aa   51cc     movf	0xcc, 0, 0x1        	MOVF	(_AppConfig + 4), W, B
0020ac   1609     andwf	0x9, 0x1, 0        	ANDWF	r0x09, F
0020ae   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
0020b0   51cd     movf	0xcd, 0, 0x1        	MOVF	(_AppConfig + 5), W, B
0020b2   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
0020b4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
0020b6   51ce     movf	0xce, 0, 0x1        	MOVF	(_AppConfig + 6), W, B
0020b8   160b     andwf	0xb, 0x1, 0        	ANDWF	r0x0b, F
0020ba   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
0020bc   51cf     movf	0xcf, 0, 0x1        	MOVF	(_AppConfig + 7), W, B
0020be   160c     andwf	0xc, 0x1, 0        	ANDWF	r0x0c, F
0020c0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
0020c2   1dcc     comf	0xcc, 0, 0x1        	COMF	(_AppConfig + 4), W, B
0020c4   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0020c6   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
0020c8   1dcd     comf	0xcd, 0, 0x1        	COMF	(_AppConfig + 5), W, B
0020ca   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0020cc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
0020ce   1dce     comf	0xce, 0, 0x1        	COMF	(_AppConfig + 6), W, B
0020d0   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0020d2   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
0020d4   1dcf     comf	0xcf, 0, 0x1        	COMF	(_AppConfig + 7), W, B
0020d6   6e10     movwf	0x10, 0            	MOVWF	r0x10
0020d8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0020da   1209     iorwf	0x9, 0x1, 0        	IORWF	r0x09, F
0020dc   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0020de   120a     iorwf	0xa, 0x1, 0        	IORWF	r0x0a, F
0020e0   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0020e2   120b     iorwf	0xb, 0x1, 0        	IORWF	r0x0b, F
0020e4   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0020e6   120c     iorwf	0xc, 0x1, 0        	IORWF	r0x0c, F
0020e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020ea   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0020ec   e109     bnz	0x2100               	BNZ	_00178_DS_
0020ee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0020f0   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
0020f2   e106     bnz	0x2100               	BNZ	_00178_DS_
0020f4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0020f6   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
0020f8   e103     bnz	0x2100               	BNZ	_00178_DS_
0020fa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0020fc   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
0020fe   e001     bz	0x2102                	BZ	_00131_DS_
                                           _00178_DS_:
002100   d737     bra	0x1f70               	BRA	_00145_DS_
                                           _00131_DS_:
                                           ;	.line	336; TCPIP_Stack/StackTsk.c	ICMPProcess(&remoteNode, dataCount);
002102   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
002104   6e06     movwf	0x6, 0             	MOVWF	r0x06
002106   0e64     movlw	0x64               	MOVLW	LOW(_remoteNode)
002108   6e05     movwf	0x5, 0             	MOVWF	r0x05
00210a   0e80     movlw	0x80               	MOVLW	0x80
00210c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00210e   0102     movlb	0x2                	BANKSEL	(_StackTaskModified_dataCount_1_1 + 1)
002110   512b     movf	0x2b, 0, 0x1        	MOVF	(_StackTaskModified_dataCount_1_1 + 1), W, B
002112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002114   0102     movlb	0x2                	BANKSEL	_StackTaskModified_dataCount_1_1
002116   512a     movf	0x2a, 0, 0x1        	MOVF	_StackTaskModified_dataCount_1_1, W, B
002118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00211c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00211e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002122   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002126   ec0f     call	0x721e, 0           	CALL	_ICMPProcess
002128   f039
00212a   0e05     movlw	0x5                	MOVLW	0x05
00212c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	339; TCPIP_Stack/StackTsk.c	break;
00212e   d720     bra	0x1f70               	BRA	_00145_DS_
                                           _00136_DS_:
                                           ;	.line	353; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_UDP)
002130   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002132   0a11     xorlw	0x11               	XORLW	0x11
002134   e102     bnz	0x213a               	BNZ	_00180_DS_
002136   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002138   e001     bz	0x213c                	BZ	_00181_DS_
                                           _00180_DS_:
00213a   d71a     bra	0x1f70               	BRA	_00145_DS_
                                           _00181_DS_:
                                           ;	.line	357; TCPIP_Stack/StackTsk.c	if(UDPProcess(&remoteNode, &tempLocalIP, dataCount)){
00213c   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
00213e   6e04     movwf	0x4, 0             	MOVWF	r0x04
002140   0e64     movlw	0x64               	MOVLW	LOW(_remoteNode)
002142   6e03     movwf	0x3, 0             	MOVWF	r0x03
002144   0e80     movlw	0x80               	MOVLW	0x80
002146   6e05     movwf	0x5, 0             	MOVWF	r0x05
002148   0e0b     movlw	0xb                	MOVLW	HIGH(_StackTaskModified_tempLocalIP_1_1)
00214a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00214c   0ed2     movlw	0xd2               	MOVLW	LOW(_StackTaskModified_tempLocalIP_1_1)
00214e   6e06     movwf	0x6, 0             	MOVWF	r0x06
002150   0e80     movlw	0x80               	MOVLW	0x80
002152   6e08     movwf	0x8, 0             	MOVWF	r0x08
002154   0102     movlb	0x2                	BANKSEL	(_StackTaskModified_dataCount_1_1 + 1)
002156   512b     movf	0x2b, 0, 0x1        	MOVF	(_StackTaskModified_dataCount_1_1 + 1), W, B
002158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00215a   0102     movlb	0x2                	BANKSEL	_StackTaskModified_dataCount_1_1
00215c   512a     movf	0x2a, 0, 0x1        	MOVF	_StackTaskModified_dataCount_1_1, W, B
00215e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002160   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002164   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002168   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00216a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00216c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00216e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002170   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002172   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002174   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002178   ec8f     call	0x3f1e, 0           	CALL	_UDPProcess
00217a   f01f
00217c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00217e   0e08     movlw	0x8                	MOVLW	0x08
002180   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002182   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002184   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002186   d6f4     bra	0x1f70               	BRA	_00145_DS_
                                           ;	.line	358; TCPIP_Stack/StackTsk.c	if(ip != NULL){
002188   5000     movf	0, 0, 0             	MOVF	r0x00, W
00218a   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00218c   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
00218e   e01a     bz	0x21c4                	BZ	_00147_DS_
                                           ;	.line	359; TCPIP_Stack/StackTsk.c	memcpy(ip, &remoteNode.IPAddr, sizeof(remoteNode.IPAddr));
002190   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
002192   6e04     movwf	0x4, 0             	MOVWF	r0x04
002194   0e64     movlw	0x64               	MOVLW	LOW(_remoteNode)
002196   6e03     movwf	0x3, 0             	MOVWF	r0x03
002198   0e80     movlw	0x80               	MOVLW	0x80
00219a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00219c   0e00     movlw	0                  	MOVLW	0x00
00219e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a0   0e04     movlw	0x4                	MOVLW	0x04
0021a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021bc   ecd1     call	0x8ba2, 0           	CALL	_memcpy
0021be   f045
0021c0   0e08     movlw	0x8                	MOVLW	0x08
0021c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00147_DS_:
                                           ;	.line	367; TCPIP_Stack/StackTsk.c	}
0021c4   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0021c6   f010
0021c8   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0021ca   f00f
0021cc   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0021ce   f00e
0021d0   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0021d2   f00d
0021d4   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0021d6   f00c
0021d8   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0021da   f00b
0021dc   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0021de   f00a
0021e0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0021e2   f009
0021e4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0021e6   f008
0021e8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0021ea   f007
0021ec   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0021ee   f006
0021f0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0021f2   f005
0021f4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021f6   f004
0021f8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021fa   f003
0021fc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021fe   f002
002200   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002202   f001
002204   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002206   f000
002208   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00220a   ffd9
00220c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTask	code
                                           _StackTask:
                                           ;	.line	209; TCPIP_Stack/StackTsk.c	void StackTask(void){
00ade0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ade2   ffe5
00ade4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ade6   ffd9
                                           ;	.line	210; TCPIP_Stack/StackTsk.c	StackTaskModified(NULL);
00ade8   0e00     movlw	0                  	MOVLW	0x00
00adea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00adec   0e00     movlw	0                  	MOVLW	0x00
00adee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00adf0   0e00     movlw	0                  	MOVLW	0x00
00adf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00adf4   ec3d     call	0x1e7a, 0           	CALL	_StackTaskModified
00adf6   f00f
00adf8   0e03     movlw	0x3                	MOVLW	0x03
00adfa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00adfc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00adfe   ffd9
00ae00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackInit	code
                                           _StackInit:
                                           ;	.line	115; TCPIP_Stack/StackTsk.c	void StackInit(void)
00a180   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a182   ffe5
00a184   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a186   ffd9
00a188   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a18a   ffe5
00a18c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a18e   ffe5
00a190   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a192   ffe5
00a194   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a196   ffe5
00a198   0102     movlb	0x2                	BANKSEL	_smStack
                                           ;	.line	117; TCPIP_Stack/StackTsk.c	smStack                     = SM_STACK_IDLE;
00a19a   6b46     clrf	0x46, 0x1           	CLRF	_smStack, B
00a19c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	124; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
00a19e   8ff4     bsf	0xf4, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	128; TCPIP_Stack/StackTsk.c	srand(GenerateRandomDWORD());
00a1a0   ece8     call	0x47d0, 0           	CALL	_GenerateRandomDWORD
00a1a2   f023
00a1a4   6e00     movwf	0, 0               	MOVWF	r0x00
00a1a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00a1a8   f001
00a1aa   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00a1ac   f002
00a1ae   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00a1b0   f003
00a1b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a1b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a1b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a1b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a1ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a1bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a1be   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a1c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a1c2   ecdd     call	0xadba, 0           	CALL	_srand
00a1c4   f056
00a1c6   0e04     movlw	0x4                	MOVLW	0x04
00a1c8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	130; TCPIP_Stack/StackTsk.c	MACInit();
00a1ca   ec08     call	0x8410, 0           	CALL	_MACInit
00a1cc   f042
                                           ;	.line	139; TCPIP_Stack/StackTsk.c	ARPInit();
00a1ce   ec56     call	0xacac, 0           	CALL	_ARPInit
00a1d0   f056
                                           ;	.line	142; TCPIP_Stack/StackTsk.c	UDPInit();
00a1d2   ec49     call	0xaa92, 0           	CALL	_UDPInit
00a1d4   f055
                                           ;	.line	174; TCPIP_Stack/StackTsk.c	DHCPInit(0);
00a1d6   0e00     movlw	0                  	MOVLW	0x00
00a1d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a1da   ec46     call	0xa28c, 0           	CALL	_DHCPInit
00a1dc   f051
00a1de   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00a1e0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	176; TCPIP_Stack/StackTsk.c	if(!AppConfig.Flags.bIsDHCPEnabled)
00a1e2   bdf4     btfsc	0xf4, 0x6, 0x1     	BTFSC	(_AppConfig + 44), 6, B
00a1e4   d005     bra	0xa1f0               	BRA	_00107_DS_
                                           ;	.line	178; TCPIP_Stack/StackTsk.c	DHCPDisable(0);  
00a1e6   0e00     movlw	0                  	MOVLW	0x00
00a1e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a1ea   ec23     call	0xaa46, 0           	CALL	_DHCPDisable
00a1ec   f055
00a1ee   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00107_DS_:
00a1f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a1f2   f003
00a1f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a1f6   f002
00a1f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a1fa   f001
00a1fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a1fe   f000
00a200   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a202   ffd9
00a204   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1098 (0x044a) bytes ( 0.84%)
                                           ;           	  549 (0x0225) words
                                           ; udata size:	   19 (0x0013) bytes ( 0.49%)
                                           ; access size:	   17 (0x0011) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:56 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:56 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _TickInit
                                           	global _TickGet
                                           	global _TickGetDiv256
                                           	global _TickGetDiv64K
                                           	global _TickConvertToMilliseconds
                                           	global _TickUpdate
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _dwInternalTicks	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_Tick_0	udata
                                           _vTickReading	res	6
                                           
                                           udata_Tick_1	udata
                                           _TickGetDiv256_ret_1_1	res	4
                                           
                                           udata_Tick_2	udata
                                           _TickGetDiv64K_ret_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Tick__TickUpdate	code
                                           _TickUpdate:
                                           ;	.line	356; TCPIP_Stack/Tick.c	void TickUpdate(void)
00ad66   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ad68   ffe5
00ad6a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ad6c   ffd9
                                           ;	.line	358; TCPIP_Stack/Tick.c	if(INTCONbits.TMR0IF)
00ad6e   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
00ad70   d00c     bra	0xad8a               	BRA	_00143_DS_
00ad72   010e     movlb	0xe                	BANKSEL	_dwInternalTicks
                                           ;	.line	361; TCPIP_Stack/Tick.c	dwInternalTicks++;
00ad74   2b56     incf	0x56, 0x1, 0x1      	INCF	_dwInternalTicks, F, B
00ad76   e302     bnc	0xad7c               	BNC	_10141_DS_
00ad78   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 1)
00ad7a   2b57     incf	0x57, 0x1, 0x1      	INCF	(_dwInternalTicks + 1), F, B
                                           _10141_DS_:
00ad7c   e302     bnc	0xad82               	BNC	_20142_DS_
00ad7e   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 2)
00ad80   2b58     incf	0x58, 0x1, 0x1      	INCF	(_dwInternalTicks + 2), F, B
                                           _20142_DS_:
00ad82   e302     bnc	0xad88               	BNC	_30143_DS_
00ad84   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 3)
00ad86   2b59     incf	0x59, 0x1, 0x1      	INCF	(_dwInternalTicks + 3), F, B
                                           _30143_DS_:
                                           ;	.line	364; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;
00ad88   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00143_DS_:
00ad8a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ad8c   ffd9
00ad8e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickConvertToMilliseconds	code
                                           _TickConvertToMilliseconds:
                                           ;	.line	333; TCPIP_Stack/Tick.c	DWORD TickConvertToMilliseconds(DWORD dwTickValue)
009bae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009bb0   ffe5
009bb2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009bb4   ffd9
009bb6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009bb8   ffe5
009bba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009bbc   ffe5
009bbe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009bc0   ffe5
009bc2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009bc4   ffe5
009bc6   0e02     movlw	0x2                	MOVLW	0x02
009bc8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009bca   f000
009bcc   0e03     movlw	0x3                	MOVLW	0x03
009bce   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009bd0   f001
009bd2   0e04     movlw	0x4                	MOVLW	0x04
009bd4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009bd6   f002
009bd8   0e05     movlw	0x5                	MOVLW	0x05
009bda   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009bdc   f003
                                           ;	.line	335; TCPIP_Stack/Tick.c	return (dwTickValue+(TICKS_PER_SECOND/2000ul))/((DWORD)(TICKS_PER_SECOND/1000ul));
009bde   0e14     movlw	0x14               	MOVLW	0x14
009be0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009be2   0e00     movlw	0                  	MOVLW	0x00
009be4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009be6   0e00     movlw	0                  	MOVLW	0x00
009be8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
009bea   0e00     movlw	0                  	MOVLW	0x00
009bec   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
009bee   0e00     movlw	0                  	MOVLW	0x00
009bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009bf2   0e00     movlw	0                  	MOVLW	0x00
009bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009bf6   0e00     movlw	0                  	MOVLW	0x00
009bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009bfa   0e28     movlw	0x28               	MOVLW	0x28
009bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009bfe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009c04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c06   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009c08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
009c0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c0e   ec7b     call	0x82f6, 0           	CALL	__divulong
009c10   f041
009c12   6e00     movwf	0, 0               	MOVWF	r0x00
009c14   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
009c16   f001
009c18   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
009c1a   f002
009c1c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
009c1e   f003
009c20   0e08     movlw	0x8                	MOVLW	0x08
009c22   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009c24   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
009c26   ffe9
009c28   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
009c2a   fff4
009c2c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
009c2e   fff3
009c30   5000     movf	0, 0, 0             	MOVF	r0x00, W
009c32   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009c34   f003
009c36   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009c38   f002
009c3a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009c3c   f001
009c3e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009c40   f000
009c42   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009c44   ffd9
009c46   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv64K	code
                                           _TickGetDiv64K:
                                           ;	.line	292; TCPIP_Stack/Tick.c	DWORD TickGetDiv64K(void)
00abac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00abae   ffe5
00abb0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00abb2   ffd9
                                           ;	.line	296; TCPIP_Stack/Tick.c	GetTickCopy();
00abb4   ec6f     call	0xaade, 0           	CALL	_GetTickCopy
00abb6   f055
00abb8   010b     movlb	0xb                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	297; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[2];	// Note: This copy must be done one 
00abba   519a     movf	0x9a, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
00abbc   010b     movlb	0xb                	BANKSEL	_TickGetDiv64K_ret_1_1
00abbe   6fda     movwf	0xda, 0x1          	MOVWF	_TickGetDiv64K_ret_1_1, B
00abc0   010b     movlb	0xb                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	298; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[3];	// byte at a time to prevent misaligned 
00abc2   519b     movf	0x9b, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
00abc4   010b     movlb	0xb                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 1)
00abc6   6fdb     movwf	0xdb, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 1), B
00abc8   010b     movlb	0xb                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	299; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[4];	// memory reads, which will reset the PIC.
00abca   519c     movf	0x9c, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
00abcc   010b     movlb	0xb                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 2)
00abce   6fdc     movwf	0xdc, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 2), B
00abd0   010b     movlb	0xb                	BANKSEL	(_vTickReading + 5)
                                           ;	.line	300; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[5];
00abd2   519d     movf	0x9d, 0, 0x1        	MOVF	(_vTickReading + 5), W, B
00abd4   010b     movlb	0xb                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 3)
00abd6   6fdd     movwf	0xdd, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 3), B
                                           ;	.line	302; TCPIP_Stack/Tick.c	return ret.Val;
00abd8   cbdd     movff	0xbdd, 0xfe9       	MOVFF	(_TickGetDiv64K_ret_1_1 + 3), FSR0L
00abda   ffe9
00abdc   cbdc     movff	0xbdc, 0xff4       	MOVFF	(_TickGetDiv64K_ret_1_1 + 2), PRODH
00abde   fff4
00abe0   cbdb     movff	0xbdb, 0xff3       	MOVFF	(_TickGetDiv64K_ret_1_1 + 1), PRODL
00abe2   fff3
00abe4   010b     movlb	0xb                	BANKSEL	_TickGetDiv64K_ret_1_1
00abe6   51da     movf	0xda, 0, 0x1        	MOVF	_TickGetDiv64K_ret_1_1, W, B
00abe8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00abea   ffd9
00abec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv256	code
                                           _TickGetDiv256:
                                           ;	.line	255; TCPIP_Stack/Tick.c	DWORD TickGetDiv256(void)
00abee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00abf0   ffe5
00abf2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00abf4   ffd9
                                           ;	.line	259; TCPIP_Stack/Tick.c	GetTickCopy();
00abf6   ec6f     call	0xaade, 0           	CALL	_GetTickCopy
00abf8   f055
00abfa   010b     movlb	0xb                	BANKSEL	(_vTickReading + 1)
                                           ;	.line	260; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[1];	// Note: This copy must be done one 
00abfc   5199     movf	0x99, 0, 0x1        	MOVF	(_vTickReading + 1), W, B
00abfe   010b     movlb	0xb                	BANKSEL	_TickGetDiv256_ret_1_1
00ac00   6fd6     movwf	0xd6, 0x1          	MOVWF	_TickGetDiv256_ret_1_1, B
00ac02   010b     movlb	0xb                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	261; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[2];	// byte at a time to prevent misaligned 
00ac04   519a     movf	0x9a, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
00ac06   010b     movlb	0xb                	BANKSEL	(_TickGetDiv256_ret_1_1 + 1)
00ac08   6fd7     movwf	0xd7, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 1), B
00ac0a   010b     movlb	0xb                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	262; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[3];	// memory reads, which will reset the PIC.
00ac0c   519b     movf	0x9b, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
00ac0e   010b     movlb	0xb                	BANKSEL	(_TickGetDiv256_ret_1_1 + 2)
00ac10   6fd8     movwf	0xd8, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 2), B
00ac12   010b     movlb	0xb                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	263; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[4];
00ac14   519c     movf	0x9c, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
00ac16   010b     movlb	0xb                	BANKSEL	(_TickGetDiv256_ret_1_1 + 3)
00ac18   6fd9     movwf	0xd9, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 3), B
                                           ;	.line	265; TCPIP_Stack/Tick.c	return ret.Val;
00ac1a   cbd9     movff	0xbd9, 0xfe9       	MOVFF	(_TickGetDiv256_ret_1_1 + 3), FSR0L
00ac1c   ffe9
00ac1e   cbd8     movff	0xbd8, 0xff4       	MOVFF	(_TickGetDiv256_ret_1_1 + 2), PRODH
00ac20   fff4
00ac22   cbd7     movff	0xbd7, 0xff3       	MOVFF	(_TickGetDiv256_ret_1_1 + 1), PRODL
00ac24   fff3
00ac26   010b     movlb	0xb                	BANKSEL	_TickGetDiv256_ret_1_1
00ac28   51d6     movf	0xd6, 0, 0x1        	MOVF	_TickGetDiv256_ret_1_1, W, B
00ac2a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ac2c   ffd9
00ac2e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGet	code
                                           _TickGet:
                                           ;	.line	225; TCPIP_Stack/Tick.c	DWORD TickGet(void)
00ae02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ae04   ffe5
00ae06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ae08   ffd9
                                           ;	.line	227; TCPIP_Stack/Tick.c	GetTickCopy();
00ae0a   ec6f     call	0xaade, 0           	CALL	_GetTickCopy
00ae0c   f055
                                           ;	.line	228; TCPIP_Stack/Tick.c	return *((DWORD*)&vTickReading[0]);
00ae0e   cb9b     movff	0xb9b, 0xfe9       	MOVFF	(_vTickReading + 3), FSR0L
00ae10   ffe9
00ae12   cb9a     movff	0xb9a, 0xff4       	MOVFF	(_vTickReading + 2), PRODH
00ae14   fff4
00ae16   cb99     movff	0xb99, 0xff3       	MOVFF	(_vTickReading + 1), PRODL
00ae18   fff3
00ae1a   010b     movlb	0xb                	BANKSEL	_vTickReading
00ae1c   5198     movf	0x98, 0, 0x1        	MOVF	_vTickReading, W, B
00ae1e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ae20   ffd9
00ae22   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__GetTickCopy	code
                                           _GetTickCopy:
                                           ;	.line	157; TCPIP_Stack/Tick.c	static void GetTickCopy(void)
00aade   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aae0   ffe5
00aae2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aae4   ffd9
                                           _00113_DS_:
                                           ;	.line	164; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
00aae6   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
00aae8   0000     nop                      	nop 
                                           ;	.line	166; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 0;		// Disable interrupt
00aaea   9af2     bcf	0xf2, 0x5, 0         	BCF	_INTCONbits, 5
                                           ;	.line	167; TCPIP_Stack/Tick.c	vTickReading[0] = TMR0L;
00aaec   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
00aaee   010b     movlb	0xb                	BANKSEL	_vTickReading
00aaf0   6f98     movwf	0x98, 0x1          	MOVWF	_vTickReading, B
                                           ;	.line	168; TCPIP_Stack/Tick.c	vTickReading[1] = TMR0H;
00aaf2   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
00aaf4   010b     movlb	0xb                	BANKSEL	(_vTickReading + 1)
00aaf6   6f99     movwf	0x99, 0x1          	MOVWF	(_vTickReading + 1), B
00aaf8   010e     movlb	0xe                	BANKSEL	_dwInternalTicks
                                           ;	.line	169; TCPIP_Stack/Tick.c	*((DWORD*)&vTickReading[2]) = dwInternalTicks;
00aafa   5156     movf	0x56, 0, 0x1        	MOVF	_dwInternalTicks, W, B
00aafc   010b     movlb	0xb                	BANKSEL	(_vTickReading + 2)
00aafe   6f9a     movwf	0x9a, 0x1          	MOVWF	(_vTickReading + 2), B
00ab00   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 1)
00ab02   5157     movf	0x57, 0, 0x1        	MOVF	(_dwInternalTicks + 1), W, B
00ab04   010b     movlb	0xb                	BANKSEL	(_vTickReading + 3)
00ab06   6f9b     movwf	0x9b, 0x1          	MOVWF	(_vTickReading + 3), B
00ab08   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 2)
00ab0a   5158     movf	0x58, 0, 0x1        	MOVF	(_dwInternalTicks + 2), W, B
00ab0c   010b     movlb	0xb                	BANKSEL	(_vTickReading + 4)
00ab0e   6f9c     movwf	0x9c, 0x1          	MOVWF	(_vTickReading + 4), B
00ab10   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 3)
00ab12   5159     movf	0x59, 0, 0x1        	MOVF	(_dwInternalTicks + 3), W, B
00ab14   010b     movlb	0xb                	BANKSEL	(_vTickReading + 5)
00ab16   6f9d     movwf	0x9d, 0x1          	MOVWF	(_vTickReading + 5), B
                                           ;	.line	170; TCPIP_Stack/Tick.c	} while(INTCONbits.TMR0IF);
00ab18   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
00ab1a   d7e5     bra	0xaae6               	BRA	_00113_DS_
                                           ;	.line	171; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;			// Enable interrupt
00ab1c   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
00ab1e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ab20   ffd9
00ab22   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickInit	code
                                           _TickInit:
                                           ;	.line	97; TCPIP_Stack/Tick.c	void TickInit(void)
00af3a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00af3c   ffe5
00af3e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00af40   ffd9
                                           ;	.line	102; TCPIP_Stack/Tick.c	TMR0H = 0;
00af42   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	103; TCPIP_Stack/Tick.c	TMR0L = 0;
00af44   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	106; TCPIP_Stack/Tick.c	INTCON2bits.TMR0IP = 0;		// Low priority
00af46   94f1     bcf	0xf1, 0x2, 0         	BCF	_INTCON2bits, 2
                                           ;	.line	107; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;          //reset overflow indicator
00af48   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
00af4a   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	111; TCPIP_Stack/Tick.c	T0CON = 0x87;
00af4c   0e87     movlw	0x87               	MOVLW	0x87
00af4e   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
00af50   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00af52   ffd9
00af54   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  460 (0x01cc) bytes ( 0.35%)
                                           ;           	  230 (0x00e6) words
                                           ; udata size:	   14 (0x000e) bytes ( 0.36%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Fri May  9 05:20:56 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _UDPInit
                                           	global _UDPTask
                                           	global _UDPOpen
                                           	global _UDPClose
                                           	global _UDPSetTxBuffer
                                           	global _UDPSetRxBuffer
                                           	global _UDPIsPutReady
                                           	global _UDPPut
                                           	global _UDPPutArray
                                           	global _UDPPutString
                                           	global _UDPFlush
                                           	global _UDPIsGetReady
                                           	global _UDPGet
                                           	global _UDPGetArray
                                           	global _UDPDiscard
                                           	global _UDPProcess
                                           	global _UDPSocketInfo
                                           	global _activeUDPSocket
                                           	global _UDPTxCount
                                           	global _UDPRxCount
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _CalcIPBufferChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACSetReadPtr
                                           	extern _MACGet
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACIsTxReady
                                           	extern _MACPut
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           	extern _IPSetRxBuffer
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _LastPutSocket	db	0xff
                                           _SocketWithRxData	db	0xff
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           
                                           udata_UDP_0	udata
                                           _wPutOffset	res	2
                                           
                                           udata_UDP_1	udata
                                           _wGetOffset	res	2
                                           
                                           udata_UDP_2	udata
                                           _Flags	res	1
                                           
                                           udata_UDP_3	udata
                                           _UDPOpen_NextPort_1_1	res	2
                                           
                                           udata_UDP_4	udata
                                           _activeUDPSocket	res	1
                                           
                                           udata_UDP_5	udata
                                           _UDPSocketInfo	res	140
                                           
                                           udata_UDP_6	udata
                                           _UDPTxCount	res	2
                                           
                                           udata_UDP_7	udata
                                           _UDPFlush_wChecksum_1_1	res	2
                                           
                                           udata_UDP_8	udata
                                           _UDPFlush_h_1_1	res	8
                                           
                                           udata_UDP_9	udata
                                           _UDPFlush_pseudoHeader_2_2	res	12
                                           
                                           udata_UDP_10	udata
                                           _UDPRxCount	res	2
                                           
                                           udata_UDP_11	udata
                                           _UDPProcess_h_1_1	res	8
                                           
                                           udata_UDP_12	udata
                                           _UDPProcess_pseudoHeader_1_1	res	12
                                           
                                           udata_UDP_13	udata
                                           _UDPProcess_checksums_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_UDP__FindMatchingSocket	code
                                           _FindMatchingSocket:
                                           ;	.line	1017; TCPIP_Stack/UDP.c	static UDP_SOCKET FindMatchingSocket(UDP_HEADER *h,
00220e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002210   ffe5
002212   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002214   ffd9
002216   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002218   ffe5
00221a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00221c   ffe5
00221e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002220   ffe5
002222   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002224   ffe5
002226   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002228   ffe5
00222a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00222c   ffe5
00222e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002230   ffe5
002232   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002234   ffe5
002236   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002238   ffe5
00223a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00223c   ffe5
00223e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002240   ffe5
002242   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002244   ffe5
002246   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002248   ffe5
00224a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00224c   ffe5
00224e   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002250   ffe5
002252   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002254   ffe5
002256   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002258   ffe5
00225a   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00225c   ffe5
00225e   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002260   ffe5
002262   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002264   ffe5
002266   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
002268   ffe5
00226a   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00226c   ffe5
00226e   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
002270   ffe5
002272   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
002274   ffe5
002276   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
002278   ffe5
00227a   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
00227c   ffe5
00227e   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
002280   ffe5
002282   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
002284   ffe5
002286   0e02     movlw	0x2                	MOVLW	0x02
002288   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00228a   f000
00228c   0e03     movlw	0x3                	MOVLW	0x03
00228e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002290   f001
002292   0e04     movlw	0x4                	MOVLW	0x04
002294   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002296   f002
002298   0e05     movlw	0x5                	MOVLW	0x05
00229a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00229c   f003
00229e   0e06     movlw	0x6                	MOVLW	0x06
0022a0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0022a2   f004
0022a4   0e07     movlw	0x7                	MOVLW	0x07
0022a6   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0022a8   f005
0022aa   0e08     movlw	0x8                	MOVLW	0x08
0022ac   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0022ae   f006
0022b0   0e09     movlw	0x9                	MOVLW	0x09
0022b2   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0022b4   f007
0022b6   0e0a     movlw	0xa                	MOVLW	0x0a
0022b8   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0022ba   f008
                                           ;	.line	1025; TCPIP_Stack/UDP.c	partialMatch = INVALID_UDP_SOCKET;
0022bc   0eff     movlw	0xff               	MOVLW	0xff
0022be   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	1027; TCPIP_Stack/UDP.c	p = UDPSocketInfo;
0022c0   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0022c2   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0022c4   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0022c6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0022c8   0e80     movlw	0x80               	MOVLW	0x80
0022ca   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
0022cc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0022ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0022d0   0f02     addlw	0x2                	ADDLW	0x02
0022d2   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0022d4   0e00     movlw	0                  	MOVLW	0x00
0022d6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0022d8   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0022da   0e00     movlw	0                  	MOVLW	0x00
0022dc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0022de   6e10     movwf	0x10, 0            	MOVWF	r0x10
0022e0   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
0022e2   ffe9
0022e4   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
0022e6   fff3
0022e8   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0022ea   ec88     call	0xad10, 0           	CALL	__gptrget2
0022ec   f056
0022ee   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0022f0   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
0022f2   f00f
0022f4   c00a     movff	0xa, 0x10          	MOVFF	r0x0a, r0x10
0022f6   f010
0022f8   c00b     movff	0xb, 0x11          	MOVFF	r0x0b, r0x11
0022fa   f011
0022fc   c00c     movff	0xc, 0x12          	MOVFF	r0x0c, r0x12
0022fe   f012
002300   6a13     clrf	0x13, 0             	CLRF	r0x13
                                           _00306_DS_:
002302   c013     movff	0x13, 0x14         	MOVFF	r0x13, r0x14
002304   f014
002306   6a15     clrf	0x15, 0             	CLRF	r0x15
002308   0e00     movlw	0                  	MOVLW	0x00
00230a   5c15     subwf	0x15, 0, 0         	SUBWF	r0x15, W
00230c   e102     bnz	0x2312               	BNZ	_00319_DS_
00230e   0e0a     movlw	0xa                	MOVLW	0x0a
002310   5c14     subwf	0x14, 0, 0         	SUBWF	r0x14, W
                                           _00319_DS_:
002312   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002314   d0b4     bra	0x247e               	BRA	_00309_DS_
                                           ;	.line	1035; TCPIP_Stack/UDP.c	if ( p->localPort == h->DestinationPort )
002316   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002318   0f0c     addlw	0xc                	ADDLW	0x0c
00231a   6e14     movwf	0x14, 0            	MOVWF	r0x14
00231c   0e00     movlw	0                  	MOVLW	0x00
00231e   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
002320   6e15     movwf	0x15, 0            	MOVWF	r0x15
002322   0e00     movlw	0                  	MOVLW	0x00
002324   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
002326   6e16     movwf	0x16, 0            	MOVWF	r0x16
002328   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
00232a   ffe9
00232c   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
00232e   fff3
002330   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002332   ec88     call	0xad10, 0           	CALL	__gptrget2
002334   f056
002336   6e14     movwf	0x14, 0            	MOVWF	r0x14
002338   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00233a   f015
00233c   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00233e   180e     xorwf	0xe, 0, 0          	XORWF	r0x0e, W
002340   e103     bnz	0x2348               	BNZ	_00320_DS_
002342   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002344   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
002346   e001     bz	0x234a                	BZ	_00321_DS_
                                           _00320_DS_:
002348   d090     bra	0x246a               	BRA	_00303_DS_
                                           _00321_DS_:
                                           ;	.line	1037; TCPIP_Stack/UDP.c	if(p->remotePort == h->SourcePort)
00234a   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00234c   0f0a     addlw	0xa                	ADDLW	0x0a
00234e   6e14     movwf	0x14, 0            	MOVWF	r0x14
002350   0e00     movlw	0                  	MOVLW	0x00
002352   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
002354   6e15     movwf	0x15, 0            	MOVWF	r0x15
002356   0e00     movlw	0                  	MOVLW	0x00
002358   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
00235a   6e16     movwf	0x16, 0            	MOVWF	r0x16
00235c   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
00235e   ffe9
002360   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
002362   fff3
002364   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002366   ec88     call	0xad10, 0           	CALL	__gptrget2
002368   f056
00236a   6e14     movwf	0x14, 0            	MOVWF	r0x14
00236c   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00236e   f015
002370   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002372   ffe9
002374   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002376   fff3
002378   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00237a   ec88     call	0xad10, 0           	CALL	__gptrget2
00237c   f056
00237e   6e16     movwf	0x16, 0            	MOVWF	r0x16
002380   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002382   f017
002384   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002386   1816     xorwf	0x16, 0, 0         	XORWF	r0x16, W
002388   e103     bnz	0x2390               	BNZ	_00322_DS_
00238a   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00238c   1817     xorwf	0x17, 0, 0         	XORWF	r0x17, W
00238e   e001     bz	0x2392                	BZ	_00323_DS_
                                           _00322_DS_:
002390   d06a     bra	0x2466               	BRA	_00301_DS_
                                           _00323_DS_:
                                           ;	.line	1039; TCPIP_Stack/UDP.c	if( (p->remoteNode.IPAddr.Val == remoteNode->IPAddr.Val) ||
002392   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
002394   ffe9
002396   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
002398   fff3
00239a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00239c   ec18     call	0xac30, 0           	CALL	__gptrget4
00239e   f056
0023a0   6e14     movwf	0x14, 0            	MOVWF	r0x14
0023a2   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0023a4   f015
0023a6   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
0023a8   f016
0023aa   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
0023ac   f017
0023ae   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0023b0   ffe9
0023b2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0023b4   fff3
0023b6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023b8   ec18     call	0xac30, 0           	CALL	__gptrget4
0023ba   f056
0023bc   6e18     movwf	0x18, 0            	MOVWF	r0x18
0023be   cff3     movff	0xff3, 0x19        	MOVFF	PRODL, r0x19
0023c0   f019
0023c2   cff4     movff	0xff4, 0x1a        	MOVFF	PRODH, r0x1a
0023c4   f01a
0023c6   cfe9     movff	0xfe9, 0x1b        	MOVFF	FSR0L, r0x1b
0023c8   f01b
0023ca   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0023cc   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
0023ce   e10a     bnz	0x23e4               	BNZ	_00325_DS_
0023d0   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0023d2   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
0023d4   e107     bnz	0x23e4               	BNZ	_00325_DS_
0023d6   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0023d8   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
0023da   e104     bnz	0x23e4               	BNZ	_00325_DS_
0023dc   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
0023de   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
0023e0   e101     bnz	0x23e4               	BNZ	_00325_DS_
0023e2   d03f     bra	0x2462               	BRA	_00296_DS_
                                           _00325_DS_:
                                           ;	.line	1040; TCPIP_Stack/UDP.c	(localIP->Val == 0xFFFFFFFFul) || (localIP->Val == 
0023e4   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0023e6   ffe9
0023e8   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0023ea   fff3
0023ec   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0023ee   ec18     call	0xac30, 0           	CALL	__gptrget4
0023f0   f056
0023f2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0023f4   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0023f6   f015
0023f8   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
0023fa   f016
0023fc   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
0023fe   f017
002400   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002402   0aff     xorlw	0xff               	XORLW	0xff
002404   e109     bnz	0x2418               	BNZ	_00327_DS_
002406   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002408   0aff     xorlw	0xff               	XORLW	0xff
00240a   e106     bnz	0x2418               	BNZ	_00327_DS_
00240c   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
00240e   0aff     xorlw	0xff               	XORLW	0xff
002410   e103     bnz	0x2418               	BNZ	_00327_DS_
002412   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
002414   0aff     xorlw	0xff               	XORLW	0xff
002416   e025     bz	0x2462                	BZ	_00296_DS_
                                           _00327_DS_:
002418   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1041; TCPIP_Stack/UDP.c	(AppConfig.MyIPAddr.Val | (~AppConfig.MyMask.Val))))
00241a   1dcc     comf	0xcc, 0, 0x1        	COMF	(_AppConfig + 4), W, B
00241c   6e18     movwf	0x18, 0            	MOVWF	r0x18
00241e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
002420   1dcd     comf	0xcd, 0, 0x1        	COMF	(_AppConfig + 5), W, B
002422   6e19     movwf	0x19, 0            	MOVWF	r0x19
002424   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
002426   1dce     comf	0xce, 0, 0x1        	COMF	(_AppConfig + 6), W, B
002428   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
00242a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
00242c   1dcf     comf	0xcf, 0, 0x1        	COMF	(_AppConfig + 7), W, B
00242e   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
002430   0108     movlb	0x8                	BANKSEL	_AppConfig
002432   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
002434   1218     iorwf	0x18, 0x1, 0       	IORWF	r0x18, F
002436   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
002438   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
00243a   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x19, F
00243c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
00243e   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
002440   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x1a, F
002442   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
002444   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
002446   121b     iorwf	0x1b, 0x1, 0       	IORWF	r0x1b, F
002448   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00244a   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
00244c   e109     bnz	0x2460               	BNZ	_00329_DS_
00244e   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002450   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
002452   e106     bnz	0x2460               	BNZ	_00329_DS_
002454   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002456   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
002458   e103     bnz	0x2460               	BNZ	_00329_DS_
00245a   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00245c   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
00245e   e001     bz	0x2462                	BZ	_00296_DS_
                                           _00329_DS_:
002460   d002     bra	0x2466               	BRA	_00301_DS_
                                           _00296_DS_:
                                           ;	.line	1043; TCPIP_Stack/UDP.c	return s;
002462   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002464   d054     bra	0x250e               	BRA	_00310_DS_
                                           _00301_DS_:
                                           ;	.line	1047; TCPIP_Stack/UDP.c	partialMatch = s;
002466   c013     movff	0x13, 0x9          	MOVFF	r0x13, r0x09
002468   f009
                                           _00303_DS_:
                                           ;	.line	1049; TCPIP_Stack/UDP.c	p++;
00246a   0e0e     movlw	0xe                	MOVLW	0x0e
00246c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
00246e   0e00     movlw	0                  	MOVLW	0x00
002470   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
002472   0e00     movlw	0                  	MOVLW	0x00
002474   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x12, F
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
002476   2a13     incf	0x13, 0x1, 0        	INCF	r0x13, F
002478   c013     movff	0x13, 0xd          	MOVFF	r0x13, r0x0d
00247a   f00d
00247c   d742     bra	0x2302               	BRA	_00306_DS_
                                           _00309_DS_:
                                           ;	.line	1052; TCPIP_Stack/UDP.c	if ( partialMatch != INVALID_UDP_SOCKET )
00247e   c009     movff	0x9, 0x6           	MOVFF	r0x09, r0x06
002480   f006
002482   6a07     clrf	0x7, 0              	CLRF	r0x07
002484   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002486   0aff     xorlw	0xff               	XORLW	0xff
002488   e103     bnz	0x2490               	BNZ	_00332_DS_
00248a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00248c   e101     bnz	0x2490               	BNZ	_00332_DS_
00248e   d03e     bra	0x250c               	BRA	_00305_DS_
                                           ; ;multiply lit val:0x0e by variable r0x09 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00332_DS_:
                                           ;	.line	1054; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[partialMatch];
002490   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002492   0d0e     mullw	0xe                	MULLW	0x0e
002494   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002496   f006
002498   6a07     clrf	0x7, 0              	CLRF	r0x07
00249a   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00249c   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
00249e   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0024a0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0024a2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0024a4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0024a6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0024a8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0024aa   0e80     movlw	0x80               	MOVLW	0x80
0024ac   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1057; TCPIP_Stack/UDP.c	(void*)remoteNode, sizeof(p->remoteNode) );
0024ae   0e00     movlw	0                  	MOVLW	0x00
0024b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b2   0e0a     movlw	0xa                	MOVLW	0x0a
0024b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024b6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0024bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0024c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0024c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024c6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0024c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ca   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0024cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ce   ecd1     call	0x8ba2, 0           	CALL	_memcpy
0024d0   f045
0024d2   0e08     movlw	0x8                	MOVLW	0x08
0024d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1059; TCPIP_Stack/UDP.c	p->remotePort = h->SourcePort;
0024d6   0e0a     movlw	0xa                	MOVLW	0x0a
0024d8   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
0024da   0e00     movlw	0                  	MOVLW	0x00
0024dc   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
0024de   0e00     movlw	0                  	MOVLW	0x00
0024e0   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0024e2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0024e4   ffe9
0024e6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0024e8   fff3
0024ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024ec   ec88     call	0xad10, 0           	CALL	__gptrget2
0024ee   f056
0024f0   6e00     movwf	0, 0               	MOVWF	r0x00
0024f2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0024f4   f001
0024f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024f8   ffe5
0024fa   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
0024fc   fff4
0024fe   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
002500   ffe9
002502   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
002504   fff3
002506   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002508   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
00250a   f057
                                           _00305_DS_:
                                           ;	.line	1061; TCPIP_Stack/UDP.c	return partialMatch;
00250c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
                                           _00310_DS_:
00250e   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
002510   f01b
002512   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
002514   f01a
002516   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
002518   f019
00251a   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
00251c   f018
00251e   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
002520   f017
002522   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
002524   f016
002526   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002528   f015
00252a   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00252c   f014
00252e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002530   f013
002532   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002534   f012
002536   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002538   f011
00253a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00253c   f010
00253e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002540   f00f
002542   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002544   f00e
002546   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002548   f00d
00254a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00254c   f00c
00254e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002550   f00b
002552   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002554   f00a
002556   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002558   f009
00255a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00255c   f008
00255e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002560   f007
002562   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002564   f006
002566   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002568   f005
00256a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00256c   f004
00256e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002570   f003
002572   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002574   f002
002576   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002578   f001
00257a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00257c   f000
00257e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002580   ffd9
002582   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPProcess	code
                                           _UDPProcess:
                                           ;	.line	929; TCPIP_Stack/UDP.c	BOOL UDPProcess(NODE_INFO *remoteNode, IP_ADDR *localIP, WORD len)
003f1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003f20   ffe5
003f22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003f24   ffd9
003f26   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003f28   ffe5
003f2a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003f2c   ffe5
003f2e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003f30   ffe5
003f32   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003f34   ffe5
003f36   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003f38   ffe5
003f3a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003f3c   ffe5
003f3e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003f40   ffe5
003f42   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003f44   ffe5
003f46   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003f48   ffe5
003f4a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003f4c   ffe5
003f4e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003f50   ffe5
003f52   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003f54   ffe5
003f56   0e02     movlw	0x2                	MOVLW	0x02
003f58   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003f5a   f000
003f5c   0e03     movlw	0x3                	MOVLW	0x03
003f5e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003f60   f001
003f62   0e04     movlw	0x4                	MOVLW	0x04
003f64   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003f66   f002
003f68   0e05     movlw	0x5                	MOVLW	0x05
003f6a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003f6c   f003
003f6e   0e06     movlw	0x6                	MOVLW	0x06
003f70   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003f72   f004
003f74   0e07     movlw	0x7                	MOVLW	0x07
003f76   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003f78   f005
003f7a   0e08     movlw	0x8                	MOVLW	0x08
003f7c   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003f7e   f006
003f80   0e09     movlw	0x9                	MOVLW	0x09
003f82   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003f84   f007
003f86   0102     movlb	0x2                	BANKSEL	_UDPRxCount
                                           ;	.line	936; TCPIP_Stack/UDP.c	UDPRxCount = 0;
003f88   6b36     clrf	0x36, 0x1           	CLRF	_UDPRxCount, B
003f8a   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
003f8c   6b37     clrf	0x37, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	939; TCPIP_Stack/UDP.c	MACGetArray((BYTE*)&h, sizeof(h));
003f8e   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPProcess_h_1_1)
003f90   6e09     movwf	0x9, 0             	MOVWF	r0x09
003f92   0e7e     movlw	0x7e               	MOVLW	LOW(_UDPProcess_h_1_1)
003f94   6e08     movwf	0x8, 0             	MOVWF	r0x08
003f96   0e80     movlw	0x80               	MOVLW	0x80
003f98   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003f9a   0e00     movlw	0                  	MOVLW	0x00
003f9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f9e   0e08     movlw	0x8                	MOVLW	0x08
003fa0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fa2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003fa4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fa6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003fa8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003faa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003fac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fae   ec20     call	0x9240, 0           	CALL	_MACGetArray
003fb0   f049
003fb2   0e05     movlw	0x5                	MOVLW	0x05
003fb4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003fb6   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 1)
                                           ;	.line	941; TCPIP_Stack/UDP.c	h.SourcePort        = swaps(h.SourcePort);
003fb8   517f     movf	0x7f, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 1), W, B
003fba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fbc   010b     movlb	0xb                	BANKSEL	_UDPProcess_h_1_1
003fbe   517e     movf	0x7e, 0, 0x1        	MOVF	_UDPProcess_h_1_1, W, B
003fc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fc2   ec81     call	0xa902, 0           	CALL	_swaps
003fc4   f054
003fc6   6e08     movwf	0x8, 0             	MOVWF	r0x08
003fc8   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
003fca   f009
003fcc   0e02     movlw	0x2                	MOVLW	0x02
003fce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003fd0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003fd2   010b     movlb	0xb                	BANKSEL	_UDPProcess_h_1_1
003fd4   6f7e     movwf	0x7e, 0x1          	MOVWF	_UDPProcess_h_1_1, B
003fd6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003fd8   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 1)
003fda   6f7f     movwf	0x7f, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 1), B
003fdc   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 3)
                                           ;	.line	942; TCPIP_Stack/UDP.c	h.DestinationPort   = swaps(h.DestinationPort);
003fde   5181     movf	0x81, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 3), W, B
003fe0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fe2   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 2)
003fe4   5180     movf	0x80, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 2), W, B
003fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fe8   ec81     call	0xa902, 0           	CALL	_swaps
003fea   f054
003fec   6e08     movwf	0x8, 0             	MOVWF	r0x08
003fee   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
003ff0   f009
003ff2   0e02     movlw	0x2                	MOVLW	0x02
003ff4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003ff6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003ff8   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 2)
003ffa   6f80     movwf	0x80, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 2), B
003ffc   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003ffe   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 3)
004000   6f81     movwf	0x81, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 3), B
004002   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 5)
                                           ;	.line	943; TCPIP_Stack/UDP.c	h.Length            = swaps(h.Length) - sizeof(UDP_HEADER);
004004   5183     movf	0x83, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 5), W, B
004006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004008   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00400a   5182     movf	0x82, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 4), W, B
00400c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00400e   ec81     call	0xa902, 0           	CALL	_swaps
004010   f054
004012   6e08     movwf	0x8, 0             	MOVWF	r0x08
004014   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004016   f009
004018   0e02     movlw	0x2                	MOVLW	0x02
00401a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00401c   0ef8     movlw	0xf8               	MOVLW	0xf8
00401e   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
004020   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
004022   0609     decf	0x9, 0x1, 0         	DECF	r0x09, F
004024   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004026   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 4)
004028   6f82     movwf	0x82, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 4), B
00402a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00402c   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 5)
00402e   6f83     movwf	0x83, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 5), B
004030   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 6)
                                           ;	.line	946; TCPIP_Stack/UDP.c	if(h.Checksum)
004032   5184     movf	0x84, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 6), W, B
004034   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 7)
004036   1185     iorwf	0x85, 0, 0x1       	IORWF	(_UDPProcess_h_1_1 + 7), W, B
004038   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00403a   d096     bra	0x4168               	BRA	_00279_DS_
                                           ;	.line	949; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val	= remoteNode->IPAddr.Val;
00403c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00403e   ffe9
004040   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004042   fff3
004044   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004046   ec18     call	0xac30, 0           	CALL	__gptrget4
004048   f056
00404a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00404c   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00404e   f009
004050   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
004052   f00a
004054   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
004056   f00b
004058   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00405a   010b     movlb	0xb                	BANKSEL	_UDPProcess_pseudoHeader_1_1
00405c   6f44     movwf	0x44, 0x1          	MOVWF	_UDPProcess_pseudoHeader_1_1, B
00405e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004060   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 1)
004062   6f45     movwf	0x45, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 1), B
004064   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004066   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 2)
004068   6f46     movwf	0x46, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 2), B
00406a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00406c   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 3)
00406e   6f47     movwf	0x47, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 3), B
                                           ;	.line	950; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val	= localIP->Val;
004070   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004072   ffe9
004074   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004076   fff3
004078   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00407a   ec18     call	0xac30, 0           	CALL	__gptrget4
00407c   f056
00407e   6e08     movwf	0x8, 0             	MOVWF	r0x08
004080   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004082   f009
004084   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
004086   f00a
004088   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
00408a   f00b
00408c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00408e   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 4)
004090   6f48     movwf	0x48, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 4), B
004092   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004094   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 5)
004096   6f49     movwf	0x49, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 5), B
004098   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00409a   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 6)
00409c   6f4a     movwf	0x4a, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 6), B
00409e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0040a0   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 7)
0040a2   6f4b     movwf	0x4b, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 7), B
0040a4   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 8)
                                           ;	.line	951; TCPIP_Stack/UDP.c	pseudoHeader.Zero		= 0x0;
0040a6   6b4c     clrf	0x4c, 0x1           	CLRF	(_UDPProcess_pseudoHeader_1_1 + 8), B
                                           ;	.line	952; TCPIP_Stack/UDP.c	pseudoHeader.Protocol		= IP_PROT_UDP;
0040a8   0e11     movlw	0x11               	MOVLW	0x11
0040aa   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 9)
0040ac   6f4d     movwf	0x4d, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 9), B
                                           ;	.line	953; TCPIP_Stack/UDP.c	pseudoHeader.Length		= len;
0040ae   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0040b0   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0040b2   6f4e     movwf	0x4e, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0040b4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0040b6   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0040b8   6f4f     movwf	0x4f, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	955; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0040ba   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0040bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040be   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0040c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040c2   ec81     call	0xa902, 0           	CALL	_swaps
0040c4   f054
0040c6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0040c8   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0040ca   f009
0040cc   0e02     movlw	0x2                	MOVLW	0x02
0040ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0040d0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0040d2   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0040d4   6f4e     movwf	0x4e, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0040d6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0040d8   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0040da   6f4f     movwf	0x4f, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	957; TCPIP_Stack/UDP.c	checksums.w[0] = ~CalcIPChecksum((BYTE*)&pseudoHeader,
0040dc   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPProcess_pseudoHeader_1_1)
0040de   6e09     movwf	0x9, 0             	MOVWF	r0x09
0040e0   0e44     movlw	0x44               	MOVLW	LOW(_UDPProcess_pseudoHeader_1_1)
0040e2   6e08     movwf	0x8, 0             	MOVWF	r0x08
0040e4   0e80     movlw	0x80               	MOVLW	0x80
0040e6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	958; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0040e8   0e00     movlw	0                  	MOVLW	0x00
0040ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ec   0e0c     movlw	0xc                	MOVLW	0x0c
0040ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0040f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0040f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0040fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040fc   ec66     call	0x32cc, 0           	CALL	_CalcIPChecksum
0040fe   f019
004100   6e08     movwf	0x8, 0             	MOVWF	r0x08
004102   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004104   f009
004106   0e05     movlw	0x5                	MOVLW	0x05
004108   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00410a   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
00410c   1e09     comf	0x9, 0x1, 0         	COMF	r0x09, F
00410e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004110   010b     movlb	0xb                	BANKSEL	_UDPProcess_checksums_1_1
004112   6fde     movwf	0xde, 0x1          	MOVWF	_UDPProcess_checksums_1_1, B
004114   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004116   010b     movlb	0xb                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
004118   6fdf     movwf	0xdf, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 1), B
                                           ;	.line	963; TCPIP_Stack/UDP.c	IPSetRxBuffer(0);
00411a   0e00     movlw	0                  	MOVLW	0x00
00411c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00411e   0e00     movlw	0                  	MOVLW	0x00
004120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004122   ec00     call	0xa800, 0           	CALL	_IPSetRxBuffer
004124   f054
004126   0e02     movlw	0x2                	MOVLW	0x02
004128   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/UDP.c	checksums.w[1] = CalcIPBufferChecksum(len);
00412a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00412c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00412e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004132   ec6a     call	0x1ad4, 0           	CALL	_CalcIPBufferChecksum
004134   f00d
004136   6e06     movwf	0x6, 0             	MOVWF	r0x06
004138   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00413a   f007
00413c   0e02     movlw	0x2                	MOVLW	0x02
00413e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004140   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004142   010b     movlb	0xb                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
004144   6fe0     movwf	0xe0, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 2), B
004146   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004148   010b     movlb	0xb                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00414a   6fe1     movwf	0xe1, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 3), B
00414c   010b     movlb	0xb                	BANKSEL	_UDPProcess_checksums_1_1
                                           ;	.line	966; TCPIP_Stack/UDP.c	if(checksums.w[0] != checksums.w[1])
00414e   51de     movf	0xde, 0, 0x1        	MOVF	_UDPProcess_checksums_1_1, W, B
004150   010b     movlb	0xb                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
004152   19e0     xorwf	0xe0, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 2), W, B
004154   e105     bnz	0x4160               	BNZ	_00289_DS_
004156   010b     movlb	0xb                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
004158   51df     movf	0xdf, 0, 0x1        	MOVF	(_UDPProcess_checksums_1_1 + 1), W, B
00415a   010b     movlb	0xb                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00415c   19e1     xorwf	0xe1, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 3), W, B
00415e   e004     bz	0x4168                	BZ	_00279_DS_
                                           _00289_DS_:
                                           ;	.line	968; TCPIP_Stack/UDP.c	MACDiscardRx();
004160   ec9f     call	0x9f3e, 0           	CALL	_MACDiscardRx
004162   f04f
                                           ;	.line	969; TCPIP_Stack/UDP.c	return FALSE;
004164   6ae8     clrf	0xe8, 0             	CLRF	WREG
004166   d035     bra	0x41d2               	BRA	_00283_DS_
                                           _00279_DS_:
                                           ;	.line	973; TCPIP_Stack/UDP.c	s = FindMatchingSocket(&h, remoteNode, localIP);
004168   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPProcess_h_1_1)
00416a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00416c   0e7e     movlw	0x7e               	MOVLW	LOW(_UDPProcess_h_1_1)
00416e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004170   0e80     movlw	0x80               	MOVLW	0x80
004172   6e08     movwf	0x8, 0             	MOVWF	r0x08
004174   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004178   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00417a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00417c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00417e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004180   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004182   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004184   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004186   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004188   5000     movf	0, 0, 0             	MOVF	r0x00, W
00418a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00418c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00418e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004190   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004192   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004194   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004198   ec07     call	0x220e, 0           	CALL	_FindMatchingSocket
00419a   f011
00419c   6e00     movwf	0, 0               	MOVWF	r0x00
00419e   0e09     movlw	0x9                	MOVLW	0x09
0041a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	974; TCPIP_Stack/UDP.c	if(s == INVALID_UDP_SOCKET)
0041a2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0041a4   f001
0041a6   6a02     clrf	0x2, 0              	CLRF	r0x02
0041a8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0041aa   0aff     xorlw	0xff               	XORLW	0xff
0041ac   e102     bnz	0x41b2               	BNZ	_00290_DS_
0041ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0041b0   e001     bz	0x41b4                	BZ	_00291_DS_
                                           _00290_DS_:
0041b2   d004     bra	0x41bc               	BRA	_00281_DS_
                                           _00291_DS_:
                                           ;	.line	978; TCPIP_Stack/UDP.c	MACDiscardRx();
0041b4   ec9f     call	0x9f3e, 0           	CALL	_MACDiscardRx
0041b6   f04f
                                           ;	.line	979; TCPIP_Stack/UDP.c	return FALSE;
0041b8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0041ba   d00b     bra	0x41d2               	BRA	_00283_DS_
                                           _00281_DS_:
                                           ;	.line	983; TCPIP_Stack/UDP.c	SocketWithRxData = s;
0041bc   c000     movff	0, 0xe5b           	MOVFF	r0x00, _SocketWithRxData
0041be   fe5b
                                           ;	.line	984; TCPIP_Stack/UDP.c	UDPRxCount = h.Length;
0041c0   cb82     movff	0xb82, 0x236       	MOVFF	(_UDPProcess_h_1_1 + 4), _UDPRxCount
0041c2   f236
0041c4   cb83     movff	0xb83, 0x237       	MOVFF	(_UDPProcess_h_1_1 + 5), (_UDPRxCount + 1)
0041c6   f237
0041c8   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	985; TCPIP_Stack/UDP.c	Flags.bFirstRead = 1;
0041ca   8149     bsf	0x49, 0, 0x1         	BSF	_Flags, 0, B
0041cc   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	986; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 0;
0041ce   9349     bcf	0x49, 0x1, 0x1       	BCF	_Flags, 1, B
                                           ;	.line	990; TCPIP_Stack/UDP.c	return TRUE;
0041d0   0e01     movlw	0x1                	MOVLW	0x01
                                           _00283_DS_:
0041d2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0041d4   f00b
0041d6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0041d8   f00a
0041da   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0041dc   f009
0041de   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0041e0   f008
0041e2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0041e4   f007
0041e6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0041e8   f006
0041ea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0041ec   f005
0041ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0041f0   f004
0041f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0041f4   f003
0041f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0041f8   f002
0041fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0041fc   f001
0041fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004200   f000
004202   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004204   ffd9
004206   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPDiscard	code
                                           _UDPDiscard:
                                           ;	.line	886; TCPIP_Stack/UDP.c	void UDPDiscard(void)
00ad90   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ad92   ffe5
00ad94   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ad96   ffd9
00ad98   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	888; TCPIP_Stack/UDP.c	if(!Flags.bWasDiscarded)
00ad9a   b349     btfsc	0x49, 0x1, 0x1     	BTFSC	_Flags, 1, B
00ad9c   d00b     bra	0xadb4               	BRA	_00271_DS_
                                           ;	.line	890; TCPIP_Stack/UDP.c	MACDiscardRx();
00ad9e   ec9f     call	0x9f3e, 0           	CALL	_MACDiscardRx
00ada0   f04f
00ada2   0102     movlb	0x2                	BANKSEL	_UDPRxCount
                                           ;	.line	891; TCPIP_Stack/UDP.c	UDPRxCount = 0;
00ada4   6b36     clrf	0x36, 0x1           	CLRF	_UDPRxCount, B
00ada6   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
00ada8   6b37     clrf	0x37, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	892; TCPIP_Stack/UDP.c	SocketWithRxData = INVALID_UDP_SOCKET;
00adaa   0eff     movlw	0xff               	MOVLW	0xff
00adac   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
00adae   6f5b     movwf	0x5b, 0x1          	MOVWF	_SocketWithRxData, B
00adb0   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	893; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
00adb2   8349     bsf	0x49, 0x1, 0x1       	BSF	_Flags, 1, B
                                           _00271_DS_:
00adb4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00adb6   ffd9
00adb8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGetArray	code
                                           _UDPGetArray:
                                           ;	.line	843; TCPIP_Stack/UDP.c	WORD UDPGetArray(BYTE *cData, WORD wDataLen)
00915c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00915e   ffe5
009160   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009162   ffd9
009164   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009166   ffe5
009168   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00916a   ffe5
00916c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00916e   ffe5
009170   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009172   ffe5
009174   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009176   ffe5
009178   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00917a   ffe5
00917c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00917e   ffe5
009180   0e02     movlw	0x2                	MOVLW	0x02
009182   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009184   f000
009186   0e03     movlw	0x3                	MOVLW	0x03
009188   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00918a   f001
00918c   0e04     movlw	0x4                	MOVLW	0x04
00918e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009190   f002
009192   0e05     movlw	0x5                	MOVLW	0x05
009194   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009196   f003
009198   0e06     movlw	0x6                	MOVLW	0x06
00919a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00919c   f004
00919e   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	848; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
0091a0   5137     movf	0x37, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
0091a2   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
0091a4   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
0091a6   e104     bnz	0x91b0               	BNZ	_00261_DS_
0091a8   0102     movlb	0x2                	BANKSEL	_UDPRxCount
0091aa   5136     movf	0x36, 0, 0x1        	MOVF	_UDPRxCount, W, B
0091ac   0102     movlb	0x2                	BANKSEL	_wGetOffset
0091ae   5d2e     subwf	0x2e, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00261_DS_:
0091b0   e205     bc	0x91bc                	BC	_00252_DS_
0091b2   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
0091b4   515b     movf	0x5b, 0, 0x1        	MOVF	_SocketWithRxData, W, B
0091b6   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
0091b8   194a     xorwf	0x4a, 0, 0x1       	XORWF	_activeUDPSocket, W, B
0091ba   e003     bz	0x91c2                	BZ	_00253_DS_
                                           _00252_DS_:
                                           ;	.line	849; TCPIP_Stack/UDP.c	return 0;
0091bc   6af3     clrf	0xf3, 0             	CLRF	PRODL
0091be   6ae8     clrf	0xe8, 0             	CLRF	WREG
0091c0   d02e     bra	0x921e               	BRA	_00257_DS_
                                           _00253_DS_:
0091c2   0102     movlb	0x2                	BANKSEL	_wGetOffset
                                           ;	.line	852; TCPIP_Stack/UDP.c	wBytesAvailable = UDPRxCount - wGetOffset;
0091c4   512e     movf	0x2e, 0, 0x1        	MOVF	_wGetOffset, W, B
0091c6   0102     movlb	0x2                	BANKSEL	_UDPRxCount
0091c8   5d36     subwf	0x36, 0, 0x1       	SUBWF	_UDPRxCount, W, B
0091ca   6e05     movwf	0x5, 0             	MOVWF	r0x05
0091cc   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
0091ce   512f     movf	0x2f, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
0091d0   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
0091d2   5937     subwfb	0x37, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
0091d4   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/UDP.c	if(wBytesAvailable < wDataLen) wDataLen = wBytesAvailable;
0091d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0091d8   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
0091da   e102     bnz	0x91e0               	BNZ	_00264_DS_
0091dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0091de   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00264_DS_:
0091e0   e204     bc	0x91ea                	BC	_00256_DS_
0091e2   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
0091e4   f003
0091e6   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
0091e8   f004
                                           _00256_DS_:
                                           ;	.line	855; TCPIP_Stack/UDP.c	wDataLen = MACGetArray(cData, wDataLen);
0091ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0091ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0091ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0091f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0091f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0091f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0091f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0091f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0091fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0091fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0091fe   ec20     call	0x9240, 0           	CALL	_MACGetArray
009200   f049
009202   6e03     movwf	0x3, 0             	MOVWF	r0x03
009204   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
009206   f004
009208   0e05     movlw	0x5                	MOVLW	0x05
00920a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	856; TCPIP_Stack/UDP.c	wGetOffset += wDataLen;
00920c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00920e   0102     movlb	0x2                	BANKSEL	_wGetOffset
009210   272e     addwf	0x2e, 0x1, 0x1     	ADDWF	_wGetOffset, F, B
009212   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009214   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
009216   232f     addwfc	0x2f, 0x1, 0x1    	ADDWFC	(_wGetOffset + 1), F, B
                                           ;	.line	858; TCPIP_Stack/UDP.c	return wDataLen;
009218   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00921a   fff3
00921c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00257_DS_:
00921e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009220   f006
009222   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009224   f005
009226   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009228   f004
00922a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00922c   f003
00922e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009230   f002
009232   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009234   f001
009236   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009238   f000
00923a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00923c   ffd9
00923e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGet	code
                                           _UDPGet:
                                           ;	.line	805; TCPIP_Stack/UDP.c	BOOL UDPGet(BYTE *v)
00a206   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a208   ffe5
00a20a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a20c   ffd9
00a20e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a210   ffe5
00a212   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a214   ffe5
00a216   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a218   ffe5
00a21a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a21c   ffe5
00a21e   0e02     movlw	0x2                	MOVLW	0x02
00a220   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a222   f000
00a224   0e03     movlw	0x3                	MOVLW	0x03
00a226   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a228   f001
00a22a   0e04     movlw	0x4                	MOVLW	0x04
00a22c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00a22e   f002
00a230   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	808; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
00a232   5137     movf	0x37, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
00a234   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
00a236   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
00a238   e104     bnz	0xa242               	BNZ	_00245_DS_
00a23a   0102     movlb	0x2                	BANKSEL	_UDPRxCount
00a23c   5136     movf	0x36, 0, 0x1        	MOVF	_UDPRxCount, W, B
00a23e   0102     movlb	0x2                	BANKSEL	_wGetOffset
00a240   5d2e     subwf	0x2e, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00245_DS_:
00a242   e205     bc	0xa24e                	BC	_00239_DS_
00a244   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
00a246   515b     movf	0x5b, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00a248   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
00a24a   194a     xorwf	0x4a, 0, 0x1       	XORWF	_activeUDPSocket, W, B
00a24c   e002     bz	0xa252                	BZ	_00240_DS_
                                           _00239_DS_:
                                           ;	.line	809; TCPIP_Stack/UDP.c	return FALSE;
00a24e   6ae8     clrf	0xe8, 0             	CLRF	WREG
00a250   d012     bra	0xa276               	BRA	_00242_DS_
                                           _00240_DS_:
                                           ;	.line	811; TCPIP_Stack/UDP.c	*v = MACGet();
00a252   ecef     call	0xafde, 0           	CALL	_MACGet
00a254   f057
00a256   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a258   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a25a   ffe5
00a25c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00a25e   ffe9
00a260   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00a262   fff3
00a264   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a266   ece5     call	0xafca, 0           	CALL	__gptrput1
00a268   f057
00a26a   0102     movlb	0x2                	BANKSEL	_wGetOffset
                                           ;	.line	812; TCPIP_Stack/UDP.c	wGetOffset++;
00a26c   2b2e     incf	0x2e, 0x1, 0x1      	INCF	_wGetOffset, F, B
00a26e   e302     bnc	0xa274               	BNC	_10296_DS_
00a270   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
00a272   2b2f     incf	0x2f, 0x1, 0x1      	INCF	(_wGetOffset + 1), F, B
                                           _10296_DS_:
                                           ;	.line	814; TCPIP_Stack/UDP.c	return TRUE;
00a274   0e01     movlw	0x1                	MOVLW	0x01
                                           _00242_DS_:
00a276   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a278   f003
00a27a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a27c   f002
00a27e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a280   f001
00a282   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a284   f000
00a286   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a288   ffd9
00a28a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsGetReady	code
                                           _UDPIsGetReady:
                                           ;	.line	766; TCPIP_Stack/UDP.c	WORD UDPIsGetReady(UDP_SOCKET s)
00a670   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a672   ffe5
00a674   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a676   ffd9
00a678   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a67a   ffe5
00a67c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a67e   ffe5
00a680   0e02     movlw	0x2                	MOVLW	0x02
00a682   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a684   f000
                                           ;	.line	768; TCPIP_Stack/UDP.c	activeUDPSocket = s;
00a686   c000     movff	0, 0x24a           	MOVFF	r0x00, _activeUDPSocket
00a688   f24a
00a68a   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
                                           ;	.line	769; TCPIP_Stack/UDP.c	if(SocketWithRxData != s) return 0;
00a68c   515b     movf	0x5b, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00a68e   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00a690   e003     bz	0xa698                	BZ	_00226_DS_
00a692   6af3     clrf	0xf3, 0             	CLRF	PRODL
00a694   6ae8     clrf	0xe8, 0             	CLRF	WREG
00a696   d01a     bra	0xa6cc               	BRA	_00229_DS_
                                           _00226_DS_:
00a698   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	773; TCPIP_Stack/UDP.c	if(Flags.bFirstRead)
00a69a   a149     btfss	0x49, 0, 0x1       	BTFSS	_Flags, 0, B
00a69c   d00a     bra	0xa6b2               	BRA	_00228_DS_
00a69e   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	775; TCPIP_Stack/UDP.c	Flags.bFirstRead = 0;
00a6a0   9149     bcf	0x49, 0, 0x1         	BCF	_Flags, 0, B
                                           ;	.line	776; TCPIP_Stack/UDP.c	UDPSetRxBuffer(0);
00a6a2   0e00     movlw	0                  	MOVLW	0x00
00a6a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6a6   0e00     movlw	0                  	MOVLW	0x00
00a6a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6aa   ecd1     call	0xa7a2, 0           	CALL	_UDPSetRxBuffer
00a6ac   f053
00a6ae   0e02     movlw	0x2                	MOVLW	0x02
00a6b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00228_DS_:
00a6b2   0102     movlb	0x2                	BANKSEL	_wGetOffset
                                           ;	.line	779; TCPIP_Stack/UDP.c	return UDPRxCount - wGetOffset;
00a6b4   512e     movf	0x2e, 0, 0x1        	MOVF	_wGetOffset, W, B
00a6b6   0102     movlb	0x2                	BANKSEL	_UDPRxCount
00a6b8   5d36     subwf	0x36, 0, 0x1       	SUBWF	_UDPRxCount, W, B
00a6ba   6e00     movwf	0, 0               	MOVWF	r0x00
00a6bc   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
00a6be   512f     movf	0x2f, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
00a6c0   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
00a6c2   5937     subwfb	0x37, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
00a6c4   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a6c6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00a6c8   fff3
00a6ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00229_DS_:
00a6cc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a6ce   f001
00a6d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a6d2   f000
00a6d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a6d6   ffd9
00a6d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPFlush	code
                                           _UDPFlush:
                                           ;	.line	671; TCPIP_Stack/UDP.c	void UDPFlush(void)
004208   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00420a   ffe5
00420c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00420e   ffd9
004210   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004212   ffe5
004214   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004216   ffe5
004218   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00421a   ffe5
00421c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00421e   ffe5
004220   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004222   ffe5
004224   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004226   ffe5
004228   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00422a   ffe5
00422c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00422e   ffe5
004230   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004232   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004234   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	679; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[activeUDPSocket];
004236   514a     movf	0x4a, 0, 0x1        	MOVF	_activeUDPSocket, W, B
004238   0d0e     mullw	0xe                	MULLW	0x0e
00423a   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00423c   f000
00423e   6a01     clrf	0x1, 0              	CLRF	r0x01
004240   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
004242   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004244   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
004246   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004248   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00424a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00424c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00424e   6e00     movwf	0, 0               	MOVWF	r0x00
004250   0e80     movlw	0x80               	MOVLW	0x80
004252   6e02     movwf	0x2, 0             	MOVWF	r0x02
004254   0102     movlb	0x2                	BANKSEL	_UDPTxCount
                                           ;	.line	681; TCPIP_Stack/UDP.c	wUDPLength = UDPTxCount + sizeof(UDP_HEADER);
004256   5132     movf	0x32, 0, 0x1        	MOVF	_UDPTxCount, W, B
004258   0f08     addlw	0x8                	ADDLW	0x08
00425a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00425c   0e00     movlw	0                  	MOVLW	0x00
00425e   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
004260   2133     addwfc	0x33, 0, 0x1      	ADDWFC	(_UDPTxCount + 1), W, B
004262   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	684; TCPIP_Stack/UDP.c	h.SourcePort = swaps(p->localPort);
004264   5000     movf	0, 0, 0             	MOVF	r0x00, W
004266   0f0c     addlw	0xc                	ADDLW	0x0c
004268   6e05     movwf	0x5, 0             	MOVWF	r0x05
00426a   0e00     movlw	0                  	MOVLW	0x00
00426c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00426e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004270   0e00     movlw	0                  	MOVLW	0x00
004272   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004274   6e07     movwf	0x7, 0             	MOVWF	r0x07
004276   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004278   ffe9
00427a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00427c   fff3
00427e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004280   ec88     call	0xad10, 0           	CALL	__gptrget2
004282   f056
004284   6e05     movwf	0x5, 0             	MOVWF	r0x05
004286   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004288   f006
00428a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00428c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00428e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004290   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004292   ec81     call	0xa902, 0           	CALL	_swaps
004294   f054
004296   6e05     movwf	0x5, 0             	MOVWF	r0x05
004298   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00429a   f006
00429c   0e02     movlw	0x2                	MOVLW	0x02
00429e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042a0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0042a2   010b     movlb	0xb                	BANKSEL	_UDPFlush_h_1_1
0042a4   6f76     movwf	0x76, 0x1          	MOVWF	_UDPFlush_h_1_1, B
0042a6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0042a8   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 1)
0042aa   6f77     movwf	0x77, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 1), B
                                           ;	.line	685; TCPIP_Stack/UDP.c	h.DestinationPort = swaps(p->remotePort);
0042ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0042ae   0f0a     addlw	0xa                	ADDLW	0x0a
0042b0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0042b2   0e00     movlw	0                  	MOVLW	0x00
0042b4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0042b6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0042b8   0e00     movlw	0                  	MOVLW	0x00
0042ba   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0042bc   6e07     movwf	0x7, 0             	MOVWF	r0x07
0042be   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0042c0   ffe9
0042c2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0042c4   fff3
0042c6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0042c8   ec88     call	0xad10, 0           	CALL	__gptrget2
0042ca   f056
0042cc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0042ce   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0042d0   f006
0042d2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0042d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042d6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0042d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042da   ec81     call	0xa902, 0           	CALL	_swaps
0042dc   f054
0042de   6e05     movwf	0x5, 0             	MOVWF	r0x05
0042e0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0042e2   f006
0042e4   0e02     movlw	0x2                	MOVLW	0x02
0042e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0042ea   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 2)
0042ec   6f78     movwf	0x78, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 2), B
0042ee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0042f0   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 3)
0042f2   6f79     movwf	0x79, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 3), B
                                           ;	.line	686; TCPIP_Stack/UDP.c	h.Length = swaps(wUDPLength);
0042f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0042f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0042fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042fc   ec81     call	0xa902, 0           	CALL	_swaps
0042fe   f054
004300   6e05     movwf	0x5, 0             	MOVWF	r0x05
004302   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004304   f006
004306   0e02     movlw	0x2                	MOVLW	0x02
004308   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00430a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00430c   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 4)
00430e   6f7a     movwf	0x7a, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 4), B
004310   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004312   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 5)
004314   6f7b     movwf	0x7b, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 5), B
004316   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 6)
                                           ;	.line	687; TCPIP_Stack/UDP.c	h.Checksum = 0x0000;
004318   6b7c     clrf	0x7c, 0x1           	CLRF	(_UDPFlush_h_1_1 + 6), B
00431a   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 7)
00431c   6b7d     clrf	0x7d, 0x1           	CLRF	(_UDPFlush_h_1_1 + 7), B
00431e   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	695; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val = AppConfig.MyIPAddr.Val;
004320   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
004322   010b     movlb	0xb                	BANKSEL	_UDPFlush_pseudoHeader_2_2
004324   6f38     movwf	0x38, 0x1          	MOVWF	_UDPFlush_pseudoHeader_2_2, B
004326   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
004328   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
00432a   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 1)
00432c   6f39     movwf	0x39, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 1), B
00432e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
004330   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
004332   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 2)
004334   6f3a     movwf	0x3a, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 2), B
004336   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
004338   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
00433a   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 3)
00433c   6f3b     movwf	0x3b, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 3), B
                                           ;	.line	696; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val = p->remoteNode.IPAddr.Val;
00433e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004340   ffe9
004342   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004344   fff3
004346   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004348   ec18     call	0xac30, 0           	CALL	__gptrget4
00434a   f056
00434c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00434e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004350   f006
004352   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
004354   f007
004356   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
004358   f008
00435a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00435c   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 4)
00435e   6f3c     movwf	0x3c, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 4), B
004360   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004362   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 5)
004364   6f3d     movwf	0x3d, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 5), B
004366   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004368   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 6)
00436a   6f3e     movwf	0x3e, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 6), B
00436c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00436e   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 7)
004370   6f3f     movwf	0x3f, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 7), B
004372   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 8)
                                           ;	.line	697; TCPIP_Stack/UDP.c	pseudoHeader.Zero = 0x0;
004374   6b40     clrf	0x40, 0x1           	CLRF	(_UDPFlush_pseudoHeader_2_2 + 8), B
                                           ;	.line	698; TCPIP_Stack/UDP.c	pseudoHeader.Protocol = IP_PROT_UDP;
004376   0e11     movlw	0x11               	MOVLW	0x11
004378   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 9)
00437a   6f41     movwf	0x41, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 9), B
                                           ;	.line	699; TCPIP_Stack/UDP.c	pseudoHeader.Length = wUDPLength;
00437c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00437e   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
004380   6f42     movwf	0x42, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
004382   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004384   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
004386   6f43     movwf	0x43, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	700; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
004388   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00438a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00438c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00438e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004390   ec81     call	0xa902, 0           	CALL	_swaps
004392   f054
004394   6e05     movwf	0x5, 0             	MOVWF	r0x05
004396   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004398   f006
00439a   0e02     movlw	0x2                	MOVLW	0x02
00439c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00439e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0043a0   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0043a2   6f42     movwf	0x42, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0043a4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0043a6   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0043a8   6f43     movwf	0x43, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	701; TCPIP_Stack/UDP.c	h.Checksum = ~CalcIPChecksum((BYTE*)&pseudoHeader, 
0043aa   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPFlush_pseudoHeader_2_2)
0043ac   6e06     movwf	0x6, 0             	MOVWF	r0x06
0043ae   0e38     movlw	0x38               	MOVLW	LOW(_UDPFlush_pseudoHeader_2_2)
0043b0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0043b2   0e80     movlw	0x80               	MOVLW	0x80
0043b4   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	702; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0043b6   0e00     movlw	0                  	MOVLW	0x00
0043b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ba   0e0c     movlw	0xc                	MOVLW	0x0c
0043bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043be   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0043c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043c2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0043c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043c6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0043c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ca   ec66     call	0x32cc, 0           	CALL	_CalcIPChecksum
0043cc   f019
0043ce   6e05     movwf	0x5, 0             	MOVWF	r0x05
0043d0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0043d2   f006
0043d4   0e05     movlw	0x5                	MOVLW	0x05
0043d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0043d8   1e05     comf	0x5, 0x1, 0         	COMF	r0x05, F
0043da   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
0043dc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0043de   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 6)
0043e0   6f7c     movwf	0x7c, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 6), B
0043e2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0043e4   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 7)
0043e6   6f7d     movwf	0x7d, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 7), B
                                           ;	.line	708; TCPIP_Stack/UDP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
0043e8   0e1a     movlw	0x1a               	MOVLW	0x1a
0043ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ec   0e19     movlw	0x19               	MOVLW	0x19
0043ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043f0   ec88     call	0xa310, 0           	CALL	_MACSetWritePtr
0043f2   f051
0043f4   0e02     movlw	0x2                	MOVLW	0x02
0043f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; TCPIP_Stack/UDP.c	IPPutHeader(&p->remoteNode, IP_PROT_UDP, wUDPLength);
0043f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0043fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0043fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004400   0e11     movlw	0x11               	MOVLW	0x11
004402   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004404   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004408   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00440a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00440c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00440e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004410   eca6     call	0x694c, 0           	CALL	_IPPutHeader
004412   f034
004414   0e06     movlw	0x6                	MOVLW	0x06
004416   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	714; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&h, sizeof(h));
004418   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPFlush_h_1_1)
00441a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00441c   0e76     movlw	0x76               	MOVLW	LOW(_UDPFlush_h_1_1)
00441e   6e00     movwf	0, 0               	MOVWF	r0x00
004420   0e80     movlw	0x80               	MOVLW	0x80
004422   6e02     movwf	0x2, 0             	MOVWF	r0x02
004424   0e00     movlw	0                  	MOVLW	0x00
004426   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004428   0e08     movlw	0x8                	MOVLW	0x08
00442a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00442c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00442e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004430   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004432   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004434   5000     movf	0, 0, 0             	MOVF	r0x00, W
004436   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004438   ec09     call	0x9e12, 0           	CALL	_MACPutArray
00443a   f04f
00443c   0e05     movlw	0x5                	MOVLW	0x05
00443e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	720; TCPIP_Stack/UDP.c	sizeof(IP_HEADER));
004440   0e1a     movlw	0x1a               	MOVLW	0x1a
004442   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004444   0e2d     movlw	0x2d               	MOVLW	0x2d
004446   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004448   ecca     call	0xa394, 0           	CALL	_MACSetReadPtr
00444a   f051
00444c   6e00     movwf	0, 0               	MOVWF	r0x00
00444e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004450   f001
004452   0e02     movlw	0x2                	MOVLW	0x02
004454   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	721; TCPIP_Stack/UDP.c	wChecksum = CalcIPBufferChecksum(wUDPLength);
004456   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004458   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00445a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00445c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00445e   ec6a     call	0x1ad4, 0           	CALL	_CalcIPBufferChecksum
004460   f00d
004462   0102     movlb	0x2                	BANKSEL	_UDPFlush_wChecksum_1_1
004464   6f34     movwf	0x34, 0x1          	MOVWF	_UDPFlush_wChecksum_1_1, B
004466   cff3     movff	0xff3, 0x235       	MOVFF	PRODL, (_UDPFlush_wChecksum_1_1 + 1)
004468   f235
00446a   0e02     movlw	0x2                	MOVLW	0x02
00446c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	722; TCPIP_Stack/UDP.c	MACSetReadPtr(wReadPtrSave);
00446e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004470   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004472   5000     movf	0, 0, 0             	MOVF	r0x00, W
004474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004476   ecca     call	0xa394, 0           	CALL	_MACSetReadPtr
004478   f051
00447a   0e02     movlw	0x2                	MOVLW	0x02
00447c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	724; TCPIP_Stack/UDP.c	+ 6);    // 6 is the offset to the Checksum field in UDP_HEADER
00447e   0e1a     movlw	0x1a               	MOVLW	0x1a
004480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004482   0e33     movlw	0x33               	MOVLW	0x33
004484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004486   ec88     call	0xa310, 0           	CALL	_MACSetWritePtr
004488   f051
00448a   0e02     movlw	0x2                	MOVLW	0x02
00448c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	725; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&wChecksum, sizeof(wChecksum));
00448e   0e02     movlw	0x2                	MOVLW	HIGH(_UDPFlush_wChecksum_1_1)
004490   6e01     movwf	0x1, 0             	MOVWF	r0x01
004492   0e34     movlw	0x34               	MOVLW	LOW(_UDPFlush_wChecksum_1_1)
004494   6e00     movwf	0, 0               	MOVWF	r0x00
004496   0e80     movlw	0x80               	MOVLW	0x80
004498   6e02     movwf	0x2, 0             	MOVWF	r0x02
00449a   0e00     movlw	0                  	MOVLW	0x00
00449c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00449e   0e02     movlw	0x2                	MOVLW	0x02
0044a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0044a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0044a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0044ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044ae   ec09     call	0x9e12, 0           	CALL	_MACPutArray
0044b0   f04f
0044b2   0e05     movlw	0x5                	MOVLW	0x05
0044b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	730; TCPIP_Stack/UDP.c	MACFlush();
0044b6   ec6d     call	0xa6da, 0           	CALL	_MACFlush
0044b8   f053
0044ba   0102     movlb	0x2                	BANKSEL	_UDPTxCount
                                           ;	.line	733; TCPIP_Stack/UDP.c	UDPTxCount = 0;
0044bc   6b32     clrf	0x32, 0x1           	CLRF	_UDPTxCount, B
0044be   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
0044c0   6b33     clrf	0x33, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	734; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
0044c2   0eff     movlw	0xff               	MOVLW	0xff
0044c4   010e     movlb	0xe                	BANKSEL	_LastPutSocket
0044c6   6f5a     movwf	0x5a, 0x1          	MOVWF	_LastPutSocket, B
0044c8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0044ca   f008
0044cc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0044ce   f007
0044d0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0044d2   f006
0044d4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0044d6   f005
0044d8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0044da   f004
0044dc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0044de   f003
0044e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0044e2   f002
0044e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0044e6   f001
0044e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0044ea   f000
0044ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0044ee   ffd9
0044f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutString	code
                                           _UDPPutString:
                                           ;	.line	601; TCPIP_Stack/UDP.c	BYTE* UDPPutString(BYTE *strData)
009c48   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009c4a   ffe5
009c4c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009c4e   ffd9
009c50   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009c52   ffe5
009c54   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009c56   ffe5
009c58   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009c5a   ffe5
009c5c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009c5e   ffe5
009c60   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009c62   ffe5
009c64   0e02     movlw	0x2                	MOVLW	0x02
009c66   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009c68   f000
009c6a   0e03     movlw	0x3                	MOVLW	0x03
009c6c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009c6e   f001
009c70   0e04     movlw	0x4                	MOVLW	0x04
009c72   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009c74   f002
                                           ;	.line	603; TCPIP_Stack/UDP.c	return strData + UDPPutArray(strData, strlen((char*)strData));
009c76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c7e   5000     movf	0, 0, 0             	MOVF	r0x00, W
009c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c82   ec0a     call	0xa414, 0           	CALL	_strlen
009c84   f052
009c86   6e03     movwf	0x3, 0             	MOVWF	r0x03
009c88   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
009c8a   f004
009c8c   0e03     movlw	0x3                	MOVLW	0x03
009c8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009c90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ca0   5000     movf	0, 0, 0             	MOVF	r0x00, W
009ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ca4   ec51     call	0x8ea2, 0           	CALL	_UDPPutArray
009ca6   f047
009ca8   6e03     movwf	0x3, 0             	MOVWF	r0x03
009caa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
009cac   f004
009cae   0e05     movlw	0x5                	MOVLW	0x05
009cb0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009cb2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009cb4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009cb6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009cb8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009cba   6ae8     clrf	0xe8, 0             	CLRF	WREG
009cbc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
009cbe   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
009cc0   fff4
009cc2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
009cc4   fff3
009cc6   5000     movf	0, 0, 0             	MOVF	r0x00, W
009cc8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009cca   f004
009ccc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009cce   f003
009cd0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009cd2   f002
009cd4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009cd6   f001
009cd8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009cda   f000
009cdc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009cde   ffd9
009ce0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutArray	code
                                           _UDPPutArray:
                                           ;	.line	514; TCPIP_Stack/UDP.c	WORD UDPPutArray(BYTE *cData, WORD wDataLen)
008ea2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008ea4   ffe5
008ea6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008ea8   ffd9
008eaa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008eac   ffe5
008eae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008eb0   ffe5
008eb2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008eb4   ffe5
008eb6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008eb8   ffe5
008eba   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008ebc   ffe5
008ebe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008ec0   ffe5
008ec2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
008ec4   ffe5
008ec6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008ec8   ffe5
008eca   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
008ecc   ffe5
008ece   0e02     movlw	0x2                	MOVLW	0x02
008ed0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008ed2   f000
008ed4   0e03     movlw	0x3                	MOVLW	0x03
008ed6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008ed8   f001
008eda   0e04     movlw	0x4                	MOVLW	0x04
008edc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008ede   f002
008ee0   0e05     movlw	0x5                	MOVLW	0x05
008ee2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008ee4   f003
008ee6   0e06     movlw	0x6                	MOVLW	0x06
008ee8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
008eea   f004
                                           ;	.line	518; TCPIP_Stack/UDP.c	wTemp=(MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER))-wPutOffset;
008eec   c22c     movff	0x22c, 0x5         	MOVFF	_wPutOffset, r0x05
008eee   f005
008ef0   c22d     movff	0x22d, 0x6         	MOVFF	(_wPutOffset + 1), r0x06
008ef2   f006
008ef4   6a07     clrf	0x7, 0              	CLRF	r0x07
008ef6   6a08     clrf	0x8, 0              	CLRF	r0x08
008ef8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008efa   08c0     sublw	0xc0               	SUBLW	0xc0
008efc   6e05     movwf	0x5, 0             	MOVWF	r0x05
008efe   0e05     movlw	0x5                	MOVLW	0x05
008f00   5606     subfwb	0x6, 0x1, 0       	SUBFWB	r0x06, F
008f02   0e00     movlw	0                  	MOVLW	0x00
008f04   5607     subfwb	0x7, 0x1, 0       	SUBFWB	r0x07, F
008f06   0e00     movlw	0                  	MOVLW	0x00
008f08   5608     subfwb	0x8, 0x1, 0       	SUBFWB	r0x08, F
                                           ;	.line	519; TCPIP_Stack/UDP.c	if(wTemp < wDataLen) wDataLen = wTemp;
008f0a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008f0c   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
008f0e   e102     bnz	0x8f14               	BNZ	_00209_DS_
008f10   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008f12   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00209_DS_:
008f14   e204     bc	0x8f1e                	BC	_00202_DS_
008f16   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
008f18   f003
008f1a   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
008f1c   f004
                                           _00202_DS_:
                                           ;	.line	521; TCPIP_Stack/UDP.c	wPutOffset += wDataLen;
008f1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008f20   0102     movlb	0x2                	BANKSEL	_wPutOffset
008f22   272c     addwf	0x2c, 0x1, 0x1     	ADDWF	_wPutOffset, F, B
008f24   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008f26   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
008f28   232d     addwfc	0x2d, 0x1, 0x1    	ADDWFC	(_wPutOffset + 1), F, B
008f2a   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	522; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount) UDPTxCount = wPutOffset;
008f2c   512d     movf	0x2d, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
008f2e   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
008f30   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
008f32   e104     bnz	0x8f3c               	BNZ	_00210_DS_
008f34   0102     movlb	0x2                	BANKSEL	_wPutOffset
008f36   512c     movf	0x2c, 0, 0x1        	MOVF	_wPutOffset, W, B
008f38   0102     movlb	0x2                	BANKSEL	_UDPTxCount
008f3a   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00210_DS_:
008f3c   e204     bc	0x8f46                	BC	_00204_DS_
008f3e   c22c     movff	0x22c, 0x232       	MOVFF	_wPutOffset, _UDPTxCount
008f40   f232
008f42   c22d     movff	0x22d, 0x233       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
008f44   f233
                                           _00204_DS_:
                                           ;	.line	525; TCPIP_Stack/UDP.c	MACPutArray(cData, wDataLen);
008f46   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008f4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008f4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008f52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008f54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008f56   5000     movf	0, 0, 0             	MOVF	r0x00, W
008f58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008f5a   ec09     call	0x9e12, 0           	CALL	_MACPutArray
008f5c   f04f
008f5e   0e05     movlw	0x5                	MOVLW	0x05
008f60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; TCPIP_Stack/UDP.c	return wDataLen;
008f62   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
008f64   fff3
008f66   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008f68   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
008f6a   f008
008f6c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008f6e   f007
008f70   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008f72   f006
008f74   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008f76   f005
008f78   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008f7a   f004
008f7c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008f7e   f003
008f80   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008f82   f002
008f84   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008f86   f001
008f88   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008f8a   f000
008f8c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008f8e   ffd9
008f90   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPut	code
                                           _UDPPut:
                                           ;	.line	472; TCPIP_Stack/UDP.c	BOOL UDPPut(BYTE v)
009ea8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009eaa   ffe5
009eac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009eae   ffd9
009eb0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009eb2   ffe5
009eb4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009eb6   ffe5
009eb8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009eba   ffe5
009ebc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009ebe   ffe5
009ec0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009ec2   ffe5
009ec4   0e02     movlw	0x2                	MOVLW	0x02
009ec6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009ec8   f000
                                           ;	.line	475; TCPIP_Stack/UDP.c	if(wPutOffset >= (MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)))
009eca   c22c     movff	0x22c, 0x1         	MOVFF	_wPutOffset, r0x01
009ecc   f001
009ece   c22d     movff	0x22d, 0x2         	MOVFF	(_wPutOffset + 1), r0x02
009ed0   f002
009ed2   6a03     clrf	0x3, 0              	CLRF	r0x03
009ed4   6a04     clrf	0x4, 0              	CLRF	r0x04
009ed6   0e00     movlw	0                  	MOVLW	0x00
009ed8   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
009eda   e108     bnz	0x9eec               	BNZ	_00195_DS_
009edc   0e00     movlw	0                  	MOVLW	0x00
009ede   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
009ee0   e105     bnz	0x9eec               	BNZ	_00195_DS_
009ee2   0e05     movlw	0x5                	MOVLW	0x05
009ee4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
009ee6   e102     bnz	0x9eec               	BNZ	_00195_DS_
009ee8   0ec0     movlw	0xc0               	MOVLW	0xc0
009eea   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00195_DS_:
009eec   e302     bnc	0x9ef2               	BNC	_00188_DS_
                                           ;	.line	477; TCPIP_Stack/UDP.c	return FALSE;
009eee   6ae8     clrf	0xe8, 0             	CLRF	WREG
009ef0   d019     bra	0x9f24               	BRA	_00191_DS_
                                           _00188_DS_:
                                           ;	.line	481; TCPIP_Stack/UDP.c	MACPut(v);
009ef2   5000     movf	0, 0, 0             	MOVF	r0x00, W
009ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009ef6   ecd1     call	0xafa2, 0           	CALL	_MACPut
009ef8   f057
009efa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
009efc   0102     movlb	0x2                	BANKSEL	_wPutOffset
                                           ;	.line	482; TCPIP_Stack/UDP.c	wPutOffset++;
009efe   2b2c     incf	0x2c, 0x1, 0x1      	INCF	_wPutOffset, F, B
009f00   e302     bnc	0x9f06               	BNC	_20297_DS_
009f02   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
009f04   2b2d     incf	0x2d, 0x1, 0x1      	INCF	(_wPutOffset + 1), F, B
                                           _20297_DS_:
009f06   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	483; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount)
009f08   512d     movf	0x2d, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
009f0a   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
009f0c   5d33     subwf	0x33, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
009f0e   e104     bnz	0x9f18               	BNZ	_00196_DS_
009f10   0102     movlb	0x2                	BANKSEL	_wPutOffset
009f12   512c     movf	0x2c, 0, 0x1        	MOVF	_wPutOffset, W, B
009f14   0102     movlb	0x2                	BANKSEL	_UDPTxCount
009f16   5d32     subwf	0x32, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00196_DS_:
009f18   e204     bc	0x9f22                	BC	_00190_DS_
                                           ;	.line	484; TCPIP_Stack/UDP.c	UDPTxCount = wPutOffset;
009f1a   c22c     movff	0x22c, 0x232       	MOVFF	_wPutOffset, _UDPTxCount
009f1c   f232
009f1e   c22d     movff	0x22d, 0x233       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
009f20   f233
                                           _00190_DS_:
                                           ;	.line	486; TCPIP_Stack/UDP.c	return TRUE;
009f22   0e01     movlw	0x1                	MOVLW	0x01
                                           _00191_DS_:
009f24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009f26   f004
009f28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009f2a   f003
009f2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009f2e   f002
009f30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009f32   f001
009f34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009f36   f000
009f38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009f3a   ffd9
009f3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsPutReady	code
                                           _UDPIsPutReady:
                                           ;	.line	434; TCPIP_Stack/UDP.c	WORD UDPIsPutReady(UDP_SOCKET s)
00a064   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a066   ffe5
00a068   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a06a   ffd9
00a06c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a06e   ffe5
00a070   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a072   ffe5
00a074   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a076   ffe5
00a078   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a07a   ffe5
00a07c   0e02     movlw	0x2                	MOVLW	0x02
00a07e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a080   f000
                                           ;	.line	436; TCPIP_Stack/UDP.c	if(!MACIsTxReady())
00a082   ec89     call	0xa512, 0           	CALL	_MACIsTxReady
00a084   f052
00a086   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a088   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a08a   e103     bnz	0xa092               	BNZ	_00174_DS_
                                           ;	.line	437; TCPIP_Stack/UDP.c	return 0;
00a08c   6af3     clrf	0xf3, 0             	CLRF	PRODL
00a08e   6ae8     clrf	0xe8, 0             	CLRF	WREG
00a090   d026     bra	0xa0de               	BRA	_00177_DS_
                                           _00174_DS_:
00a092   010e     movlb	0xe                	BANKSEL	_LastPutSocket
                                           ;	.line	439; TCPIP_Stack/UDP.c	if(LastPutSocket != s)
00a094   515a     movf	0x5a, 0, 0x1        	MOVF	_LastPutSocket, W, B
00a096   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00a098   e00e     bz	0xa0b6                	BZ	_00176_DS_
                                           ;	.line	441; TCPIP_Stack/UDP.c	LastPutSocket = s;
00a09a   c000     movff	0, 0xe5a           	MOVFF	r0x00, _LastPutSocket
00a09c   fe5a
00a09e   0102     movlb	0x2                	BANKSEL	_UDPTxCount
                                           ;	.line	442; TCPIP_Stack/UDP.c	UDPTxCount = 0;
00a0a0   6b32     clrf	0x32, 0x1           	CLRF	_UDPTxCount, B
00a0a2   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00a0a4   6b33     clrf	0x33, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	443; TCPIP_Stack/UDP.c	UDPSetTxBuffer(0);
00a0a6   0e00     movlw	0                  	MOVLW	0x00
00a0a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a0aa   0e00     movlw	0                  	MOVLW	0x00
00a0ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a0ae   ec4a     call	0xa494, 0           	CALL	_UDPSetTxBuffer
00a0b0   f052
00a0b2   0e02     movlw	0x2                	MOVLW	0x02
00a0b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00176_DS_:
                                           ;	.line	445; TCPIP_Stack/UDP.c	activeUDPSocket = s;
00a0b6   c000     movff	0, 0x24a           	MOVFF	r0x00, _activeUDPSocket
00a0b8   f24a
                                           ;	.line	447; TCPIP_Stack/UDP.c	return MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)-UDPTxCount;
00a0ba   c232     movff	0x232, 0           	MOVFF	_UDPTxCount, r0x00
00a0bc   f000
00a0be   c233     movff	0x233, 0x1         	MOVFF	(_UDPTxCount + 1), r0x01
00a0c0   f001
00a0c2   6a02     clrf	0x2, 0              	CLRF	r0x02
00a0c4   6a03     clrf	0x3, 0              	CLRF	r0x03
00a0c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a0c8   08c0     sublw	0xc0               	SUBLW	0xc0
00a0ca   6e00     movwf	0, 0               	MOVWF	r0x00
00a0cc   0e05     movlw	0x5                	MOVLW	0x05
00a0ce   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
00a0d0   0e00     movlw	0                  	MOVLW	0x00
00a0d2   5602     subfwb	0x2, 0x1, 0       	SUBFWB	r0x02, F
00a0d4   0e00     movlw	0                  	MOVLW	0x00
00a0d6   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
00a0d8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00a0da   fff3
00a0dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00177_DS_:
00a0de   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a0e0   f003
00a0e2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a0e4   f002
00a0e6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a0e8   f001
00a0ea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a0ec   f000
00a0ee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a0f0   ffd9
00a0f2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetRxBuffer	code
                                           _UDPSetRxBuffer:
                                           ;	.line	400; TCPIP_Stack/UDP.c	void UDPSetRxBuffer(WORD wOffset)
00a7a2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a7a4   ffe5
00a7a6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a7a8   ffd9
00a7aa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a7ac   ffe5
00a7ae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a7b0   ffe5
00a7b2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a7b4   ffe5
00a7b6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a7b8   ffe5
00a7ba   0e02     movlw	0x2                	MOVLW	0x02
00a7bc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a7be   f000
00a7c0   0e03     movlw	0x3                	MOVLW	0x03
00a7c2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a7c4   f001
                                           ;	.line	402; TCPIP_Stack/UDP.c	IPSetRxBuffer(wOffset+sizeof(UDP_HEADER));
00a7c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a7c8   0f08     addlw	0x8                	ADDLW	0x08
00a7ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a7cc   0e00     movlw	0                  	MOVLW	0x00
00a7ce   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00a7d0   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a7d2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a7d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a7d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a7d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a7da   ec00     call	0xa800, 0           	CALL	_IPSetRxBuffer
00a7dc   f054
00a7de   0e02     movlw	0x2                	MOVLW	0x02
00a7e0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	403; TCPIP_Stack/UDP.c	wGetOffset = wOffset;
00a7e2   c000     movff	0, 0x22e           	MOVFF	r0x00, _wGetOffset
00a7e4   f22e
00a7e6   c001     movff	0x1, 0x22f         	MOVFF	r0x01, (_wGetOffset + 1)
00a7e8   f22f
00a7ea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a7ec   f003
00a7ee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a7f0   f002
00a7f2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a7f4   f001
00a7f6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a7f8   f000
00a7fa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a7fc   ffd9
00a7fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetTxBuffer	code
                                           _UDPSetTxBuffer:
                                           ;	.line	370; TCPIP_Stack/UDP.c	void UDPSetTxBuffer(WORD wOffset)
00a494   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a496   ffe5
00a498   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a49a   ffd9
00a49c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a49e   ffe5
00a4a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a4a2   ffe5
00a4a4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a4a6   ffe5
00a4a8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a4aa   ffe5
00a4ac   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a4ae   ffe5
00a4b0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a4b2   ffe5
00a4b4   0e02     movlw	0x2                	MOVLW	0x02
00a4b6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a4b8   f000
00a4ba   0e03     movlw	0x3                	MOVLW	0x03
00a4bc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a4be   f001
                                           ;	.line	372; TCPIP_Stack/UDP.c	IPSetTxBuffer(wOffset+sizeof(UDP_HEADER));
00a4c0   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00a4c2   f002
00a4c4   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
00a4c6   f003
00a4c8   6a04     clrf	0x4, 0              	CLRF	r0x04
00a4ca   6a05     clrf	0x5, 0              	CLRF	r0x05
00a4cc   0e35     movlw	0x35               	MOVLW	0x35
00a4ce   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00a4d0   0e1a     movlw	0x1a               	MOVLW	0x1a
00a4d2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00a4d4   0e00     movlw	0                  	MOVLW	0x00
00a4d6   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00a4d8   0e00     movlw	0                  	MOVLW	0x00
00a4da   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00a4dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a4de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a4e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a4e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a4e4   ec88     call	0xa310, 0           	CALL	_MACSetWritePtr
00a4e6   f051
00a4e8   0e02     movlw	0x2                	MOVLW	0x02
00a4ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/UDP.c	wPutOffset = wOffset;
00a4ec   c000     movff	0, 0x22c           	MOVFF	r0x00, _wPutOffset
00a4ee   f22c
00a4f0   c001     movff	0x1, 0x22d         	MOVFF	r0x01, (_wPutOffset + 1)
00a4f2   f22d
00a4f4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a4f6   f005
00a4f8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a4fa   f004
00a4fc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a4fe   f003
00a500   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a502   f002
00a504   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a506   f001
00a508   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a50a   f000
00a50c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a50e   ffd9
00a510   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPClose	code
                                           _UDPClose:
                                           ;	.line	339; TCPIP_Stack/UDP.c	void UDPClose(UDP_SOCKET s)
00a0f4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a0f6   ffe5
00a0f8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a0fa   ffd9
00a0fc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a0fe   ffe5
00a100   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a102   ffe5
00a104   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a106   ffe5
00a108   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a10a   ffe5
00a10c   0e02     movlw	0x2                	MOVLW	0x02
00a10e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a110   f000
                                           ;	.line	341; TCPIP_Stack/UDP.c	if(s >= MAX_UDP_SOCKETS) return;
00a112   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00a114   f001
00a116   6a02     clrf	0x2, 0              	CLRF	r0x02
00a118   0e00     movlw	0                  	MOVLW	0x00
00a11a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00a11c   e102     bnz	0xa122               	BNZ	_00158_DS_
00a11e   0e0a     movlw	0xa                	MOVLW	0x0a
00a120   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00158_DS_:
00a122   e223     bc	0xa16a                	BC	_00155_DS_
                                           ; ;multiply lit val:0x0e by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	342; TCPIP_Stack/UDP.c	UDPSocketInfo[s].localPort = INVALID_UDP_PORT;
00a124   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a126   0d0e     mullw	0xe                	MULLW	0x0e
00a128   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00a12a   f000
00a12c   6a01     clrf	0x1, 0              	CLRF	r0x01
00a12e   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00a130   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a132   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00a134   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a136   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a138   0f0c     addlw	0xc                	ADDLW	0x0c
00a13a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a13c   0e00     movlw	0                  	MOVLW	0x00
00a13e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00a140   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a142   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00a144   ffe9
00a146   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00a148   ffea
00a14a   0e00     movlw	0                  	MOVLW	0x00
00a14c   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00a14e   0e00     movlw	0                  	MOVLW	0x00
00a150   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	343; TCPIP_Stack/UDP.c	UDPSocketInfo[s].remoteNode.IPAddr.Val = 0x00000000;
00a152   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00a154   ffe9
00a156   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00a158   ffea
00a15a   0e00     movlw	0                  	MOVLW	0x00
00a15c   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00a15e   0e00     movlw	0                  	MOVLW	0x00
00a160   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00a162   0e00     movlw	0                  	MOVLW	0x00
00a164   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00a166   0e00     movlw	0                  	MOVLW	0x00
00a168   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00155_DS_:
00a16a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a16c   f003
00a16e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a170   f002
00a172   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a174   f001
00a176   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a178   f000
00a17a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a17c   ffd9
00a17e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPOpen	code
                                           _UDPOpen:
                                           ;	.line	258; TCPIP_Stack/UDP.c	UDP_SOCKET UDPOpen(UDP_PORT this_localPort,
004f98   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004f9a   ffe5
004f9c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004f9e   ffd9
004fa0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004fa2   ffe5
004fa4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004fa6   ffe5
004fa8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004faa   ffe5
004fac   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004fae   ffe5
004fb0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004fb2   ffe5
004fb4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004fb6   ffe5
004fb8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004fba   ffe5
004fbc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004fbe   ffe5
004fc0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004fc2   ffe5
004fc4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004fc6   ffe5
004fc8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004fca   ffe5
004fcc   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004fce   ffe5
004fd0   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
004fd2   ffe5
004fd4   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
004fd6   ffe5
004fd8   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
004fda   ffe5
004fdc   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
004fde   ffe5
004fe0   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
004fe2   ffe5
004fe4   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
004fe6   ffe5
004fe8   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
004fea   ffe5
004fec   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
004fee   ffe5
004ff0   0e02     movlw	0x2                	MOVLW	0x02
004ff2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004ff4   f000
004ff6   0e03     movlw	0x3                	MOVLW	0x03
004ff8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004ffa   f001
004ffc   0e04     movlw	0x4                	MOVLW	0x04
004ffe   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005000   f002
005002   0e05     movlw	0x5                	MOVLW	0x05
005004   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005006   f003
005008   0e06     movlw	0x6                	MOVLW	0x06
00500a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00500c   f004
00500e   0e07     movlw	0x7                	MOVLW	0x07
005010   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005012   f005
005014   0e08     movlw	0x8                	MOVLW	0x08
005016   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
005018   f006
                                           ;	.line	269; TCPIP_Stack/UDP.c	p = UDPSocketInfo; //pointer to the table of UDP sockets
00501a   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00501c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00501e   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
005020   6e07     movwf	0x7, 0             	MOVWF	r0x07
005022   0e80     movlw	0x80               	MOVLW	0x80
005024   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
005026   6a0a     clrf	0xa, 0              	CLRF	r0x0a
005028   c007     movff	0x7, 0xb           	MOVFF	r0x07, r0x0b
00502a   f00b
00502c   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
00502e   f00c
005030   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
005032   f00d
005034   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00134_DS_:
005036   c00e     movff	0xe, 0xf           	MOVFF	r0x0e, r0x0f
005038   f00f
00503a   6a10     clrf	0x10, 0             	CLRF	r0x10
00503c   0e00     movlw	0                  	MOVLW	0x00
00503e   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
005040   e102     bnz	0x5046               	BNZ	_00146_DS_
005042   0e0a     movlw	0xa                	MOVLW	0x0a
005044   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00146_DS_:
005046   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005048   d0ac     bra	0x51a2               	BRA	_00137_DS_
                                           ;	.line	272; TCPIP_Stack/UDP.c	if(p->localPort == INVALID_UDP_PORT)
00504a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00504c   0f0c     addlw	0xc                	ADDLW	0x0c
00504e   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
005050   0e00     movlw	0                  	MOVLW	0x00
005052   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
005054   6e10     movwf	0x10, 0            	MOVWF	r0x10
005056   0e00     movlw	0                  	MOVLW	0x00
005058   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
00505a   6e11     movwf	0x11, 0            	MOVWF	r0x11
00505c   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00505e   ffe9
005060   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
005062   fff3
005064   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005066   ec88     call	0xad10, 0           	CALL	__gptrget2
005068   f056
00506a   6e12     movwf	0x12, 0            	MOVWF	r0x12
00506c   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
00506e   f013
005070   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
005072   1013     iorwf	0x13, 0, 0         	IORWF	r0x13, W
005074   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
005076   d085     bra	0x5182               	BRA	_00133_DS_
                                           ;	.line	274; TCPIP_Stack/UDP.c	p->localPort = this_localPort;	
005078   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00507a   ffe5
00507c   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
00507e   fff4
005080   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
005082   ffe9
005084   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
005086   fff3
005088   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
00508a   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
00508c   f057
                                           ;	.line	276; TCPIP_Stack/UDP.c	if(this_localPort == 0x0000u) //select any free port
00508e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005090   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
005092   e132     bnz	0x50f8               	BNZ	_00128_DS_
                                           ;	.line	278; TCPIP_Stack/UDP.c	if(NextPort > LOCAL_UDP_PORT_END_NUMBER || 
005094   0e20     movlw	0x20               	MOVLW	0x20
005096   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
005098   5d31     subwf	0x31, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
00509a   e103     bnz	0x50a2               	BNZ	_00147_DS_
00509c   0e01     movlw	0x1                	MOVLW	0x01
00509e   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
0050a0   5d30     subwf	0x30, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00147_DS_:
0050a2   e208     bc	0x50b4                	BC	_00124_DS_
                                           ;	.line	279; TCPIP_Stack/UDP.c	NextPort < LOCAL_UDP_PORT_START_NUMBER)
0050a4   0e10     movlw	0x10               	MOVLW	0x10
0050a6   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0050a8   5d31     subwf	0x31, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
0050aa   e103     bnz	0x50b2               	BNZ	_00148_DS_
0050ac   0e00     movlw	0                  	MOVLW	0x00
0050ae   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
0050b0   5d30     subwf	0x30, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00148_DS_:
0050b2   e205     bc	0x50be                	BC	_00125_DS_
                                           _00124_DS_:
0050b4   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
                                           ;	.line	280; TCPIP_Stack/UDP.c	NextPort = LOCAL_UDP_PORT_START_NUMBER;
0050b6   6b30     clrf	0x30, 0x1           	CLRF	_UDPOpen_NextPort_1_1, B
0050b8   0e10     movlw	0x10               	MOVLW	0x10
0050ba   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0050bc   6f31     movwf	0x31, 0x1          	MOVWF	(_UDPOpen_NextPort_1_1 + 1), B
                                           _00125_DS_:
                                           ;	.line	282; TCPIP_Stack/UDP.c	p->localPort    = NextPort++;
0050be   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0050c0   0f0c     addlw	0xc                	ADDLW	0x0c
0050c2   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0050c4   0e00     movlw	0                  	MOVLW	0x00
0050c6   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0050c8   6e10     movwf	0x10, 0            	MOVWF	r0x10
0050ca   0e00     movlw	0                  	MOVLW	0x00
0050cc   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0050ce   6e11     movwf	0x11, 0            	MOVWF	r0x11
0050d0   c230     movff	0x230, 0x12        	MOVFF	_UDPOpen_NextPort_1_1, r0x12
0050d2   f012
0050d4   c231     movff	0x231, 0x13        	MOVFF	(_UDPOpen_NextPort_1_1 + 1), r0x13
0050d6   f013
0050d8   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
0050da   2b30     incf	0x30, 0x1, 0x1      	INCF	_UDPOpen_NextPort_1_1, F, B
0050dc   e302     bnc	0x50e2               	BNC	_30298_DS_
0050de   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0050e0   2b31     incf	0x31, 0x1, 0x1      	INCF	(_UDPOpen_NextPort_1_1 + 1), F, B
                                           _30298_DS_:
0050e2   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0050e4   ffe5
0050e6   c013     movff	0x13, 0xff4        	MOVFF	r0x13, PRODH
0050e8   fff4
0050ea   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0050ec   ffe9
0050ee   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0050f0   fff3
0050f2   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0050f4   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
0050f6   f057
                                           _00128_DS_:
                                           ;	.line	286; TCPIP_Stack/UDP.c	if(this_remoteNode)
0050f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0050fa   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0050fc   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0050fe   e015     bz	0x512a                	BZ	_00130_DS_
                                           ;	.line	289; TCPIP_Stack/UDP.c	sizeof(p->remoteNode));
005100   0e00     movlw	0                  	MOVLW	0x00
005102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005104   0e0a     movlw	0xa                	MOVLW	0x0a
005106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005108   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00510a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00510c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00510e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005110   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005114   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005118   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00511a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00511c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00511e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005120   ecd1     call	0x8ba2, 0           	CALL	_memcpy
005122   f045
005124   0e08     movlw	0x8                	MOVLW	0x08
005126   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005128   d014     bra	0x5152               	BRA	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	294; TCPIP_Stack/UDP.c	memset((void*)&(p->remoteNode), 0xFF, sizeof(p->remoteNode));
00512a   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
00512c   f00f
00512e   c008     movff	0x8, 0x10          	MOVFF	r0x08, r0x10
005130   f010
005132   c009     movff	0x9, 0x11          	MOVFF	r0x09, r0x11
005134   f011
005136   0e00     movlw	0                  	MOVLW	0x00
005138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00513a   0e0a     movlw	0xa                	MOVLW	0x0a
00513c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00513e   0eff     movlw	0xff               	MOVLW	0xff
005140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005142   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005146   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
005148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00514a   ec49     call	0x9692, 0           	CALL	_memset
00514c   f04b
00514e   0e05     movlw	0x5                	MOVLW	0x05
005150   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	297; TCPIP_Stack/UDP.c	p->remotePort = this_remotePort;
005152   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005154   0f0a     addlw	0xa                	ADDLW	0x0a
005156   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
005158   0e00     movlw	0                  	MOVLW	0x00
00515a   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00515c   6e10     movwf	0x10, 0            	MOVWF	r0x10
00515e   0e00     movlw	0                  	MOVLW	0x00
005160   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
005162   6e11     movwf	0x11, 0            	MOVWF	r0x11
005164   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005166   ffe5
005168   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
00516a   fff4
00516c   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00516e   ffe9
005170   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
005172   fff3
005174   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005176   ecc5     call	0xaf8a, 0           	CALL	__gptrput2
005178   f057
                                           ;	.line	302; TCPIP_Stack/UDP.c	activeUDPSocket = s;
00517a   c00a     movff	0xa, 0x24a         	MOVFF	r0x0a, _activeUDPSocket
00517c   f24a
                                           ;	.line	303; TCPIP_Stack/UDP.c	return s;
00517e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
005180   d011     bra	0x51a4               	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	305; TCPIP_Stack/UDP.c	p++;
005182   0e0e     movlw	0xe                	MOVLW	0x0e
005184   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
005186   0e00     movlw	0                  	MOVLW	0x00
005188   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
00518a   0e00     movlw	0                  	MOVLW	0x00
00518c   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
00518e   c00b     movff	0xb, 0x7           	MOVFF	r0x0b, r0x07
005190   f007
005192   c00c     movff	0xc, 0x8           	MOVFF	r0x0c, r0x08
005194   f008
005196   c00d     movff	0xd, 0x9           	MOVFF	r0x0d, r0x09
005198   f009
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
00519a   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
00519c   c00e     movff	0xe, 0xa           	MOVFF	r0x0e, r0x0a
00519e   f00a
0051a0   d74a     bra	0x5036               	BRA	_00134_DS_
                                           _00137_DS_:
                                           ;	.line	308; TCPIP_Stack/UDP.c	return (UDP_SOCKET)INVALID_UDP_SOCKET;
0051a2   68e8     setf	0xe8, 0             	SETF	WREG
                                           _00138_DS_:
0051a4   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0051a6   f013
0051a8   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0051aa   f012
0051ac   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0051ae   f011
0051b0   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0051b2   f010
0051b4   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0051b6   f00f
0051b8   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0051ba   f00e
0051bc   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0051be   f00d
0051c0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0051c2   f00c
0051c4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0051c6   f00b
0051c8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0051ca   f00a
0051cc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0051ce   f009
0051d0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0051d2   f008
0051d4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0051d6   f007
0051d8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0051da   f006
0051dc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0051de   f005
0051e0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0051e2   f004
0051e4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0051e6   f003
0051e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0051ea   f002
0051ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0051ee   f001
0051f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0051f2   f000
0051f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0051f6   ffd9
0051f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPTask	code
                                           _UDPTask:
                                           ;	.line	215; TCPIP_Stack/UDP.c	void UDPTask(void)
00afb6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00afb8   ffe5
00afba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00afbc   ffd9
                                           ;	.line	217; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
00afbe   0eff     movlw	0xff               	MOVLW	0xff
00afc0   010e     movlb	0xe                	BANKSEL	_LastPutSocket
00afc2   6f5a     movwf	0x5a, 0x1          	MOVWF	_LastPutSocket, B
00afc4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00afc6   ffd9
00afc8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPInit	code
                                           _UDPInit:
                                           ;	.line	177; TCPIP_Stack/UDP.c	void UDPInit(void)
00aa92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aa94   ffe5
00aa96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aa98   ffd9
00aa9a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00aa9c   ffe5
00aa9e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00aaa0   ffe5
00aaa2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00aaa4   ffe5
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
00aaa6   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00105_DS_:
00aaa8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00aaaa   f001
00aaac   6a02     clrf	0x2, 0              	CLRF	r0x02
00aaae   0e00     movlw	0                  	MOVLW	0x00
00aab0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00aab2   e102     bnz	0xaab8               	BNZ	_00114_DS_
00aab4   0e0a     movlw	0xa                	MOVLW	0x0a
00aab6   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00114_DS_:
00aab8   e207     bc	0xaac8                	BC	_00108_DS_
                                           ;	.line	184; TCPIP_Stack/UDP.c	UDPClose(s);
00aaba   5000     movf	0, 0, 0             	MOVF	r0x00, W
00aabc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aabe   ec7a     call	0xa0f4, 0           	CALL	_UDPClose
00aac0   f050
00aac2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
00aac4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00aac6   d7f0     bra	0xaaa8               	BRA	_00105_DS_
                                           _00108_DS_:
00aac8   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	186; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
00aaca   8349     bsf	0x49, 0x1, 0x1       	BSF	_Flags, 1, B
00aacc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00aace   f002
00aad0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00aad2   f001
00aad4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aad6   f000
00aad8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aada   ffd9
00aadc   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4642 (0x1222) bytes ( 3.54%)
                                           ;           	 2321 (0x0911) words
                                           ; udata size:	  198 (0x00c6) bytes ( 5.16%)
                                           ; access size:	   28 (0x001c) bytes
                                           
                                           
                                           	end
