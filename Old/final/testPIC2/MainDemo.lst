gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 5-18-2013  22:03:33
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:43:28 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _nbr_sec
                                           	global _message
                                           	global _AN0String
                                           	global _get_pool_el_ip
                                           	global _set_to_dhcp_ip
                                           	global _int_to_string
                                           	global _mac_cmp
                                           	global _ip_cmp
                                           	global _update_pool
                                           	global _send_release
                                           	global _extract_bootp_header
                                           	global _handle_server_msg
                                           	global _forgeBootpHeaderRequest
                                           	global _forgeBootpHeaderAck
                                           	global _transfer_msg_to_client
                                           	global _set_mac_to_dhcp_server
                                           	global _handle_client_msg
                                           	global _build_bootp
                                           	global _end_dhcp
                                           	global _discover_msg
                                           	global _request_msg
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _DisplayIPValue
                                           	global _strlcpy
                                           	global _AppConfig
                                           	global _GATEWAY_MACA
                                           	global _pool
                                           	global _LowISR
                                           	global _HighISR
                                           	global _init_pool_el
                                           	global _init_pool
                                           	global _is_free
                                           	global _add_to_pool
                                           	global _remove_from_pool
                                           	global _get_pool_el_mac
                                           	global _set_to_MAC
                                           	global _number_of_char
                                           	global _display_mac
                                           	global _display_ip
                                           	global _time_action
                                           	global _build_dhcp_header
                                           	global _send_request
                                           	global _wait_network_data
                                           	global _get_ack_lease_time
                                           	global _forgeBootpHeader
                                           	global _UDPPutArrayInvert
                                           	global _get_gateway_MAC
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput3
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _uitoa
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _StackInit
                                           	extern _StackTaskHelp
                                           	extern _StackTask
                                           	extern _TickInit
                                           	extern _TickGet
                                           	extern _TickConvertToMilliseconds
                                           	extern _TickUpdate
                                           	extern _ARPResolve
                                           	extern _ARPIsResolved
                                           	extern _UDPOpen
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern __divsint
                                           	extern __modsint
                                           	extern __modulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _nbr_sec	db	0x00, 0x00
                                           _time_action_prev_1_1	db	0x00, 0x00, 0x00, 0x00
                                           _time_action_t_1_1	db	0x00, 0x00, 0x00, 0x00
                                           _time_action_count_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           
                                           udata_MainDemo_0	udata
                                           _AN0String	res	8
                                           
                                           udata_MainDemo_1	udata
                                           _message	res	3
                                           
                                           udata_MainDemo_2	udata
                                           _pool	res	200
                                           
                                           udata_MainDemo_3	udata
                                           _remove_from_pool_pool_el_1_1	res	3
                                           
                                           udata_MainDemo_4	udata
                                           _display_mac_a_1_1	res	10
                                           
                                           udata_MainDemo_5	udata
                                           _display_mac_b_1_1	res	10
                                           
                                           udata_MainDemo_6	udata
                                           _display_mac_c_1_1	res	10
                                           
                                           udata_MainDemo_7	udata
                                           _display_mac_d_1_1	res	10
                                           
                                           udata_MainDemo_8	udata
                                           _display_mac_e_1_1	res	10
                                           
                                           udata_MainDemo_9	udata
                                           _display_mac_f_1_1	res	10
                                           
                                           udata_MainDemo_10	udata
                                           _display_ip_a_1_1	res	10
                                           
                                           udata_MainDemo_11	udata
                                           _display_ip_b_1_1	res	10
                                           
                                           udata_MainDemo_12	udata
                                           _display_ip_c_1_1	res	10
                                           
                                           udata_MainDemo_13	udata
                                           _display_ip_d_1_1	res	10
                                           
                                           udata_MainDemo_14	udata
                                           _send_request_dhcp_header_length_1_1	res	2
                                           
                                           udata_MainDemo_15	udata
                                           _send_request_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_16	udata
                                           _send_request_dhcp_header_1_1	res	200
                                           
                                           udata_MainDemo_17	udata
                                           _send_release_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_18	udata
                                           _AppConfig	res	51
                                           
                                           udata_MainDemo_19	udata
                                           _wait_network_data_socket_sendto_server_1_1	res	1
                                           
                                           udata_MainDemo_20	udata
                                           _wait_network_data_socket_recv_1_1	res	1
                                           
                                           udata_MainDemo_21	udata
                                           _wait_network_data_socket_sendto_client_1_1	res	1
                                           
                                           udata_MainDemo_22	udata
                                           _wait_network_data_dhcp_server_ip_1_1	res	4
                                           
                                           udata_MainDemo_23	udata
                                           _wait_network_data_last_ip_1_1	res	4
                                           
                                           udata_MainDemo_24	udata
                                           _extract_bootp_header_opt_1_1	res	1
                                           
                                           udata_MainDemo_25	udata
                                           _extract_bootp_header_word_buf_1_1	res	4
                                           
                                           udata_MainDemo_26	udata
                                           _extract_bootp_header_length_1_1	res	1
                                           
                                           udata_MainDemo_27	udata
                                           _handle_server_msg_node_pool_state_1_1	res	3
                                           
                                           udata_MainDemo_28	udata
                                           _handle_server_msg_dhcp_type_1_1	res	1
                                           
                                           udata_MainDemo_29	udata
                                           _handle_server_msg_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_30	udata
                                           _handle_server_msg_dhcp_header_1_1	res	200
                                           
                                           udata_MainDemo_31	udata
                                           _handle_server_msg_dhcp_header_length_1_1	res	2
                                           
                                           udata_MainDemo_32	udata
                                           _handle_server_msg_lease_time_1_1	res	4
                                           
                                           udata_MainDemo_33	udata
                                           _transfer_msg_to_client_lease_time_1_1	res	2
                                           
                                           udata_MainDemo_34	udata
                                           _transfer_msg_to_client_broadcast_1_1	res	4
                                           
                                           udata_MainDemo_35	udata
                                           _GATEWAY_MACA	res	6
                                           
                                           udata_MainDemo_36	udata
                                           _handle_client_msg_node_pool_state_1_1	res	3
                                           
                                           udata_MainDemo_37	udata
                                           _handle_client_msg_dhcp_type_1_1	res	1
                                           
                                           udata_MainDemo_38	udata
                                           _handle_client_msg_bootp_header_1_1	res	34
                                           
                                           udata_MainDemo_39	udata
                                           _handle_client_msg_dhcp_header_1_1	res	200
                                           
                                           udata_MainDemo_40	udata
                                           _handle_client_msg_dhcp_header_length_1_1	res	2
                                           
                                           udata_MainDemo_41	udata
                                           _get_gateway_MAC_gateway_MAC2_1_1	res	6
                                           
                                           udata_MainDemo_42	udata
                                           _main_gateway_MAC_1_1	res	6
                                           
                                           udata_MainDemo_43	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           udata_MainDemo_44	udata
                                           _DisplayIPValue_IPDigit_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x2_LowISR	code	0X000018
                                           ivec_0x2_LowISR:
000018   ef56     goto	0x9aac              	GOTO	_LowISR
00001a   f04d
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x1_HighISR	code	0X000008
                                           ivec_0x1_HighISR:
000008   ef54     goto	0xb6a8              	GOTO	_HighISR
00000a   f05b
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_MainDemo__main	code
                                           _main:
                                           ;	.line	811; MainDemo.c	InitializeBoard();
00aeb8   ec60     call	0xbac0, 0           	CALL	_InitializeBoard
00aeba   f05d
                                           ;	.line	813; MainDemo.c	LCDInit();
00aebc   ec9a     call	0x5734, 0           	CALL	_LCDInit
00aebe   f02b
                                           ;	.line	814; MainDemo.c	DelayMs(100);
00aec0   0e10     movlw	0x10               	MOVLW	0x10
00aec2   6e00     movwf	0, 0               	MOVWF	r0x00
00aec4   0e98     movlw	0x98               	MOVLW	0x98
00aec6   6e01     movwf	0x1, 0             	MOVWF	r0x01
00aec8   0e02     movlw	0x2                	MOVLW	0x02
00aeca   6e02     movwf	0x2, 0             	MOVWF	r0x02
00aecc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00680_DS_:
00aece   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00aed0   f004
00aed2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00aed4   f005
00aed6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00aed8   f006
00aeda   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00aedc   f007
00aede   0eff     movlw	0xff               	MOVLW	0xff
00aee0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00aee2   0eff     movlw	0xff               	MOVLW	0xff
00aee4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00aee6   0eff     movlw	0xff               	MOVLW	0xff
00aee8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00aeea   0eff     movlw	0xff               	MOVLW	0xff
00aeec   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00aeee   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00aef0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00aef2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00aef4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00aef6   e1eb     bnz	0xaece               	BNZ	_00680_DS_
                                           ;	.line	816; MainDemo.c	TickInit();
00aef8   ece0     call	0xbdc0, 0           	CALL	_TickInit
00aefa   f05e
                                           ;	.line	818; MainDemo.c	InitAppConfig();
00aefc   ece7     call	0x91ce, 0           	CALL	_InitAppConfig
00aefe   f048
                                           ;	.line	821; MainDemo.c	StackInit();    
00af00   ece9     call	0xafd2, 0           	CALL	_StackInit
00af02   f057
                                           ;	.line	823; MainDemo.c	DisplayString(0, "LINGI2315");
00af04   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
00af06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af08   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_8)
00af0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af0c   0e86     movlw	0x86               	MOVLW	LOW(__str_8)
00af0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af10   0e00     movlw	0                  	MOVLW	0x00
00af12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af14   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00af16   f050
00af18   0e04     movlw	0x4                	MOVLW	0x04
00af1a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	824; MainDemo.c	get_gateway_MAC();
00af1c   ec9e     call	0x7b3c, 0           	CALL	_get_gateway_MAC
00af1e   f03d
                                           ;	.line	825; MainDemo.c	init_pool();
00af20   ec53     call	0xaaa6, 0           	CALL	_init_pool
00af22   f055
                                           ;	.line	826; MainDemo.c	wait_network_data(gateway_MAC);
00af24   0e0b     movlw	0xb                	MOVLW	HIGH(_main_gateway_MAC_1_1)
00af26   6e01     movwf	0x1, 0             	MOVWF	r0x01
00af28   0ef6     movlw	0xf6               	MOVLW	LOW(_main_gateway_MAC_1_1)
00af2a   6e00     movwf	0, 0               	MOVWF	r0x00
00af2c   0e80     movlw	0x80               	MOVLW	0x80
00af2e   6e02     movwf	0x2, 0             	MOVWF	r0x02
00af30   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00af32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af34   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00af36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af38   5000     movf	0, 0, 0             	MOVF	r0x00, W
00af3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00af3c   ec67     call	0x4ace, 0           	CALL	_wait_network_data
00af3e   f025
00af40   0e03     movlw	0x3                	MOVLW	0x03
00af42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00af44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__strlcpy	code
                                           _strlcpy:
                                           ;	.line	1061; MainDemo.c	strlcpy(char *dst, const char *src, size_t siz)
006478   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00647a   ffe5
00647c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00647e   ffd9
006480   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006482   ffe5
006484   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006486   ffe5
006488   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00648a   ffe5
00648c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00648e   ffe5
006490   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006492   ffe5
006494   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006496   ffe5
006498   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00649a   ffe5
00649c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00649e   ffe5
0064a0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0064a2   ffe5
0064a4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0064a6   ffe5
0064a8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0064aa   ffe5
0064ac   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0064ae   ffe5
0064b0   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0064b2   ffe5
0064b4   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0064b6   ffe5
0064b8   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0064ba   ffe5
0064bc   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0064be   ffe5
0064c0   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0064c2   ffe5
0064c4   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0064c6   ffe5
0064c8   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0064ca   ffe5
0064cc   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0064ce   ffe5
0064d0   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0064d2   ffe5
0064d4   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0064d6   ffe5
0064d8   0e02     movlw	0x2                	MOVLW	0x02
0064da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0064dc   f000
0064de   0e03     movlw	0x3                	MOVLW	0x03
0064e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0064e2   f001
0064e4   0e04     movlw	0x4                	MOVLW	0x04
0064e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0064e8   f002
0064ea   0e05     movlw	0x5                	MOVLW	0x05
0064ec   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0064ee   f003
0064f0   0e06     movlw	0x6                	MOVLW	0x06
0064f2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0064f4   f004
0064f6   0e07     movlw	0x7                	MOVLW	0x07
0064f8   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0064fa   f005
0064fc   0e08     movlw	0x8                	MOVLW	0x08
0064fe   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
006500   f006
006502   0e09     movlw	0x9                	MOVLW	0x09
006504   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
006506   f007
                                           ;	.line	1063; MainDemo.c	char       *d = dst;
006508   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
00650a   f008
00650c   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
00650e   f009
006510   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
006512   f00a
                                           ;	.line	1064; MainDemo.c	const char *s = src;
006514   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
006516   f00b
006518   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
00651a   f00c
00651c   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
00651e   f00d
                                           ;	.line	1065; MainDemo.c	size_t      n = siz;
006520   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
006522   f00e
006524   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
006526   f00f
                                           ;	.line	1068; MainDemo.c	if (n != 0)
006528   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00652a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00652c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00652e   d03e     bra	0x65ac               	BRA	_00774_DS_
                                           ;	.line	1070; MainDemo.c	while (--n != 0)
006530   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
006532   f010
006534   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
006536   f011
006538   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
00653a   f012
00653c   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
00653e   f013
006540   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
006542   f014
                                           _00770_DS_:
006544   0eff     movlw	0xff               	MOVLW	0xff
006546   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
006548   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00654a   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
00654c   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
00654e   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
006550   e01d     bz	0x658c                	BZ	_00789_DS_
                                           ;	.line	1072; MainDemo.c	if ((*d++ = *s++) == '\0')
006552   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
006554   ffe9
006556   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
006558   fff3
00655a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00655c   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00655e   f05e
006560   6e15     movwf	0x15, 0            	MOVWF	r0x15
006562   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
006564   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006566   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
006568   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00656a   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
00656c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00656e   ffe5
006570   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006572   ffe9
006574   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006576   fff3
006578   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00657a   ec28     call	0xbe50, 0           	CALL	__gptrput1
00657c   f05f
00657e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006580   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006582   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006584   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006586   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
006588   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00658a   e1dc     bnz	0x6544               	BNZ	_00770_DS_
                                           _00789_DS_:
                                           ;	.line	1073; MainDemo.c	break;
00658c   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
00658e   f00b
006590   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
006592   f00c
006594   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
006596   f00d
006598   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
00659a   f008
00659c   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
00659e   f009
0065a0   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0065a2   f00a
0065a4   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
0065a6   f00e
0065a8   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
0065aa   f00f
                                           _00774_DS_:
                                           ;	.line	1078; MainDemo.c	if (n == 0)
0065ac   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0065ae   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
0065b0   e127     bnz	0x6600               	BNZ	_00781_DS_
                                           ;	.line	1080; MainDemo.c	if (siz != 0)
0065b2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0065b4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0065b6   e009     bz	0x65ca                	BZ	_00788_DS_
                                           ;	.line	1081; MainDemo.c	*d = '\0';          /* NUL-terminate dst */
0065b8   0e00     movlw	0                  	MOVLW	0x00
0065ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065bc   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0065be   ffe9
0065c0   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0065c2   fff3
0065c4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0065c6   ec28     call	0xbe50, 0           	CALL	__gptrput1
0065c8   f05f
                                           _00788_DS_:
                                           ;	.line	1082; MainDemo.c	while (*s++)
0065ca   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
0065cc   f000
0065ce   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
0065d0   f001
0065d2   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
0065d4   f002
                                           _00777_DS_:
0065d6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0065d8   ffe9
0065da   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0065dc   fff3
0065de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0065e0   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0065e2   f05e
0065e4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0065e6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0065e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0065ea   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0065ec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0065ee   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0065f0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0065f2   e1f1     bnz	0x65d6               	BNZ	_00777_DS_
0065f4   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
0065f6   f00b
0065f8   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
0065fa   f00c
0065fc   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
0065fe   f00d
                                           _00781_DS_:
                                           ;	.line	1086; MainDemo.c	return (s - src - 1);       /* count does not include NUL */
006600   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006602   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
006604   6e03     movwf	0x3, 0             	MOVWF	r0x03
006606   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006608   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
00660a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00660c   0eff     movlw	0xff               	MOVLW	0xff
00660e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
006610   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006612   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
006614   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006616   fff3
006618   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00661a   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
00661c   f015
00661e   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
006620   f014
006622   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
006624   f013
006626   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
006628   f012
00662a   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
00662c   f011
00662e   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
006630   f010
006632   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
006634   f00f
006636   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
006638   f00e
00663a   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00663c   f00d
00663e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
006640   f00c
006642   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006644   f00b
006646   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006648   f00a
00664a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00664c   f009
00664e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006650   f008
006652   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006654   f007
006656   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006658   f006
00665a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00665c   f005
00665e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006660   f004
006662   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006664   f003
006666   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006668   f002
00666a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00666c   f001
00666e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006670   f000
006672   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006674   ffd9
006676   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitAppConfig	code
                                           _InitAppConfig:
                                           ;	.line	990; MainDemo.c	static void InitAppConfig(void)
0091ce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0091d0   ffe5
0091d2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0091d4   ffd9
0091d6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0091d8   ffe5
0091da   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0091dc   ffe5
0091de   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0091e0   ffe5
0091e2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0091e4   ffe5
0091e6   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	992; MainDemo.c	AppConfig.Flags.bIsDHCPEnabled = FALSE;
0091e8   9df4     bcf	0xf4, 0x6, 0x1       	BCF	(_AppConfig + 44), 6, B
0091ea   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	993; MainDemo.c	AppConfig.Flags.bInConfigMode = TRUE;
0091ec   8ff4     bsf	0xf4, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
0091ee   0108     movlb	0x8                	BANKSEL	(_AppConfig + 45)
                                           ;	.line	997; MainDemo.c	AppConfig.MyMACAddr.v[0] = 0;
0091f0   6bf5     clrf	0xf5, 0x1           	CLRF	(_AppConfig + 45), B
                                           ;	.line	998; MainDemo.c	AppConfig.MyMACAddr.v[1] = 0x04;
0091f2   0e04     movlw	0x4                	MOVLW	0x04
0091f4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 46)
0091f6   6ff6     movwf	0xf6, 0x1          	MOVWF	(_AppConfig + 46), B
                                           ;	.line	999; MainDemo.c	AppConfig.MyMACAddr.v[2] = 0xA3;
0091f8   0ea3     movlw	0xa3               	MOVLW	0xa3
0091fa   0108     movlb	0x8                	BANKSEL	(_AppConfig + 47)
0091fc   6ff7     movwf	0xf7, 0x1          	MOVWF	(_AppConfig + 47), B
                                           ;	.line	1000; MainDemo.c	AppConfig.MyMACAddr.v[3] = 0x01;
0091fe   0e01     movlw	0x1                	MOVLW	0x01
009200   0108     movlb	0x8                	BANKSEL	(_AppConfig + 48)
009202   6ff8     movwf	0xf8, 0x1          	MOVWF	(_AppConfig + 48), B
                                           ;	.line	1001; MainDemo.c	AppConfig.MyMACAddr.v[4] = 0x02;
009204   0e02     movlw	0x2                	MOVLW	0x02
009206   0108     movlb	0x8                	BANKSEL	(_AppConfig + 49)
009208   6ff9     movwf	0xf9, 0x1          	MOVWF	(_AppConfig + 49), B
                                           ;	.line	1002; MainDemo.c	AppConfig.MyMACAddr.v[5] = 0x03;
00920a   0e03     movlw	0x3                	MOVLW	0x03
00920c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 50)
00920e   6ffa     movwf	0xfa, 0x1          	MOVWF	(_AppConfig + 50), B
                                           ;	.line	1005; MainDemo.c	AppConfig.MyIPAddr.Val = MY_DEFAULT_IP_ADDR_BYTE1 | 
009210   0ec0     movlw	0xc0               	MOVLW	0xc0
009212   0108     movlb	0x8                	BANKSEL	_AppConfig
009214   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
009216   0ea8     movlw	0xa8               	MOVLW	0xa8
009218   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
00921a   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
00921c   0e61     movlw	0x61               	MOVLW	0x61
00921e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
009220   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
009222   0e3c     movlw	0x3c               	MOVLW	0x3c
009224   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
009226   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
                                           ;	.line	1008; MainDemo.c	AppConfig.DefaultIPAddr.Val = AppConfig.MyIPAddr.Val;
009228   c8c8     movff	0x8c8, 0           	MOVFF	_AppConfig, r0x00
00922a   f000
00922c   c8c9     movff	0x8c9, 0x1         	MOVFF	(_AppConfig + 1), r0x01
00922e   f001
009230   c8ca     movff	0x8ca, 0x2         	MOVFF	(_AppConfig + 2), r0x02
009232   f002
009234   c8cb     movff	0x8cb, 0x3         	MOVFF	(_AppConfig + 3), r0x03
009236   f003
009238   5000     movf	0, 0, 0             	MOVF	r0x00, W
00923a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 20)
00923c   6fdc     movwf	0xdc, 0x1          	MOVWF	(_AppConfig + 20), B
00923e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009240   0108     movlb	0x8                	BANKSEL	(_AppConfig + 21)
009242   6fdd     movwf	0xdd, 0x1          	MOVWF	(_AppConfig + 21), B
009244   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009246   0108     movlb	0x8                	BANKSEL	(_AppConfig + 22)
009248   6fde     movwf	0xde, 0x1          	MOVWF	(_AppConfig + 22), B
00924a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00924c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 23)
00924e   6fdf     movwf	0xdf, 0x1          	MOVWF	(_AppConfig + 23), B
009250   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1009; MainDemo.c	AppConfig.MyMask.Val = MY_DEFAULT_MASK_BYTE1 | 
009252   69cc     setf	0xcc, 0x1           	SETF	(_AppConfig + 4), B
009254   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
009256   69cd     setf	0xcd, 0x1           	SETF	(_AppConfig + 5), B
009258   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
00925a   69ce     setf	0xce, 0x1           	SETF	(_AppConfig + 6), B
00925c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
00925e   6bcf     clrf	0xcf, 0x1           	CLRF	(_AppConfig + 7), B
                                           ;	.line	1012; MainDemo.c	AppConfig.DefaultMask.Val = AppConfig.MyMask.Val;
009260   c8cc     movff	0x8cc, 0           	MOVFF	(_AppConfig + 4), r0x00
009262   f000
009264   c8cd     movff	0x8cd, 0x1         	MOVFF	(_AppConfig + 5), r0x01
009266   f001
009268   c8ce     movff	0x8ce, 0x2         	MOVFF	(_AppConfig + 6), r0x02
00926a   f002
00926c   c8cf     movff	0x8cf, 0x3         	MOVFF	(_AppConfig + 7), r0x03
00926e   f003
009270   5000     movf	0, 0, 0             	MOVF	r0x00, W
009272   0108     movlb	0x8                	BANKSEL	(_AppConfig + 24)
009274   6fe0     movwf	0xe0, 0x1          	MOVWF	(_AppConfig + 24), B
009276   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009278   0108     movlb	0x8                	BANKSEL	(_AppConfig + 25)
00927a   6fe1     movwf	0xe1, 0x1          	MOVWF	(_AppConfig + 25), B
00927c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00927e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 26)
009280   6fe2     movwf	0xe2, 0x1          	MOVWF	(_AppConfig + 26), B
009282   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009284   0108     movlb	0x8                	BANKSEL	(_AppConfig + 27)
009286   6fe3     movwf	0xe3, 0x1          	MOVWF	(_AppConfig + 27), B
                                           ;	.line	1013; MainDemo.c	AppConfig.MyGateway.Val = MY_DEFAULT_GATE_BYTE1 | 
009288   0ec0     movlw	0xc0               	MOVLW	0xc0
00928a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 8)
00928c   6fd0     movwf	0xd0, 0x1          	MOVWF	(_AppConfig + 8), B
00928e   0ea8     movlw	0xa8               	MOVLW	0xa8
009290   0108     movlb	0x8                	BANKSEL	(_AppConfig + 9)
009292   6fd1     movwf	0xd1, 0x1          	MOVWF	(_AppConfig + 9), B
009294   0e61     movlw	0x61               	MOVLW	0x61
009296   0108     movlb	0x8                	BANKSEL	(_AppConfig + 10)
009298   6fd2     movwf	0xd2, 0x1          	MOVWF	(_AppConfig + 10), B
00929a   0e01     movlw	0x1                	MOVLW	0x01
00929c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 11)
00929e   6fd3     movwf	0xd3, 0x1          	MOVWF	(_AppConfig + 11), B
                                           ;	.line	1016; MainDemo.c	AppConfig.PrimaryDNSServer.Val = MY_DEFAULT_PRIMARY_DNS_BYTE1 | 
0092a0   0ec0     movlw	0xc0               	MOVLW	0xc0
0092a2   0108     movlb	0x8                	BANKSEL	(_AppConfig + 12)
0092a4   6fd4     movwf	0xd4, 0x1          	MOVWF	(_AppConfig + 12), B
0092a6   0ea8     movlw	0xa8               	MOVLW	0xa8
0092a8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 13)
0092aa   6fd5     movwf	0xd5, 0x1          	MOVWF	(_AppConfig + 13), B
0092ac   0e61     movlw	0x61               	MOVLW	0x61
0092ae   0108     movlb	0x8                	BANKSEL	(_AppConfig + 14)
0092b0   6fd6     movwf	0xd6, 0x1          	MOVWF	(_AppConfig + 14), B
0092b2   0e01     movlw	0x1                	MOVLW	0x01
0092b4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 15)
0092b6   6fd7     movwf	0xd7, 0x1          	MOVWF	(_AppConfig + 15), B
0092b8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 16)
                                           ;	.line	1020; MainDemo.c	AppConfig.SecondaryDNSServer.Val = MY_DEFAULT_SECONDARY_DNS_BYTE1 | 
0092ba   6bd8     clrf	0xd8, 0x1           	CLRF	(_AppConfig + 16), B
0092bc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 17)
0092be   6bd9     clrf	0xd9, 0x1           	CLRF	(_AppConfig + 17), B
0092c0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 18)
0092c2   6bda     clrf	0xda, 0x1           	CLRF	(_AppConfig + 18), B
0092c4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 19)
0092c6   6bdb     clrf	0xdb, 0x1           	CLRF	(_AppConfig + 19), B
0092c8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0092ca   f003
0092cc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0092ce   f002
0092d0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0092d2   f001
0092d4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0092d6   f000
0092d8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0092da   ffd9
0092dc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitializeBoard	code
                                           _InitializeBoard:
                                           ;	.line	934; MainDemo.c	static void InitializeBoard(void)
00bac0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bac2   ffe5
00bac4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bac6   ffd9
                                           ;	.line	937; MainDemo.c	LED0_TRIS = 0;  //LED0
00bac8   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	938; MainDemo.c	LED1_TRIS = 0;  //LED1
00baca   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	939; MainDemo.c	LED2_TRIS = 0;  //LED2
00bacc   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	940; MainDemo.c	LED3_TRIS = 0;  //LED_LCD1
00bace   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	941; MainDemo.c	LED4_TRIS = 0;  //LED_LCD2
00bad0   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	942; MainDemo.c	LED5_TRIS = 0;  //LED5=RELAY1
00bad2   9e98     bcf	0x98, 0x7, 0         	BCF	_TRISGbits, 7
                                           ;	.line	943; MainDemo.c	LED6_TRIS = 0;  //LED7=RELAY2
00bad4   9c98     bcf	0x98, 0x6, 0         	BCF	_TRISGbits, 6
                                           ;	.line	948; MainDemo.c	LED_PUT(0x00);  //turn off LED0 - LED2
00bad6   0ef8     movlw	0xf8               	MOVLW	0xf8
00bad8   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	949; MainDemo.c	RELAY_PUT(0x00); //turn relays off to save power
00bada   0e3f     movlw	0x3f               	MOVLW	0x3f
00badc   168f     andwf	0x8f, 0x1, 0       	ANDWF	_LATG, F
                                           ;	.line	955; MainDemo.c	OSCTUNE = 0x40;
00bade   0e40     movlw	0x40               	MOVLW	0x40
00bae0   6e9b     movwf	0x9b, 0            	MOVWF	_OSCTUNE
                                           ;	.line	962; MainDemo.c	if(OSCCONbits.IDLEN) //IDLEN = 0x80; 0x02 selects the primary clock
00bae2   aed3     btfss	0xd3, 0x7, 0       	BTFSS	_OSCCONbits, 7
00bae4   d003     bra	0xbaec               	BRA	_00756_DS_
                                           ;	.line	963; MainDemo.c	OSCCON = 0x82;
00bae6   0e82     movlw	0x82               	MOVLW	0x82
00bae8   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
00baea   d002     bra	0xbaf0               	BRA	_00757_DS_
                                           _00756_DS_:
                                           ;	.line	965; MainDemo.c	OSCCON = 0x02;
00baec   0e02     movlw	0x2                	MOVLW	0x02
00baee   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           _00757_DS_:
                                           ;	.line	968; MainDemo.c	RCONbits.IPEN = 1;		// Enable interrupt priorities
00baf0   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	969; MainDemo.c	INTCONbits.GIEH = 1;
00baf2   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	970; MainDemo.c	INTCONbits.GIEL = 1;
00baf4   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
00baf6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00baf8   ffd9
00bafa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayIPValue	code
                                           _DisplayIPValue:
                                           ;	.line	876; MainDemo.c	void DisplayIPValue(DWORD IPdw) // 32 bits
006c3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c40   ffe5
006c42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006c44   ffd9
006c46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006c48   ffe5
006c4a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006c4c   ffe5
006c4e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006c50   ffe5
006c52   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006c54   ffe5
006c56   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006c58   ffe5
006c5a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006c5c   ffe5
006c5e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006c60   ffe5
006c62   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006c64   ffe5
006c66   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006c68   ffe5
006c6a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006c6c   ffe5
006c6e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006c70   ffe5
006c72   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006c74   ffe5
006c76   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
006c78   ffe5
006c7a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
006c7c   ffe5
006c7e   0e02     movlw	0x2                	MOVLW	0x02
006c80   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006c82   f000
006c84   0e03     movlw	0x3                	MOVLW	0x03
006c86   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006c88   f001
006c8a   0e04     movlw	0x4                	MOVLW	0x04
006c8c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006c8e   f002
006c90   0e05     movlw	0x5                	MOVLW	0x05
006c92   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006c94   f003
                                           ;	.line	884; MainDemo.c	BYTE LCDPos=16;  //write on second line of LCD
006c96   0e10     movlw	0x10               	MOVLW	0x10
006c98   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	889; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
006c9a   6a05     clrf	0x5, 0              	CLRF	r0x05
006c9c   6a06     clrf	0x6, 0              	CLRF	r0x06
006c9e   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00721_DS_:
006ca0   0e04     movlw	0x4                	MOVLW	0x04
006ca2   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
006ca4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006ca6   d081     bra	0x6daa               	BRA	_00724_DS_
                                           ;	.line	892; MainDemo.c	IP_field =(WORD)(IPdw>>(i*8))&0xff;      //ML
006ca8   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
006caa   f008
006cac   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
006cae   f009
006cb0   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
006cb2   f00a
006cb4   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
006cb6   f00b
006cb8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006cba   e011     bz	0x6cde                	BZ	_00742_DS_
006cbc   e609     bn	0x6cd0                	BN	_00745_DS_
006cbe   6ce8     negf	0xe8, 0             	NEGF	WREG
006cc0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00743_DS_:
006cc2   320b     rrcf	0xb, 0x1, 0         	RRCF	r0x0b, F
006cc4   320a     rrcf	0xa, 0x1, 0         	RRCF	r0x0a, F
006cc6   3209     rrcf	0x9, 0x1, 0         	RRCF	r0x09, F
006cc8   3208     rrcf	0x8, 0x1, 0         	RRCF	r0x08, F
006cca   0f01     addlw	0x1                	ADDLW	0x01
006ccc   e3fa     bnc	0x6cc2               	BNC	_00743_DS_
006cce   d007     bra	0x6cde               	BRA	_00742_DS_
                                           _00745_DS_:
006cd0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00744_DS_:
006cd2   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
006cd4   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
006cd6   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
006cd8   360b     rlcf	0xb, 0x1, 0         	RLCF	r0x0b, F
006cda   0f01     addlw	0x1                	ADDLW	0x01
006cdc   e3fa     bnc	0x6cd2               	BNC	_00744_DS_
                                           _00742_DS_:
006cde   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	893; MainDemo.c	uitoa(IP_field, IPDigit, radix);      //ML
006ce0   0e0a     movlw	0xa                	MOVLW	0x0a
006ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ce4   0e02     movlw	0x2                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
006ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ce8   0e18     movlw	0x18               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
006cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cec   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cf0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cf4   ecee     call	0xb3dc, 0           	CALL	_uitoa
006cf6   f059
006cf8   0e05     movlw	0x5                	MOVLW	0x05
006cfa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	898; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
006cfc   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
006cfe   f008
006d00   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00727_DS_:
006d02   0e02     movlw	0x2                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
006d04   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006d06   0e18     movlw	0x18               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
006d08   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006d0a   0e80     movlw	0x80               	MOVLW	0x80
006d0c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006d0e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006d10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d12   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006d14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d16   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006d18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d1a   ec33     call	0xb266, 0           	CALL	_strlen
006d1c   f059
006d1e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006d20   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
006d22   f00b
006d24   0e03     movlw	0x3                	MOVLW	0x03
006d26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006d28   c009     movff	0x9, 0xc           	MOVFF	r0x09, r0x0c
006d2a   f00c
006d2c   6a0d     clrf	0xd, 0              	CLRF	r0x0d
006d2e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
006d30   0f80     addlw	0x80               	ADDLW	0x80
006d32   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
006d34   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006d36   0f80     addlw	0x80               	ADDLW	0x80
006d38   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
006d3a   e102     bnz	0x6d40               	BNZ	_00747_DS_
006d3c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006d3e   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00747_DS_:
006d40   e21c     bc	0x6d7a                	BC	_00739_DS_
                                           ;	.line	900; MainDemo.c	LCDText[LCDPos++] = IPDigit[j];
006d42   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
006d44   f00a
006d46   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
006d48   6a0b     clrf	0xb, 0              	CLRF	r0x0b
006d4a   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
006d4c   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
006d4e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006d50   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
006d52   0e18     movlw	0x18               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
006d54   2409     addwf	0x9, 0, 0          	ADDWF	r0x09, W
006d56   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006d58   6a0d     clrf	0xd, 0              	CLRF	r0x0d
006d5a   0e02     movlw	0x2                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
006d5c   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
006d5e   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
006d60   ffe9
006d62   c00d     movff	0xd, 0xfea         	MOVFF	r0x0d, FSR0H
006d64   ffea
006d66   cfef     movff	0xfef, 0xc         	MOVFF	INDF0, r0x0c
006d68   f00c
006d6a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
006d6c   ffe9
006d6e   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
006d70   ffea
006d72   c00c     movff	0xc, 0xfef         	MOVFF	r0x0c, INDF0
006d74   ffef
                                           ;	.line	898; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
006d76   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
006d78   d7c4     bra	0x6d02               	BRA	_00727_DS_
                                           _00739_DS_:
006d7a   c008     movff	0x8, 0x4           	MOVFF	r0x08, r0x04
006d7c   f004
                                           ;	.line	902; MainDemo.c	if(i == sizeof(IP_ADDR)-1)
006d7e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006d80   0a03     xorlw	0x3                	XORLW	0x03
006d82   e013     bz	0x6daa                	BZ	_00724_DS_
                                           ;	.line	904; MainDemo.c	LCDText[LCDPos++] = '.';
006d84   2808     incf	0x8, 0, 0           	INCF	r0x08, W
006d86   6e04     movwf	0x4, 0             	MOVWF	r0x04
006d88   6a09     clrf	0x9, 0              	CLRF	r0x09
006d8a   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
006d8c   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
006d8e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006d90   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
006d92   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
006d94   ffe9
006d96   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
006d98   ffea
006d9a   0e2e     movlw	0x2e               	MOVLW	0x2e
006d9c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	889; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
006d9e   0e08     movlw	0x8                	MOVLW	0x08
006da0   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
006da2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006da4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
006da6   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006da8   d77b     bra	0x6ca0               	BRA	_00721_DS_
                                           _00724_DS_:
                                           ;	.line	907; MainDemo.c	if(LCDPos < 32u)
006daa   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
006dac   f000
006dae   6a01     clrf	0x1, 0              	CLRF	r0x01
006db0   0e00     movlw	0                  	MOVLW	0x00
006db2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006db4   e102     bnz	0x6dba               	BNZ	_00750_DS_
006db6   0e20     movlw	0x20               	MOVLW	0x20
006db8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00750_DS_:
006dba   e20b     bc	0x6dd2                	BC	_00726_DS_
                                           ;	.line	908; MainDemo.c	LCDText[LCDPos] = 0;
006dbc   6a00     clrf	0, 0                	CLRF	r0x00
006dbe   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
006dc0   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
006dc2   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006dc4   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
006dc6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
006dc8   ffe9
006dca   c000     movff	0, 0xfea           	MOVFF	r0x00, FSR0H
006dcc   ffea
006dce   0e00     movlw	0                  	MOVLW	0x00
006dd0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00726_DS_:
                                           ;	.line	909; MainDemo.c	LCDUpdate();
006dd2   ec06     call	0x500c, 0           	CALL	_LCDUpdate
006dd4   f028
006dd6   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
006dd8   f00d
006dda   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
006ddc   f00c
006dde   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006de0   f00b
006de2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006de4   f00a
006de6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006de8   f009
006dea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006dec   f008
006dee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006df0   f007
006df2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006df4   f006
006df6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006df8   f005
006dfa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006dfc   f004
006dfe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006e00   f003
006e02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006e04   f002
006e06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006e08   f001
006e0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006e0c   f000
006e0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e10   ffd9
006e12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayString	code
                                           _DisplayString:
                                           ;	.line	861; MainDemo.c	void DisplayString(BYTE pos, char* text)
00a0d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a0d6   ffe5
00a0d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a0da   ffd9
00a0dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a0de   ffe5
00a0e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a0e2   ffe5
00a0e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a0e6   ffe5
00a0e8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a0ea   ffe5
00a0ec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a0ee   ffe5
00a0f0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a0f2   ffe5
00a0f4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00a0f6   ffe5
00a0f8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00a0fa   ffe5
00a0fc   0e02     movlw	0x2                	MOVLW	0x02
00a0fe   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a100   f000
00a102   0e03     movlw	0x3                	MOVLW	0x03
00a104   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a106   f001
00a108   0e04     movlw	0x4                	MOVLW	0x04
00a10a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00a10c   f002
00a10e   0e05     movlw	0x5                	MOVLW	0x05
00a110   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00a112   f003
                                           ;	.line	863; MainDemo.c	BYTE l= strlen(text)+1;
00a114   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a118   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a11a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a11c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a11e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a120   ec33     call	0xb266, 0           	CALL	_strlen
00a122   f059
00a124   6e04     movwf	0x4, 0             	MOVWF	r0x04
00a126   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
00a128   f005
00a12a   0e03     movlw	0x3                	MOVLW	0x03
00a12c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00a12e   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	864; MainDemo.c	BYTE max= 32-pos;
00a130   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a132   0820     sublw	0x20               	SUBLW	0x20
00a134   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	865; MainDemo.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
00a136   6a06     clrf	0x6, 0              	CLRF	r0x06
00a138   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
00a13a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a13c   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00a13e   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00a140   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00a142   6e06     movwf	0x6, 0             	MOVWF	r0x06
00a144   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a146   6e00     movwf	0, 0               	MOVWF	r0x00
00a148   0e80     movlw	0x80               	MOVLW	0x80
00a14a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00a14c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00a14e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00a150   e302     bnc	0xa156               	BNC	_00712_DS_
00a152   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00a154   f004
                                           _00712_DS_:
00a156   6a05     clrf	0x5, 0              	CLRF	r0x05
00a158   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00a15a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a15c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a15e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a160   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a164   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a168   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a16a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a16c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00a16e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a170   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00a172   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a174   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a178   ec3c     call	0x6478, 0           	CALL	_strlcpy
00a17a   f032
00a17c   0e08     movlw	0x8                	MOVLW	0x08
00a17e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	866; MainDemo.c	LCDUpdate();
00a180   ec06     call	0x500c, 0           	CALL	_LCDUpdate
00a182   f028
00a184   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00a186   f007
00a188   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00a18a   f006
00a18c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a18e   f005
00a190   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a192   f004
00a194   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a196   f003
00a198   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a19a   f002
00a19c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a19e   f001
00a1a0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a1a2   f000
00a1a4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a1a6   ffd9
00a1a8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	839; MainDemo.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
00890e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008910   ffe5
008912   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008914   ffd9
008916   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008918   ffe5
00891a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00891c   ffe5
00891e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008920   ffe5
008922   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008924   ffe5
008926   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008928   ffe5
00892a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00892c   ffe5
00892e   0e02     movlw	0x2                	MOVLW	0x02
008930   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008932   f000
008934   0e03     movlw	0x3                	MOVLW	0x03
008936   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008938   f001
00893a   0e04     movlw	0x4                	MOVLW	0x04
00893c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00893e   f002
                                           ;	.line	847; MainDemo.c	ultoa(w, WDigit, radix);      
008940   6a03     clrf	0x3, 0              	CLRF	r0x03
008942   6a04     clrf	0x4, 0              	CLRF	r0x04
008944   0e0a     movlw	0xa                	MOVLW	0x0a
008946   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008948   0e02     movlw	0x2                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
00894a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00894c   0e00     movlw	0                  	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00894e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008950   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008952   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008954   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008956   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008958   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00895a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00895c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00895e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008960   ecaa     call	0x7354, 0           	CALL	_ultoa
008962   f039
008964   0e07     movlw	0x7                	MOVLW	0x07
008966   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	848; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
008968   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00693_DS_:
00896a   0e02     movlw	0x2                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
00896c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00896e   0e00     movlw	0                  	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
008970   6e02     movwf	0x2, 0             	MOVWF	r0x02
008972   0e80     movlw	0x80               	MOVLW	0x80
008974   6e04     movwf	0x4, 0             	MOVWF	r0x04
008976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00897a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00897c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00897e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008982   ec33     call	0xb266, 0           	CALL	_strlen
008984   f059
008986   6e02     movwf	0x2, 0             	MOVWF	r0x02
008988   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
00898a   f003
00898c   0e03     movlw	0x3                	MOVLW	0x03
00898e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
008990   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
008992   f004
008994   6a05     clrf	0x5, 0              	CLRF	r0x05
008996   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008998   0f80     addlw	0x80               	ADDLW	0x80
00899a   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00899c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00899e   0f80     addlw	0x80               	ADDLW	0x80
0089a0   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0089a2   e102     bnz	0x89a8               	BNZ	_00703_DS_
0089a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0089a6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00703_DS_:
0089a8   e21c     bc	0x89e2                	BC	_00696_DS_
                                           ;	.line	850; MainDemo.c	LCDText[LCDPos++] = WDigit[j];
0089aa   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0089ac   f002
0089ae   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0089b0   6a03     clrf	0x3, 0              	CLRF	r0x03
0089b2   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0089b4   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0089b6   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0089b8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0089ba   0e00     movlw	0                  	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0089bc   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0089be   6e04     movwf	0x4, 0             	MOVWF	r0x04
0089c0   6a05     clrf	0x5, 0              	CLRF	r0x05
0089c2   0e02     movlw	0x2                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0089c4   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0089c6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0089c8   ffe9
0089ca   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0089cc   ffea
0089ce   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
0089d0   f004
0089d2   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0089d4   ffe9
0089d6   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0089d8   ffea
0089da   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
0089dc   ffef
                                           ;	.line	848; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
0089de   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0089e0   d7c4     bra	0x896a               	BRA	_00693_DS_
                                           _00696_DS_:
                                           ;	.line	852; MainDemo.c	if(LCDPos < 32u)
0089e2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0089e4   f001
0089e6   6a02     clrf	0x2, 0              	CLRF	r0x02
0089e8   0e00     movlw	0                  	MOVLW	0x00
0089ea   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0089ec   e102     bnz	0x89f2               	BNZ	_00704_DS_
0089ee   0e20     movlw	0x20               	MOVLW	0x20
0089f0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00704_DS_:
0089f2   e20b     bc	0x8a0a                	BC	_00692_DS_
                                           ;	.line	853; MainDemo.c	LCDText[LCDPos] = 0;
0089f4   6a01     clrf	0x1, 0              	CLRF	r0x01
0089f6   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0089f8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0089fa   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0089fc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0089fe   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
008a00   ffe9
008a02   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
008a04   ffea
008a06   0e00     movlw	0                  	MOVLW	0x00
008a08   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00692_DS_:
                                           ;	.line	854; MainDemo.c	LCDUpdate();
008a0a   ec06     call	0x500c, 0           	CALL	_LCDUpdate
008a0c   f028
008a0e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008a10   f005
008a12   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008a14   f004
008a16   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008a18   f003
008a1a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008a1c   f002
008a1e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008a20   f001
008a22   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008a24   f000
008a26   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008a28   ffd9
008a2a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__get_gateway_MAC	code
                                           _get_gateway_MAC:
                                           ;	.line	785; MainDemo.c	void get_gateway_MAC(){
007b3c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007b3e   ffe5
007b40   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007b42   ffd9
007b44   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007b46   ffe5
007b48   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007b4a   ffe5
007b4c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007b4e   ffe5
007b50   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007b52   ffe5
007b54   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007b56   ffe5
007b58   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007b5a   ffe5
007b5c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007b5e   ffe5
007b60   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007b62   ffe5
007b64   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007b66   ffe5
007b68   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007b6a   ffe5
                                           ;	.line	790; MainDemo.c	for (i=0; i<100; i++) {
007b6c   6a00     clrf	0, 0                	CLRF	r0x00
007b6e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00663_DS_:
007b70   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007b72   0f80     addlw	0x80               	ADDLW	0x80
007b74   0f80     addlw	0x80               	ADDLW	0x80
007b76   e102     bnz	0x7b7c               	BNZ	_00674_DS_
007b78   0e64     movlw	0x64               	MOVLW	0x64
007b7a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00674_DS_:
007b7c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007b7e   d064     bra	0x7c48               	BRA	_00666_DS_
                                           ;	.line	791; MainDemo.c	StackTask();
007b80   ec33     call	0xbc66, 0           	CALL	_StackTask
007b82   f05e
                                           ;	.line	792; MainDemo.c	ARPResolve(&AppConfig.MyGateway);
007b84   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 8)
007b86   6e03     movwf	0x3, 0             	MOVWF	r0x03
007b88   0ed0     movlw	0xd0               	MOVLW	LOW(_AppConfig + 8)
007b8a   6e02     movwf	0x2, 0             	MOVWF	r0x02
007b8c   0e80     movlw	0x80               	MOVLW	0x80
007b8e   6e04     movwf	0x4, 0             	MOVWF	r0x04
007b90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007b92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007b96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007b9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b9c   ecbc     call	0x8578, 0           	CALL	_ARPResolve
007b9e   f042
007ba0   0e03     movlw	0x3                	MOVLW	0x03
007ba2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	793; MainDemo.c	for(j=0;j<5000; j++) {
007ba4   6a02     clrf	0x2, 0              	CLRF	r0x02
007ba6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00659_DS_:
007ba8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007baa   0f80     addlw	0x80               	ADDLW	0x80
007bac   0f6d     addlw	0x6d               	ADDLW	0x6d
007bae   e102     bnz	0x7bb4               	BNZ	_00675_DS_
007bb0   0e88     movlw	0x88               	MOVLW	0x88
007bb2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00675_DS_:
007bb4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007bb6   d044     bra	0x7c40               	BRA	_00665_DS_
                                           ;	.line	794; MainDemo.c	if(ARPIsResolved(&AppConfig.MyGateway, &gateway_MAC2)) {
007bb8   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 8)
007bba   6e05     movwf	0x5, 0             	MOVWF	r0x05
007bbc   0ed0     movlw	0xd0               	MOVLW	LOW(_AppConfig + 8)
007bbe   6e04     movwf	0x4, 0             	MOVWF	r0x04
007bc0   0e80     movlw	0x80               	MOVLW	0x80
007bc2   6e06     movwf	0x6, 0             	MOVWF	r0x06
007bc4   0e0b     movlw	0xb                	MOVLW	HIGH(_get_gateway_MAC_gateway_MAC2_1_1)
007bc6   6e08     movwf	0x8, 0             	MOVWF	r0x08
007bc8   0ef0     movlw	0xf0               	MOVLW	LOW(_get_gateway_MAC_gateway_MAC2_1_1)
007bca   6e07     movwf	0x7, 0             	MOVWF	r0x07
007bcc   0e80     movlw	0x80               	MOVLW	0x80
007bce   6e09     movwf	0x9, 0             	MOVWF	r0x09
007bd0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007bd4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
007bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007bd8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007bdc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007be0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007be4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007be6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007be8   ecec     call	0x79d8, 0           	CALL	_ARPIsResolved
007bea   f03c
007bec   6e04     movwf	0x4, 0             	MOVWF	r0x04
007bee   0e06     movlw	0x6                	MOVLW	0x06
007bf0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007bf2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007bf4   e021     bz	0x7c38                	BZ	_00661_DS_
                                           ;	.line	795; MainDemo.c	memcpy(GATEWAY_MACA, &gateway_MAC2, 6);
007bf6   0e0b     movlw	0xb                	MOVLW	HIGH(_GATEWAY_MACA)
007bf8   6e05     movwf	0x5, 0             	MOVWF	r0x05
007bfa   0eea     movlw	0xea               	MOVLW	LOW(_GATEWAY_MACA)
007bfc   6e04     movwf	0x4, 0             	MOVWF	r0x04
007bfe   0e80     movlw	0x80               	MOVLW	0x80
007c00   6e06     movwf	0x6, 0             	MOVWF	r0x06
007c02   0e0b     movlw	0xb                	MOVLW	HIGH(_get_gateway_MAC_gateway_MAC2_1_1)
007c04   6e08     movwf	0x8, 0             	MOVWF	r0x08
007c06   0ef0     movlw	0xf0               	MOVLW	LOW(_get_gateway_MAC_gateway_MAC2_1_1)
007c08   6e07     movwf	0x7, 0             	MOVWF	r0x07
007c0a   0e80     movlw	0x80               	MOVLW	0x80
007c0c   6e09     movwf	0x9, 0             	MOVWF	r0x09
007c0e   0e00     movlw	0                  	MOVLW	0x00
007c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c12   0e06     movlw	0x6                	MOVLW	0x06
007c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c16   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c1a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
007c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c1e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c22   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c2e   ec7b     call	0x94f6, 0           	CALL	_memcpy
007c30   f04a
007c32   0e08     movlw	0x8                	MOVLW	0x08
007c34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	796; MainDemo.c	return;			
007c36   d014     bra	0x7c60               	BRA	_00667_DS_
                                           _00661_DS_:
                                           ;	.line	793; MainDemo.c	for(j=0;j<5000; j++) {
007c38   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
007c3a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007c3c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
007c3e   d7b4     bra	0x7ba8               	BRA	_00659_DS_
                                           _00665_DS_:
                                           ;	.line	790; MainDemo.c	for (i=0; i<100; i++) {
007c40   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007c42   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007c44   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
007c46   d794     bra	0x7b70               	BRA	_00663_DS_
                                           _00666_DS_:
                                           ;	.line	800; MainDemo.c	DisplayString(0, "GATEW ARP fail :'(");
007c48   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
007c4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c4c   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_7)
007c4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c50   0e72     movlw	0x72               	MOVLW	LOW(__str_7)
007c52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c54   0e00     movlw	0                  	MOVLW	0x00
007c56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c58   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
007c5a   f050
007c5c   0e04     movlw	0x4                	MOVLW	0x04
007c5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00667_DS_:
007c60   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007c62   f009
007c64   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007c66   f008
007c68   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007c6a   f007
007c6c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007c6e   f006
007c70   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007c72   f005
007c74   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007c76   f004
007c78   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007c7a   f003
007c7c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007c7e   f002
007c80   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007c82   f001
007c84   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007c86   f000
007c88   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c8a   ffd9
007c8c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__request_msg	code
                                           _request_msg:
                                           ;	.line	755; MainDemo.c	void request_msg(BYTE *dhcp_header, int dhcp_header_length){
006e14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e16   ffe5
006e18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e1a   ffd9
006e1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006e1e   ffe5
006e20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006e22   ffe5
006e24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006e26   ffe5
006e28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006e2a   ffe5
006e2c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006e2e   ffe5
006e30   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006e32   ffe5
006e34   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006e36   ffe5
006e38   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006e3a   ffe5
006e3c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006e3e   ffe5
006e40   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006e42   ffe5
006e44   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006e46   ffe5
006e48   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
006e4a   ffe5
006e4c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
006e4e   ffe5
006e50   0e02     movlw	0x2                	MOVLW	0x02
006e52   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006e54   f000
006e56   0e03     movlw	0x3                	MOVLW	0x03
006e58   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006e5a   f001
006e5c   0e04     movlw	0x4                	MOVLW	0x04
006e5e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006e60   f002
006e62   0e05     movlw	0x5                	MOVLW	0x05
006e64   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006e66   f003
006e68   0e06     movlw	0x6                	MOVLW	0x06
006e6a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006e6c   f004
                                           ;	.line	760; MainDemo.c	UDPPut(DHCP_REQUEST_MESSAGE);
006e6e   0e03     movlw	0x3                	MOVLW	0x03
006e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e72   ec36     call	0xac6c, 0           	CALL	_UDPPut
006e74   f056
006e76   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	762; MainDemo.c	i=0;
006e78   6a05     clrf	0x5, 0              	CLRF	r0x05
006e7a   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00642_DS_:
                                           ;	.line	763; MainDemo.c	while(i<dhcp_header_length){
006e7c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006e7e   0f80     addlw	0x80               	ADDLW	0x80
006e80   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
006e82   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006e84   0f80     addlw	0x80               	ADDLW	0x80
006e86   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
006e88   e102     bnz	0x6e8e               	BNZ	_00650_DS_
006e8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006e8c   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00650_DS_:
006e8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006e90   d081     bra	0x6f94               	BRA	_00644_DS_
                                           ;	.line	764; MainDemo.c	opt = dhcp_header[i];
006e92   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006e94   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
006e96   6e07     movwf	0x7, 0             	MOVWF	r0x07
006e98   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006e9a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006e9c   6e08     movwf	0x8, 0             	MOVWF	r0x08
006e9e   6ae8     clrf	0xe8, 0             	CLRF	WREG
006ea0   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
006ea2   68e8     setf	0xe8, 0             	SETF	WREG
006ea4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006ea6   6e09     movwf	0x9, 0             	MOVWF	r0x09
006ea8   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
006eaa   ffe9
006eac   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
006eae   fff3
006eb0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006eb2   ec55     call	0xbcaa, 0           	CALL	__gptrget1
006eb4   f05e
006eb6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	765; MainDemo.c	UDPPut(opt);
006eb8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006eba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ebc   ec36     call	0xac6c, 0           	CALL	_UDPPut
006ebe   f056
006ec0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	766; MainDemo.c	i++;
006ec2   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006ec4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006ec6   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
                                           ;	.line	767; MainDemo.c	length = dhcp_header[i];
006ec8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006eca   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
006ecc   6e08     movwf	0x8, 0             	MOVWF	r0x08
006ece   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006ed0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006ed2   6e09     movwf	0x9, 0             	MOVWF	r0x09
006ed4   6ae8     clrf	0xe8, 0             	CLRF	WREG
006ed6   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
006ed8   68e8     setf	0xe8, 0             	SETF	WREG
006eda   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006edc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006ede   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
006ee0   ffe9
006ee2   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
006ee4   fff3
006ee6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006ee8   ec55     call	0xbcaa, 0           	CALL	__gptrget1
006eea   f05e
006eec   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	768; MainDemo.c	UDPPut(length);
006eee   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ef2   ec36     call	0xac6c, 0           	CALL	_UDPPut
006ef4   f056
006ef6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	769; MainDemo.c	i++;
006ef8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006efa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006efc   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
                                           ;	.line	770; MainDemo.c	switch(opt){
006efe   6a09     clrf	0x9, 0              	CLRF	r0x09
006f00   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006f02   0a36     xorlw	0x36               	XORLW	0x36
006f04   e102     bnz	0x6f0a               	BNZ	_00651_DS_
006f06   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006f08   e001     bz	0x6f0c                	BZ	_00652_DS_
                                           _00651_DS_:
006f0a   d022     bra	0x6f50               	BRA	_00640_DS_
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00652_DS_:
006f0c   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	772; MainDemo.c	UDPPutArray((BYTE*)&UDPSocketInfo[activeUDPSocket].remoteNode.IPAddr, length);
006f0e   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
006f10   0d0e     mullw	0xe                	MULLW	0x0e
006f12   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
006f14   f007
006f16   6a09     clrf	0x9, 0              	CLRF	r0x09
006f18   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
006f1a   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
006f1c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
006f1e   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
006f20   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006f22   6e09     movwf	0x9, 0             	MOVWF	r0x09
006f24   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006f26   6e07     movwf	0x7, 0             	MOVWF	r0x07
006f28   0e80     movlw	0x80               	MOVLW	0x80
006f2a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006f2c   c008     movff	0x8, 0xb           	MOVFF	r0x08, r0x0b
006f2e   f00b
006f30   6a0c     clrf	0xc, 0              	CLRF	r0x0c
006f32   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006f34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006f38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f3a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006f3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f3e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006f40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f42   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006f44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f46   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
006f48   f04b
006f4a   0e05     movlw	0x5                	MOVLW	0x05
006f4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	773; MainDemo.c	break;
006f4e   d01c     bra	0x6f88               	BRA	_00641_DS_
                                           _00640_DS_:
                                           ;	.line	775; MainDemo.c	UDPPutArray((BYTE*)&dhcp_header[i], length);   
006f50   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006f52   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
006f54   6e07     movwf	0x7, 0             	MOVWF	r0x07
006f56   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006f58   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006f5a   6e09     movwf	0x9, 0             	MOVWF	r0x09
006f5c   6ae8     clrf	0xe8, 0             	CLRF	WREG
006f5e   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
006f60   68e8     setf	0xe8, 0             	SETF	WREG
006f62   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006f64   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006f66   c008     movff	0x8, 0xb           	MOVFF	r0x08, r0x0b
006f68   f00b
006f6a   6a0c     clrf	0xc, 0              	CLRF	r0x0c
006f6c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
006f6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f70   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006f72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f74   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006f76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f78   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006f7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f7c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006f7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f80   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
006f82   f04b
006f84   0e05     movlw	0x5                	MOVLW	0x05
006f86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00641_DS_:
                                           ;	.line	778; MainDemo.c	i+=length;
006f88   6a07     clrf	0x7, 0              	CLRF	r0x07
006f8a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006f8c   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
006f8e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006f90   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
006f92   d774     bra	0x6e7c               	BRA	_00642_DS_
                                           _00644_DS_:
                                           ;	.line	781; MainDemo.c	end_dhcp();
006f94   ec7e     call	0xbafc, 0           	CALL	_end_dhcp
006f96   f05d
                                           ;	.line	782; MainDemo.c	UDPFlush();
006f98   ec83     call	0x4506, 0           	CALL	_UDPFlush
006f9a   f022
006f9c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
006f9e   f00c
006fa0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006fa2   f00b
006fa4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006fa6   f00a
006fa8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006faa   f009
006fac   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006fae   f008
006fb0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006fb2   f007
006fb4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006fb6   f006
006fb8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006fba   f005
006fbc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006fbe   f004
006fc0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006fc2   f003
006fc4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006fc6   f002
006fc8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006fca   f001
006fcc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006fce   f000
006fd0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006fd2   ffd9
006fd4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__discover_msg	code
                                           _discover_msg:
                                           ;	.line	738; MainDemo.c	void discover_msg(){
00a62c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a62e   ffe5
00a630   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a632   ffd9
00a634   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a636   ffe5
00a638   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a63a   ffe5
00a63c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a63e   ffe5
                                           ;	.line	740; MainDemo.c	UDPPut(DHCP_DISCOVER_MESSAGE);
00a640   0e01     movlw	0x1                	MOVLW	0x01
00a642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a644   ec36     call	0xac6c, 0           	CALL	_UDPPut
00a646   f056
00a648   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	742; MainDemo.c	UDPPut(DHCP_SERVER_IDENTIFIER);
00a64a   0e36     movlw	0x36               	MOVLW	0x36
00a64c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a64e   ec36     call	0xac6c, 0           	CALL	_UDPPut
00a650   f056
00a652   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	743; MainDemo.c	UDPPut(sizeof(IP_ADDR));
00a654   0e04     movlw	0x4                	MOVLW	0x04
00a656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a658   ec36     call	0xac6c, 0           	CALL	_UDPPut
00a65a   f056
00a65c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	744; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
00a65e   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
00a660   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a662   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
00a664   6e00     movwf	0, 0               	MOVWF	r0x00
00a666   0e80     movlw	0x80               	MOVLW	0x80
00a668   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a66a   0e00     movlw	0                  	MOVLW	0x00
00a66c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a66e   0e04     movlw	0x4                	MOVLW	0x04
00a670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a672   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a674   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a676   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a678   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a67a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a67c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a67e   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
00a680   f04b
00a682   0e05     movlw	0x5                	MOVLW	0x05
00a684   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	746; MainDemo.c	UDPPut(DHCP_ROUTER);
00a686   0e03     movlw	0x3                	MOVLW	0x03
00a688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a68a   ec36     call	0xac6c, 0           	CALL	_UDPPut
00a68c   f056
00a68e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	747; MainDemo.c	UDPPut(sizeof(IP_ADDR));
00a690   0e04     movlw	0x4                	MOVLW	0x04
00a692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a694   ec36     call	0xac6c, 0           	CALL	_UDPPut
00a696   f056
00a698   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	748; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
00a69a   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
00a69c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a69e   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
00a6a0   6e00     movwf	0, 0               	MOVWF	r0x00
00a6a2   0e80     movlw	0x80               	MOVLW	0x80
00a6a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a6a6   0e00     movlw	0                  	MOVLW	0x00
00a6a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6aa   0e04     movlw	0x4                	MOVLW	0x04
00a6ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a6b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a6b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a6b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a6ba   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
00a6bc   f04b
00a6be   0e05     movlw	0x5                	MOVLW	0x05
00a6c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	750; MainDemo.c	end_dhcp();
00a6c2   ec7e     call	0xbafc, 0           	CALL	_end_dhcp
00a6c4   f05d
                                           ;	.line	752; MainDemo.c	UDPFlush();
00a6c6   ec83     call	0x4506, 0           	CALL	_UDPFlush
00a6c8   f022
00a6ca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a6cc   f002
00a6ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a6d0   f001
00a6d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a6d4   f000
00a6d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a6d8   ffd9
00a6da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__end_dhcp	code
                                           _end_dhcp:
                                           ;	.line	730; MainDemo.c	void end_dhcp(){
00bafc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bafe   ffe5
00bb00   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bb02   ffd9
                                           ;	.line	731; MainDemo.c	UDPPut(DHCP_END_OPTION);
00bb04   0eff     movlw	0xff               	MOVLW	0xff
00bb06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00bb08   ec36     call	0xac6c, 0           	CALL	_UDPPut
00bb0a   f056
00bb0c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00622_DS_:
                                           ;	.line	732; MainDemo.c	while(UDPTxCount < 300){
00bb0e   0e01     movlw	0x1                	MOVLW	0x01
00bb10   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00bb12   5da0     subwf	0xa0, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
00bb14   e103     bnz	0xbb1c               	BNZ	_00629_DS_
00bb16   0e2c     movlw	0x2c               	MOVLW	0x2c
00bb18   0102     movlb	0x2                	BANKSEL	_UDPTxCount
00bb1a   5d9f     subwf	0x9f, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00629_DS_:
00bb1c   e206     bc	0xbb2a                	BC	_00624_DS_
                                           ;	.line	733; MainDemo.c	UDPPut(0);
00bb1e   0e00     movlw	0                  	MOVLW	0x00
00bb20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00bb22   ec36     call	0xac6c, 0           	CALL	_UDPPut
00bb24   f056
00bb26   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00bb28   d7f2     bra	0xbb0e               	BRA	_00622_DS_
                                           _00624_DS_:
                                           ;	.line	735; MainDemo.c	LED6_IO = 0;
00bb2a   9c86     bcf	0x86, 0x6, 0         	BCF	_PORTGbits, 6
00bb2c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bb2e   ffd9
00bb30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__build_bootp	code
                                           _build_bootp:
                                           ;	.line	700; MainDemo.c	void build_bootp(BOOTP_HEADER *bootp_header, UDP_SOCKET *my_socket){
003c2a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003c2c   ffe5
003c2e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003c30   ffd9
003c32   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003c34   ffe5
003c36   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003c38   ffe5
003c3a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003c3c   ffe5
003c3e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003c40   ffe5
003c42   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003c44   ffe5
003c46   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003c48   ffe5
003c4a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003c4c   ffe5
003c4e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003c50   ffe5
003c52   0e02     movlw	0x2                	MOVLW	0x02
003c54   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003c56   f000
003c58   0e03     movlw	0x3                	MOVLW	0x03
003c5a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003c5c   f001
003c5e   0e04     movlw	0x4                	MOVLW	0x04
003c60   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003c62   f002
003c64   0e05     movlw	0x5                	MOVLW	0x05
003c66   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003c68   f003
003c6a   0e06     movlw	0x6                	MOVLW	0x06
003c6c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003c6e   f004
003c70   0e07     movlw	0x7                	MOVLW	0x07
003c72   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003c74   f005
                                           _00611_DS_:
                                           ;	.line	703; MainDemo.c	while(!UDPIsPutReady(*my_socket));
003c76   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003c78   ffe9
003c7a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003c7c   fff3
003c7e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003c80   ec55     call	0xbcaa, 0           	CALL	__gptrget1
003c82   f05e
003c84   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c86   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c8a   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
003c8c   f057
003c8e   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c90   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
003c92   f007
003c94   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003c96   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c98   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003c9a   e0ed     bz	0x3c76                	BZ	_00611_DS_
                                           ;	.line	705; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->MessageType, sizeof(BYTE));
003c9c   0e00     movlw	0                  	MOVLW	0x00
003c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca0   0e01     movlw	0x1                	MOVLW	0x01
003ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ca8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003caa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cac   5000     movf	0, 0, 0             	MOVF	r0x00, W
003cae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cb0   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003cb2   f04b
003cb4   0e05     movlw	0x5                	MOVLW	0x05
003cb6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	706; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->HardwareType, sizeof(BYTE));
003cb8   5000     movf	0, 0, 0             	MOVF	r0x00, W
003cba   0f01     addlw	0x1                	ADDLW	0x01
003cbc   6e03     movwf	0x3, 0             	MOVWF	r0x03
003cbe   0e00     movlw	0                  	MOVLW	0x00
003cc0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003cc2   6e04     movwf	0x4, 0             	MOVWF	r0x04
003cc4   0e00     movlw	0                  	MOVLW	0x00
003cc6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003cc8   6e05     movwf	0x5, 0             	MOVWF	r0x05
003cca   0e00     movlw	0                  	MOVLW	0x00
003ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cce   0e01     movlw	0x1                	MOVLW	0x01
003cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cd2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cd6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cda   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cde   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003ce0   f04b
003ce2   0e05     movlw	0x5                	MOVLW	0x05
003ce4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	707; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->HardwareLen, sizeof(BYTE));
003ce6   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ce8   0f02     addlw	0x2                	ADDLW	0x02
003cea   6e03     movwf	0x3, 0             	MOVWF	r0x03
003cec   0e00     movlw	0                  	MOVLW	0x00
003cee   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003cf0   6e04     movwf	0x4, 0             	MOVWF	r0x04
003cf2   0e00     movlw	0                  	MOVLW	0x00
003cf4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003cf6   6e05     movwf	0x5, 0             	MOVWF	r0x05
003cf8   0e00     movlw	0                  	MOVLW	0x00
003cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cfc   0e01     movlw	0x1                	MOVLW	0x01
003cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d00   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d08   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d0c   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003d0e   f04b
003d10   0e05     movlw	0x5                	MOVLW	0x05
003d12   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	708; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->Hops, sizeof(BYTE));
003d14   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d16   0f03     addlw	0x3                	ADDLW	0x03
003d18   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d1a   0e00     movlw	0                  	MOVLW	0x00
003d1c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003d1e   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d20   0e00     movlw	0                  	MOVLW	0x00
003d22   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003d24   6e05     movwf	0x5, 0             	MOVWF	r0x05
003d26   0e00     movlw	0                  	MOVLW	0x00
003d28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d2a   0e01     movlw	0x1                	MOVLW	0x01
003d2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d2e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d32   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d36   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d3a   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003d3c   f04b
003d3e   0e05     movlw	0x5                	MOVLW	0x05
003d40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	709; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->TransactionID, sizeof(DWORD));
003d42   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d44   0f04     addlw	0x4                	ADDLW	0x04
003d46   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d48   0e00     movlw	0                  	MOVLW	0x00
003d4a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003d4c   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d4e   0e00     movlw	0                  	MOVLW	0x00
003d50   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003d52   6e05     movwf	0x5, 0             	MOVWF	r0x05
003d54   0e00     movlw	0                  	MOVLW	0x00
003d56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d58   0e04     movlw	0x4                	MOVLW	0x04
003d5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d5c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d60   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d68   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003d6a   f04b
003d6c   0e05     movlw	0x5                	MOVLW	0x05
003d6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	710; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->SecondsElapsed, sizeof(WORD));
003d70   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d72   0f08     addlw	0x8                	ADDLW	0x08
003d74   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d76   0e00     movlw	0                  	MOVLW	0x00
003d78   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003d7a   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d7c   0e00     movlw	0                  	MOVLW	0x00
003d7e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003d80   6e05     movwf	0x5, 0             	MOVWF	r0x05
003d82   0e00     movlw	0                  	MOVLW	0x00
003d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d86   0e02     movlw	0x2                	MOVLW	0x02
003d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d92   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d96   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003d98   f04b
003d9a   0e05     movlw	0x5                	MOVLW	0x05
003d9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->BootpFlags, sizeof(WORD));
003d9e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003da0   0f0a     addlw	0xa                	ADDLW	0x0a
003da2   6e03     movwf	0x3, 0             	MOVWF	r0x03
003da4   0e00     movlw	0                  	MOVLW	0x00
003da6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003da8   6e04     movwf	0x4, 0             	MOVWF	r0x04
003daa   0e00     movlw	0                  	MOVLW	0x00
003dac   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003dae   6e05     movwf	0x5, 0             	MOVWF	r0x05
003db0   0e00     movlw	0                  	MOVLW	0x00
003db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003db4   0e02     movlw	0x2                	MOVLW	0x02
003db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003db8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dbc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003dbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc4   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003dc6   f04b
003dc8   0e05     movlw	0x5                	MOVLW	0x05
003dca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	712; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->ClientIP, sizeof(IP_ADDR));
003dcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dce   0f0c     addlw	0xc                	ADDLW	0x0c
003dd0   6e03     movwf	0x3, 0             	MOVWF	r0x03
003dd2   0e00     movlw	0                  	MOVLW	0x00
003dd4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003dd6   6e04     movwf	0x4, 0             	MOVWF	r0x04
003dd8   0e00     movlw	0                  	MOVLW	0x00
003dda   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003ddc   6e05     movwf	0x5, 0             	MOVWF	r0x05
003dde   0e00     movlw	0                  	MOVLW	0x00
003de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003de2   0e04     movlw	0x4                	MOVLW	0x04
003de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003de6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003dec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003df0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003df2   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003df4   f04b
003df6   0e05     movlw	0x5                	MOVLW	0x05
003df8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	713; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->YourIP, sizeof(IP_ADDR));
003dfa   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dfc   0f10     addlw	0x10               	ADDLW	0x10
003dfe   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e00   0e00     movlw	0                  	MOVLW	0x00
003e02   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003e04   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e06   0e00     movlw	0                  	MOVLW	0x00
003e08   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e0a   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e0c   0e00     movlw	0                  	MOVLW	0x00
003e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e10   0e04     movlw	0x4                	MOVLW	0x04
003e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e14   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e18   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e1c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e20   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003e22   f04b
003e24   0e05     movlw	0x5                	MOVLW	0x05
003e26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	714; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->NextServerIP, sizeof(IP_ADDR));
003e28   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e2a   0f14     addlw	0x14               	ADDLW	0x14
003e2c   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e2e   0e00     movlw	0                  	MOVLW	0x00
003e30   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003e32   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e34   0e00     movlw	0                  	MOVLW	0x00
003e36   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e38   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e3a   0e00     movlw	0                  	MOVLW	0x00
003e3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e3e   0e04     movlw	0x4                	MOVLW	0x04
003e40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e42   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e46   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e4e   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003e50   f04b
003e52   0e05     movlw	0x5                	MOVLW	0x05
003e54   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	715; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
003e56   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
003e58   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e5a   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
003e5c   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e5e   0e80     movlw	0x80               	MOVLW	0x80
003e60   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e62   0e00     movlw	0                  	MOVLW	0x00
003e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e66   0e04     movlw	0x4                	MOVLW	0x04
003e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e76   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003e78   f04b
003e7a   0e05     movlw	0x5                	MOVLW	0x05
003e7c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	716; MainDemo.c	UDPPutArray((BYTE*)&bootp_header->ClientMAC, sizeof(MAC_ADDR));
003e7e   0e1c     movlw	0x1c               	MOVLW	0x1c
003e80   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003e82   0e00     movlw	0                  	MOVLW	0x00
003e84   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003e86   0e00     movlw	0                  	MOVLW	0x00
003e88   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003e8a   0e00     movlw	0                  	MOVLW	0x00
003e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e8e   0e06     movlw	0x6                	MOVLW	0x06
003e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e92   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003e98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e9e   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
003ea0   f04b
003ea2   0e05     movlw	0x5                	MOVLW	0x05
003ea4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	718; MainDemo.c	for(i=0; i<202; i++){
003ea6   0eca     movlw	0xca               	MOVLW	0xca
003ea8   6e00     movwf	0, 0               	MOVWF	r0x00
003eaa   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00616_DS_:
                                           ;	.line	719; MainDemo.c	UDPPut(0);
003eac   0e00     movlw	0                  	MOVLW	0x00
003eae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003eb0   ec36     call	0xac6c, 0           	CALL	_UDPPut
003eb2   f056
003eb4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003eb6   0eff     movlw	0xff               	MOVLW	0xff
003eb8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003eba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003ebc   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	718; MainDemo.c	for(i=0; i<202; i++){
003ebe   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ec0   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
003ec2   e1f4     bnz	0x3eac               	BNZ	_00616_DS_
                                           ;	.line	722; MainDemo.c	UDPPut(99);
003ec4   0e63     movlw	0x63               	MOVLW	0x63
003ec6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ec8   ec36     call	0xac6c, 0           	CALL	_UDPPut
003eca   f056
003ecc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	723; MainDemo.c	UDPPut(130);
003ece   0e82     movlw	0x82               	MOVLW	0x82
003ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ed2   ec36     call	0xac6c, 0           	CALL	_UDPPut
003ed4   f056
003ed6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	724; MainDemo.c	UDPPut(83);
003ed8   0e53     movlw	0x53               	MOVLW	0x53
003eda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003edc   ec36     call	0xac6c, 0           	CALL	_UDPPut
003ede   f056
003ee0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	725; MainDemo.c	UDPPut(99);
003ee2   0e63     movlw	0x63               	MOVLW	0x63
003ee4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ee6   ec36     call	0xac6c, 0           	CALL	_UDPPut
003ee8   f056
003eea   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	726; MainDemo.c	UDPPut(DHCP_MESSAGE_TYPE);
003eec   0e35     movlw	0x35               	MOVLW	0x35
003eee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ef0   ec36     call	0xac6c, 0           	CALL	_UDPPut
003ef2   f056
003ef4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	727; MainDemo.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
003ef6   0e01     movlw	0x1                	MOVLW	0x01
003ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003efa   ec36     call	0xac6c, 0           	CALL	_UDPPut
003efc   f056
003efe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003f00   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003f02   f007
003f04   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003f06   f006
003f08   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003f0a   f005
003f0c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003f0e   f004
003f10   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003f12   f003
003f14   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003f16   f002
003f18   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003f1a   f001
003f1c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003f1e   f000
003f20   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003f22   ffd9
003f24   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__handle_client_msg	code
                                           _handle_client_msg:
                                           ;	.line	639; MainDemo.c	void handle_client_msg(UDP_SOCKET *socket_sendto_server,
000df0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000df2   ffe5
000df4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000df6   ffd9
000df8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dfa   ffe5
000dfc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000dfe   ffe5
000e00   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e02   ffe5
000e04   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e06   ffe5
000e08   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e0a   ffe5
000e0c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e0e   ffe5
000e10   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e12   ffe5
000e14   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e16   ffe5
000e18   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e1a   ffe5
000e1c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e1e   ffe5
000e20   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000e22   ffe5
000e24   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000e26   ffe5
000e28   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000e2a   ffe5
000e2c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000e2e   ffe5
000e30   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000e32   ffe5
000e34   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000e36   ffe5
000e38   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000e3a   ffe5
000e3c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000e3e   ffe5
000e40   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000e42   ffe5
000e44   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000e46   ffe5
000e48   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000e4a   ffe5
000e4c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000e4e   ffe5
000e50   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
000e52   ffe5
000e54   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
000e56   ffe5
000e58   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
000e5a   ffe5
000e5c   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
000e5e   ffe5
000e60   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
000e62   ffe5
000e64   0e02     movlw	0x2                	MOVLW	0x02
000e66   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e68   f000
000e6a   0e03     movlw	0x3                	MOVLW	0x03
000e6c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000e6e   f001
000e70   0e04     movlw	0x4                	MOVLW	0x04
000e72   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000e74   f002
000e76   0e05     movlw	0x5                	MOVLW	0x05
000e78   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000e7a   f003
000e7c   0e06     movlw	0x6                	MOVLW	0x06
000e7e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000e80   f004
000e82   0e07     movlw	0x7                	MOVLW	0x07
000e84   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000e86   f005
000e88   0e08     movlw	0x8                	MOVLW	0x08
000e8a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000e8c   f006
000e8e   0e09     movlw	0x9                	MOVLW	0x09
000e90   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000e92   f007
000e94   0e0a     movlw	0xa                	MOVLW	0x0a
000e96   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
000e98   f008
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x09
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000e9a   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	655; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];   
000e9c   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
000e9e   0d0e     mullw	0xe                	MULLW	0x0e
000ea0   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000ea2   f009
000ea4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000ea6   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
000ea8   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
000eaa   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
000eac   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
000eae   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000eb0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000eb2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000eb4   6e09     movwf	0x9, 0             	MOVWF	r0x09
000eb6   0e80     movlw	0x80               	MOVLW	0x80
000eb8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	656; MainDemo.c	remote_node_MAC = &info->remoteNode.MACAddr;
000eba   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000ebc   0f04     addlw	0x4                	ADDLW	0x04
000ebe   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000ec0   0e00     movlw	0                  	MOVLW	0x00
000ec2   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
000ec4   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000ec6   0e00     movlw	0                  	MOVLW	0x00
000ec8   200b     addwfc	0xb, 0, 0         	ADDWFC	r0x0b, W
000eca   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
                                           ;	.line	658; MainDemo.c	extract_bootp_header(&dhcp_type, &bootp_header, dhcp_header, &dhcp_header_length, socket_recv);
000ecc   0e02     movlw	0x2                	MOVLW	HIGH(_handle_client_msg_dhcp_type_1_1)
000ece   6e10     movwf	0x10, 0            	MOVWF	r0x10
000ed0   0eab     movlw	0xab               	MOVLW	LOW(_handle_client_msg_dhcp_type_1_1)
000ed2   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
000ed4   0e80     movlw	0x80               	MOVLW	0x80
000ed6   6e11     movwf	0x11, 0            	MOVWF	r0x11
000ed8   0e0e     movlw	0xe                	MOVLW	HIGH(_handle_client_msg_bootp_header_1_1)
000eda   6e13     movwf	0x13, 0            	MOVWF	r0x13
000edc   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_bootp_header_1_1)
000ede   6e12     movwf	0x12, 0            	MOVWF	r0x12
000ee0   0e80     movlw	0x80               	MOVLW	0x80
000ee2   6e14     movwf	0x14, 0            	MOVWF	r0x14
000ee4   0e09     movlw	0x9                	MOVLW	HIGH(_handle_client_msg_dhcp_header_1_1)
000ee6   6e16     movwf	0x16, 0            	MOVWF	r0x16
000ee8   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_dhcp_header_1_1)
000eea   6e15     movwf	0x15, 0            	MOVWF	r0x15
000eec   0e80     movlw	0x80               	MOVLW	0x80
000eee   6e17     movwf	0x17, 0            	MOVWF	r0x17
000ef0   0e02     movlw	0x2                	MOVLW	HIGH(_handle_client_msg_dhcp_header_length_1_1)
000ef2   6e19     movwf	0x19, 0            	MOVWF	r0x19
000ef4   0e6d     movlw	0x6d               	MOVLW	LOW(_handle_client_msg_dhcp_header_length_1_1)
000ef6   6e18     movwf	0x18, 0            	MOVWF	r0x18
000ef8   0e80     movlw	0x80               	MOVLW	0x80
000efa   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
000efc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000efe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f00   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f08   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
000f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f0c   5019     movf	0x19, 0, 0          	MOVF	r0x19, W
000f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f10   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
000f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f14   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f18   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
000f1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1c   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f20   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
000f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f24   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f28   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2c   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f30   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f34   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000f36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f38   ec54     call	0x1aa8, 0           	CALL	_extract_bootp_header
000f3a   f00d
000f3c   0e0f     movlw	0xf                	MOVLW	0x0f
000f3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	659; MainDemo.c	UDPDiscard();
000f40   ec0b     call	0xbc16, 0           	CALL	_UDPDiscard
000f42   f05e
                                           ;	.line	661; MainDemo.c	switch(dhcp_type){
000f44   c2ab     movff	0x2ab, 0x6         	MOVFF	_handle_client_msg_dhcp_type_1_1, r0x06
000f46   f006
000f48   6a07     clrf	0x7, 0              	CLRF	r0x07
000f4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f4c   0a01     xorlw	0x1                	XORLW	0x01
000f4e   e102     bnz	0xf54                	BNZ	_00604_DS_
000f50   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f52   e007     bz	0xf62                 	BZ	_00578_DS_
                                           _00604_DS_:
000f54   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f56   0a03     xorlw	0x3                	XORLW	0x03
000f58   e103     bnz	0xf60                	BNZ	_00606_DS_
000f5a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f5c   e101     bnz	0xf60                	BNZ	_00606_DS_
000f5e   d055     bra	0x100a               	BRA	_00581_DS_
                                           _00606_DS_:
000f60   d18b     bra	0x1278               	BRA	_00591_DS_
                                           _00578_DS_:
                                           ;	.line	663; MainDemo.c	while(!UDPIsPutReady(*socket_sendto_server));
000f62   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000f64   ffe9
000f66   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f68   fff3
000f6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f6c   ec55     call	0xbcaa, 0           	CALL	__gptrget1
000f6e   f05e
000f70   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f72   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f76   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
000f78   f057
000f7a   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f7c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
000f7e   f007
000f80   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000f82   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f84   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f86   e0ed     bz	0xf62                 	BZ	_00578_DS_
                                           ;	.line	664; MainDemo.c	set_mac_to_dhcp_server();
000f88   ece4     call	0x99c8, 0           	CALL	_set_mac_to_dhcp_server
000f8a   f04c
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000f8c   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	665; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];
000f8e   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
000f90   0d0e     mullw	0xe                	MULLW	0x0e
000f92   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000f94   f006
000f96   6a07     clrf	0x7, 0              	CLRF	r0x07
000f98   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
000f9a   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
000f9c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
000f9e   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000fa0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000fa2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000fa4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000fa6   6e09     movwf	0x9, 0             	MOVWF	r0x09
000fa8   0e80     movlw	0x80               	MOVLW	0x80
000faa   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	666; MainDemo.c	set_to_dhcp_ip(&info->remoteNode.IPAddr);
000fac   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000fae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000fb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000fb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fb8   ec3a     call	0xa274, 0           	CALL	_set_to_dhcp_ip
000fba   f051
000fbc   0e03     movlw	0x3                	MOVLW	0x03
000fbe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	668; MainDemo.c	DisplayString(0, "DHCP DISCOVERY");
000fc0   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000fc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc4   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_4)
000fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc8   0e44     movlw	0x44               	MOVLW	LOW(__str_4)
000fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fcc   0e00     movlw	0                  	MOVLW	0x00
000fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd0   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
000fd2   f050
000fd4   0e04     movlw	0x4                	MOVLW	0x04
000fd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	669; MainDemo.c	build_bootp(&bootp_header, socket_sendto_server);
000fd8   0e0e     movlw	0xe                	MOVLW	HIGH(_handle_client_msg_bootp_header_1_1)
000fda   6e07     movwf	0x7, 0             	MOVWF	r0x07
000fdc   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_bootp_header_1_1)
000fde   6e06     movwf	0x6, 0             	MOVWF	r0x06
000fe0   0e80     movlw	0x80               	MOVLW	0x80
000fe2   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fe4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ffc   ec15     call	0x3c2a, 0           	CALL	_build_bootp
000ffe   f01e
001000   0e06     movlw	0x6                	MOVLW	0x06
001002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	670; MainDemo.c	discover_msg();
001004   ec16     call	0xa62c, 0           	CALL	_discover_msg
001006   f053
                                           ;	.line	671; MainDemo.c	break;
001008   d143     bra	0x1290               	BRA	_00593_DS_
                                           _00581_DS_:
                                           ;	.line	673; MainDemo.c	DisplayString(0, "DHCP REQUEST");
00100a   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_5)
001010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001012   0e54     movlw	0x54               	MOVLW	LOW(__str_5)
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   0e00     movlw	0                  	MOVLW	0x00
001018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101a   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00101c   f050
00101e   0e04     movlw	0x4                	MOVLW	0x04
001020   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	675; MainDemo.c	if(get_pool_el_mac(remote_node_MAC, &node_pool_state)){                
001022   0e02     movlw	0x2                	MOVLW	HIGH(_handle_client_msg_node_pool_state_1_1)
001024   6e07     movwf	0x7, 0             	MOVWF	r0x07
001026   0e6a     movlw	0x6a               	MOVLW	LOW(_handle_client_msg_node_pool_state_1_1)
001028   6e06     movwf	0x6, 0             	MOVWF	r0x06
00102a   0e80     movlw	0x80               	MOVLW	0x80
00102c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00102e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001030   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001032   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001034   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001036   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001038   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00103c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001040   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001042   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001044   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001046   ecdd     call	0x81ba, 0           	CALL	_get_pool_el_mac
001048   f040
00104a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00104c   0e06     movlw	0x6                	MOVLW	0x06
00104e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001050   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001052   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001054   d0b5     bra	0x11c0               	BRA	_00585_DS_
                                           _00582_DS_:
                                           ;	.line	676; MainDemo.c	while(!UDPIsPutReady(*socket_sendto_client));
001056   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001058   ffe9
00105a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00105c   fff3
00105e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001060   ec55     call	0xbcaa, 0           	CALL	__gptrget1
001062   f05e
001064   6e06     movwf	0x6, 0             	MOVWF	r0x06
001066   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106a   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
00106c   f057
00106e   6e06     movwf	0x6, 0             	MOVWF	r0x06
001070   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001072   f007
001074   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001076   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001078   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00107a   e0ed     bz	0x1056                	BZ	_00582_DS_
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00107c   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	677; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket]; 
00107e   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
001080   0d0e     mullw	0xe                	MULLW	0x0e
001082   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001084   f006
001086   6a07     clrf	0x7, 0              	CLRF	r0x07
001088   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00108a   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
00108c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00108e   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001090   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001092   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001094   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001096   6e09     movwf	0x9, 0             	MOVWF	r0x09
001098   0e80     movlw	0x80               	MOVLW	0x80
00109a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	678; MainDemo.c	set_to_dhcp_ip(&info->remoteNode.IPAddr);
00109c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00109e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010a8   ec3a     call	0xa274, 0           	CALL	_set_to_dhcp_ip
0010aa   f051
0010ac   0e03     movlw	0x3                	MOVLW	0x03
0010ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	679; MainDemo.c	node_pool_state->client_deadline = RELAY_LEASE_TIME;
0010b0   c26a     movff	0x26a, 0x6         	MOVFF	_handle_client_msg_node_pool_state_1_1, r0x06
0010b2   f006
0010b4   c26b     movff	0x26b, 0x7         	MOVFF	(_handle_client_msg_node_pool_state_1_1 + 1), r0x07
0010b6   f007
0010b8   c26c     movff	0x26c, 0x8         	MOVFF	(_handle_client_msg_node_pool_state_1_1 + 2), r0x08
0010ba   f008
0010bc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010be   0f0a     addlw	0xa                	ADDLW	0x0a
0010c0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0010c2   0e00     movlw	0                  	MOVLW	0x00
0010c4   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0010c6   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0010c8   0e00     movlw	0                  	MOVLW	0x00
0010ca   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0010cc   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0010ce   0e2c     movlw	0x2c               	MOVLW	0x2c
0010d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d2   0e01     movlw	0x1                	MOVLW	0x01
0010d4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0010d6   0e00     movlw	0                  	MOVLW	0x00
0010d8   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0010da   0e00     movlw	0                  	MOVLW	0x00
0010dc   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0010de   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0010e0   ffe9
0010e2   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0010e4   fff3
0010e6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0010e8   ec86     call	0xbd0c, 0           	CALL	__gptrput4
0010ea   f05e
                                           ;	.line	680; MainDemo.c	node_pool_state->miss_counter = 0;
0010ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0010ee   0f12     addlw	0x12               	ADDLW	0x12
0010f0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0010f2   0e00     movlw	0                  	MOVLW	0x00
0010f4   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0010f6   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0010f8   0e00     movlw	0                  	MOVLW	0x00
0010fa   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0010fc   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0010fe   0e00     movlw	0                  	MOVLW	0x00
001100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001102   0e00     movlw	0                  	MOVLW	0x00
001104   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001106   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001108   ffe9
00110a   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
00110c   fff3
00110e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001110   ec08     call	0xbe10, 0           	CALL	__gptrput2
001112   f05f
                                           ;	.line	681; MainDemo.c	forgeBootpHeaderAck(&bootp_header, bootp_header.TransactionID, &bootp_header.ClientIP, &node_pool_state->ip, &node_pool_state->mac);
001114   0e0e     movlw	0xe                	MOVLW	HIGH(_handle_client_msg_bootp_header_1_1)
001116   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001118   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_bootp_header_1_1)
00111a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00111c   0e80     movlw	0x80               	MOVLW	0x80
00111e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001120   0e0e     movlw	0xe                	MOVLW	HIGH(_handle_client_msg_bootp_header_1_1 + 12)
001122   6e10     movwf	0x10, 0            	MOVWF	r0x10
001124   0e0c     movlw	0xc                	MOVLW	LOW(_handle_client_msg_bootp_header_1_1 + 12)
001126   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001128   0e80     movlw	0x80               	MOVLW	0x80
00112a   6e11     movwf	0x11, 0            	MOVWF	r0x11
00112c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00112e   0f04     addlw	0x4                	ADDLW	0x04
001130   6e12     movwf	0x12, 0            	MOVWF	r0x12
001132   0e00     movlw	0                  	MOVLW	0x00
001134   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
001136   6e13     movwf	0x13, 0            	MOVWF	r0x13
001138   0e00     movlw	0                  	MOVLW	0x00
00113a   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00113c   6e14     movwf	0x14, 0            	MOVWF	r0x14
00113e   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
001140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001142   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
001144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001146   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001156   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
001158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115a   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00115c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115e   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001160   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001162   010e     movlb	0xe                	BANKSEL	(_handle_client_msg_bootp_header_1_1 + 7)
001164   5107     movf	0x7, 0, 0x1         	MOVF	(_handle_client_msg_bootp_header_1_1 + 7), W, B
001166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001168   010e     movlb	0xe                	BANKSEL	(_handle_client_msg_bootp_header_1_1 + 6)
00116a   5106     movf	0x6, 0, 0x1         	MOVF	(_handle_client_msg_bootp_header_1_1 + 6), W, B
00116c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116e   010e     movlb	0xe                	BANKSEL	(_handle_client_msg_bootp_header_1_1 + 5)
001170   5105     movf	0x5, 0, 0x1         	MOVF	(_handle_client_msg_bootp_header_1_1 + 5), W, B
001172   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001174   010e     movlb	0xe                	BANKSEL	(_handle_client_msg_bootp_header_1_1 + 4)
001176   5104     movf	0x4, 0, 0x1         	MOVF	(_handle_client_msg_bootp_header_1_1 + 4), W, B
001178   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00117a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00117c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00117e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001182   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001186   ec95     call	0x7f2a, 0           	CALL	_forgeBootpHeaderAck
001188   f03f
00118a   0e10     movlw	0x10               	MOVLW	0x10
00118c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	682; MainDemo.c	transfer_msg_to_client(&bootp_header, socket_sendto_client, DHCP_ACK_MESSAGE);
00118e   0e0e     movlw	0xe                	MOVLW	HIGH(_handle_client_msg_bootp_header_1_1)
001190   6e07     movwf	0x7, 0             	MOVWF	r0x07
001192   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_bootp_header_1_1)
001194   6e06     movwf	0x6, 0             	MOVWF	r0x06
001196   0e80     movlw	0x80               	MOVLW	0x80
001198   6e08     movwf	0x8, 0             	MOVWF	r0x08
00119a   0e05     movlw	0x5                	MOVLW	0x05
00119c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00119e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0011a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011aa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0011ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ae   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0011b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b6   ec81     call	0x1302, 0           	CALL	_transfer_msg_to_client
0011b8   f009
0011ba   0e07     movlw	0x7                	MOVLW	0x07
0011bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011be   d068     bra	0x1290               	BRA	_00593_DS_
                                           _00585_DS_:
                                           ;	.line	686; MainDemo.c	while(!UDPIsPutReady(*socket_sendto_server));
0011c0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0011c2   ffe9
0011c4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0011c6   fff3
0011c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011ca   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0011cc   f05e
0011ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
0011d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d4   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
0011d6   f057
0011d8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0011da   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0011dc   f004
0011de   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0011e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011e2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0011e4   e0ed     bz	0x11c0                	BZ	_00585_DS_
                                           ;	.line	687; MainDemo.c	set_mac_to_dhcp_server();
0011e6   ece4     call	0x99c8, 0           	CALL	_set_mac_to_dhcp_server
0011e8   f04c
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0011ea   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	688; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];             
0011ec   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
0011ee   0d0e     mullw	0xe                	MULLW	0x0e
0011f0   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0011f2   f003
0011f4   6a04     clrf	0x4, 0              	CLRF	r0x04
0011f6   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0011f8   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0011fa   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0011fc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0011fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001200   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001202   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001204   6e09     movwf	0x9, 0             	MOVWF	r0x09
001206   0e80     movlw	0x80               	MOVLW	0x80
001208   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	689; MainDemo.c	set_to_dhcp_ip(&info->remoteNode.IPAddr);
00120a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00120c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00120e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001212   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001216   ec3a     call	0xa274, 0           	CALL	_set_to_dhcp_ip
001218   f051
00121a   0e03     movlw	0x3                	MOVLW	0x03
00121c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	690; MainDemo.c	build_bootp(&bootp_header, socket_sendto_server);
00121e   0e0e     movlw	0xe                	MOVLW	HIGH(_handle_client_msg_bootp_header_1_1)
001220   6e04     movwf	0x4, 0             	MOVWF	r0x04
001222   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_bootp_header_1_1)
001224   6e03     movwf	0x3, 0             	MOVWF	r0x03
001226   0e80     movlw	0x80               	MOVLW	0x80
001228   6e05     movwf	0x5, 0             	MOVWF	r0x05
00122a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00122c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001230   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001232   5000     movf	0, 0, 0             	MOVF	r0x00, W
001234   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001236   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00123a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00123c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00123e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001242   ec15     call	0x3c2a, 0           	CALL	_build_bootp
001244   f01e
001246   0e06     movlw	0x6                	MOVLW	0x06
001248   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	691; MainDemo.c	request_msg(dhcp_header, dhcp_header_length);
00124a   0e09     movlw	0x9                	MOVLW	HIGH(_handle_client_msg_dhcp_header_1_1)
00124c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00124e   0e00     movlw	0                  	MOVLW	LOW(_handle_client_msg_dhcp_header_1_1)
001250   6e00     movwf	0, 0               	MOVWF	r0x00
001252   0e80     movlw	0x80               	MOVLW	0x80
001254   6e02     movwf	0x2, 0             	MOVWF	r0x02
001256   0102     movlb	0x2                	BANKSEL	(_handle_client_msg_dhcp_header_length_1_1 + 1)
001258   516e     movf	0x6e, 0, 0x1        	MOVF	(_handle_client_msg_dhcp_header_length_1_1 + 1), W, B
00125a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00125c   0102     movlb	0x2                	BANKSEL	_handle_client_msg_dhcp_header_length_1_1
00125e   516d     movf	0x6d, 0, 0x1        	MOVF	_handle_client_msg_dhcp_header_length_1_1, W, B
001260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001262   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001266   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001268   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00126c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00126e   ec0a     call	0x6e14, 0           	CALL	_request_msg
001270   f037
001272   0e05     movlw	0x5                	MOVLW	0x05
001274   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	693; MainDemo.c	break;
001276   d00c     bra	0x1290               	BRA	_00593_DS_
                                           _00591_DS_:
                                           ;	.line	695; MainDemo.c	DisplayString(0, "Unknw DHCP type");
001278   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
00127a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00127c   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_6)
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   0e62     movlw	0x62               	MOVLW	LOW(__str_6)
001282   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001284   0e00     movlw	0                  	MOVLW	0x00
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00128a   f050
00128c   0e04     movlw	0x4                	MOVLW	0x04
00128e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00593_DS_:
                                           ;	.line	697; MainDemo.c	}
001290   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
001292   f01a
001294   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
001296   f019
001298   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
00129a   f018
00129c   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
00129e   f017
0012a0   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
0012a2   f016
0012a4   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0012a6   f015
0012a8   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0012aa   f014
0012ac   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0012ae   f013
0012b0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0012b2   f012
0012b4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0012b6   f011
0012b8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0012ba   f010
0012bc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0012be   f00f
0012c0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0012c2   f00e
0012c4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0012c6   f00d
0012c8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0012ca   f00c
0012cc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0012ce   f00b
0012d0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0012d2   f00a
0012d4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0012d6   f009
0012d8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0012da   f008
0012dc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0012de   f007
0012e0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0012e2   f006
0012e4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0012e6   f005
0012e8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0012ea   f004
0012ec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0012ee   f003
0012f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0012f2   f002
0012f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012f6   f001
0012f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0012fa   f000
0012fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0012fe   ffd9
001300   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__set_mac_to_dhcp_server	code
                                           _set_mac_to_dhcp_server:
                                           ;	.line	627; MainDemo.c	void set_mac_to_dhcp_server(){
0099c8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0099ca   ffe5
0099cc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0099ce   ffd9
0099d0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0099d2   ffe5
0099d4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0099d6   ffe5
0099d8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0099da   ffe5
0099dc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0099de   ffe5
0099e0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0099e2   ffe5
0099e4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0099e6   ffe5
0099e8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0099ea   ffe5
0099ec   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0099ee   ffe5
0099f0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0099f2   ffe5
0099f4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0099f6   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0099f8   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	631; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];
0099fa   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
0099fc   0d0e     mullw	0xe                	MULLW	0x0e
0099fe   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
009a00   f000
009a02   6a01     clrf	0x1, 0              	CLRF	r0x01
009a04   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
009a06   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009a08   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
009a0a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009a0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009a0e   6e01     movwf	0x1, 0             	MOVWF	r0x01
009a10   5000     movf	0, 0, 0             	MOVF	r0x00, W
009a12   6e00     movwf	0, 0               	MOVWF	r0x00
009a14   0e80     movlw	0x80               	MOVLW	0x80
009a16   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	633; MainDemo.c	remote_node_MAC = &info->remoteNode.MACAddr;
009a18   0e04     movlw	0x4                	MOVLW	0x04
009a1a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009a1c   0e00     movlw	0                  	MOVLW	0x00
009a1e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
009a20   0e00     movlw	0                  	MOVLW	0x00
009a22   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	635; MainDemo.c	for (i=0; i<sizeof(MAC_ADDR); i++)
009a24   6a03     clrf	0x3, 0              	CLRF	r0x03
009a26   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00563_DS_:
009a28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009a2a   0f80     addlw	0x80               	ADDLW	0x80
009a2c   0f80     addlw	0x80               	ADDLW	0x80
009a2e   e102     bnz	0x9a34               	BNZ	_00572_DS_
009a30   0e06     movlw	0x6                	MOVLW	0x06
009a32   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00572_DS_:
009a34   e224     bc	0x9a7e                	BC	_00567_DS_
                                           ;	.line	636; MainDemo.c	remote_node_MAC->v[i] = GATEWAY_MACA[i];
009a36   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009a38   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
009a3a   6e05     movwf	0x5, 0             	MOVWF	r0x05
009a3c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009a3e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
009a40   6e06     movwf	0x6, 0             	MOVWF	r0x06
009a42   6ae8     clrf	0xe8, 0             	CLRF	WREG
009a44   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
009a46   68e8     setf	0xe8, 0             	SETF	WREG
009a48   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
009a4a   6e07     movwf	0x7, 0             	MOVWF	r0x07
009a4c   0eea     movlw	0xea               	MOVLW	LOW(_GATEWAY_MACA)
009a4e   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
009a50   6e08     movwf	0x8, 0             	MOVWF	r0x08
009a52   0e0b     movlw	0xb                	MOVLW	HIGH(_GATEWAY_MACA)
009a54   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
009a56   6e09     movwf	0x9, 0             	MOVWF	r0x09
009a58   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
009a5a   ffe9
009a5c   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
009a5e   ffea
009a60   cfef     movff	0xfef, 0x8         	MOVFF	INDF0, r0x08
009a62   f008
009a64   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
009a66   ffe5
009a68   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
009a6a   ffe9
009a6c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
009a6e   fff3
009a70   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009a72   ec28     call	0xbe50, 0           	CALL	__gptrput1
009a74   f05f
                                           ;	.line	635; MainDemo.c	for (i=0; i<sizeof(MAC_ADDR); i++)
009a76   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
009a78   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009a7a   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
009a7c   d7d5     bra	0x9a28               	BRA	_00563_DS_
                                           _00567_DS_:
009a7e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
009a80   f009
009a82   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
009a84   f008
009a86   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009a88   f007
009a8a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009a8c   f006
009a8e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009a90   f005
009a92   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009a94   f004
009a96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009a98   f003
009a9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009a9c   f002
009a9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009aa0   f001
009aa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009aa4   f000
009aa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009aa8   ffd9
009aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__transfer_msg_to_client	code
                                           _transfer_msg_to_client:
                                           ;	.line	570; MainDemo.c	void transfer_msg_to_client(BOOTP_HEADER *bootp_header, UDP_SOCKET *my_socket, BYTE type) {
001302   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001304   ffe5
001306   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001308   ffd9
00130a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00130c   ffe5
00130e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001310   ffe5
001312   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001314   ffe5
001316   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001318   ffe5
00131a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00131c   ffe5
00131e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001320   ffe5
001322   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001324   ffe5
001326   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001328   ffe5
00132a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00132c   ffe5
00132e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001330   ffe5
001332   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001334   ffe5
001336   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001338   ffe5
00133a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00133c   ffe5
00133e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001340   ffe5
001342   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001344   ffe5
001346   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001348   ffe5
00134a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00134c   ffe5
00134e   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
001350   ffe5
001352   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
001354   ffe5
001356   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
001358   ffe5
00135a   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00135c   ffe5
00135e   0e02     movlw	0x2                	MOVLW	0x02
001360   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001362   f000
001364   0e03     movlw	0x3                	MOVLW	0x03
001366   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001368   f001
00136a   0e04     movlw	0x4                	MOVLW	0x04
00136c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00136e   f002
001370   0e05     movlw	0x5                	MOVLW	0x05
001372   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001374   f003
001376   0e06     movlw	0x6                	MOVLW	0x06
001378   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00137a   f004
00137c   0e07     movlw	0x7                	MOVLW	0x07
00137e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001380   f005
001382   0e08     movlw	0x8                	MOVLW	0x08
001384   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001386   f006
                                           _00528_DS_:
                                           ;	.line	576; MainDemo.c	while(!UDPIsPutReady(*my_socket));
001388   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00138a   ffe9
00138c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00138e   fff3
001390   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001392   ec55     call	0xbcaa, 0           	CALL	__gptrget1
001394   f05e
001396   6e07     movwf	0x7, 0             	MOVWF	r0x07
001398   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00139a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00139c   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
00139e   f057
0013a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013a2   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
0013a4   f008
0013a6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0013a8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013aa   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0013ac   e0ed     bz	0x1388                	BZ	_00528_DS_
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0013ae   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	578; MainDemo.c	info = &UDPSocketInfo[activeUDPSocket];
0013b0   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
0013b2   0d0e     mullw	0xe                	MULLW	0x0e
0013b4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0013b6   f007
0013b8   6a08     clrf	0x8, 0              	CLRF	r0x08
0013ba   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0013bc   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0013be   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0013c0   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
0013c2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0013c4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0013c6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013c8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013ca   0e80     movlw	0x80               	MOVLW	0x80
0013cc   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	579; MainDemo.c	for(i=0; i<4; i++){
0013ce   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0013d0   6a0b     clrf	0xb, 0              	CLRF	r0x0b
                                           _00531_DS_:
0013d2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0013d4   0f80     addlw	0x80               	ADDLW	0x80
0013d6   0f80     addlw	0x80               	ADDLW	0x80
0013d8   e102     bnz	0x13de               	BNZ	_00556_DS_
0013da   0e04     movlw	0x4                	MOVLW	0x04
0013dc   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00556_DS_:
0013de   e218     bc	0x1410                	BC	_00534_DS_
                                           ;	.line	580; MainDemo.c	info->remoteNode.IPAddr.v[i] = 255;
0013e0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0013e2   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
0013e4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0013e6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0013e8   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0013ea   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0013ec   6ae8     clrf	0xe8, 0             	CLRF	WREG
0013ee   be0b     btfsc	0xb, 0x7, 0        	BTFSC	r0x0b, 7
0013f0   68e8     setf	0xe8, 0             	SETF	WREG
0013f2   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0013f4   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0013f6   0eff     movlw	0xff               	MOVLW	0xff
0013f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fa   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0013fc   ffe9
0013fe   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001400   fff3
001402   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001404   ec28     call	0xbe50, 0           	CALL	__gptrput1
001406   f05f
                                           ;	.line	579; MainDemo.c	for(i=0; i<4; i++){
001408   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
00140a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00140c   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
00140e   d7e1     bra	0x13d2               	BRA	_00531_DS_
                                           _00534_DS_:
                                           ;	.line	583; MainDemo.c	info->remotePort = DHCP_CLIENT_PORT;
001410   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001412   0f0a     addlw	0xa                	ADDLW	0x0a
001414   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001416   0e00     movlw	0                  	MOVLW	0x00
001418   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00141a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00141c   0e00     movlw	0                  	MOVLW	0x00
00141e   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
001420   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001422   0e44     movlw	0x44               	MOVLW	0x44
001424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001426   0e00     movlw	0                  	MOVLW	0x00
001428   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00142a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00142c   ffe9
00142e   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
001430   fff3
001432   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001434   ec08     call	0xbe10, 0           	CALL	__gptrput2
001436   f05f
                                           ;	.line	586; MainDemo.c	for (i=0; i<sizeof(IP_ADDR); i++) {
001438   0e04     movlw	0x4                	MOVLW	0x04
00143a   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
00143c   0e00     movlw	0                  	MOVLW	0x00
00143e   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
001440   0e00     movlw	0                  	MOVLW	0x00
001442   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
001444   5000     movf	0, 0, 0             	MOVF	r0x00, W
001446   0f1c     addlw	0x1c               	ADDLW	0x1c
001448   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00144a   0e00     movlw	0                  	MOVLW	0x00
00144c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00144e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001450   0e00     movlw	0                  	MOVLW	0x00
001452   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001454   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001456   6a0d     clrf	0xd, 0              	CLRF	r0x0d
001458   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00535_DS_:
00145a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00145c   0f80     addlw	0x80               	ADDLW	0x80
00145e   0f80     addlw	0x80               	ADDLW	0x80
001460   e102     bnz	0x1466               	BNZ	_00557_DS_
001462   0e04     movlw	0x4                	MOVLW	0x04
001464   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
                                           _00557_DS_:
001466   e22b     bc	0x14be                	BC	_00538_DS_
                                           ;	.line	587; MainDemo.c	info->remoteNode.MACAddr.v[i] = bootp_header->ClientMAC.v[i];
001468   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00146a   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
00146c   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00146e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001470   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
001472   6e10     movwf	0x10, 0            	MOVWF	r0x10
001474   6ae8     clrf	0xe8, 0             	CLRF	WREG
001476   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
001478   68e8     setf	0xe8, 0             	SETF	WREG
00147a   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
00147c   6e11     movwf	0x11, 0            	MOVWF	r0x11
00147e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001480   240a     addwf	0xa, 0, 0          	ADDWF	r0x0a, W
001482   6e12     movwf	0x12, 0            	MOVWF	r0x12
001484   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001486   200b     addwfc	0xb, 0, 0         	ADDWFC	r0x0b, W
001488   6e13     movwf	0x13, 0            	MOVWF	r0x13
00148a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00148c   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
00148e   68e8     setf	0xe8, 0             	SETF	WREG
001490   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
001492   6e14     movwf	0x14, 0            	MOVWF	r0x14
001494   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
001496   ffe9
001498   c013     movff	0x13, 0xff3        	MOVFF	r0x13, PRODL
00149a   fff3
00149c   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00149e   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0014a0   f05e
0014a2   6e12     movwf	0x12, 0            	MOVWF	r0x12
0014a4   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0014a6   ffe5
0014a8   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0014aa   ffe9
0014ac   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0014ae   fff3
0014b0   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0014b2   ec28     call	0xbe50, 0           	CALL	__gptrput1
0014b4   f05f
                                           ;	.line	586; MainDemo.c	for (i=0; i<sizeof(IP_ADDR); i++) {
0014b6   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
0014b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014ba   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
0014bc   d7ce     bra	0x145a               	BRA	_00535_DS_
                                           _00538_DS_:
                                           ;	.line	590; MainDemo.c	build_bootp(bootp_header, my_socket);
0014be   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0014c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0014c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0014cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014d6   ec15     call	0x3c2a, 0           	CALL	_build_bootp
0014d8   f01e
0014da   0e06     movlw	0x6                	MOVLW	0x06
0014dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	591; MainDemo.c	UDPPut(type);	
0014de   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0014e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014e2   ec36     call	0xac6c, 0           	CALL	_UDPPut
0014e4   f056
0014e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	594; MainDemo.c	UDPPut(DHCP_SUBNET_MASK);
0014e8   0e01     movlw	0x1                	MOVLW	0x01
0014ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ec   ec36     call	0xac6c, 0           	CALL	_UDPPut
0014ee   f056
0014f0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	595; MainDemo.c	UDPPut(sizeof(IP_ADDR));
0014f2   0e04     movlw	0x4                	MOVLW	0x04
0014f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014f6   ec36     call	0xac6c, 0           	CALL	_UDPPut
0014f8   f056
0014fa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	596; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyMask, sizeof(IP_ADDR));
0014fc   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 4)
0014fe   6e01     movwf	0x1, 0             	MOVWF	r0x01
001500   0ecc     movlw	0xcc               	MOVLW	LOW(_AppConfig + 4)
001502   6e00     movwf	0, 0               	MOVWF	r0x00
001504   0e80     movlw	0x80               	MOVLW	0x80
001506   6e02     movwf	0x2, 0             	MOVWF	r0x02
001508   0e00     movlw	0                  	MOVLW	0x00
00150a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00150c   0e04     movlw	0x4                	MOVLW	0x04
00150e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001510   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001512   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001514   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001516   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001518   5000     movf	0, 0, 0             	MOVF	r0x00, W
00151a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00151c   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
00151e   f04b
001520   0e05     movlw	0x5                	MOVLW	0x05
001522   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	599; MainDemo.c	UDPPut(DHCP_BROADCAST);
001524   0e1c     movlw	0x1c               	MOVLW	0x1c
001526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001528   ec36     call	0xac6c, 0           	CALL	_UDPPut
00152a   f056
00152c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	600; MainDemo.c	UDPPut(sizeof(IP_ADDR));
00152e   0e04     movlw	0x4                	MOVLW	0x04
001530   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001532   ec36     call	0xac6c, 0           	CALL	_UDPPut
001534   f056
001536   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	601; MainDemo.c	for(i=0; i<sizeof(IP_ADDR); i++){
001538   6a00     clrf	0, 0                	CLRF	r0x00
00153a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00539_DS_:
00153c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00153e   0f80     addlw	0x80               	ADDLW	0x80
001540   0f80     addlw	0x80               	ADDLW	0x80
001542   e102     bnz	0x1548               	BNZ	_00558_DS_
001544   0e04     movlw	0x4                	MOVLW	0x04
001546   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00558_DS_:
001548   e22d     bc	0x15a4                	BC	_00542_DS_
                                           ;	.line	602; MainDemo.c	broadcast.v[i] = (AppConfig.MyIPAddr.v[i] & AppConfig.MyMask.v[i]) | ~AppConfig.MyMask.v[i];
00154a   0e14     movlw	0x14               	MOVLW	LOW(_transfer_msg_to_client_broadcast_1_1)
00154c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00154e   6e02     movwf	0x2, 0             	MOVWF	r0x02
001550   0e02     movlw	0x2                	MOVLW	HIGH(_transfer_msg_to_client_broadcast_1_1)
001552   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001554   6e03     movwf	0x3, 0             	MOVWF	r0x03
001556   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
001558   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00155a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00155c   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
00155e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001560   6e05     movwf	0x5, 0             	MOVWF	r0x05
001562   0ecc     movlw	0xcc               	MOVLW	LOW(_AppConfig + 4)
001564   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001566   6e06     movwf	0x6, 0             	MOVWF	r0x06
001568   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 4)
00156a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00156c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00156e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001570   ffe9
001572   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001574   ffea
001576   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
001578   f004
00157a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00157c   ffe9
00157e   c007     movff	0x7, 0xfea         	MOVFF	r0x07, FSR0H
001580   ffea
001582   cfef     movff	0xfef, 0x6         	MOVFF	INDF0, r0x06
001584   f006
001586   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001588   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
00158a   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
00158c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00158e   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
001590   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001592   ffe9
001594   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001596   ffea
001598   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
00159a   ffef
                                           ;	.line	601; MainDemo.c	for(i=0; i<sizeof(IP_ADDR); i++){
00159c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00159e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015a0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0015a2   d7cc     bra	0x153c               	BRA	_00539_DS_
                                           _00542_DS_:
                                           ;	.line	604; MainDemo.c	UDPPutArray((BYTE*)&broadcast, sizeof(IP_ADDR));
0015a4   0e02     movlw	0x2                	MOVLW	HIGH(_transfer_msg_to_client_broadcast_1_1)
0015a6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0015a8   0e14     movlw	0x14               	MOVLW	LOW(_transfer_msg_to_client_broadcast_1_1)
0015aa   6e00     movwf	0, 0               	MOVWF	r0x00
0015ac   0e80     movlw	0x80               	MOVLW	0x80
0015ae   6e02     movwf	0x2, 0             	MOVWF	r0x02
0015b0   0e00     movlw	0                  	MOVLW	0x00
0015b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015b4   0e04     movlw	0x4                	MOVLW	0x04
0015b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c4   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
0015c6   f04b
0015c8   0e05     movlw	0x5                	MOVLW	0x05
0015ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	607; MainDemo.c	UDPPut(DHCP_ROUTER);
0015cc   0e03     movlw	0x3                	MOVLW	0x03
0015ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015d0   ec36     call	0xac6c, 0           	CALL	_UDPPut
0015d2   f056
0015d4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	608; MainDemo.c	UDPPut(sizeof(IP_ADDR));
0015d6   0e04     movlw	0x4                	MOVLW	0x04
0015d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015da   ec36     call	0xac6c, 0           	CALL	_UDPPut
0015dc   f056
0015de   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	609; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyGateway, sizeof(IP_ADDR));
0015e0   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 8)
0015e2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0015e4   0ed0     movlw	0xd0               	MOVLW	LOW(_AppConfig + 8)
0015e6   6e00     movwf	0, 0               	MOVWF	r0x00
0015e8   0e80     movlw	0x80               	MOVLW	0x80
0015ea   6e02     movwf	0x2, 0             	MOVWF	r0x02
0015ec   0e00     movlw	0                  	MOVLW	0x00
0015ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f0   0e04     movlw	0x4                	MOVLW	0x04
0015f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001600   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
001602   f04b
001604   0e05     movlw	0x5                	MOVLW	0x05
001606   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	611; MainDemo.c	lease_time = RELAY_LEASE_TIME;
001608   0e2c     movlw	0x2c               	MOVLW	0x2c
00160a   0109     movlb	0x9                	BANKSEL	_transfer_msg_to_client_lease_time_1_1
00160c   6ffe     movwf	0xfe, 0x1          	MOVWF	_transfer_msg_to_client_lease_time_1_1, B
00160e   0e01     movlw	0x1                	MOVLW	0x01
001610   0109     movlb	0x9                	BANKSEL	(_transfer_msg_to_client_lease_time_1_1 + 1)
001612   6fff     movwf	0xff, 0x1          	MOVWF	(_transfer_msg_to_client_lease_time_1_1 + 1), B
                                           ;	.line	612; MainDemo.c	UDPPut(DHCP_IP_LEASE_TIME);
001614   0e33     movlw	0x33               	MOVLW	0x33
001616   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001618   ec36     call	0xac6c, 0           	CALL	_UDPPut
00161a   f056
00161c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	613; MainDemo.c	UDPPut(4);
00161e   0e04     movlw	0x4                	MOVLW	0x04
001620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001622   ec36     call	0xac6c, 0           	CALL	_UDPPut
001624   f056
001626   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	614; MainDemo.c	UDPPut(0);
001628   0e00     movlw	0                  	MOVLW	0x00
00162a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00162c   ec36     call	0xac6c, 0           	CALL	_UDPPut
00162e   f056
001630   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	615; MainDemo.c	UDPPut(0);
001632   0e00     movlw	0                  	MOVLW	0x00
001634   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001636   ec36     call	0xac6c, 0           	CALL	_UDPPut
001638   f056
00163a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	616; MainDemo.c	UDPPutArrayInvert((BYTE*)&lease_time, 2);
00163c   0e09     movlw	0x9                	MOVLW	HIGH(_transfer_msg_to_client_lease_time_1_1)
00163e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001640   0efe     movlw	0xfe               	MOVLW	LOW(_transfer_msg_to_client_lease_time_1_1)
001642   6e00     movwf	0, 0               	MOVWF	r0x00
001644   0e80     movlw	0x80               	MOVLW	0x80
001646   6e02     movwf	0x2, 0             	MOVWF	r0x02
001648   0e00     movlw	0                  	MOVLW	0x00
00164a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00164c   0e02     movlw	0x2                	MOVLW	0x02
00164e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001650   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001654   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001658   5000     movf	0, 0, 0             	MOVF	r0x00, W
00165a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00165c   ec8e     call	0x9f1c, 0           	CALL	_UDPPutArrayInvert
00165e   f04f
001660   0e05     movlw	0x5                	MOVLW	0x05
001662   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	619; MainDemo.c	UDPPut(DHCP_SERVER_IDENTIFIER);
001664   0e36     movlw	0x36               	MOVLW	0x36
001666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001668   ec36     call	0xac6c, 0           	CALL	_UDPPut
00166a   f056
00166c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	620; MainDemo.c	UDPPut(sizeof(IP_ADDR));
00166e   0e04     movlw	0x4                	MOVLW	0x04
001670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001672   ec36     call	0xac6c, 0           	CALL	_UDPPut
001674   f056
001676   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	621; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
001678   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
00167a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00167c   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
00167e   6e00     movwf	0, 0               	MOVWF	r0x00
001680   0e80     movlw	0x80               	MOVLW	0x80
001682   6e02     movwf	0x2, 0             	MOVWF	r0x02
001684   0e00     movlw	0                  	MOVLW	0x00
001686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001688   0e04     movlw	0x4                	MOVLW	0x04
00168a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00168e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001690   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001694   5000     movf	0, 0, 0             	MOVF	r0x00, W
001696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001698   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
00169a   f04b
00169c   0e05     movlw	0x5                	MOVLW	0x05
00169e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	622; MainDemo.c	end_dhcp();
0016a0   ec7e     call	0xbafc, 0           	CALL	_end_dhcp
0016a2   f05d
                                           ;	.line	623; MainDemo.c	UDPFlush();
0016a4   ec83     call	0x4506, 0           	CALL	_UDPFlush
0016a6   f022
0016a8   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0016aa   f014
0016ac   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0016ae   f013
0016b0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0016b2   f012
0016b4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0016b6   f011
0016b8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0016ba   f010
0016bc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0016be   f00f
0016c0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0016c2   f00e
0016c4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0016c6   f00d
0016c8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0016ca   f00c
0016cc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0016ce   f00b
0016d0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0016d2   f00a
0016d4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0016d6   f009
0016d8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0016da   f008
0016dc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0016de   f007
0016e0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0016e2   f006
0016e4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0016e6   f005
0016e8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0016ea   f004
0016ec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0016ee   f003
0016f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0016f2   f002
0016f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0016f6   f001
0016f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016fa   f000
0016fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016fe   ffd9
001700   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__UDPPutArrayInvert	code
                                           _UDPPutArrayInvert:
                                           ;	.line	562; MainDemo.c	void UDPPutArrayInvert(BYTE *val, int len)
009f1c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009f1e   ffe5
009f20   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009f22   ffd9
009f24   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009f26   ffe5
009f28   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009f2a   ffe5
009f2c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009f2e   ffe5
009f30   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009f32   ffe5
009f34   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009f36   ffe5
009f38   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009f3a   ffe5
009f3c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009f3e   ffe5
009f40   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009f42   ffe5
009f44   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
009f46   ffe5
009f48   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
009f4a   ffe5
009f4c   0e02     movlw	0x2                	MOVLW	0x02
009f4e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009f50   f000
009f52   0e03     movlw	0x3                	MOVLW	0x03
009f54   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009f56   f001
009f58   0e04     movlw	0x4                	MOVLW	0x04
009f5a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009f5c   f002
009f5e   0e05     movlw	0x5                	MOVLW	0x05
009f60   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009f62   f003
009f64   0e06     movlw	0x6                	MOVLW	0x06
009f66   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009f68   f004
                                           ;	.line	565; MainDemo.c	for(i = 0; i < len; i++)
009f6a   6a05     clrf	0x5, 0              	CLRF	r0x05
009f6c   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00514_DS_:
009f6e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009f70   0f80     addlw	0x80               	ADDLW	0x80
009f72   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
009f74   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009f76   0f80     addlw	0x80               	ADDLW	0x80
009f78   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
009f7a   e102     bnz	0x9f80               	BNZ	_00523_DS_
009f7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009f7e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00523_DS_:
009f80   e224     bc	0x9fca                	BC	_00518_DS_
                                           ;	.line	566; MainDemo.c	UDPPut(val[len-i-1]);
009f82   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009f84   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
009f86   6e07     movwf	0x7, 0             	MOVWF	r0x07
009f88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009f8a   5804     subwfb	0x4, 0, 0         	SUBWFB	r0x04, W
009f8c   6e08     movwf	0x8, 0             	MOVWF	r0x08
009f8e   0eff     movlw	0xff               	MOVLW	0xff
009f90   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
009f92   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
009f94   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
009f96   6a09     clrf	0x9, 0              	CLRF	r0x09
009f98   be08     btfsc	0x8, 0x7, 0        	BTFSC	r0x08, 7
009f9a   6809     setf	0x9, 0              	SETF	r0x09
009f9c   5000     movf	0, 0, 0             	MOVF	r0x00, W
009f9e   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
009fa0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009fa2   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
009fa4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009fa6   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
009fa8   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
009faa   ffe9
009fac   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
009fae   fff3
009fb0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
009fb2   ec55     call	0xbcaa, 0           	CALL	__gptrget1
009fb4   f05e
009fb6   6e07     movwf	0x7, 0             	MOVWF	r0x07
009fb8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009fba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009fbc   ec36     call	0xac6c, 0           	CALL	_UDPPut
009fbe   f056
009fc0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	565; MainDemo.c	for(i = 0; i < len; i++)
009fc2   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
009fc4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009fc6   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
009fc8   d7d2     bra	0x9f6e               	BRA	_00514_DS_
                                           _00518_DS_:
009fca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
009fcc   f009
009fce   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
009fd0   f008
009fd2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009fd4   f007
009fd6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009fd8   f006
009fda   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009fdc   f005
009fde   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009fe0   f004
009fe2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009fe4   f003
009fe6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009fe8   f002
009fea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009fec   f001
009fee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009ff0   f000
009ff2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009ff4   ffd9
009ff6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__forgeBootpHeaderAck	code
                                           _forgeBootpHeaderAck:
                                           ;	.line	556; MainDemo.c	void forgeBootpHeaderAck(BOOTP_HEADER *bootp_header, DWORD transactionId, IP_ADDR *clientIP, IP_ADDR *yourIP, MAC_ADDR	*clientMAC)
007f2a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f2c   ffe5
007f2e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f30   ffd9
007f32   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007f34   ffe5
007f36   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007f38   ffe5
007f3a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007f3c   ffe5
007f3e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007f40   ffe5
007f42   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007f44   ffe5
007f46   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007f48   ffe5
007f4a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007f4c   ffe5
007f4e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007f50   ffe5
007f52   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007f54   ffe5
007f56   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007f58   ffe5
007f5a   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
007f5c   ffe5
007f5e   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
007f60   ffe5
007f62   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
007f64   ffe5
007f66   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
007f68   ffe5
007f6a   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
007f6c   ffe5
007f6e   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
007f70   ffe5
007f72   0e02     movlw	0x2                	MOVLW	0x02
007f74   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007f76   f000
007f78   0e03     movlw	0x3                	MOVLW	0x03
007f7a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007f7c   f001
007f7e   0e04     movlw	0x4                	MOVLW	0x04
007f80   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007f82   f002
007f84   0e05     movlw	0x5                	MOVLW	0x05
007f86   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
007f88   f003
007f8a   0e06     movlw	0x6                	MOVLW	0x06
007f8c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007f8e   f004
007f90   0e07     movlw	0x7                	MOVLW	0x07
007f92   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
007f94   f005
007f96   0e08     movlw	0x8                	MOVLW	0x08
007f98   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
007f9a   f006
007f9c   0e09     movlw	0x9                	MOVLW	0x09
007f9e   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
007fa0   f007
007fa2   0e0a     movlw	0xa                	MOVLW	0x0a
007fa4   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
007fa6   f008
007fa8   0e0b     movlw	0xb                	MOVLW	0x0b
007faa   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
007fac   f009
007fae   0e0c     movlw	0xc                	MOVLW	0x0c
007fb0   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
007fb2   f00a
007fb4   0e0d     movlw	0xd                	MOVLW	0x0d
007fb6   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
007fb8   f00b
007fba   0e0e     movlw	0xe                	MOVLW	0x0e
007fbc   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
007fbe   f00c
007fc0   0e0f     movlw	0xf                	MOVLW	0x0f
007fc2   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
007fc4   f00d
007fc6   0e10     movlw	0x10               	MOVLW	0x10
007fc8   cfdb     movff	0xfdb, 0xe         	MOVFF	PLUSW2, r0x0e
007fca   f00e
007fcc   0e11     movlw	0x11               	MOVLW	0x11
007fce   cfdb     movff	0xfdb, 0xf         	MOVFF	PLUSW2, r0x0f
007fd0   f00f
                                           ;	.line	558; MainDemo.c	bootp_header->MessageType = BOOT_REPLY;
007fd2   0e02     movlw	0x2                	MOVLW	0x02
007fd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007fd6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007fd8   ffe9
007fda   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007fdc   fff3
007fde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007fe0   ec28     call	0xbe50, 0           	CALL	__gptrput1
007fe2   f05f
                                           ;	.line	559; MainDemo.c	forgeBootpHeader(bootp_header, transactionId, clientIP, yourIP, clientMAC);
007fe4   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
007fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007fe8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
007fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007fec   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
007fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ff0   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
007ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ff4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
007ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ff8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ffc   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007ffe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008000   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
008002   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008004   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
008006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008008   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00800a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00800c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00800e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008010   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008014   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008018   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00801a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00801c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00801e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008020   5000     movf	0, 0, 0             	MOVF	r0x00, W
008022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008024   ec93     call	0x3f26, 0           	CALL	_forgeBootpHeader
008026   f01f
008028   0e10     movlw	0x10               	MOVLW	0x10
00802a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00802c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00802e   f00f
008030   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
008032   f00e
008034   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
008036   f00d
008038   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00803a   f00c
00803c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00803e   f00b
008040   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
008042   f00a
008044   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
008046   f009
008048   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00804a   f008
00804c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00804e   f007
008050   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008052   f006
008054   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008056   f005
008058   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00805a   f004
00805c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00805e   f003
008060   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008062   f002
008064   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008066   f001
008068   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00806a   f000
00806c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00806e   ffd9
008070   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__forgeBootpHeaderRequest	code
                                           _forgeBootpHeaderRequest:
                                           ;	.line	550; MainDemo.c	void forgeBootpHeaderRequest(BOOTP_HEADER *bootp_header, DWORD transactionId, IP_ADDR *clientIP, IP_ADDR *yourIP, MAC_ADDR	*clientMAC)
008072   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008074   ffe5
008076   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008078   ffd9
00807a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00807c   ffe5
00807e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008080   ffe5
008082   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008084   ffe5
008086   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008088   ffe5
00808a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00808c   ffe5
00808e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008090   ffe5
008092   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
008094   ffe5
008096   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008098   ffe5
00809a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00809c   ffe5
00809e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0080a0   ffe5
0080a2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0080a4   ffe5
0080a6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0080a8   ffe5
0080aa   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0080ac   ffe5
0080ae   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0080b0   ffe5
0080b2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0080b4   ffe5
0080b6   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0080b8   ffe5
0080ba   0e02     movlw	0x2                	MOVLW	0x02
0080bc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0080be   f000
0080c0   0e03     movlw	0x3                	MOVLW	0x03
0080c2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0080c4   f001
0080c6   0e04     movlw	0x4                	MOVLW	0x04
0080c8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0080ca   f002
0080cc   0e05     movlw	0x5                	MOVLW	0x05
0080ce   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0080d0   f003
0080d2   0e06     movlw	0x6                	MOVLW	0x06
0080d4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0080d6   f004
0080d8   0e07     movlw	0x7                	MOVLW	0x07
0080da   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0080dc   f005
0080de   0e08     movlw	0x8                	MOVLW	0x08
0080e0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0080e2   f006
0080e4   0e09     movlw	0x9                	MOVLW	0x09
0080e6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0080e8   f007
0080ea   0e0a     movlw	0xa                	MOVLW	0x0a
0080ec   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0080ee   f008
0080f0   0e0b     movlw	0xb                	MOVLW	0x0b
0080f2   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
0080f4   f009
0080f6   0e0c     movlw	0xc                	MOVLW	0x0c
0080f8   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
0080fa   f00a
0080fc   0e0d     movlw	0xd                	MOVLW	0x0d
0080fe   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
008100   f00b
008102   0e0e     movlw	0xe                	MOVLW	0x0e
008104   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
008106   f00c
008108   0e0f     movlw	0xf                	MOVLW	0x0f
00810a   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
00810c   f00d
00810e   0e10     movlw	0x10               	MOVLW	0x10
008110   cfdb     movff	0xfdb, 0xe         	MOVFF	PLUSW2, r0x0e
008112   f00e
008114   0e11     movlw	0x11               	MOVLW	0x11
008116   cfdb     movff	0xfdb, 0xf         	MOVFF	PLUSW2, r0x0f
008118   f00f
                                           ;	.line	552; MainDemo.c	bootp_header->MessageType = BOOT_REQUEST;
00811a   0e01     movlw	0x1                	MOVLW	0x01
00811c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00811e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
008120   ffe9
008122   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
008124   fff3
008126   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008128   ec28     call	0xbe50, 0           	CALL	__gptrput1
00812a   f05f
                                           ;	.line	553; MainDemo.c	forgeBootpHeader(bootp_header, transactionId, clientIP, yourIP, clientMAC);
00812c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00812e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008130   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
008132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008134   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
008136   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008138   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00813a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00813c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00813e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008140   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
008142   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008144   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
008146   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008148   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00814a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00814c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00814e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008150   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008152   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008154   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008156   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008158   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00815a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00815c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00815e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008160   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008164   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008168   5000     movf	0, 0, 0             	MOVF	r0x00, W
00816a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00816c   ec93     call	0x3f26, 0           	CALL	_forgeBootpHeader
00816e   f01f
008170   0e10     movlw	0x10               	MOVLW	0x10
008172   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
008174   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
008176   f00f
008178   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00817a   f00e
00817c   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00817e   f00d
008180   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
008182   f00c
008184   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
008186   f00b
008188   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00818a   f00a
00818c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00818e   f009
008190   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
008192   f008
008194   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008196   f007
008198   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00819a   f006
00819c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00819e   f005
0081a0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0081a2   f004
0081a4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0081a6   f003
0081a8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0081aa   f002
0081ac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0081ae   f001
0081b0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0081b2   f000
0081b4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0081b6   ffd9
0081b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__forgeBootpHeader	code
                                           _forgeBootpHeader:
                                           ;	.line	535; MainDemo.c	void forgeBootpHeader(BOOTP_HEADER *bootp_header, DWORD transactionId, IP_ADDR *clientIP, IP_ADDR *yourIP, MAC_ADDR	*clientMAC){
003f26   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003f28   ffe5
003f2a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003f2c   ffd9
003f2e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003f30   ffe5
003f32   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003f34   ffe5
003f36   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003f38   ffe5
003f3a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003f3c   ffe5
003f3e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003f40   ffe5
003f42   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003f44   ffe5
003f46   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003f48   ffe5
003f4a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003f4c   ffe5
003f4e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003f50   ffe5
003f52   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003f54   ffe5
003f56   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003f58   ffe5
003f5a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003f5c   ffe5
003f5e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003f60   ffe5
003f62   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003f64   ffe5
003f66   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003f68   ffe5
003f6a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003f6c   ffe5
003f6e   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
003f70   ffe5
003f72   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
003f74   ffe5
003f76   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
003f78   ffe5
003f7a   0e02     movlw	0x2                	MOVLW	0x02
003f7c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003f7e   f000
003f80   0e03     movlw	0x3                	MOVLW	0x03
003f82   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003f84   f001
003f86   0e04     movlw	0x4                	MOVLW	0x04
003f88   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003f8a   f002
003f8c   0e05     movlw	0x5                	MOVLW	0x05
003f8e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003f90   f003
003f92   0e06     movlw	0x6                	MOVLW	0x06
003f94   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003f96   f004
003f98   0e07     movlw	0x7                	MOVLW	0x07
003f9a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003f9c   f005
003f9e   0e08     movlw	0x8                	MOVLW	0x08
003fa0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003fa2   f006
003fa4   0e09     movlw	0x9                	MOVLW	0x09
003fa6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003fa8   f007
003faa   0e0a     movlw	0xa                	MOVLW	0x0a
003fac   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
003fae   f008
003fb0   0e0b     movlw	0xb                	MOVLW	0x0b
003fb2   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
003fb4   f009
003fb6   0e0c     movlw	0xc                	MOVLW	0x0c
003fb8   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
003fba   f00a
003fbc   0e0d     movlw	0xd                	MOVLW	0x0d
003fbe   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
003fc0   f00b
003fc2   0e0e     movlw	0xe                	MOVLW	0x0e
003fc4   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
003fc6   f00c
003fc8   0e0f     movlw	0xf                	MOVLW	0x0f
003fca   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
003fcc   f00d
003fce   0e10     movlw	0x10               	MOVLW	0x10
003fd0   cfdb     movff	0xfdb, 0xe         	MOVFF	PLUSW2, r0x0e
003fd2   f00e
003fd4   0e11     movlw	0x11               	MOVLW	0x11
003fd6   cfdb     movff	0xfdb, 0xf         	MOVFF	PLUSW2, r0x0f
003fd8   f00f
                                           ;	.line	537; MainDemo.c	bootp_header->HardwareType = BOOT_HW_TYPE;
003fda   5000     movf	0, 0, 0             	MOVF	r0x00, W
003fdc   0f01     addlw	0x1                	ADDLW	0x01
003fde   6e10     movwf	0x10, 0            	MOVWF	r0x10
003fe0   0e00     movlw	0                  	MOVLW	0x00
003fe2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003fe4   6e11     movwf	0x11, 0            	MOVWF	r0x11
003fe6   0e00     movlw	0                  	MOVLW	0x00
003fe8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003fea   6e12     movwf	0x12, 0            	MOVWF	r0x12
003fec   0e01     movlw	0x1                	MOVLW	0x01
003fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ff0   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003ff2   ffe9
003ff4   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003ff6   fff3
003ff8   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003ffa   ec28     call	0xbe50, 0           	CALL	__gptrput1
003ffc   f05f
                                           ;	.line	538; MainDemo.c	bootp_header->HardwareLen = BOOT_LEN_OF_HW_TYPE;
003ffe   5000     movf	0, 0, 0             	MOVF	r0x00, W
004000   0f02     addlw	0x2                	ADDLW	0x02
004002   6e10     movwf	0x10, 0            	MOVWF	r0x10
004004   0e00     movlw	0                  	MOVLW	0x00
004006   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004008   6e11     movwf	0x11, 0            	MOVWF	r0x11
00400a   0e00     movlw	0                  	MOVLW	0x00
00400c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00400e   6e12     movwf	0x12, 0            	MOVWF	r0x12
004010   0e06     movlw	0x6                	MOVLW	0x06
004012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004014   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
004016   ffe9
004018   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
00401a   fff3
00401c   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00401e   ec28     call	0xbe50, 0           	CALL	__gptrput1
004020   f05f
                                           ;	.line	539; MainDemo.c	bootp_header->Hops = 1;
004022   5000     movf	0, 0, 0             	MOVF	r0x00, W
004024   0f03     addlw	0x3                	ADDLW	0x03
004026   6e10     movwf	0x10, 0            	MOVWF	r0x10
004028   0e00     movlw	0                  	MOVLW	0x00
00402a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00402c   6e11     movwf	0x11, 0            	MOVWF	r0x11
00402e   0e00     movlw	0                  	MOVLW	0x00
004030   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004032   6e12     movwf	0x12, 0            	MOVWF	r0x12
004034   0e01     movlw	0x1                	MOVLW	0x01
004036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004038   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00403a   ffe9
00403c   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
00403e   fff3
004040   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
004042   ec28     call	0xbe50, 0           	CALL	__gptrput1
004044   f05f
                                           ;	.line	540; MainDemo.c	bootp_header->TransactionID = transactionId;
004046   5000     movf	0, 0, 0             	MOVF	r0x00, W
004048   0f04     addlw	0x4                	ADDLW	0x04
00404a   6e10     movwf	0x10, 0            	MOVWF	r0x10
00404c   0e00     movlw	0                  	MOVLW	0x00
00404e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004050   6e11     movwf	0x11, 0            	MOVWF	r0x11
004052   0e00     movlw	0                  	MOVLW	0x00
004054   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004056   6e12     movwf	0x12, 0            	MOVWF	r0x12
004058   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00405a   ffe5
00405c   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00405e   fff4
004060   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
004062   fff6
004064   c006     movff	0x6, 0xff7         	MOVFF	r0x06, TBLPTRH
004066   fff7
004068   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00406a   ffe9
00406c   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
00406e   fff3
004070   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
004072   ec86     call	0xbd0c, 0           	CALL	__gptrput4
004074   f05e
                                           ;	.line	541; MainDemo.c	bootp_header->SecondsElapsed = 0;
004076   5000     movf	0, 0, 0             	MOVF	r0x00, W
004078   0f08     addlw	0x8                	ADDLW	0x08
00407a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00407c   0e00     movlw	0                  	MOVLW	0x00
00407e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004080   6e04     movwf	0x4, 0             	MOVWF	r0x04
004082   0e00     movlw	0                  	MOVLW	0x00
004084   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004086   6e05     movwf	0x5, 0             	MOVWF	r0x05
004088   0e00     movlw	0                  	MOVLW	0x00
00408a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00408c   0e00     movlw	0                  	MOVLW	0x00
00408e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004090   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004092   ffe9
004094   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004096   fff3
004098   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00409a   ec08     call	0xbe10, 0           	CALL	__gptrput2
00409c   f05f
                                           ;	.line	542; MainDemo.c	bootp_header->BootpFlags = 0;
00409e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040a0   0f0a     addlw	0xa                	ADDLW	0x0a
0040a2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0040a4   0e00     movlw	0                  	MOVLW	0x00
0040a6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0040a8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0040aa   0e00     movlw	0                  	MOVLW	0x00
0040ac   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0040ae   6e05     movwf	0x5, 0             	MOVWF	r0x05
0040b0   0e00     movlw	0                  	MOVLW	0x00
0040b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040b4   0e00     movlw	0                  	MOVLW	0x00
0040b6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0040b8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0040ba   ffe9
0040bc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0040be   fff3
0040c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0040c2   ec08     call	0xbe10, 0           	CALL	__gptrput2
0040c4   f05f
                                           ;	.line	543; MainDemo.c	memcpy(&bootp_header->ClientIP, clientIP, sizeof(IP_ADDR));
0040c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040c8   0f0c     addlw	0xc                	ADDLW	0x0c
0040ca   6e03     movwf	0x3, 0             	MOVWF	r0x03
0040cc   0e00     movlw	0                  	MOVLW	0x00
0040ce   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0040d0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0040d2   0e00     movlw	0                  	MOVLW	0x00
0040d4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0040d6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0040d8   0e00     movlw	0                  	MOVLW	0x00
0040da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040dc   0e04     movlw	0x4                	MOVLW	0x04
0040de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040e0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0040e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040e4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0040e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0040ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0040ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0040f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0040f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f8   ec7b     call	0x94f6, 0           	CALL	_memcpy
0040fa   f04a
0040fc   0e08     movlw	0x8                	MOVLW	0x08
0040fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	544; MainDemo.c	memcpy(&bootp_header->YourIP, yourIP, sizeof(IP_ADDR));
004100   5000     movf	0, 0, 0             	MOVF	r0x00, W
004102   0f10     addlw	0x10               	ADDLW	0x10
004104   6e03     movwf	0x3, 0             	MOVWF	r0x03
004106   0e00     movlw	0                  	MOVLW	0x00
004108   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00410a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00410c   0e00     movlw	0                  	MOVLW	0x00
00410e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004110   6e05     movwf	0x5, 0             	MOVWF	r0x05
004112   0e00     movlw	0                  	MOVLW	0x00
004114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004116   0e04     movlw	0x4                	MOVLW	0x04
004118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00411a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00411c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00411e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
004120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004122   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004126   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004128   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00412a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00412c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00412e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004132   ec7b     call	0x94f6, 0           	CALL	_memcpy
004134   f04a
004136   0e08     movlw	0x8                	MOVLW	0x08
004138   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	545; MainDemo.c	memset((void*)&bootp_header->NextServerIP, 0, sizeof(IP_ADDR));
00413a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00413c   0f14     addlw	0x14               	ADDLW	0x14
00413e   6e03     movwf	0x3, 0             	MOVWF	r0x03
004140   0e00     movlw	0                  	MOVLW	0x00
004142   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004144   6e04     movwf	0x4, 0             	MOVWF	r0x04
004146   0e00     movlw	0                  	MOVLW	0x00
004148   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00414a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00414c   0e00     movlw	0                  	MOVLW	0x00
00414e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004150   0e04     movlw	0x4                	MOVLW	0x04
004152   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004154   0e00     movlw	0                  	MOVLW	0x00
004156   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004158   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00415a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00415c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00415e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004160   ecd5     call	0xa1aa, 0           	CALL	_memset
004162   f050
004164   0e05     movlw	0x5                	MOVLW	0x05
004166   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	546; MainDemo.c	memset((void*)&bootp_header->RelayAgentIP, 42, sizeof(IP_ADDR));
004168   5000     movf	0, 0, 0             	MOVF	r0x00, W
00416a   0f18     addlw	0x18               	ADDLW	0x18
00416c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00416e   0e00     movlw	0                  	MOVLW	0x00
004170   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004172   6e04     movwf	0x4, 0             	MOVWF	r0x04
004174   0e00     movlw	0                  	MOVLW	0x00
004176   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004178   6e05     movwf	0x5, 0             	MOVWF	r0x05
00417a   0e00     movlw	0                  	MOVLW	0x00
00417c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00417e   0e04     movlw	0x4                	MOVLW	0x04
004180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004182   0e2a     movlw	0x2a               	MOVLW	0x2a
004184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004186   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00418a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00418c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00418e   ecd5     call	0xa1aa, 0           	CALL	_memset
004190   f050
004192   0e05     movlw	0x5                	MOVLW	0x05
004194   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	547; MainDemo.c	memcpy(&bootp_header->ClientMAC, clientMAC->v, sizeof(MAC_ADDR));
004196   0e1c     movlw	0x1c               	MOVLW	0x1c
004198   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00419a   0e00     movlw	0                  	MOVLW	0x00
00419c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00419e   0e00     movlw	0                  	MOVLW	0x00
0041a0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0041a2   0e00     movlw	0                  	MOVLW	0x00
0041a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041a6   0e06     movlw	0x6                	MOVLW	0x06
0041a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041aa   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0041ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041ae   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0041b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041b2   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0041b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0041b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0041bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0041c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041c2   ec7b     call	0x94f6, 0           	CALL	_memcpy
0041c4   f04a
0041c6   0e08     movlw	0x8                	MOVLW	0x08
0041c8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0041ca   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0041cc   f012
0041ce   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0041d0   f011
0041d2   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0041d4   f010
0041d6   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0041d8   f00f
0041da   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0041dc   f00e
0041de   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0041e0   f00d
0041e2   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0041e4   f00c
0041e6   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0041e8   f00b
0041ea   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0041ec   f00a
0041ee   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0041f0   f009
0041f2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0041f4   f008
0041f6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0041f8   f007
0041fa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0041fc   f006
0041fe   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004200   f005
004202   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004204   f004
004206   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004208   f003
00420a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00420c   f002
00420e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004210   f001
004212   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004214   f000
004216   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004218   ffd9
00421a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__handle_server_msg	code
                                           _handle_server_msg:
                                           ;	.line	499; MainDemo.c	void handle_server_msg(UDP_SOCKET *socket_sendto_client, UDP_SOCKET *socket_recv){
0032c4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032c6   ffe5
0032c8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032ca   ffd9
0032cc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0032ce   ffe5
0032d0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0032d2   ffe5
0032d4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0032d6   ffe5
0032d8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0032da   ffe5
0032dc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0032de   ffe5
0032e0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0032e2   ffe5
0032e4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0032e6   ffe5
0032e8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0032ea   ffe5
0032ec   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0032ee   ffe5
0032f0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0032f2   ffe5
0032f4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0032f6   ffe5
0032f8   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0032fa   ffe5
0032fc   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0032fe   ffe5
003300   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003302   ffe5
003304   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003306   ffe5
003308   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00330a   ffe5
00330c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00330e   ffe5
003310   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
003312   ffe5
003314   0e02     movlw	0x2                	MOVLW	0x02
003316   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003318   f000
00331a   0e03     movlw	0x3                	MOVLW	0x03
00331c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00331e   f001
003320   0e04     movlw	0x4                	MOVLW	0x04
003322   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003324   f002
003326   0e05     movlw	0x5                	MOVLW	0x05
003328   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00332a   f003
00332c   0e06     movlw	0x6                	MOVLW	0x06
00332e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003330   f004
003332   0e07     movlw	0x7                	MOVLW	0x07
003334   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003336   f005
                                           ;	.line	508; MainDemo.c	extract_bootp_header(&dhcp_type, &bootp_header, dhcp_header, &dhcp_header_length, socket_recv);
003338   0e02     movlw	0x2                	MOVLW	HIGH(_handle_server_msg_dhcp_type_1_1)
00333a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00333c   0eaa     movlw	0xaa               	MOVLW	LOW(_handle_server_msg_dhcp_type_1_1)
00333e   6e06     movwf	0x6, 0             	MOVWF	r0x06
003340   0e80     movlw	0x80               	MOVLW	0x80
003342   6e08     movwf	0x8, 0             	MOVWF	r0x08
003344   0e09     movlw	0x9                	MOVLW	HIGH(_handle_server_msg_bootp_header_1_1)
003346   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003348   0ec8     movlw	0xc8               	MOVLW	LOW(_handle_server_msg_bootp_header_1_1)
00334a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00334c   0e80     movlw	0x80               	MOVLW	0x80
00334e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
003350   0e01     movlw	0x1                	MOVLW	HIGH(_handle_server_msg_dhcp_header_1_1)
003352   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003354   0e00     movlw	0                  	MOVLW	LOW(_handle_server_msg_dhcp_header_1_1)
003356   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003358   0e80     movlw	0x80               	MOVLW	0x80
00335a   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00335c   0e01     movlw	0x1                	MOVLW	HIGH(_handle_server_msg_dhcp_header_length_1_1)
00335e   6e10     movwf	0x10, 0            	MOVWF	r0x10
003360   0efe     movlw	0xfe               	MOVLW	LOW(_handle_server_msg_dhcp_header_length_1_1)
003362   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
003364   0e80     movlw	0x80               	MOVLW	0x80
003366   6e11     movwf	0x11, 0            	MOVWF	r0x11
003368   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00336a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00336c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00336e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003370   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003374   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003378   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00337a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00337c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00337e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003380   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003384   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003386   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003388   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00338a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00338c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00338e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003390   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003392   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003394   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003396   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003398   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00339a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00339c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00339e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033a0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0033a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033a4   ec54     call	0x1aa8, 0           	CALL	_extract_bootp_header
0033a6   f00d
0033a8   0e0f     movlw	0xf                	MOVLW	0x0f
0033aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	509; MainDemo.c	UDPDiscard();
0033ac   ec0b     call	0xbc16, 0           	CALL	_UDPDiscard
0033ae   f05e
                                           ;	.line	511; MainDemo.c	switch(dhcp_type){
0033b0   c2aa     movff	0x2aa, 0x3         	MOVFF	_handle_server_msg_dhcp_type_1_1, r0x03
0033b2   f003
0033b4   6a04     clrf	0x4, 0              	CLRF	r0x04
0033b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0033b8   0a02     xorlw	0x2                	XORLW	0x02
0033ba   e102     bnz	0x33c0               	BNZ	_00492_DS_
0033bc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0033be   e006     bz	0x33cc                	BZ	_00480_DS_
                                           _00492_DS_:
0033c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0033c2   0a05     xorlw	0x5                	XORLW	0x05
0033c4   e102     bnz	0x33ca               	BNZ	_00494_DS_
0033c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0033c8   e027     bz	0x3418                	BZ	_00481_DS_
                                           _00494_DS_:
0033ca   d0de     bra	0x3588               	BRA	_00484_DS_
                                           _00480_DS_:
                                           ;	.line	513; MainDemo.c	DisplayString(0, "DHCP OFFER");
0033cc   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
0033ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d0   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_1)
0033d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d4   0e16     movlw	0x16               	MOVLW	LOW(__str_1)
0033d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d8   0e00     movlw	0                  	MOVLW	0x00
0033da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033dc   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
0033de   f050
0033e0   0e04     movlw	0x4                	MOVLW	0x04
0033e2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	514; MainDemo.c	transfer_msg_to_client(&bootp_header, socket_sendto_client, dhcp_type);
0033e4   0e09     movlw	0x9                	MOVLW	HIGH(_handle_server_msg_bootp_header_1_1)
0033e6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0033e8   0ec8     movlw	0xc8               	MOVLW	LOW(_handle_server_msg_bootp_header_1_1)
0033ea   6e03     movwf	0x3, 0             	MOVWF	r0x03
0033ec   0e80     movlw	0x80               	MOVLW	0x80
0033ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
0033f0   0102     movlb	0x2                	BANKSEL	_handle_server_msg_dhcp_type_1_1
0033f2   51aa     movf	0xaa, 0, 0x1        	MOVF	_handle_server_msg_dhcp_type_1_1, W, B
0033f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0033f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0033fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
003400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003402   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003406   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003408   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00340a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00340c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00340e   ec81     call	0x1302, 0           	CALL	_transfer_msg_to_client
003410   f009
003412   0e07     movlw	0x7                	MOVLW	0x07
003414   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	515; MainDemo.c	break;
003416   d0c4     bra	0x35a0               	BRA	_00486_DS_
                                           _00481_DS_:
                                           ;	.line	518; MainDemo.c	DisplayString(0, "DHCP ACK");
003418   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
00341a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00341c   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_2)
00341e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003420   0e22     movlw	0x22               	MOVLW	LOW(__str_2)
003422   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003424   0e00     movlw	0                  	MOVLW	0x00
003426   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003428   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00342a   f050
00342c   0e04     movlw	0x4                	MOVLW	0x04
00342e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	519; MainDemo.c	get_ack_lease_time(&lease_time, dhcp_header, dhcp_header_length);
003430   0e02     movlw	0x2                	MOVLW	HIGH(_handle_server_msg_lease_time_1_1)
003432   6e04     movwf	0x4, 0             	MOVWF	r0x04
003434   0e10     movlw	0x10               	MOVLW	LOW(_handle_server_msg_lease_time_1_1)
003436   6e03     movwf	0x3, 0             	MOVWF	r0x03
003438   0e80     movlw	0x80               	MOVLW	0x80
00343a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00343c   0e01     movlw	0x1                	MOVLW	HIGH(_handle_server_msg_dhcp_header_1_1)
00343e   6e07     movwf	0x7, 0             	MOVWF	r0x07
003440   0e00     movlw	0                  	MOVLW	LOW(_handle_server_msg_dhcp_header_1_1)
003442   6e06     movwf	0x6, 0             	MOVWF	r0x06
003444   0e80     movlw	0x80               	MOVLW	0x80
003446   6e08     movwf	0x8, 0             	MOVWF	r0x08
003448   0101     movlb	0x1                	BANKSEL	(_handle_server_msg_dhcp_header_length_1_1 + 1)
00344a   51ff     movf	0xff, 0, 0x1        	MOVF	(_handle_server_msg_dhcp_header_length_1_1 + 1), W, B
00344c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00344e   0101     movlb	0x1                	BANKSEL	_handle_server_msg_dhcp_header_length_1_1
003450   51fe     movf	0xfe, 0, 0x1        	MOVF	_handle_server_msg_dhcp_header_length_1_1, W, B
003452   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003454   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003456   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003458   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00345a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00345c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00345e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003460   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003462   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003464   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003466   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003468   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00346a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00346c   ec3b     call	0x6876, 0           	CALL	_get_ack_lease_time
00346e   f034
003470   0e08     movlw	0x8                	MOVLW	0x08
003472   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	520; MainDemo.c	nb_miss = 0;
003474   6a03     clrf	0x3, 0              	CLRF	r0x03
003476   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           ;	.line	521; MainDemo.c	if(get_pool_el_mac(&bootp_header.ClientMAC, &node_pool_state)){
003478   0e09     movlw	0x9                	MOVLW	HIGH(_handle_server_msg_bootp_header_1_1 + 28)
00347a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00347c   0ee4     movlw	0xe4               	MOVLW	LOW(_handle_server_msg_bootp_header_1_1 + 28)
00347e   6e05     movwf	0x5, 0             	MOVWF	r0x05
003480   0e80     movlw	0x80               	MOVLW	0x80
003482   6e07     movwf	0x7, 0             	MOVWF	r0x07
003484   0e02     movlw	0x2                	MOVLW	HIGH(_handle_server_msg_node_pool_state_1_1)
003486   6e09     movwf	0x9, 0             	MOVWF	r0x09
003488   0e67     movlw	0x67               	MOVLW	LOW(_handle_server_msg_node_pool_state_1_1)
00348a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00348c   0e80     movlw	0x80               	MOVLW	0x80
00348e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003490   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003492   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003494   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003496   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003498   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00349a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00349c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00349e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034a0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0034a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034a8   ecdd     call	0x81ba, 0           	CALL	_get_pool_el_mac
0034aa   f040
0034ac   6e05     movwf	0x5, 0             	MOVWF	r0x05
0034ae   0e06     movlw	0x6                	MOVLW	0x06
0034b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0034b2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034b4   e023     bz	0x34fc                	BZ	_00483_DS_
                                           ;	.line	522; MainDemo.c	nb_miss = node_pool_state->miss_counter;
0034b6   c267     movff	0x267, 0x5         	MOVFF	_handle_server_msg_node_pool_state_1_1, r0x05
0034b8   f005
0034ba   c268     movff	0x268, 0x6         	MOVFF	(_handle_server_msg_node_pool_state_1_1 + 1), r0x06
0034bc   f006
0034be   c269     movff	0x269, 0x7         	MOVFF	(_handle_server_msg_node_pool_state_1_1 + 2), r0x07
0034c0   f007
0034c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034c4   0f12     addlw	0x12               	ADDLW	0x12
0034c6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0034c8   0e00     movlw	0                  	MOVLW	0x00
0034ca   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
0034cc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0034ce   0e00     movlw	0                  	MOVLW	0x00
0034d0   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0034d2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0034d4   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0034d6   ffe9
0034d8   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0034da   fff3
0034dc   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0034de   eccb     call	0xbb96, 0           	CALL	__gptrget2
0034e0   f05d
0034e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0034e4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0034e6   f004
                                           ;	.line	523; MainDemo.c	remove_from_pool(&node_pool_state->ip);
0034e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0034ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0034ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034f0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0034f4   ec6c     call	0xa8d8, 0           	CALL	_remove_from_pool
0034f6   f054
0034f8   0e03     movlw	0x3                	MOVLW	0x03
0034fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00483_DS_:
                                           ;	.line	525; MainDemo.c	add_to_pool((IP_ADDR*)&bootp_header.YourIP, &bootp_header.ClientMAC, lease_time, nb_miss);    
0034fc   0e09     movlw	0x9                	MOVLW	HIGH(_handle_server_msg_bootp_header_1_1 + 16)
0034fe   6e06     movwf	0x6, 0             	MOVWF	r0x06
003500   0ed8     movlw	0xd8               	MOVLW	LOW(_handle_server_msg_bootp_header_1_1 + 16)
003502   6e05     movwf	0x5, 0             	MOVWF	r0x05
003504   0e80     movlw	0x80               	MOVLW	0x80
003506   6e07     movwf	0x7, 0             	MOVWF	r0x07
003508   0e09     movlw	0x9                	MOVLW	HIGH(_handle_server_msg_bootp_header_1_1 + 28)
00350a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00350c   0ee4     movlw	0xe4               	MOVLW	LOW(_handle_server_msg_bootp_header_1_1 + 28)
00350e   6e08     movwf	0x8, 0             	MOVWF	r0x08
003510   0e80     movlw	0x80               	MOVLW	0x80
003512   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003514   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003516   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003518   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00351a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00351c   0102     movlb	0x2                	BANKSEL	(_handle_server_msg_lease_time_1_1 + 3)
00351e   5113     movf	0x13, 0, 0x1        	MOVF	(_handle_server_msg_lease_time_1_1 + 3), W, B
003520   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003522   0102     movlb	0x2                	BANKSEL	(_handle_server_msg_lease_time_1_1 + 2)
003524   5112     movf	0x12, 0, 0x1        	MOVF	(_handle_server_msg_lease_time_1_1 + 2), W, B
003526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003528   0102     movlb	0x2                	BANKSEL	(_handle_server_msg_lease_time_1_1 + 1)
00352a   5111     movf	0x11, 0, 0x1        	MOVF	(_handle_server_msg_lease_time_1_1 + 1), W, B
00352c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00352e   0102     movlb	0x2                	BANKSEL	_handle_server_msg_lease_time_1_1
003530   5110     movf	0x10, 0, 0x1        	MOVF	_handle_server_msg_lease_time_1_1, W, B
003532   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003534   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003538   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00353a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00353c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00353e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003540   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003542   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003544   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003548   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00354a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00354c   ec6c     call	0x54d8, 0           	CALL	_add_to_pool
00354e   f02a
003550   0e0c     movlw	0xc                	MOVLW	0x0c
003552   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	526; MainDemo.c	transfer_msg_to_client(&bootp_header, socket_sendto_client, dhcp_type);
003554   0e09     movlw	0x9                	MOVLW	HIGH(_handle_server_msg_bootp_header_1_1)
003556   6e04     movwf	0x4, 0             	MOVWF	r0x04
003558   0ec8     movlw	0xc8               	MOVLW	LOW(_handle_server_msg_bootp_header_1_1)
00355a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00355c   0e80     movlw	0x80               	MOVLW	0x80
00355e   6e05     movwf	0x5, 0             	MOVWF	r0x05
003560   0102     movlb	0x2                	BANKSEL	_handle_server_msg_dhcp_type_1_1
003562   51aa     movf	0xaa, 0, 0x1        	MOVF	_handle_server_msg_dhcp_type_1_1, W, B
003564   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003566   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003568   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00356a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00356c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00356e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003570   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003572   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003574   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003576   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00357a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00357c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00357e   ec81     call	0x1302, 0           	CALL	_transfer_msg_to_client
003580   f009
003582   0e07     movlw	0x7                	MOVLW	0x07
003584   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; MainDemo.c	break;
003586   d00c     bra	0x35a0               	BRA	_00486_DS_
                                           _00484_DS_:
                                           ;	.line	530; MainDemo.c	DisplayString(0, "DISCARDED handle server");
003588   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
00358a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00358c   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_3)
00358e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003590   0e2c     movlw	0x2c               	MOVLW	LOW(__str_3)
003592   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003594   0e00     movlw	0                  	MOVLW	0x00
003596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003598   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00359a   f050
00359c   0e04     movlw	0x4                	MOVLW	0x04
00359e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00486_DS_:
                                           ;	.line	532; MainDemo.c	}
0035a0   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0035a2   f011
0035a4   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0035a6   f010
0035a8   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0035aa   f00f
0035ac   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0035ae   f00e
0035b0   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0035b2   f00d
0035b4   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0035b6   f00c
0035b8   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0035ba   f00b
0035bc   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0035be   f00a
0035c0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0035c2   f009
0035c4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0035c6   f008
0035c8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0035ca   f007
0035cc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0035ce   f006
0035d0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0035d2   f005
0035d4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0035d6   f004
0035d8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0035da   f003
0035dc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0035de   f002
0035e0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0035e2   f001
0035e4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0035e6   f000
0035e8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0035ea   ffd9
0035ec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__get_ack_lease_time	code
                                           _get_ack_lease_time:
                                           ;	.line	478; MainDemo.c	BOOL get_ack_lease_time(DWORD *lease_time, BYTE *dhcp_header, unsigned int dhcp_header_length){
006876   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006878   ffe5
00687a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00687c   ffd9
00687e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006880   ffe5
006882   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006884   ffe5
006886   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006888   ffe5
00688a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00688c   ffe5
00688e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006890   ffe5
006892   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006894   ffe5
006896   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006898   ffe5
00689a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00689c   ffe5
00689e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0068a0   ffe5
0068a2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0068a4   ffe5
0068a6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0068a8   ffe5
0068aa   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0068ac   ffe5
0068ae   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0068b0   ffe5
0068b2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0068b4   ffe5
0068b6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0068b8   ffe5
0068ba   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0068bc   ffe5
0068be   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0068c0   ffe5
0068c2   0e02     movlw	0x2                	MOVLW	0x02
0068c4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0068c6   f000
0068c8   0e03     movlw	0x3                	MOVLW	0x03
0068ca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0068cc   f001
0068ce   0e04     movlw	0x4                	MOVLW	0x04
0068d0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0068d2   f002
0068d4   0e05     movlw	0x5                	MOVLW	0x05
0068d6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0068d8   f003
0068da   0e06     movlw	0x6                	MOVLW	0x06
0068dc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0068de   f004
0068e0   0e07     movlw	0x7                	MOVLW	0x07
0068e2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0068e4   f005
0068e6   0e08     movlw	0x8                	MOVLW	0x08
0068e8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0068ea   f006
0068ec   0e09     movlw	0x9                	MOVLW	0x09
0068ee   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0068f0   f007
                                           ;	.line	482; MainDemo.c	i=0;
0068f2   6a08     clrf	0x8, 0              	CLRF	r0x08
0068f4   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00465_DS_:
                                           ;	.line	484; MainDemo.c	while(i<dhcp_header_length){
0068f6   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
0068f8   f00a
0068fa   c009     movff	0x9, 0xb           	MOVFF	r0x09, r0x0b
0068fc   f00b
0068fe   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006900   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
006902   e102     bnz	0x6908               	BNZ	_00473_DS_
006904   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006906   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00473_DS_:
006908   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00690a   d086     bra	0x6a18               	BRA	_00467_DS_
                                           ;	.line	485; MainDemo.c	opt = dhcp_header[i];
00690c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00690e   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
006910   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006912   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006914   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
006916   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
006918   6ae8     clrf	0xe8, 0             	CLRF	WREG
00691a   be09     btfsc	0x9, 0x7, 0        	BTFSC	r0x09, 7
00691c   68e8     setf	0xe8, 0             	SETF	WREG
00691e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
006920   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006922   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
006924   ffe9
006926   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
006928   fff3
00692a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00692c   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00692e   f05e
006930   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	486; MainDemo.c	i++;
006932   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
006934   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006936   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
                                           ;	.line	487; MainDemo.c	length = dhcp_header[i];
006938   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00693a   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
00693c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00693e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006940   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
006942   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
006944   6ae8     clrf	0xe8, 0             	CLRF	WREG
006946   be09     btfsc	0x9, 0x7, 0        	BTFSC	r0x09, 7
006948   68e8     setf	0xe8, 0             	SETF	WREG
00694a   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00694c   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00694e   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
006950   ffe9
006952   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
006954   fff3
006956   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
006958   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00695a   f05e
00695c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
                                           ;	.line	488; MainDemo.c	i++;
00695e   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
006960   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006962   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
                                           ;	.line	490; MainDemo.c	if(opt == DHCP_IP_LEASE_TIME){
006964   6a0c     clrf	0xc, 0              	CLRF	r0x0c
006966   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006968   0a33     xorlw	0x33               	XORLW	0x33
00696a   e102     bnz	0x6970               	BNZ	_00474_DS_
00696c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00696e   e001     bz	0x6972                	BZ	_00475_DS_
                                           _00474_DS_:
006970   d04d     bra	0x6a0c               	BRA	_00464_DS_
                                           _00475_DS_:
                                           ;	.line	491; MainDemo.c	*lease_time = dhcp_header[i+3]|dhcp_header[i+2]<<8|dhcp_header[i+1]<<16|dhcp_header[i]<<24;
006972   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006974   0f03     addlw	0x3                	ADDLW	0x03
006976   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
006978   0e00     movlw	0                  	MOVLW	0x00
00697a   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
00697c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00697e   6a0d     clrf	0xd, 0              	CLRF	r0x0d
006980   be0c     btfsc	0xc, 0x7, 0        	BTFSC	r0x0c, 7
006982   680d     setf	0xd, 0              	SETF	r0x0d
006984   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006986   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
006988   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00698a   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
00698c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00698e   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
006990   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
006992   ffe9
006994   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
006996   fff3
006998   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00699a   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00699c   f05e
00699e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0069a0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0069a2   0f02     addlw	0x2                	ADDLW	0x02
0069a4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0069a6   0e00     movlw	0                  	MOVLW	0x00
0069a8   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0069aa   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0069ac   6a0e     clrf	0xe, 0              	CLRF	r0x0e
0069ae   be0d     btfsc	0xd, 0x7, 0        	BTFSC	r0x0d, 7
0069b0   680e     setf	0xe, 0              	SETF	r0x0e
0069b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0069b4   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0069b6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0069b8   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
0069ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0069bc   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
0069be   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0069c0   ffe9
0069c2   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0069c4   fff3
0069c6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0069c8   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0069ca   f05e
0069cc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0069ce   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0069d0   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0069d2   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0069d4   6a0e     clrf	0xe, 0              	CLRF	r0x0e
0069d6   6a10     clrf	0x10, 0             	CLRF	r0x10
0069d8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0069da   120e     iorwf	0xe, 0x1, 0        	IORWF	r0x0e, F
0069dc   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0069de   120f     iorwf	0xf, 0x1, 0        	IORWF	r0x0f, F
0069e0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0069e2   be0f     btfsc	0xf, 0x7, 0        	BTFSC	r0x0f, 7
0069e4   0eff     movlw	0xff               	MOVLW	0xff
0069e6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0069e8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0069ea   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0069ec   ffe5
0069ee   c00f     movff	0xf, 0xff4         	MOVFF	r0x0f, PRODH
0069f0   fff4
0069f2   c00a     movff	0xa, 0xff6         	MOVFF	r0x0a, TBLPTRL
0069f4   fff6
0069f6   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
0069f8   fff7
0069fa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0069fc   ffe9
0069fe   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006a00   fff3
006a02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006a04   ec86     call	0xbd0c, 0           	CALL	__gptrput4
006a06   f05e
                                           ;	.line	492; MainDemo.c	return TRUE;
006a08   0e01     movlw	0x1                	MOVLW	0x01
006a0a   d007     bra	0x6a1a               	BRA	_00468_DS_
                                           _00464_DS_:
                                           ;	.line	494; MainDemo.c	i+=length;
006a0c   6a0a     clrf	0xa, 0              	CLRF	r0x0a
006a0e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
006a10   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
006a12   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
006a14   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
006a16   d76f     bra	0x68f6               	BRA	_00465_DS_
                                           _00467_DS_:
                                           ;	.line	496; MainDemo.c	return FALSE;    
006a18   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00468_DS_:
006a1a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
006a1c   f010
006a1e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
006a20   f00f
006a22   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
006a24   f00e
006a26   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
006a28   f00d
006a2a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
006a2c   f00c
006a2e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
006a30   f00b
006a32   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006a34   f00a
006a36   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006a38   f009
006a3a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006a3c   f008
006a3e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006a40   f007
006a42   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006a44   f006
006a46   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006a48   f005
006a4a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006a4c   f004
006a4e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006a50   f003
006a52   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006a54   f002
006a56   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006a58   f001
006a5a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006a5c   f000
006a5e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006a60   ffd9
006a62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__extract_bootp_header	code
                                           _extract_bootp_header:
                                           ;	.line	430; MainDemo.c	BOOL extract_bootp_header(BYTE *dhcp_type, BOOTP_HEADER *bootp_header,
001aa8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001aaa   ffe5
001aac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001aae   ffd9
001ab0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001ab2   ffe5
001ab4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001ab6   ffe5
001ab8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001aba   ffe5
001abc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001abe   ffe5
001ac0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001ac2   ffe5
001ac4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001ac6   ffe5
001ac8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001aca   ffe5
001acc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001ace   ffe5
001ad0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001ad2   ffe5
001ad4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001ad6   ffe5
001ad8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001ada   ffe5
001adc   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001ade   ffe5
001ae0   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001ae2   ffe5
001ae4   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001ae6   ffe5
001ae8   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001aea   ffe5
001aec   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001aee   ffe5
001af0   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001af2   ffe5
001af4   0e02     movlw	0x2                	MOVLW	0x02
001af6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001af8   f000
001afa   0e03     movlw	0x3                	MOVLW	0x03
001afc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001afe   f001
001b00   0e04     movlw	0x4                	MOVLW	0x04
001b02   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001b04   f002
001b06   0e05     movlw	0x5                	MOVLW	0x05
001b08   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001b0a   f003
001b0c   0e06     movlw	0x6                	MOVLW	0x06
001b0e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001b10   f004
001b12   0e07     movlw	0x7                	MOVLW	0x07
001b14   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001b16   f005
001b18   0e08     movlw	0x8                	MOVLW	0x08
001b1a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001b1c   f006
001b1e   0e09     movlw	0x9                	MOVLW	0x09
001b20   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
001b22   f007
001b24   0e0a     movlw	0xa                	MOVLW	0x0a
001b26   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
001b28   f008
001b2a   0e0b     movlw	0xb                	MOVLW	0x0b
001b2c   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
001b2e   f009
001b30   0e0c     movlw	0xc                	MOVLW	0x0c
001b32   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
001b34   f00a
001b36   0e0d     movlw	0xd                	MOVLW	0x0d
001b38   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
001b3a   f00b
001b3c   0e0e     movlw	0xe                	MOVLW	0x0e
001b3e   cfdb     movff	0xfdb, 0xc         	MOVFF	PLUSW2, r0x0c
001b40   f00c
001b42   0e0f     movlw	0xf                	MOVLW	0x0f
001b44   cfdb     movff	0xfdb, 0xd         	MOVFF	PLUSW2, r0x0d
001b46   f00d
001b48   0e10     movlw	0x10               	MOVLW	0x10
001b4a   cfdb     movff	0xfdb, 0xe         	MOVFF	PLUSW2, r0x0e
001b4c   f00e
                                           _00413_DS_:
                                           ;	.line	442; MainDemo.c	while(!UDPIsGetReady(*my_socket_recv));
001b4e   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001b50   ffe9
001b52   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001b54   fff3
001b56   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001b58   ec55     call	0xbcaa, 0           	CALL	__gptrget1
001b5a   f05e
001b5c   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001b5e   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b62   ec60     call	0xb4c0, 0           	CALL	_UDPIsGetReady
001b64   f05a
001b66   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001b68   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x10
001b6a   f010
001b6c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001b6e   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
001b70   1010     iorwf	0x10, 0, 0         	IORWF	r0x10, W
001b72   e0ed     bz	0x1b4e                	BZ	_00413_DS_
                                           ;	.line	444; MainDemo.c	UDPGetArray((BYTE*)bootp_header, sizeof(BOOTP_HEADER)); //Read 34bytes
001b74   0e00     movlw	0                  	MOVLW	0x00
001b76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b78   0e22     movlw	0x22               	MOVLW	0x22
001b7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b7c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b88   ecc8     call	0x9b90, 0           	CALL	_UDPGetArray
001b8a   f04d
001b8c   0e05     movlw	0x5                	MOVLW	0x05
001b8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	446; MainDemo.c	if(bootp_header->HardwareType != 1 || bootp_header->HardwareLen != 6){
001b90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b92   0f01     addlw	0x1                	ADDLW	0x01
001b94   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001b96   0e00     movlw	0                  	MOVLW	0x00
001b98   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001b9a   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001b9c   0e00     movlw	0                  	MOVLW	0x00
001b9e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001ba0   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001ba2   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001ba4   ffe9
001ba6   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001ba8   fff3
001baa   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001bac   ec55     call	0xbcaa, 0           	CALL	__gptrget1
001bae   f05e
001bb0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001bb2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001bb4   0a01     xorlw	0x1                	XORLW	0x01
001bb6   e111     bnz	0x1bda               	BNZ	_00416_DS_
001bb8   0e02     movlw	0x2                	MOVLW	0x02
001bba   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001bbc   0e00     movlw	0                  	MOVLW	0x00
001bbe   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001bc0   0e00     movlw	0                  	MOVLW	0x00
001bc2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001bc4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001bc6   ffe9
001bc8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001bca   fff3
001bcc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001bce   ec55     call	0xbcaa, 0           	CALL	__gptrget1
001bd0   f05e
001bd2   6e03     movwf	0x3, 0             	MOVWF	r0x03
001bd4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001bd6   0a06     xorlw	0x6                	XORLW	0x06
001bd8   e002     bz	0x1bde                	BZ	_00440_DS_
                                           _00416_DS_:
                                           ;	.line	447; MainDemo.c	return FALSE;
001bda   6ae8     clrf	0xe8, 0             	CLRF	WREG
001bdc   d112     bra	0x1e02               	BRA	_00434_DS_
                                           _00440_DS_:
                                           ;	.line	451; MainDemo.c	for(i=0; i<zero_to_skip; i++){ // On skip 202 bytes -> 192 + 10
001bde   6a03     clrf	0x3, 0              	CLRF	r0x03
001be0   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00430_DS_:
001be2   0e00     movlw	0                  	MOVLW	0x00
001be4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001be6   e102     bnz	0x1bec               	BNZ	_00452_DS_
001be8   0eca     movlw	0xca               	MOVLW	0xca
001bea   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00452_DS_:
001bec   e214     bc	0x1c16                	BC	_00433_DS_
                                           ;	.line	452; MainDemo.c	UDPGet(&opt);
001bee   0e02     movlw	0x2                	MOVLW	HIGH(_extract_bootp_header_opt_1_1)
001bf0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001bf2   0ea8     movlw	0xa8               	MOVLW	LOW(_extract_bootp_header_opt_1_1)
001bf4   6e05     movwf	0x5, 0             	MOVWF	r0x05
001bf6   0e80     movlw	0x80               	MOVLW	0x80
001bf8   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001bfa   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfe   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c02   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c06   ec2c     call	0xb058, 0           	CALL	_UDPGet
001c08   f058
001c0a   0e03     movlw	0x3                	MOVLW	0x03
001c0c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	451; MainDemo.c	for(i=0; i<zero_to_skip; i++){ // On skip 202 bytes -> 192 + 10
001c0e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
001c10   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001c12   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
001c14   d7e6     bra	0x1be2               	BRA	_00430_DS_
                                           _00433_DS_:
                                           ;	.line	455; MainDemo.c	UDPGetArray((BYTE*)&word_buf, sizeof(DWORD));
001c16   0e02     movlw	0x2                	MOVLW	HIGH(_extract_bootp_header_word_buf_1_1)
001c18   6e04     movwf	0x4, 0             	MOVWF	r0x04
001c1a   0e0c     movlw	0xc                	MOVLW	LOW(_extract_bootp_header_word_buf_1_1)
001c1c   6e03     movwf	0x3, 0             	MOVWF	r0x03
001c1e   0e80     movlw	0x80               	MOVLW	0x80
001c20   6e05     movwf	0x5, 0             	MOVWF	r0x05
001c22   0e00     movlw	0                  	MOVLW	0x00
001c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c26   0e04     movlw	0x4                	MOVLW	0x04
001c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c2e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c32   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c36   ecc8     call	0x9b90, 0           	CALL	_UDPGetArray
001c38   f04d
001c3a   0e05     movlw	0x5                	MOVLW	0x05
001c3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c3e   0102     movlb	0x2                	BANKSEL	_extract_bootp_header_word_buf_1_1
                                           ;	.line	456; MainDemo.c	if(word_buf != magic_cookie){
001c40   510c     movf	0xc, 0, 0x1         	MOVF	_extract_bootp_header_word_buf_1_1, W, B
001c42   0a63     xorlw	0x63               	XORLW	0x63
001c44   e10c     bnz	0x1c5e               	BNZ	_00454_DS_
001c46   0102     movlb	0x2                	BANKSEL	(_extract_bootp_header_word_buf_1_1 + 1)
001c48   510d     movf	0xd, 0, 0x1         	MOVF	(_extract_bootp_header_word_buf_1_1 + 1), W, B
001c4a   0a82     xorlw	0x82               	XORLW	0x82
001c4c   e108     bnz	0x1c5e               	BNZ	_00454_DS_
001c4e   0102     movlb	0x2                	BANKSEL	(_extract_bootp_header_word_buf_1_1 + 2)
001c50   510e     movf	0xe, 0, 0x1         	MOVF	(_extract_bootp_header_word_buf_1_1 + 2), W, B
001c52   0a53     xorlw	0x53               	XORLW	0x53
001c54   e104     bnz	0x1c5e               	BNZ	_00454_DS_
001c56   0102     movlb	0x2                	BANKSEL	(_extract_bootp_header_word_buf_1_1 + 3)
001c58   510f     movf	0xf, 0, 0x1         	MOVF	(_extract_bootp_header_word_buf_1_1 + 3), W, B
001c5a   0a63     xorlw	0x63               	XORLW	0x63
001c5c   e002     bz	0x1c62                	BZ	_00420_DS_
                                           _00454_DS_:
                                           ;	.line	457; MainDemo.c	return FALSE;
001c5e   6ae8     clrf	0xe8, 0             	CLRF	WREG
001c60   d0d0     bra	0x1e02               	BRA	_00434_DS_
                                           _00420_DS_:
                                           ;	.line	460; MainDemo.c	*dhcp_header_size = 0;
001c62   0e00     movlw	0                  	MOVLW	0x00
001c64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c66   0e00     movlw	0                  	MOVLW	0x00
001c68   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001c6a   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001c6c   ffe9
001c6e   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001c70   fff3
001c72   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001c74   ec08     call	0xbe10, 0           	CALL	__gptrput2
001c76   f05f
                                           ;	.line	461; MainDemo.c	wrong_packet = TRUE;
001c78   0e01     movlw	0x1                	MOVLW	0x01
001c7a   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00427_DS_:
                                           ;	.line	462; MainDemo.c	while(UDPGet(&opt) && opt != DHCP_END_OPTION){
001c7c   0e02     movlw	0x2                	MOVLW	HIGH(_extract_bootp_header_opt_1_1)
001c7e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001c80   0ea8     movlw	0xa8               	MOVLW	LOW(_extract_bootp_header_opt_1_1)
001c82   6e04     movwf	0x4, 0             	MOVWF	r0x04
001c84   0e80     movlw	0x80               	MOVLW	0x80
001c86   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001c88   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c94   ec2c     call	0xb058, 0           	CALL	_UDPGet
001c96   f058
001c98   6e04     movwf	0x4, 0             	MOVWF	r0x04
001c9a   0e03     movlw	0x3                	MOVLW	0x03
001c9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c9e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001ca0   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001ca2   d0a8     bra	0x1df4               	BRA	_00429_DS_
001ca4   c2a8     movff	0x2a8, 0x4         	MOVFF	_extract_bootp_header_opt_1_1, r0x04
001ca6   f004
001ca8   6a05     clrf	0x5, 0              	CLRF	r0x05
001caa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cac   0aff     xorlw	0xff               	XORLW	0xff
001cae   e103     bnz	0x1cb6               	BNZ	_00456_DS_
001cb0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cb2   e101     bnz	0x1cb6               	BNZ	_00456_DS_
001cb4   d09f     bra	0x1df4               	BRA	_00429_DS_
                                           _00456_DS_:
                                           ;	.line	463; MainDemo.c	UDPGet(&length);
001cb6   0e02     movlw	0x2                	MOVLW	HIGH(_extract_bootp_header_length_1_1)
001cb8   6e05     movwf	0x5, 0             	MOVWF	r0x05
001cba   0ea9     movlw	0xa9               	MOVLW	LOW(_extract_bootp_header_length_1_1)
001cbc   6e04     movwf	0x4, 0             	MOVWF	r0x04
001cbe   0e80     movlw	0x80               	MOVLW	0x80
001cc0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001cc2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cce   ec2c     call	0xb058, 0           	CALL	_UDPGet
001cd0   f058
001cd2   0e03     movlw	0x3                	MOVLW	0x03
001cd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	464; MainDemo.c	if(opt == DHCP_MESSAGE_TYPE){
001cd6   c2a8     movff	0x2a8, 0x4         	MOVFF	_extract_bootp_header_opt_1_1, r0x04
001cd8   f004
001cda   6a05     clrf	0x5, 0              	CLRF	r0x05
001cdc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cde   0a35     xorlw	0x35               	XORLW	0x35
001ce0   e102     bnz	0x1ce6               	BNZ	_00457_DS_
001ce2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001ce4   e001     bz	0x1ce8                	BZ	_00458_DS_
                                           _00457_DS_:
001ce6   d00c     bra	0x1d00               	BRA	_00424_DS_
                                           _00458_DS_:
                                           ;	.line	465; MainDemo.c	UDPGet(dhcp_type);
001ce8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cf0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cf4   ec2c     call	0xb058, 0           	CALL	_UDPGet
001cf6   f058
001cf8   0e03     movlw	0x3                	MOVLW	0x03
001cfa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	466; MainDemo.c	wrong_packet = FALSE;
001cfc   6a03     clrf	0x3, 0              	CLRF	r0x03
001cfe   d7be     bra	0x1c7c               	BRA	_00427_DS_
                                           _00424_DS_:
                                           ;	.line	468; MainDemo.c	else if(dhcp_header != NULL){
001d00   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d02   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001d04   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001d06   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001d08   d7b9     bra	0x1c7c               	BRA	_00427_DS_
                                           ;	.line	469; MainDemo.c	dhcp_header[*dhcp_header_size] = opt;
001d0a   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001d0c   ffe9
001d0e   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001d10   fff3
001d12   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001d14   eccb     call	0xbb96, 0           	CALL	__gptrget2
001d16   f05d
001d18   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d1a   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001d1c   f005
001d1e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d20   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
001d22   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001d24   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d26   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
001d28   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001d2a   6ae8     clrf	0xe8, 0             	CLRF	WREG
001d2c   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
001d2e   68e8     setf	0xe8, 0             	SETF	WREG
001d30   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
001d32   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001d34   c2a8     movff	0x2a8, 0xfe5       	MOVFF	_extract_bootp_header_opt_1_1, POSTDEC1
001d36   ffe5
001d38   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001d3a   ffe9
001d3c   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001d3e   fff3
001d40   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001d42   ec28     call	0xbe50, 0           	CALL	__gptrput1
001d44   f05f
                                           ;	.line	470; MainDemo.c	dhcp_header[*dhcp_header_size+1] = length;
001d46   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d48   0f01     addlw	0x1                	ADDLW	0x01
001d4a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001d4c   0e00     movlw	0                  	MOVLW	0x00
001d4e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001d50   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001d52   6a0e     clrf	0xe, 0              	CLRF	r0x0e
001d54   be0d     btfsc	0xd, 0x7, 0        	BTFSC	r0x0d, 7
001d56   680e     setf	0xe, 0              	SETF	r0x0e
001d58   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d5a   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
001d5c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d5e   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
001d60   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d62   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
001d64   c2a9     movff	0x2a9, 0xfe5       	MOVFF	_extract_bootp_header_length_1_1, POSTDEC1
001d66   ffe5
001d68   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
001d6a   ffe9
001d6c   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
001d6e   fff3
001d70   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001d72   ec28     call	0xbe50, 0           	CALL	__gptrput1
001d74   f05f
                                           ;	.line	471; MainDemo.c	UDPGetArray(&dhcp_header[*dhcp_header_size+2], length);
001d76   0e02     movlw	0x2                	MOVLW	0x02
001d78   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001d7a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001d7c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001d7e   6a0c     clrf	0xc, 0              	CLRF	r0x0c
001d80   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
001d82   680c     setf	0xc, 0              	SETF	r0x0c
001d84   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d86   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001d88   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d8a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001d8c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d8e   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
001d90   c2a9     movff	0x2a9, 0xd         	MOVFF	_extract_bootp_header_length_1_1, r0x0d
001d92   f00d
001d94   6a0e     clrf	0xe, 0              	CLRF	r0x0e
001d96   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d9a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d9e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001daa   ecc8     call	0x9b90, 0           	CALL	_UDPGetArray
001dac   f04d
001dae   0e05     movlw	0x5                	MOVLW	0x05
001db0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	472; MainDemo.c	*dhcp_header_size += 2+length;
001db2   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001db4   ffe9
001db6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001db8   fff3
001dba   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001dbc   eccb     call	0xbb96, 0           	CALL	__gptrget2
001dbe   f05d
001dc0   6e04     movwf	0x4, 0             	MOVWF	r0x04
001dc2   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001dc4   f005
001dc6   c2a9     movff	0x2a9, 0xc         	MOVFF	_extract_bootp_header_length_1_1, r0x0c
001dc8   f00c
001dca   6a0d     clrf	0xd, 0              	CLRF	r0x0d
001dcc   0e02     movlw	0x2                	MOVLW	0x02
001dce   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
001dd0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001dd2   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
001dd4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001dd6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001dd8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001dda   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001ddc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001dde   ffe5
001de0   c005     movff	0x5, 0xff4         	MOVFF	r0x05, PRODH
001de2   fff4
001de4   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001de6   ffe9
001de8   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001dea   fff3
001dec   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001dee   ec08     call	0xbe10, 0           	CALL	__gptrput2
001df0   f05f
001df2   d744     bra	0x1c7c               	BRA	_00427_DS_
                                           _00429_DS_:
                                           ;	.line	475; MainDemo.c	return !wrong_packet;
001df4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001df6   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001df8   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
001dfa   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001dfc   6a03     clrf	0x3, 0              	CLRF	r0x03
001dfe   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
001e00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00434_DS_:
001e02   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
001e04   f010
001e06   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
001e08   f00f
001e0a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001e0c   f00e
001e0e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001e10   f00d
001e12   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001e14   f00c
001e16   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001e18   f00b
001e1a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001e1c   f00a
001e1e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001e20   f009
001e22   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001e24   f008
001e26   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001e28   f007
001e2a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001e2c   f006
001e2e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e30   f005
001e32   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e34   f004
001e36   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e38   f003
001e3a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e3c   f002
001e3e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e40   f001
001e42   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e44   f000
001e46   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e48   ffd9
001e4a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__wait_network_data	code
                                           _wait_network_data:
                                           ;	.line	392; MainDemo.c	void wait_network_data(BYTE *gateway_MAC){
004ace   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004ad0   ffe5
004ad2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004ad4   ffd9
004ad6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004ad8   ffe5
004ada   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004adc   ffe5
004ade   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004ae0   ffe5
004ae2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004ae4   ffe5
004ae6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004ae8   ffe5
004aea   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004aec   ffe5
004aee   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004af0   ffe5
004af2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004af4   ffe5
004af6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004af8   ffe5
004afa   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004afc   ffe5
004afe   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004b00   ffe5
004b02   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004b04   ffe5
004b06   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
004b08   ffe5
004b0a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
004b0c   ffe5
004b0e   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
004b10   ffe5
004b12   0e02     movlw	0x2                	MOVLW	0x02
004b14   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004b16   f000
004b18   0e03     movlw	0x3                	MOVLW	0x03
004b1a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004b1c   f001
004b1e   0e04     movlw	0x4                	MOVLW	0x04
004b20   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004b22   f002
                                           ;	.line	400; MainDemo.c	set_to_dhcp_ip(&dhcp_server_ip);
004b24   0e0b     movlw	0xb                	MOVLW	HIGH(_wait_network_data_dhcp_server_ip_1_1)
004b26   6e04     movwf	0x4, 0             	MOVWF	r0x04
004b28   0efc     movlw	0xfc               	MOVLW	LOW(_wait_network_data_dhcp_server_ip_1_1)
004b2a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004b2c   0e80     movlw	0x80               	MOVLW	0x80
004b2e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004b30   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004b36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b38   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004b3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b3c   ec3a     call	0xa274, 0           	CALL	_set_to_dhcp_ip
004b3e   f051
004b40   0e03     movlw	0x3                	MOVLW	0x03
004b42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	402; MainDemo.c	socket_sendto_server = UDPOpen(0, NULL, 67);
004b44   0e00     movlw	0                  	MOVLW	0x00
004b46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b48   0e43     movlw	0x43               	MOVLW	0x43
004b4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b4c   0e00     movlw	0                  	MOVLW	0x00
004b4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b50   0e00     movlw	0                  	MOVLW	0x00
004b52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b54   0e00     movlw	0                  	MOVLW	0x00
004b56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b58   0e00     movlw	0                  	MOVLW	0x00
004b5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b5c   0e00     movlw	0                  	MOVLW	0x00
004b5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b60   ec3b     call	0x5276, 0           	CALL	_UDPOpen
004b62   f029
004b64   6e03     movwf	0x3, 0             	MOVWF	r0x03
004b66   0e07     movlw	0x7                	MOVLW	0x07
004b68   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004b6a   c003     movff	0x3, 0x2a5         	MOVFF	r0x03, _wait_network_data_socket_sendto_server_1_1
004b6c   f2a5
                                           ;	.line	403; MainDemo.c	socket_recv = UDPOpen(67, NULL, 0);
004b6e   0e00     movlw	0                  	MOVLW	0x00
004b70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b72   0e00     movlw	0                  	MOVLW	0x00
004b74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b76   0e00     movlw	0                  	MOVLW	0x00
004b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b7a   0e00     movlw	0                  	MOVLW	0x00
004b7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b7e   0e00     movlw	0                  	MOVLW	0x00
004b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b82   0e00     movlw	0                  	MOVLW	0x00
004b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b86   0e43     movlw	0x43               	MOVLW	0x43
004b88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b8a   ec3b     call	0x5276, 0           	CALL	_UDPOpen
004b8c   f029
004b8e   6e04     movwf	0x4, 0             	MOVWF	r0x04
004b90   0e07     movlw	0x7                	MOVLW	0x07
004b92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004b94   c004     movff	0x4, 0x2a6         	MOVFF	r0x04, _wait_network_data_socket_recv_1_1
004b96   f2a6
                                           ;	.line	404; MainDemo.c	socket_sendto_client = UDPOpen(0, NULL, 68);
004b98   0e00     movlw	0                  	MOVLW	0x00
004b9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b9c   0e44     movlw	0x44               	MOVLW	0x44
004b9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ba0   0e00     movlw	0                  	MOVLW	0x00
004ba2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ba4   0e00     movlw	0                  	MOVLW	0x00
004ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ba8   0e00     movlw	0                  	MOVLW	0x00
004baa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bac   0e00     movlw	0                  	MOVLW	0x00
004bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bb0   0e00     movlw	0                  	MOVLW	0x00
004bb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bb4   ec3b     call	0x5276, 0           	CALL	_UDPOpen
004bb6   f029
004bb8   6e05     movwf	0x5, 0             	MOVWF	r0x05
004bba   0e07     movlw	0x7                	MOVLW	0x07
004bbc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004bbe   c005     movff	0x5, 0x2a7         	MOVFF	r0x05, _wait_network_data_socket_sendto_client_1_1
004bc0   f2a7
                                           ;	.line	406; MainDemo.c	if(socket_sendto_server == INVALID_UDP_SOCKET ||
004bc2   6a06     clrf	0x6, 0              	CLRF	r0x06
004bc4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004bc6   0aff     xorlw	0xff               	XORLW	0xff
004bc8   e102     bnz	0x4bce               	BNZ	_00404_DS_
004bca   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004bcc   e00d     bz	0x4be8                	BZ	_00384_DS_
                                           _00404_DS_:
                                           ;	.line	407; MainDemo.c	socket_recv == INVALID_UDP_SOCKET ||
004bce   6a03     clrf	0x3, 0              	CLRF	r0x03
004bd0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004bd2   0aff     xorlw	0xff               	XORLW	0xff
004bd4   e102     bnz	0x4bda               	BNZ	_00406_DS_
004bd6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004bd8   e007     bz	0x4be8                	BZ	_00384_DS_
                                           _00406_DS_:
                                           ;	.line	408; MainDemo.c	socket_sendto_client == INVALID_UDP_SOCKET){
004bda   6a03     clrf	0x3, 0              	CLRF	r0x03
004bdc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004bde   0aff     xorlw	0xff               	XORLW	0xff
004be0   e102     bnz	0x4be6               	BNZ	_00407_DS_
004be2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004be4   e001     bz	0x4be8                	BZ	_00384_DS_
                                           _00407_DS_:
004be6   d00d     bra	0x4c02               	BRA	_00385_DS_
                                           _00384_DS_:
                                           ;	.line	410; MainDemo.c	DisplayString (0,"invalid socket");
004be8   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
004bea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bec   0e9b     movlw	0x9b               	MOVLW	HIGH(__str_0)
004bee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bf0   0e06     movlw	0x6                	MOVLW	LOW(__str_0)
004bf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bf4   0e00     movlw	0                  	MOVLW	0x00
004bf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bf8   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
004bfa   f050
004bfc   0e04     movlw	0x4                	MOVLW	0x04
004bfe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	411; MainDemo.c	return;
004c00   d0a4     bra	0x4d4a               	BRA	_00396_DS_
                                           _00385_DS_:
                                           ;	.line	413; MainDemo.c	LED0_IO = 1; //DEBUG
004c02   8091     bsf	0x91, 0, 0           	BSF	_LATJbits, 0
                                           _00394_DS_:
                                           ;	.line	416; MainDemo.c	time_action(&socket_sendto_server);
004c04   0e02     movlw	0x2                	MOVLW	HIGH(_wait_network_data_socket_sendto_server_1_1)
004c06   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c08   0ea5     movlw	0xa5               	MOVLW	LOW(_wait_network_data_socket_sendto_server_1_1)
004c0a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c0c   0e80     movlw	0x80               	MOVLW	0x80
004c0e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c10   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c14   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c18   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c1c   eccc     call	0x7198, 0           	CALL	_time_action
004c1e   f038
004c20   0e03     movlw	0x3                	MOVLW	0x03
004c22   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	417; MainDemo.c	StackTaskHelp(&last_ip);
004c24   0e08     movlw	0x8                	MOVLW	HIGH(_wait_network_data_last_ip_1_1)
004c26   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c28   0efb     movlw	0xfb               	MOVLW	LOW(_wait_network_data_last_ip_1_1)
004c2a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c2c   0e80     movlw	0x80               	MOVLW	0x80
004c2e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c30   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c38   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c3c   ec26     call	0x1e4c, 0           	CALL	_StackTaskHelp
004c3e   f00f
004c40   0e03     movlw	0x3                	MOVLW	0x03
004c42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004c44   0102     movlb	0x2                	BANKSEL	_wait_network_data_socket_recv_1_1
                                           ;	.line	419; MainDemo.c	if(count = UDPIsGetReady(socket_recv)){
004c46   51a6     movf	0xa6, 0, 0x1        	MOVF	_wait_network_data_socket_recv_1_1, W, B
004c48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c4a   ec60     call	0xb4c0, 0           	CALL	_UDPIsGetReady
004c4c   f05a
004c4e   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c50   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004c52   f004
004c54   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
004c56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c58   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
004c5a   e0d4     bz	0x4c04                	BZ	_00394_DS_
                                           ;	.line	420; MainDemo.c	if(ip_cmp(&last_ip, &dhcp_server_ip)){
004c5c   0e08     movlw	0x8                	MOVLW	HIGH(_wait_network_data_last_ip_1_1)
004c5e   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c60   0efb     movlw	0xfb               	MOVLW	LOW(_wait_network_data_last_ip_1_1)
004c62   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c64   0e80     movlw	0x80               	MOVLW	0x80
004c66   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c68   0e0b     movlw	0xb                	MOVLW	HIGH(_wait_network_data_dhcp_server_ip_1_1)
004c6a   6e07     movwf	0x7, 0             	MOVWF	r0x07
004c6c   0efc     movlw	0xfc               	MOVLW	LOW(_wait_network_data_dhcp_server_ip_1_1)
004c6e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004c70   0e80     movlw	0x80               	MOVLW	0x80
004c72   6e08     movwf	0x8, 0             	MOVWF	r0x08
004c74   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c78   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c7c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c80   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c84   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c8c   ecd3     call	0x8fa6, 0           	CALL	_ip_cmp
004c8e   f047
004c90   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c92   0e06     movlw	0x6                	MOVLW	0x06
004c94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004c96   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c98   e01d     bz	0x4cd4                	BZ	_00389_DS_
                                           ;	.line	421; MainDemo.c	handle_server_msg(&socket_sendto_client, &socket_recv);
004c9a   0e02     movlw	0x2                	MOVLW	HIGH(_wait_network_data_socket_sendto_client_1_1)
004c9c   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c9e   0ea7     movlw	0xa7               	MOVLW	LOW(_wait_network_data_socket_sendto_client_1_1)
004ca0   6e03     movwf	0x3, 0             	MOVWF	r0x03
004ca2   0e80     movlw	0x80               	MOVLW	0x80
004ca4   6e05     movwf	0x5, 0             	MOVWF	r0x05
004ca6   0e02     movlw	0x2                	MOVLW	HIGH(_wait_network_data_socket_recv_1_1)
004ca8   6e07     movwf	0x7, 0             	MOVWF	r0x07
004caa   0ea6     movlw	0xa6               	MOVLW	LOW(_wait_network_data_socket_recv_1_1)
004cac   6e06     movwf	0x6, 0             	MOVWF	r0x06
004cae   0e80     movlw	0x80               	MOVLW	0x80
004cb0   6e08     movwf	0x8, 0             	MOVWF	r0x08
004cb2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004cb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cb6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004cb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004cbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004cc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cc2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cc6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cca   ec62     call	0x32c4, 0           	CALL	_handle_server_msg
004ccc   f019
004cce   0e06     movlw	0x6                	MOVLW	0x06
004cd0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004cd2   d798     bra	0x4c04               	BRA	_00394_DS_
                                           _00389_DS_:
                                           ;	.line	424; MainDemo.c	handle_client_msg(&socket_sendto_server, &socket_sendto_client, &socket_recv, gateway_MAC, &last_ip);
004cd4   0e02     movlw	0x2                	MOVLW	HIGH(_wait_network_data_socket_sendto_server_1_1)
004cd6   6e04     movwf	0x4, 0             	MOVWF	r0x04
004cd8   0ea5     movlw	0xa5               	MOVLW	LOW(_wait_network_data_socket_sendto_server_1_1)
004cda   6e03     movwf	0x3, 0             	MOVWF	r0x03
004cdc   0e80     movlw	0x80               	MOVLW	0x80
004cde   6e05     movwf	0x5, 0             	MOVWF	r0x05
004ce0   0e02     movlw	0x2                	MOVLW	HIGH(_wait_network_data_socket_sendto_client_1_1)
004ce2   6e07     movwf	0x7, 0             	MOVWF	r0x07
004ce4   0ea7     movlw	0xa7               	MOVLW	LOW(_wait_network_data_socket_sendto_client_1_1)
004ce6   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ce8   0e80     movlw	0x80               	MOVLW	0x80
004cea   6e08     movwf	0x8, 0             	MOVWF	r0x08
004cec   0e02     movlw	0x2                	MOVLW	HIGH(_wait_network_data_socket_recv_1_1)
004cee   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
004cf0   0ea6     movlw	0xa6               	MOVLW	LOW(_wait_network_data_socket_recv_1_1)
004cf2   6e09     movwf	0x9, 0             	MOVWF	r0x09
004cf4   0e80     movlw	0x80               	MOVLW	0x80
004cf6   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
004cf8   0e08     movlw	0x8                	MOVLW	HIGH(_wait_network_data_last_ip_1_1)
004cfa   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
004cfc   0efb     movlw	0xfb               	MOVLW	LOW(_wait_network_data_last_ip_1_1)
004cfe   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
004d00   0e80     movlw	0x80               	MOVLW	0x80
004d02   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
004d04   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
004d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d08   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
004d0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d0c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
004d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d10   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d14   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d18   5000     movf	0, 0, 0             	MOVF	r0x00, W
004d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d1c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
004d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d20   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d24   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d28   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004d2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d2c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d30   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004d32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d34   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d38   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d3c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d40   ecf8     call	0xdf0, 0            	CALL	_handle_client_msg
004d42   f006
004d44   0e0f     movlw	0xf                	MOVLW	0x0f
004d46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004d48   d75d     bra	0x4c04               	BRA	_00394_DS_
                                           _00396_DS_:
004d4a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
004d4c   f00e
004d4e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
004d50   f00d
004d52   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
004d54   f00c
004d56   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
004d58   f00b
004d5a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004d5c   f00a
004d5e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004d60   f009
004d62   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004d64   f008
004d66   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004d68   f007
004d6a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004d6c   f006
004d6e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004d70   f005
004d72   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004d74   f004
004d76   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004d78   f003
004d7a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004d7c   f002
004d7e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004d80   f001
004d82   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004d84   f000
004d86   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004d88   ffd9
004d8a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__send_release	code
                                           _send_release:
                                           ;	.line	375; MainDemo.c	void send_release(UDP_SOCKET *socket_sendto_server, IP_ADDR *ip, MAC_ADDR *mac){
0076ac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0076ae   ffe5
0076b0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0076b2   ffd9
0076b4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0076b6   ffe5
0076b8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0076ba   ffe5
0076bc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0076be   ffe5
0076c0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0076c2   ffe5
0076c4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0076c6   ffe5
0076c8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0076ca   ffe5
0076cc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0076ce   ffe5
0076d0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0076d2   ffe5
0076d4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0076d6   ffe5
0076d8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0076da   ffe5
0076dc   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0076de   ffe5
0076e0   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0076e2   ffe5
0076e4   0e02     movlw	0x2                	MOVLW	0x02
0076e6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0076e8   f000
0076ea   0e03     movlw	0x3                	MOVLW	0x03
0076ec   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0076ee   f001
0076f0   0e04     movlw	0x4                	MOVLW	0x04
0076f2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0076f4   f002
0076f6   0e05     movlw	0x5                	MOVLW	0x05
0076f8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0076fa   f003
0076fc   0e06     movlw	0x6                	MOVLW	0x06
0076fe   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007700   f004
007702   0e07     movlw	0x7                	MOVLW	0x07
007704   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
007706   f005
007708   0e08     movlw	0x8                	MOVLW	0x08
00770a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00770c   f006
00770e   0e09     movlw	0x9                	MOVLW	0x09
007710   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
007712   f007
007714   0e0a     movlw	0xa                	MOVLW	0x0a
007716   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
007718   f008
                                           _00376_DS_:
                                           ;	.line	377; MainDemo.c	while(!UDPIsPutReady(*socket_sendto_server));
00771a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00771c   ffe9
00771e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007720   fff3
007722   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007724   ec55     call	0xbcaa, 0           	CALL	__gptrget1
007726   f05e
007728   6e09     movwf	0x9, 0             	MOVWF	r0x09
00772a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00772c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00772e   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
007730   f057
007732   6e09     movwf	0x9, 0             	MOVWF	r0x09
007734   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
007736   f00a
007738   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00773a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00773c   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
00773e   e0ed     bz	0x771a                	BZ	_00376_DS_
                                           ;	.line	378; MainDemo.c	set_mac_to_dhcp_server();
007740   ece4     call	0x99c8, 0           	CALL	_set_mac_to_dhcp_server
007742   f04c
                                           ;	.line	379; MainDemo.c	forgeBootpHeaderAck(&bootp_header, 0, ip, ip, mac);
007744   0e01     movlw	0x1                	MOVLW	HIGH(_send_release_bootp_header_1_1)
007746   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007748   0ec8     movlw	0xc8               	MOVLW	LOW(_send_release_bootp_header_1_1)
00774a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00774c   0e80     movlw	0x80               	MOVLW	0x80
00774e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
007750   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
007752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007754   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007756   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007758   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00775a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00775c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00775e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007760   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007764   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007766   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007768   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00776a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00776c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00776e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007770   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007772   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007774   0e00     movlw	0                  	MOVLW	0x00
007776   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007778   0e00     movlw	0                  	MOVLW	0x00
00777a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00777c   0e00     movlw	0                  	MOVLW	0x00
00777e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007780   0e00     movlw	0                  	MOVLW	0x00
007782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007784   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
007786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007788   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00778a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00778c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00778e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007790   ec95     call	0x7f2a, 0           	CALL	_forgeBootpHeaderAck
007792   f03f
007794   0e10     movlw	0x10               	MOVLW	0x10
007796   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	380; MainDemo.c	build_bootp(&bootp_header, socket_sendto_server);
007798   0e01     movlw	0x1                	MOVLW	HIGH(_send_release_bootp_header_1_1)
00779a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00779c   0ec8     movlw	0xc8               	MOVLW	LOW(_send_release_bootp_header_1_1)
00779e   6e03     movwf	0x3, 0             	MOVWF	r0x03
0077a0   0e80     movlw	0x80               	MOVLW	0x80
0077a2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0077a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0077a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077a8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0077aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0077ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0077b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077b4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0077b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077b8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0077ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077bc   ec15     call	0x3c2a, 0           	CALL	_build_bootp
0077be   f01e
0077c0   0e06     movlw	0x6                	MOVLW	0x06
0077c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	381; MainDemo.c	UDPPut(DHCP_RELEASE_MESSAGE);
0077c4   0e07     movlw	0x7                	MOVLW	0x07
0077c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077c8   ec36     call	0xac6c, 0           	CALL	_UDPPut
0077ca   f056
0077cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	383; MainDemo.c	UDPPut(DHCP_SERVER_IDENTIFIER);
0077ce   0e36     movlw	0x36               	MOVLW	0x36
0077d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077d2   ec36     call	0xac6c, 0           	CALL	_UDPPut
0077d4   f056
0077d6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	384; MainDemo.c	UDPPut(sizeof(IP_ADDR));
0077d8   0e04     movlw	0x4                	MOVLW	0x04
0077da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077dc   ec36     call	0xac6c, 0           	CALL	_UDPPut
0077de   f056
0077e0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	385; MainDemo.c	UDPPutArray((BYTE*)&AppConfig.MyIPAddr, sizeof(IP_ADDR));
0077e2   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig)
0077e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0077e6   0ec8     movlw	0xc8               	MOVLW	LOW(_AppConfig)
0077e8   6e00     movwf	0, 0               	MOVWF	r0x00
0077ea   0e80     movlw	0x80               	MOVLW	0x80
0077ec   6e02     movwf	0x2, 0             	MOVWF	r0x02
0077ee   0e00     movlw	0                  	MOVLW	0x00
0077f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077f2   0e04     movlw	0x4                	MOVLW	0x04
0077f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0077f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0077fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
007800   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007802   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
007804   f04b
007806   0e05     movlw	0x5                	MOVLW	0x05
007808   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	387; MainDemo.c	end_dhcp();
00780a   ec7e     call	0xbafc, 0           	CALL	_end_dhcp
00780c   f05d
                                           ;	.line	389; MainDemo.c	UDPFlush();
00780e   ec83     call	0x4506, 0           	CALL	_UDPFlush
007810   f022
007812   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
007814   f00b
007816   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
007818   f00a
00781a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00781c   f009
00781e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007820   f008
007822   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007824   f007
007826   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007828   f006
00782a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00782c   f005
00782e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007830   f004
007832   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007834   f003
007836   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007838   f002
00783a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00783c   f001
00783e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007840   f000
007842   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007844   ffd9
007846   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__update_pool	code
                                           _update_pool:
                                           ;	.line	346; MainDemo.c	void update_pool(UDP_SOCKET *socket_sendto_server){
0021de   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0021e0   ffe5
0021e2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0021e4   ffd9
0021e6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0021e8   ffe5
0021ea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0021ec   ffe5
0021ee   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0021f0   ffe5
0021f2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0021f4   ffe5
0021f6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0021f8   ffe5
0021fa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0021fc   ffe5
0021fe   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002200   ffe5
002202   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002204   ffe5
002206   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002208   ffe5
00220a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00220c   ffe5
00220e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002210   ffe5
002212   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002214   ffe5
002216   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002218   ffe5
00221a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00221c   ffe5
00221e   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002220   ffe5
002222   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002224   ffe5
002226   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002228   ffe5
00222a   0e02     movlw	0x2                	MOVLW	0x02
00222c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00222e   f000
002230   0e03     movlw	0x3                	MOVLW	0x03
002232   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002234   f001
002236   0e04     movlw	0x4                	MOVLW	0x04
002238   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00223a   f002
                                           ;	.line	348; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
00223c   6a03     clrf	0x3, 0              	CLRF	r0x03
00223e   6a04     clrf	0x4, 0              	CLRF	r0x04
002240   6a05     clrf	0x5, 0              	CLRF	r0x05
002242   6a06     clrf	0x6, 0              	CLRF	r0x06
002244   6a07     clrf	0x7, 0              	CLRF	r0x07
002246   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00353_DS_:
002248   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00224a   0f80     addlw	0x80               	ADDLW	0x80
00224c   0f80     addlw	0x80               	ADDLW	0x80
00224e   e102     bnz	0x2254               	BNZ	_00367_DS_
002250   0e0a     movlw	0xa                	MOVLW	0x0a
002252   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00367_DS_:
002254   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002256   d161     bra	0x251a               	BRA	_00357_DS_
                                           ;	.line	349; MainDemo.c	if(!is_free(&pool[i])){
002258   0e00     movlw	0                  	MOVLW	LOW(_pool)
00225a   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
00225c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00225e   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
002260   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
002262   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002264   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002266   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002268   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00226a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00226c   0e80     movlw	0x80               	MOVLW	0x80
00226e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002270   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002274   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002278   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00227a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00227c   ecbb     call	0xa576, 0           	CALL	_is_free
00227e   f052
002280   6e09     movwf	0x9, 0             	MOVWF	r0x09
002282   0e03     movlw	0x3                	MOVLW	0x03
002284   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002286   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002288   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00228a   d13b     bra	0x2502               	BRA	_00355_DS_
                                           ;	.line	351; MainDemo.c	if(pool[i].server_deadline < 60)
00228c   0e00     movlw	0                  	MOVLW	LOW(_pool)
00228e   2407     addwf	0x7, 0, 0          	ADDWF	r0x07, W
002290   6e09     movwf	0x9, 0             	MOVWF	r0x09
002292   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
002294   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
002296   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002298   0e0e     movlw	0xe                	MOVLW	0x0e
00229a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00229c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00229e   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0022a0   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0022a2   ffe9
0022a4   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
0022a6   ffea
0022a8   cfee     movff	0xfee, 0xb         	MOVFF	POSTINC0, r0x0b
0022aa   f00b
0022ac   cfee     movff	0xfee, 0xc         	MOVFF	POSTINC0, r0x0c
0022ae   f00c
0022b0   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
0022b2   f00d
0022b4   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
0022b6   f00e
0022b8   0e00     movlw	0                  	MOVLW	0x00
0022ba   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
0022bc   e108     bnz	0x22ce               	BNZ	_00368_DS_
0022be   0e00     movlw	0                  	MOVLW	0x00
0022c0   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
0022c2   e105     bnz	0x22ce               	BNZ	_00368_DS_
0022c4   0e00     movlw	0                  	MOVLW	0x00
0022c6   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
0022c8   e102     bnz	0x22ce               	BNZ	_00368_DS_
0022ca   0e3c     movlw	0x3c               	MOVLW	0x3c
0022cc   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
                                           _00368_DS_:
0022ce   e20d     bc	0x22ea                	BC	_00342_DS_
                                           ;	.line	352; MainDemo.c	pool[i].server_deadline = 0;
0022d0   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0022d2   ffe9
0022d4   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
0022d6   ffea
0022d8   0e00     movlw	0                  	MOVLW	0x00
0022da   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0022dc   0e00     movlw	0                  	MOVLW	0x00
0022de   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0022e0   0e00     movlw	0                  	MOVLW	0x00
0022e2   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0022e4   0e00     movlw	0                  	MOVLW	0x00
0022e6   6eef     movwf	0xef, 0            	MOVWF	INDF0
0022e8   d020     bra	0x232a               	BRA	_00343_DS_
                                           _00342_DS_:
                                           ;	.line	353; MainDemo.c	else pool[i].server_deadline -= 60;
0022ea   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0022ec   ffe9
0022ee   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
0022f0   ffea
0022f2   cfee     movff	0xfee, 0xb         	MOVFF	POSTINC0, r0x0b
0022f4   f00b
0022f6   cfee     movff	0xfee, 0xc         	MOVFF	POSTINC0, r0x0c
0022f8   f00c
0022fa   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
0022fc   f00d
0022fe   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
002300   f00e
002302   0ec4     movlw	0xc4               	MOVLW	0xc4
002304   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
002306   0eff     movlw	0xff               	MOVLW	0xff
002308   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
00230a   0eff     movlw	0xff               	MOVLW	0xff
00230c   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
00230e   0eff     movlw	0xff               	MOVLW	0xff
002310   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
002312   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
002314   ffe9
002316   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
002318   ffea
00231a   c00b     movff	0xb, 0xfee         	MOVFF	r0x0b, POSTINC0
00231c   ffee
00231e   c00c     movff	0xc, 0xfee         	MOVFF	r0x0c, POSTINC0
002320   ffee
002322   c00d     movff	0xd, 0xfee         	MOVFF	r0x0d, POSTINC0
002324   ffee
002326   c00e     movff	0xe, 0xfef         	MOVFF	r0x0e, INDF0
002328   ffef
                                           _00343_DS_:
                                           ;	.line	355; MainDemo.c	if(pool[i].client_deadline <= 60){
00232a   0e00     movlw	0                  	MOVLW	LOW(_pool)
00232c   2405     addwf	0x5, 0, 0          	ADDWF	r0x05, W
00232e   6e09     movwf	0x9, 0             	MOVWF	r0x09
002330   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
002332   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
002334   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002336   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002338   0f0a     addlw	0xa                	ADDLW	0x0a
00233a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00233c   0e00     movlw	0                  	MOVLW	0x00
00233e   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
002340   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002342   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
002344   ffe9
002346   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
002348   ffea
00234a   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
00234c   f00d
00234e   cfee     movff	0xfee, 0xe         	MOVFF	POSTINC0, r0x0e
002350   f00e
002352   cfee     movff	0xfee, 0xf         	MOVFF	POSTINC0, r0x0f
002354   f00f
002356   cfef     movff	0xfef, 0x10        	MOVFF	INDF0, r0x10
002358   f010
00235a   0e00     movlw	0                  	MOVLW	0x00
00235c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
00235e   e108     bnz	0x2370               	BNZ	_00369_DS_
002360   0e00     movlw	0                  	MOVLW	0x00
002362   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
002364   e105     bnz	0x2370               	BNZ	_00369_DS_
002366   0e00     movlw	0                  	MOVLW	0x00
002368   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
00236a   e102     bnz	0x2370               	BNZ	_00369_DS_
00236c   0e3d     movlw	0x3d               	MOVLW	0x3d
00236e   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
                                           _00369_DS_:
002370   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002372   d06d     bra	0x244e               	BRA	_00347_DS_
                                           ;	.line	357; MainDemo.c	pool[i].miss_counter++;
002374   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002376   0f12     addlw	0x12               	ADDLW	0x12
002378   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00237a   0e00     movlw	0                  	MOVLW	0x00
00237c   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
00237e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002380   c00d     movff	0xd, 0xfe9         	MOVFF	r0x0d, FSR0L
002382   ffe9
002384   c00e     movff	0xe, 0xfea         	MOVFF	r0x0e, FSR0H
002386   ffea
002388   cfee     movff	0xfee, 0xf         	MOVFF	POSTINC0, r0x0f
00238a   f00f
00238c   cfef     movff	0xfef, 0x10        	MOVFF	INDF0, r0x10
00238e   f010
002390   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
002392   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002394   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
002396   c00d     movff	0xd, 0xfe9         	MOVFF	r0x0d, FSR0L
002398   ffe9
00239a   c00e     movff	0xe, 0xfea         	MOVFF	r0x0e, FSR0H
00239c   ffea
00239e   c00f     movff	0xf, 0xfee         	MOVFF	r0x0f, POSTINC0
0023a0   ffee
0023a2   c010     movff	0x10, 0xfef        	MOVFF	r0x10, INDF0
0023a4   ffef
                                           ;	.line	358; MainDemo.c	pool[i].client_deadline = RELAY_LEASE_TIME;
0023a6   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
0023a8   ffe9
0023aa   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
0023ac   ffea
0023ae   0e2c     movlw	0x2c               	MOVLW	0x2c
0023b0   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0023b2   0e01     movlw	0x1                	MOVLW	0x01
0023b4   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0023b6   0e00     movlw	0                  	MOVLW	0x00
0023b8   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
0023ba   0e00     movlw	0                  	MOVLW	0x00
0023bc   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	360; MainDemo.c	if(pool[i].miss_counter >= 5){
0023be   0e00     movlw	0                  	MOVLW	0x00
0023c0   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
0023c2   e102     bnz	0x23c8               	BNZ	_00370_DS_
0023c4   0e05     movlw	0x5                	MOVLW	0x05
0023c6   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00370_DS_:
0023c8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0023ca   d061     bra	0x248e               	BRA	_00348_DS_
                                           ;	.line	362; MainDemo.c	send_release(socket_sendto_server, &pool[i].ip, &pool[i].mac);
0023cc   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
0023ce   f00d
0023d0   c00a     movff	0xa, 0xe           	MOVFF	r0x0a, r0x0e
0023d2   f00e
0023d4   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0023d6   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0023d8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0023da   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0023dc   0e80     movlw	0x80               	MOVLW	0x80
0023de   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0023e0   0e04     movlw	0x4                	MOVLW	0x04
0023e2   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0023e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0023e6   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0023e8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0023ea   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0023ec   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0023ee   6e09     movwf	0x9, 0             	MOVWF	r0x09
0023f0   0e80     movlw	0x80               	MOVLW	0x80
0023f2   6e10     movwf	0x10, 0            	MOVWF	r0x10
0023f4   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0023f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023f8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0023fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023fc   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0023fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002400   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002402   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002404   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002408   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00240a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00240c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00240e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002410   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002414   5000     movf	0, 0, 0             	MOVF	r0x00, W
002416   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002418   ec56     call	0x76ac, 0           	CALL	_send_release
00241a   f03b
00241c   0e09     movlw	0x9                	MOVLW	0x09
00241e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	363; MainDemo.c	remove_from_pool(&pool[i].ip);
002420   0e00     movlw	0                  	MOVLW	LOW(_pool)
002422   2405     addwf	0x5, 0, 0          	ADDWF	r0x05, W
002424   6e09     movwf	0x9, 0             	MOVWF	r0x09
002426   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
002428   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
00242a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00242c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00242e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002430   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002432   6e09     movwf	0x9, 0             	MOVWF	r0x09
002434   0e80     movlw	0x80               	MOVLW	0x80
002436   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002438   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00243a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00243c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00243e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002440   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002442   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002444   ec6c     call	0xa8d8, 0           	CALL	_remove_from_pool
002446   f054
002448   0e03     movlw	0x3                	MOVLW	0x03
00244a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	364; MainDemo.c	continue; 
00244c   d05a     bra	0x2502               	BRA	_00355_DS_
                                           _00347_DS_:
                                           ;	.line	367; MainDemo.c	else pool[i].client_deadline -= 60;            
00244e   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
002450   ffe9
002452   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
002454   ffea
002456   cfee     movff	0xfee, 0x9         	MOVFF	POSTINC0, r0x09
002458   f009
00245a   cfee     movff	0xfee, 0xa         	MOVFF	POSTINC0, r0x0a
00245c   f00a
00245e   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
002460   f00d
002462   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
002464   f00e
002466   0ec4     movlw	0xc4               	MOVLW	0xc4
002468   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00246a   0eff     movlw	0xff               	MOVLW	0xff
00246c   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
00246e   0eff     movlw	0xff               	MOVLW	0xff
002470   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
002472   0eff     movlw	0xff               	MOVLW	0xff
002474   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
002476   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
002478   ffe9
00247a   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
00247c   ffea
00247e   c009     movff	0x9, 0xfee         	MOVFF	r0x09, POSTINC0
002480   ffee
002482   c00a     movff	0xa, 0xfee         	MOVFF	r0x0a, POSTINC0
002484   ffee
002486   c00d     movff	0xd, 0xfee         	MOVFF	r0x0d, POSTINC0
002488   ffee
00248a   c00e     movff	0xe, 0xfef         	MOVFF	r0x0e, INDF0
00248c   ffef
                                           _00348_DS_:
                                           ;	.line	368; MainDemo.c	if(pool[i].server_deadline <= RELAY_LEASE_TIME){
00248e   0e00     movlw	0                  	MOVLW	LOW(_pool)
002490   2405     addwf	0x5, 0, 0          	ADDWF	r0x05, W
002492   6e09     movwf	0x9, 0             	MOVWF	r0x09
002494   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
002496   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
002498   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00249a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00249c   0f0e     addlw	0xe                	ADDLW	0x0e
00249e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0024a0   0e00     movlw	0                  	MOVLW	0x00
0024a2   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
0024a4   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0024a6   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
0024a8   ffe9
0024aa   c00c     movff	0xc, 0xfea         	MOVFF	r0x0c, FSR0H
0024ac   ffea
0024ae   cfee     movff	0xfee, 0xb         	MOVFF	POSTINC0, r0x0b
0024b0   f00b
0024b2   cfee     movff	0xfee, 0xc         	MOVFF	POSTINC0, r0x0c
0024b4   f00c
0024b6   cfee     movff	0xfee, 0xd         	MOVFF	POSTINC0, r0x0d
0024b8   f00d
0024ba   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
0024bc   f00e
0024be   0e00     movlw	0                  	MOVLW	0x00
0024c0   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
0024c2   e108     bnz	0x24d4               	BNZ	_00371_DS_
0024c4   0e00     movlw	0                  	MOVLW	0x00
0024c6   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
0024c8   e105     bnz	0x24d4               	BNZ	_00371_DS_
0024ca   0e01     movlw	0x1                	MOVLW	0x01
0024cc   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
0024ce   e102     bnz	0x24d4               	BNZ	_00371_DS_
0024d0   0e2d     movlw	0x2d               	MOVLW	0x2d
0024d2   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
                                           _00371_DS_:
0024d4   e216     bc	0x2502                	BC	_00355_DS_
                                           ;	.line	369; MainDemo.c	send_request(socket_sendto_server, &pool[i]);       
0024d6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0024d8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0024da   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0024dc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0024de   0e80     movlw	0x80               	MOVLW	0x80
0024e0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0024e2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0024e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024e6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0024e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ea   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0024ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fa   eceb     call	0x6fd6, 0           	CALL	_send_request
0024fc   f037
0024fe   0e06     movlw	0x6                	MOVLW	0x06
002500   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00355_DS_:
                                           ;	.line	348; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
002502   0e14     movlw	0x14               	MOVLW	0x14
002504   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002506   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002508   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00250a   0e14     movlw	0x14               	MOVLW	0x14
00250c   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
00250e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002510   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
002512   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002514   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002516   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002518   d697     bra	0x2248               	BRA	_00353_DS_
                                           _00357_DS_:
00251a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00251c   f010
00251e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002520   f00f
002522   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002524   f00e
002526   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002528   f00d
00252a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00252c   f00c
00252e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002530   f00b
002532   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002534   f00a
002536   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002538   f009
00253a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00253c   f008
00253e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002540   f007
002542   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002544   f006
002546   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002548   f005
00254a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00254c   f004
00254e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002550   f003
002552   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002554   f002
002556   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002558   f001
00255a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00255c   f000
00255e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002560   ffd9
002562   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__send_request	code
                                           _send_request:
                                           ;	.line	332; MainDemo.c	void send_request(UDP_SOCKET *socket_sendto_server, POOL_ELEMENT *pool_el){
006fd6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006fd8   ffe5
006fda   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006fdc   ffd9
006fde   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006fe0   ffe5
006fe2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006fe4   ffe5
006fe6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006fe8   ffe5
006fea   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006fec   ffe5
006fee   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006ff0   ffe5
006ff2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006ff4   ffe5
006ff6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006ff8   ffe5
006ffa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006ffc   ffe5
006ffe   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007000   ffe5
007002   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007004   ffe5
007006   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
007008   ffe5
00700a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00700c   ffe5
00700e   0e02     movlw	0x2                	MOVLW	0x02
007010   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007012   f000
007014   0e03     movlw	0x3                	MOVLW	0x03
007016   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007018   f001
00701a   0e04     movlw	0x4                	MOVLW	0x04
00701c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00701e   f002
007020   0e05     movlw	0x5                	MOVLW	0x05
007022   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
007024   f003
007026   0e06     movlw	0x6                	MOVLW	0x06
007028   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00702a   f004
00702c   0e07     movlw	0x7                	MOVLW	0x07
00702e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
007030   f005
                                           _00333_DS_:
                                           ;	.line	337; MainDemo.c	while(!UDPIsPutReady(*socket_sendto_server));
007032   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007034   ffe9
007036   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007038   fff3
00703a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00703c   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00703e   f05e
007040   6e06     movwf	0x6, 0             	MOVWF	r0x06
007042   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007044   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007046   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
007048   f057
00704a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00704c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00704e   f007
007050   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007052   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007054   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
007056   e0ed     bz	0x7032                	BZ	_00333_DS_
                                           ;	.line	338; MainDemo.c	set_mac_to_dhcp_server();
007058   ece4     call	0x99c8, 0           	CALL	_set_mac_to_dhcp_server
00705a   f04c
                                           ;	.line	340; MainDemo.c	forgeBootpHeaderRequest(&bootp_header, 0, &pool_el->ip, &pool_el->ip, &pool_el->mac);
00705c   0e0a     movlw	0xa                	MOVLW	HIGH(_send_request_bootp_header_1_1)
00705e   6e07     movwf	0x7, 0             	MOVWF	r0x07
007060   0ec8     movlw	0xc8               	MOVLW	LOW(_send_request_bootp_header_1_1)
007062   6e06     movwf	0x6, 0             	MOVWF	r0x06
007064   0e80     movlw	0x80               	MOVLW	0x80
007066   6e08     movwf	0x8, 0             	MOVWF	r0x08
007068   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00706a   0f04     addlw	0x4                	ADDLW	0x04
00706c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00706e   0e00     movlw	0                  	MOVLW	0x00
007070   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
007072   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007074   0e00     movlw	0                  	MOVLW	0x00
007076   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
007078   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00707a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00707c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00707e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007082   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007084   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007086   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007088   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00708a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00708c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00708e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007092   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007096   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00709a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00709c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00709e   0e00     movlw	0                  	MOVLW	0x00
0070a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070a2   0e00     movlw	0                  	MOVLW	0x00
0070a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070a6   0e00     movlw	0                  	MOVLW	0x00
0070a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070aa   0e00     movlw	0                  	MOVLW	0x00
0070ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0070b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0070b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0070b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070ba   ec39     call	0x8072, 0           	CALL	_forgeBootpHeaderRequest
0070bc   f040
0070be   0e10     movlw	0x10               	MOVLW	0x10
0070c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	341; MainDemo.c	build_dhcp_header(dhcp_header, &dhcp_header_length, pool_el);
0070c2   0e0a     movlw	0xa                	MOVLW	HIGH(_send_request_dhcp_header_1_1)
0070c4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0070c6   0e00     movlw	0                  	MOVLW	LOW(_send_request_dhcp_header_1_1)
0070c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0070ca   0e80     movlw	0x80               	MOVLW	0x80
0070cc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0070ce   0e0a     movlw	0xa                	MOVLW	HIGH(_send_request_dhcp_header_length_1_1)
0070d0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0070d2   0efe     movlw	0xfe               	MOVLW	LOW(_send_request_dhcp_header_length_1_1)
0070d4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0070d6   0e80     movlw	0x80               	MOVLW	0x80
0070d8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0070da   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0070dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0070e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070e2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0070e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070e6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0070e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070ea   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0070ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070ee   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0070f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0070f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070f6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0070f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070fa   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0070fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070fe   ecf3     call	0x5be6, 0           	CALL	_build_dhcp_header
007100   f02d
007102   0e09     movlw	0x9                	MOVLW	0x09
007104   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	342; MainDemo.c	build_bootp(&bootp_header, socket_sendto_server);
007106   0e0a     movlw	0xa                	MOVLW	HIGH(_send_request_bootp_header_1_1)
007108   6e04     movwf	0x4, 0             	MOVWF	r0x04
00710a   0ec8     movlw	0xc8               	MOVLW	LOW(_send_request_bootp_header_1_1)
00710c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00710e   0e80     movlw	0x80               	MOVLW	0x80
007110   6e05     movwf	0x5, 0             	MOVWF	r0x05
007112   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007116   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00711a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00711c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00711e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007122   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007126   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007128   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00712a   ec15     call	0x3c2a, 0           	CALL	_build_bootp
00712c   f01e
00712e   0e06     movlw	0x6                	MOVLW	0x06
007130   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	343; MainDemo.c	request_msg(dhcp_header, dhcp_header_length);
007132   0e0a     movlw	0xa                	MOVLW	HIGH(_send_request_dhcp_header_1_1)
007134   6e01     movwf	0x1, 0             	MOVWF	r0x01
007136   0e00     movlw	0                  	MOVLW	LOW(_send_request_dhcp_header_1_1)
007138   6e00     movwf	0, 0               	MOVWF	r0x00
00713a   0e80     movlw	0x80               	MOVLW	0x80
00713c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00713e   cafe     movff	0xafe, 0x3         	MOVFF	_send_request_dhcp_header_length_1_1, r0x03
007140   f003
007142   caff     movff	0xaff, 0x4         	MOVFF	(_send_request_dhcp_header_length_1_1 + 1), r0x04
007144   f004
007146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00714a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00714c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00714e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007152   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007156   5000     movf	0, 0, 0             	MOVF	r0x00, W
007158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00715a   ec0a     call	0x6e14, 0           	CALL	_request_msg
00715c   f037
00715e   0e05     movlw	0x5                	MOVLW	0x05
007160   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007162   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
007164   f00b
007166   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
007168   f00a
00716a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00716c   f009
00716e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007170   f008
007172   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007174   f007
007176   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007178   f006
00717a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00717c   f005
00717e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007180   f004
007182   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007184   f003
007186   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007188   f002
00718a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00718c   f001
00718e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007190   f000
007192   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007194   ffd9
007196   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__build_dhcp_header	code
                                           _build_dhcp_header:
                                           ;	.line	314; MainDemo.c	void build_dhcp_header(BYTE *dhcp_header, unsigned int *dhcp_header_length, POOL_ELEMENT *pool_el){
005be6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005be8   ffe5
005bea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005bec   ffd9
005bee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005bf0   ffe5
005bf2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005bf4   ffe5
005bf6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005bf8   ffe5
005bfa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005bfc   ffe5
005bfe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005c00   ffe5
005c02   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005c04   ffe5
005c06   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005c08   ffe5
005c0a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005c0c   ffe5
005c0e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005c10   ffe5
005c12   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005c14   ffe5
005c16   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
005c18   ffe5
005c1a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
005c1c   ffe5
005c1e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
005c20   ffe5
005c22   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
005c24   ffe5
005c26   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
005c28   ffe5
005c2a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
005c2c   ffe5
005c2e   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
005c30   ffe5
005c32   0e02     movlw	0x2                	MOVLW	0x02
005c34   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005c36   f000
005c38   0e03     movlw	0x3                	MOVLW	0x03
005c3a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005c3c   f001
005c3e   0e04     movlw	0x4                	MOVLW	0x04
005c40   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005c42   f002
005c44   0e05     movlw	0x5                	MOVLW	0x05
005c46   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005c48   f003
005c4a   0e06     movlw	0x6                	MOVLW	0x06
005c4c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005c4e   f004
005c50   0e07     movlw	0x7                	MOVLW	0x07
005c52   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005c54   f005
005c56   0e08     movlw	0x8                	MOVLW	0x08
005c58   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
005c5a   f006
005c5c   0e09     movlw	0x9                	MOVLW	0x09
005c5e   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
005c60   f007
005c62   0e0a     movlw	0xa                	MOVLW	0x0a
005c64   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
005c66   f008
                                           ;	.line	317; MainDemo.c	dhcp_header[0] = DHCP_MESSAGE_TYPE;
005c68   0e35     movlw	0x35               	MOVLW	0x35
005c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c6c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005c6e   ffe9
005c70   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005c72   fff3
005c74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c76   ec28     call	0xbe50, 0           	CALL	__gptrput1
005c78   f05f
                                           ;	.line	318; MainDemo.c	dhcp_header[1] = DHCP_MESSAGE_TYPE_LEN;
005c7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c7c   0f01     addlw	0x1                	ADDLW	0x01
005c7e   6e09     movwf	0x9, 0             	MOVWF	r0x09
005c80   0e00     movlw	0                  	MOVLW	0x00
005c82   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005c84   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
005c86   0e00     movlw	0                  	MOVLW	0x00
005c88   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005c8a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005c8c   0e01     movlw	0x1                	MOVLW	0x01
005c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c90   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005c92   ffe9
005c94   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
005c96   fff3
005c98   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005c9a   ec28     call	0xbe50, 0           	CALL	__gptrput1
005c9c   f05f
                                           ;	.line	319; MainDemo.c	dhcp_header[2] = DHCP_REQUEST_MESSAGE;
005c9e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005ca0   0f02     addlw	0x2                	ADDLW	0x02
005ca2   6e09     movwf	0x9, 0             	MOVWF	r0x09
005ca4   0e00     movlw	0                  	MOVLW	0x00
005ca6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005ca8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
005caa   0e00     movlw	0                  	MOVLW	0x00
005cac   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005cae   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005cb0   0e03     movlw	0x3                	MOVLW	0x03
005cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cb4   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005cb6   ffe9
005cb8   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
005cba   fff3
005cbc   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005cbe   ec28     call	0xbe50, 0           	CALL	__gptrput1
005cc0   f05f
                                           ;	.line	321; MainDemo.c	dhcp_header[3] = DHCP_PARAM_REQUEST_IP_ADDRESS;
005cc2   5000     movf	0, 0, 0             	MOVF	r0x00, W
005cc4   0f03     addlw	0x3                	ADDLW	0x03
005cc6   6e09     movwf	0x9, 0             	MOVWF	r0x09
005cc8   0e00     movlw	0                  	MOVLW	0x00
005cca   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005ccc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
005cce   0e00     movlw	0                  	MOVLW	0x00
005cd0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005cd2   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005cd4   0e32     movlw	0x32               	MOVLW	0x32
005cd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cd8   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005cda   ffe9
005cdc   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
005cde   fff3
005ce0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005ce2   ec28     call	0xbe50, 0           	CALL	__gptrput1
005ce4   f05f
                                           ;	.line	322; MainDemo.c	dhcp_header[4] = DHCP_PARAM_REQUEST_IP_ADDRESS_LEN;
005ce6   5000     movf	0, 0, 0             	MOVF	r0x00, W
005ce8   0f04     addlw	0x4                	ADDLW	0x04
005cea   6e09     movwf	0x9, 0             	MOVWF	r0x09
005cec   0e00     movlw	0                  	MOVLW	0x00
005cee   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005cf0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
005cf2   0e00     movlw	0                  	MOVLW	0x00
005cf4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005cf6   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005cf8   0e04     movlw	0x4                	MOVLW	0x04
005cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cfc   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005cfe   ffe9
005d00   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
005d02   fff3
005d04   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005d06   ec28     call	0xbe50, 0           	CALL	__gptrput1
005d08   f05f
                                           ;	.line	323; MainDemo.c	for(i=5; i<9; i++){
005d0a   0e05     movlw	0x5                	MOVLW	0x05
005d0c   6e09     movwf	0x9, 0             	MOVWF	r0x09
005d0e   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           _00319_DS_:
005d10   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
005d12   0f80     addlw	0x80               	ADDLW	0x80
005d14   0f80     addlw	0x80               	ADDLW	0x80
005d16   e102     bnz	0x5d1c               	BNZ	_00328_DS_
005d18   0e09     movlw	0x9                	MOVLW	0x09
005d1a   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
                                           _00328_DS_:
005d1c   e22f     bc	0x5d7c                	BC	_00322_DS_
                                           ;	.line	324; MainDemo.c	dhcp_header[i] = pool_el->ip.v[i-5];
005d1e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005d20   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005d22   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
005d24   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
005d26   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005d28   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005d2a   6ae8     clrf	0xe8, 0             	CLRF	WREG
005d2c   be0a     btfsc	0xa, 0x7, 0        	BTFSC	r0x0a, 7
005d2e   68e8     setf	0xe8, 0             	SETF	WREG
005d30   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005d32   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
005d34   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005d36   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
005d38   0efb     movlw	0xfb               	MOVLW	0xfb
005d3a   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
005d3c   0e00     movlw	0                  	MOVLW	0x00
005d3e   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
005d40   0eff     movlw	0xff               	MOVLW	0xff
005d42   6e10     movwf	0x10, 0            	MOVWF	r0x10
005d44   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
005d46   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005d48   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
005d4a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005d4c   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
005d4e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005d50   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x10, F
005d52   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
005d54   ffe9
005d56   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
005d58   fff3
005d5a   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005d5c   ec55     call	0xbcaa, 0           	CALL	__gptrget1
005d5e   f05e
005d60   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
005d62   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
005d64   ffe5
005d66   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
005d68   ffe9
005d6a   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
005d6c   fff3
005d6e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005d70   ec28     call	0xbe50, 0           	CALL	__gptrput1
005d72   f05f
                                           ;	.line	323; MainDemo.c	for(i=5; i<9; i++){
005d74   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
005d76   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005d78   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
005d7a   d7ca     bra	0x5d10               	BRA	_00319_DS_
                                           _00322_DS_:
                                           ;	.line	327; MainDemo.c	dhcp_header[9] = DHCP_SERVER_IDENTIFIER;
005d7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d7e   0f09     addlw	0x9                	ADDLW	0x09
005d80   6e06     movwf	0x6, 0             	MOVWF	r0x06
005d82   0e00     movlw	0                  	MOVLW	0x00
005d84   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005d86   6e07     movwf	0x7, 0             	MOVWF	r0x07
005d88   0e00     movlw	0                  	MOVLW	0x00
005d8a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005d8c   6e08     movwf	0x8, 0             	MOVWF	r0x08
005d8e   0e36     movlw	0x36               	MOVLW	0x36
005d90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d92   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
005d94   ffe9
005d96   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005d98   fff3
005d9a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005d9c   ec28     call	0xbe50, 0           	CALL	__gptrput1
005d9e   f05f
                                           ;	.line	328; MainDemo.c	dhcp_header[10] = sizeof(IP_ADDR);
005da0   0e0a     movlw	0xa                	MOVLW	0x0a
005da2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005da4   0e00     movlw	0                  	MOVLW	0x00
005da6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005da8   0e00     movlw	0                  	MOVLW	0x00
005daa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005dac   0e04     movlw	0x4                	MOVLW	0x04
005dae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005db0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005db2   ffe9
005db4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005db6   fff3
005db8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005dba   ec28     call	0xbe50, 0           	CALL	__gptrput1
005dbc   f05f
                                           ;	.line	329; MainDemo.c	*dhcp_header_length = 15;
005dbe   0e0f     movlw	0xf                	MOVLW	0x0f
005dc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dc2   0e00     movlw	0                  	MOVLW	0x00
005dc4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
005dc6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005dc8   ffe9
005dca   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005dcc   fff3
005dce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005dd0   ec08     call	0xbe10, 0           	CALL	__gptrput2
005dd2   f05f
005dd4   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
005dd6   f010
005dd8   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
005dda   f00f
005ddc   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
005dde   f00e
005de0   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
005de2   f00d
005de4   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
005de6   f00c
005de8   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
005dea   f00b
005dec   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
005dee   f00a
005df0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005df2   f009
005df4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005df6   f008
005df8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005dfa   f007
005dfc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005dfe   f006
005e00   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005e02   f005
005e04   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005e06   f004
005e08   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005e0a   f003
005e0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005e0e   f002
005e10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005e12   f001
005e14   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005e16   f000
005e18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005e1a   ffd9
005e1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__time_action	code
                                           _time_action:
                                           ;	.line	295; MainDemo.c	void time_action(UDP_SOCKET *socket_sendto_server){
007198   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00719a   ffe5
00719c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00719e   ffd9
0071a0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0071a2   ffe5
0071a4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0071a6   ffe5
0071a8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0071aa   ffe5
0071ac   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0071ae   ffe5
0071b0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0071b2   ffe5
0071b4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0071b6   ffe5
0071b8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0071ba   ffe5
0071bc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0071be   ffe5
0071c0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0071c2   ffe5
0071c4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0071c6   ffe5
0071c8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0071ca   ffe5
0071cc   0e02     movlw	0x2                	MOVLW	0x02
0071ce   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0071d0   f000
0071d2   0e03     movlw	0x3                	MOVLW	0x03
0071d4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0071d6   f001
0071d8   0e04     movlw	0x4                	MOVLW	0x04
0071da   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0071dc   f002
                                           ;	.line	301; MainDemo.c	m = TickConvertToMilliseconds(TickGet());
0071de   ec44     call	0xbc88, 0           	CALL	_TickGet
0071e0   f05e
0071e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0071e4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0071e6   f004
0071e8   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0071ea   f005
0071ec   cfe9     movff	0xfe9, 0x6         	MOVFF	FSR0L, r0x06
0071ee   f006
0071f0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0071f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0071f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0071fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0071fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007200   ecb9     call	0xa972, 0           	CALL	_TickConvertToMilliseconds
007202   f054
007204   6e03     movwf	0x3, 0             	MOVWF	r0x03
007206   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007208   f004
00720a   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
00720c   f005
00720e   cfe9     movff	0xfe9, 0x6         	MOVFF	FSR0L, r0x06
007210   f006
007212   0e04     movlw	0x4                	MOVLW	0x04
007214   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007216   010e     movlb	0xe                	BANKSEL	_time_action_prev_1_1
                                           ;	.line	303; MainDemo.c	if (m-prev >= 1000 || m < prev) {
007218   5145     movf	0x45, 0, 0x1        	MOVF	_time_action_prev_1_1, W, B
00721a   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00721c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00721e   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 1)
007220   5146     movf	0x46, 0, 0x1        	MOVF	(_time_action_prev_1_1 + 1), W, B
007222   5804     subwfb	0x4, 0, 0         	SUBWFB	r0x04, W
007224   6e08     movwf	0x8, 0             	MOVWF	r0x08
007226   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 2)
007228   5147     movf	0x47, 0, 0x1        	MOVF	(_time_action_prev_1_1 + 2), W, B
00722a   5805     subwfb	0x5, 0, 0         	SUBWFB	r0x05, W
00722c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00722e   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 3)
007230   5148     movf	0x48, 0, 0x1        	MOVF	(_time_action_prev_1_1 + 3), W, B
007232   5806     subwfb	0x6, 0, 0         	SUBWFB	r0x06, W
007234   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
007236   0e00     movlw	0                  	MOVLW	0x00
007238   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
00723a   e108     bnz	0x724c               	BNZ	_00313_DS_
00723c   0e00     movlw	0                  	MOVLW	0x00
00723e   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
007240   e105     bnz	0x724c               	BNZ	_00313_DS_
007242   0e03     movlw	0x3                	MOVLW	0x03
007244   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
007246   e102     bnz	0x724c               	BNZ	_00313_DS_
007248   0ee8     movlw	0xe8               	MOVLW	0xe8
00724a   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
                                           _00313_DS_:
00724c   e211     bc	0x7270                	BC	_00306_DS_
00724e   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 3)
007250   5148     movf	0x48, 0, 0x1        	MOVF	(_time_action_prev_1_1 + 3), W, B
007252   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
007254   e10b     bnz	0x726c               	BNZ	_00314_DS_
007256   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 2)
007258   5147     movf	0x47, 0, 0x1        	MOVF	(_time_action_prev_1_1 + 2), W, B
00725a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00725c   e107     bnz	0x726c               	BNZ	_00314_DS_
00725e   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 1)
007260   5146     movf	0x46, 0, 0x1        	MOVF	(_time_action_prev_1_1 + 1), W, B
007262   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
007264   e103     bnz	0x726c               	BNZ	_00314_DS_
007266   010e     movlb	0xe                	BANKSEL	_time_action_prev_1_1
007268   5145     movf	0x45, 0, 0x1        	MOVF	_time_action_prev_1_1, W, B
00726a   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00314_DS_:
00726c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00726e   d059     bra	0x7322               	BRA	_00309_DS_
                                           _00306_DS_:
                                           ;	.line	304; MainDemo.c	prev += 1000;
007270   0ee8     movlw	0xe8               	MOVLW	0xe8
007272   010e     movlb	0xe                	BANKSEL	_time_action_prev_1_1
007274   2745     addwf	0x45, 0x1, 0x1     	ADDWF	_time_action_prev_1_1, F, B
007276   0e03     movlw	0x3                	MOVLW	0x03
007278   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 1)
00727a   2346     addwfc	0x46, 0x1, 0x1    	ADDWFC	(_time_action_prev_1_1 + 1), F, B
00727c   0e00     movlw	0                  	MOVLW	0x00
00727e   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 2)
007280   2347     addwfc	0x47, 0x1, 0x1    	ADDWFC	(_time_action_prev_1_1 + 2), F, B
007282   0e00     movlw	0                  	MOVLW	0x00
007284   010e     movlb	0xe                	BANKSEL	(_time_action_prev_1_1 + 3)
007286   2348     addwfc	0x48, 0x1, 0x1    	ADDWFC	(_time_action_prev_1_1 + 3), F, B
                                           ;	.line	305; MainDemo.c	LED0_IO ^= 1;
007288   6a03     clrf	0x3, 0              	CLRF	r0x03
00728a   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
00728c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00728e   0e01     movlw	0x1                	MOVLW	0x01
007290   1a03     xorwf	0x3, 0x1, 0        	XORWF	r0x03, F
007292   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007294   0b01     andlw	0x1                	ANDLW	0x01
007296   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
007298   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
00729a   0bfe     andlw	0xfe               	ANDLW	0xfe
00729c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00729e   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0072a0   010e     movlb	0xe                	BANKSEL	_time_action_count_1_1
                                           ;	.line	306; MainDemo.c	count++;
0072a2   2b4d     incf	0x4d, 0x1, 0x1      	INCF	_time_action_count_1_1, F, B
0072a4   e302     bnc	0x72aa               	BNC	_10768_DS_
0072a6   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 1)
0072a8   2b4e     incf	0x4e, 0x1, 0x1      	INCF	(_time_action_count_1_1 + 1), F, B
                                           _10768_DS_:
0072aa   e302     bnc	0x72b0               	BNC	_20769_DS_
0072ac   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 2)
0072ae   2b4f     incf	0x4f, 0x1, 0x1      	INCF	(_time_action_count_1_1 + 2), F, B
                                           _20769_DS_:
0072b0   e302     bnc	0x72b6               	BNC	_30770_DS_
0072b2   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 3)
0072b4   2b50     incf	0x50, 0x1, 0x1      	INCF	(_time_action_count_1_1 + 3), F, B
                                           _30770_DS_:
                                           ;	.line	307; MainDemo.c	if(count%OVERFLOW_TIME == 0){
0072b6   0e00     movlw	0                  	MOVLW	0x00
0072b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072ba   0e00     movlw	0                  	MOVLW	0x00
0072bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072be   0e00     movlw	0                  	MOVLW	0x00
0072c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072c2   0e3d     movlw	0x3d               	MOVLW	0x3d
0072c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072c6   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 3)
0072c8   5150     movf	0x50, 0, 0x1        	MOVF	(_time_action_count_1_1 + 3), W, B
0072ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072cc   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 2)
0072ce   514f     movf	0x4f, 0, 0x1        	MOVF	(_time_action_count_1_1 + 2), W, B
0072d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072d2   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 1)
0072d4   514e     movf	0x4e, 0, 0x1        	MOVF	(_time_action_count_1_1 + 1), W, B
0072d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072d8   010e     movlb	0xe                	BANKSEL	_time_action_count_1_1
0072da   514d     movf	0x4d, 0, 0x1        	MOVF	_time_action_count_1_1, W, B
0072dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072de   ecf5     call	0x87ea, 0           	CALL	__modulong
0072e0   f043
0072e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0072e4   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0072e6   f004
0072e8   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0072ea   f005
0072ec   cfe9     movff	0xfe9, 0x6         	MOVFF	FSR0L, r0x06
0072ee   f006
0072f0   0e08     movlw	0x8                	MOVLW	0x08
0072f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0072f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0072f6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0072f8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0072fa   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0072fc   e112     bnz	0x7322               	BNZ	_00309_DS_
                                           ;	.line	308; MainDemo.c	update_pool(socket_sendto_server);
0072fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007300   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007302   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007304   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007306   5000     movf	0, 0, 0             	MOVF	r0x00, W
007308   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00730a   ecef     call	0x21de, 0           	CALL	_update_pool
00730c   f010
00730e   0e03     movlw	0x3                	MOVLW	0x03
007310   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007312   010e     movlb	0xe                	BANKSEL	_time_action_count_1_1
                                           ;	.line	309; MainDemo.c	count = 0;
007314   6b4d     clrf	0x4d, 0x1           	CLRF	_time_action_count_1_1, B
007316   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 1)
007318   6b4e     clrf	0x4e, 0x1           	CLRF	(_time_action_count_1_1 + 1), B
00731a   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 2)
00731c   6b4f     clrf	0x4f, 0x1           	CLRF	(_time_action_count_1_1 + 2), B
00731e   010e     movlb	0xe                	BANKSEL	(_time_action_count_1_1 + 3)
007320   6b50     clrf	0x50, 0x1           	CLRF	(_time_action_count_1_1 + 3), B
                                           _00309_DS_:
007322   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
007324   f00a
007326   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007328   f009
00732a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00732c   f008
00732e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007330   f007
007332   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007334   f006
007336   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007338   f005
00733a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00733c   f004
00733e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007340   f003
007342   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007344   f002
007346   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007348   f001
00734a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00734c   f000
00734e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007350   ffd9
007352   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__ip_cmp	code
                                           _ip_cmp:
                                           ;	.line	285; MainDemo.c	BOOL ip_cmp(IP_ADDR *ip1, IP_ADDR *ip2){
008fa6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008fa8   ffe5
008faa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008fac   ffd9
008fae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008fb0   ffe5
008fb2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008fb4   ffe5
008fb6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008fb8   ffe5
008fba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008fbc   ffe5
008fbe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008fc0   ffe5
008fc2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008fc4   ffe5
008fc6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
008fc8   ffe5
008fca   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008fcc   ffe5
008fce   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
008fd0   ffe5
008fd2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
008fd4   ffe5
008fd6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
008fd8   ffe5
008fda   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
008fdc   ffe5
008fde   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
008fe0   ffe5
008fe2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
008fe4   ffe5
008fe6   0e02     movlw	0x2                	MOVLW	0x02
008fe8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008fea   f000
008fec   0e03     movlw	0x3                	MOVLW	0x03
008fee   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008ff0   f001
008ff2   0e04     movlw	0x4                	MOVLW	0x04
008ff4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008ff6   f002
008ff8   0e05     movlw	0x5                	MOVLW	0x05
008ffa   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008ffc   f003
008ffe   0e06     movlw	0x6                	MOVLW	0x06
009000   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009002   f004
009004   0e07     movlw	0x7                	MOVLW	0x07
009006   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
009008   f005
                                           ;	.line	287; MainDemo.c	for(i=0; i<4; i++){
00900a   6a06     clrf	0x6, 0              	CLRF	r0x06
00900c   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00288_DS_:
00900e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009010   0f80     addlw	0x80               	ADDLW	0x80
009012   0f80     addlw	0x80               	ADDLW	0x80
009014   e102     bnz	0x901a               	BNZ	_00297_DS_
009016   0e04     movlw	0x4                	MOVLW	0x04
009018   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00297_DS_:
00901a   e22f     bc	0x907a                	BC	_00291_DS_
                                           ;	.line	288; MainDemo.c	if(ip1->v[i] != ip2->v[i]){
00901c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00901e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
009020   6e08     movwf	0x8, 0             	MOVWF	r0x08
009022   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009024   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
009026   6e09     movwf	0x9, 0             	MOVWF	r0x09
009028   6ae8     clrf	0xe8, 0             	CLRF	WREG
00902a   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
00902c   68e8     setf	0xe8, 0             	SETF	WREG
00902e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
009030   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
009032   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009034   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
009036   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
009038   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00903a   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00903c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00903e   6ae8     clrf	0xe8, 0             	CLRF	WREG
009040   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
009042   68e8     setf	0xe8, 0             	SETF	WREG
009044   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
009046   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
009048   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00904a   ffe9
00904c   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00904e   fff3
009050   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
009052   ec55     call	0xbcaa, 0           	CALL	__gptrget1
009054   f05e
009056   6e08     movwf	0x8, 0             	MOVWF	r0x08
009058   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00905a   ffe9
00905c   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00905e   fff3
009060   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
009062   ec55     call	0xbcaa, 0           	CALL	__gptrget1
009064   f05e
009066   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
009068   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00906a   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
00906c   e002     bz	0x9072                	BZ	_00290_DS_
                                           ;	.line	289; MainDemo.c	return FALSE;
00906e   6ae8     clrf	0xe8, 0             	CLRF	WREG
009070   d005     bra	0x907c               	BRA	_00292_DS_
                                           _00290_DS_:
                                           ;	.line	287; MainDemo.c	for(i=0; i<4; i++){
009072   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
009074   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009076   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
009078   d7ca     bra	0x900e               	BRA	_00288_DS_
                                           _00291_DS_:
                                           ;	.line	292; MainDemo.c	return TRUE;
00907a   0e01     movlw	0x1                	MOVLW	0x01
                                           _00292_DS_:
00907c   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00907e   f00d
009080   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
009082   f00c
009084   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
009086   f00b
009088   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00908a   f00a
00908c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00908e   f009
009090   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
009092   f008
009094   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009096   f007
009098   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00909a   f006
00909c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00909e   f005
0090a0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0090a2   f004
0090a4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0090a6   f003
0090a8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0090aa   f002
0090ac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0090ae   f001
0090b0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0090b2   f000
0090b4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0090b6   ffd9
0090b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__mac_cmp	code
                                           _mac_cmp:
                                           ;	.line	275; MainDemo.c	BOOL mac_cmp(MAC_ADDR *m1, MAC_ADDR *m2){
0090ba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0090bc   ffe5
0090be   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0090c0   ffd9
0090c2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0090c4   ffe5
0090c6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0090c8   ffe5
0090ca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0090cc   ffe5
0090ce   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0090d0   ffe5
0090d2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0090d4   ffe5
0090d6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0090d8   ffe5
0090da   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0090dc   ffe5
0090de   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0090e0   ffe5
0090e2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0090e4   ffe5
0090e6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0090e8   ffe5
0090ea   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0090ec   ffe5
0090ee   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0090f0   ffe5
0090f2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0090f4   ffe5
0090f6   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0090f8   ffe5
0090fa   0e02     movlw	0x2                	MOVLW	0x02
0090fc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0090fe   f000
009100   0e03     movlw	0x3                	MOVLW	0x03
009102   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009104   f001
009106   0e04     movlw	0x4                	MOVLW	0x04
009108   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00910a   f002
00910c   0e05     movlw	0x5                	MOVLW	0x05
00910e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009110   f003
009112   0e06     movlw	0x6                	MOVLW	0x06
009114   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009116   f004
009118   0e07     movlw	0x7                	MOVLW	0x07
00911a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00911c   f005
                                           ;	.line	277; MainDemo.c	for(i=0; i<6; i++){
00911e   6a06     clrf	0x6, 0              	CLRF	r0x06
009120   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00270_DS_:
009122   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009124   0f80     addlw	0x80               	ADDLW	0x80
009126   0f80     addlw	0x80               	ADDLW	0x80
009128   e102     bnz	0x912e               	BNZ	_00279_DS_
00912a   0e06     movlw	0x6                	MOVLW	0x06
00912c   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00279_DS_:
00912e   e22f     bc	0x918e                	BC	_00273_DS_
                                           ;	.line	278; MainDemo.c	if(m1->v[i] != m2->v[i]){
009130   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009132   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
009134   6e08     movwf	0x8, 0             	MOVWF	r0x08
009136   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009138   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00913a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00913c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00913e   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
009140   68e8     setf	0xe8, 0             	SETF	WREG
009142   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
009144   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
009146   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009148   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
00914a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00914c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00914e   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
009150   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
009152   6ae8     clrf	0xe8, 0             	CLRF	WREG
009154   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
009156   68e8     setf	0xe8, 0             	SETF	WREG
009158   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00915a   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00915c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00915e   ffe9
009160   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
009162   fff3
009164   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
009166   ec55     call	0xbcaa, 0           	CALL	__gptrget1
009168   f05e
00916a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00916c   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00916e   ffe9
009170   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
009172   fff3
009174   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
009176   ec55     call	0xbcaa, 0           	CALL	__gptrget1
009178   f05e
00917a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00917c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00917e   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
009180   e002     bz	0x9186                	BZ	_00272_DS_
                                           ;	.line	279; MainDemo.c	return FALSE;
009182   6ae8     clrf	0xe8, 0             	CLRF	WREG
009184   d005     bra	0x9190               	BRA	_00274_DS_
                                           _00272_DS_:
                                           ;	.line	277; MainDemo.c	for(i=0; i<6; i++){
009186   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
009188   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00918a   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00918c   d7ca     bra	0x9122               	BRA	_00270_DS_
                                           _00273_DS_:
                                           ;	.line	282; MainDemo.c	return TRUE;
00918e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00274_DS_:
009190   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
009192   f00d
009194   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
009196   f00c
009198   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00919a   f00b
00919c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00919e   f00a
0091a0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0091a2   f009
0091a4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0091a6   f008
0091a8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0091aa   f007
0091ac   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0091ae   f006
0091b0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0091b2   f005
0091b4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0091b6   f004
0091b8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0091ba   f003
0091bc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0091be   f002
0091c0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0091c2   f001
0091c4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0091c6   f000
0091c8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0091ca   ffd9
0091cc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__display_ip	code
                                           _display_ip:
                                           ;	.line	262; MainDemo.c	void display_ip(unsigned int pos, IP_ADDR *ip){
005e1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005e20   ffe5
005e22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005e24   ffd9
005e26   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005e28   ffe5
005e2a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005e2c   ffe5
005e2e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005e30   ffe5
005e32   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005e34   ffe5
005e36   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005e38   ffe5
005e3a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005e3c   ffe5
005e3e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005e40   ffe5
005e42   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005e44   ffe5
005e46   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005e48   ffe5
005e4a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005e4c   ffe5
005e4e   0e02     movlw	0x2                	MOVLW	0x02
005e50   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005e52   f000
005e54   0e03     movlw	0x3                	MOVLW	0x03
005e56   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005e58   f001
005e5a   0e04     movlw	0x4                	MOVLW	0x04
005e5c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005e5e   f002
005e60   0e05     movlw	0x5                	MOVLW	0x05
005e62   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005e64   f003
005e66   0e06     movlw	0x6                	MOVLW	0x06
005e68   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005e6a   f004
                                           ;	.line	264; MainDemo.c	int_to_string(ip->v[0], a);
005e6c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005e6e   ffe9
005e70   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
005e72   fff3
005e74   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005e76   ec55     call	0xbcaa, 0           	CALL	__gptrget1
005e78   f05e
005e7a   6e05     movwf	0x5, 0             	MOVWF	r0x05
005e7c   6a06     clrf	0x6, 0              	CLRF	r0x06
005e7e   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_a_1_1)
005e80   6e08     movwf	0x8, 0             	MOVWF	r0x08
005e82   0e8c     movlw	0x8c               	MOVLW	LOW(_display_ip_a_1_1)
005e84   6e07     movwf	0x7, 0             	MOVWF	r0x07
005e86   0e80     movlw	0x80               	MOVLW	0x80
005e88   6e09     movwf	0x9, 0             	MOVWF	r0x09
005e8a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e8e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e92   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e96   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005e98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e9a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005e9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e9e   ec6f     call	0x92de, 0           	CALL	_int_to_string
005ea0   f049
005ea2   0e05     movlw	0x5                	MOVLW	0x05
005ea4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	265; MainDemo.c	int_to_string(ip->v[1], b);
005ea6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005ea8   0f01     addlw	0x1                	ADDLW	0x01
005eaa   6e05     movwf	0x5, 0             	MOVWF	r0x05
005eac   0e00     movlw	0                  	MOVLW	0x00
005eae   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
005eb0   6e06     movwf	0x6, 0             	MOVWF	r0x06
005eb2   0e00     movlw	0                  	MOVLW	0x00
005eb4   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
005eb6   6e07     movwf	0x7, 0             	MOVWF	r0x07
005eb8   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
005eba   ffe9
005ebc   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
005ebe   fff3
005ec0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005ec2   ec55     call	0xbcaa, 0           	CALL	__gptrget1
005ec4   f05e
005ec6   6e05     movwf	0x5, 0             	MOVWF	r0x05
005ec8   6a06     clrf	0x6, 0              	CLRF	r0x06
005eca   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_b_1_1)
005ecc   6e08     movwf	0x8, 0             	MOVWF	r0x08
005ece   0e96     movlw	0x96               	MOVLW	LOW(_display_ip_b_1_1)
005ed0   6e07     movwf	0x7, 0             	MOVWF	r0x07
005ed2   0e80     movlw	0x80               	MOVLW	0x80
005ed4   6e09     movwf	0x9, 0             	MOVWF	r0x09
005ed6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005ed8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eda   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ede   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ee2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005ee4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ee6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005ee8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005eea   ec6f     call	0x92de, 0           	CALL	_int_to_string
005eec   f049
005eee   0e05     movlw	0x5                	MOVLW	0x05
005ef0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	266; MainDemo.c	int_to_string(ip->v[2], c);
005ef2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005ef4   0f02     addlw	0x2                	ADDLW	0x02
005ef6   6e05     movwf	0x5, 0             	MOVWF	r0x05
005ef8   0e00     movlw	0                  	MOVLW	0x00
005efa   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
005efc   6e06     movwf	0x6, 0             	MOVWF	r0x06
005efe   0e00     movlw	0                  	MOVLW	0x00
005f00   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
005f02   6e07     movwf	0x7, 0             	MOVWF	r0x07
005f04   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
005f06   ffe9
005f08   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
005f0a   fff3
005f0c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005f0e   ec55     call	0xbcaa, 0           	CALL	__gptrget1
005f10   f05e
005f12   6e05     movwf	0x5, 0             	MOVWF	r0x05
005f14   6a06     clrf	0x6, 0              	CLRF	r0x06
005f16   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_c_1_1)
005f18   6e08     movwf	0x8, 0             	MOVWF	r0x08
005f1a   0ea0     movlw	0xa0               	MOVLW	LOW(_display_ip_c_1_1)
005f1c   6e07     movwf	0x7, 0             	MOVWF	r0x07
005f1e   0e80     movlw	0x80               	MOVLW	0x80
005f20   6e09     movwf	0x9, 0             	MOVWF	r0x09
005f22   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005f24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f26   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005f28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f2a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f2e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005f30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f32   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005f34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f36   ec6f     call	0x92de, 0           	CALL	_int_to_string
005f38   f049
005f3a   0e05     movlw	0x5                	MOVLW	0x05
005f3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	267; MainDemo.c	int_to_string(ip->v[3], d);
005f3e   0e03     movlw	0x3                	MOVLW	0x03
005f40   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
005f42   0e00     movlw	0                  	MOVLW	0x00
005f44   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005f46   0e00     movlw	0                  	MOVLW	0x00
005f48   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005f4a   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005f4c   ffe9
005f4e   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
005f50   fff3
005f52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005f54   ec55     call	0xbcaa, 0           	CALL	__gptrget1
005f56   f05e
005f58   6e02     movwf	0x2, 0             	MOVWF	r0x02
005f5a   6a03     clrf	0x3, 0              	CLRF	r0x03
005f5c   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_d_1_1)
005f5e   6e05     movwf	0x5, 0             	MOVWF	r0x05
005f60   0eaa     movlw	0xaa               	MOVLW	LOW(_display_ip_d_1_1)
005f62   6e04     movwf	0x4, 0             	MOVWF	r0x04
005f64   0e80     movlw	0x80               	MOVLW	0x80
005f66   6e06     movwf	0x6, 0             	MOVWF	r0x06
005f68   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005f6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f6c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005f6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005f72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005f76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005f7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f7c   ec6f     call	0x92de, 0           	CALL	_int_to_string
005f7e   f049
005f80   0e05     movlw	0x5                	MOVLW	0x05
005f82   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; MainDemo.c	DisplayString(pos, a);
005f84   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_a_1_1)
005f86   6e02     movwf	0x2, 0             	MOVWF	r0x02
005f88   0e8c     movlw	0x8c               	MOVLW	LOW(_display_ip_a_1_1)
005f8a   6e01     movwf	0x1, 0             	MOVWF	r0x01
005f8c   0e80     movlw	0x80               	MOVLW	0x80
005f8e   6e03     movwf	0x3, 0             	MOVWF	r0x03
005f90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005f92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005f9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f9c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005f9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fa0   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
005fa2   f050
005fa4   0e04     movlw	0x4                	MOVLW	0x04
005fa6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; MainDemo.c	DisplayString(pos+4, b);
005fa8   0e04     movlw	0x4                	MOVLW	0x04
005faa   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005fac   6e01     movwf	0x1, 0             	MOVWF	r0x01
005fae   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_b_1_1)
005fb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
005fb2   0e96     movlw	0x96               	MOVLW	LOW(_display_ip_b_1_1)
005fb4   6e02     movwf	0x2, 0             	MOVWF	r0x02
005fb6   0e80     movlw	0x80               	MOVLW	0x80
005fb8   6e04     movwf	0x4, 0             	MOVWF	r0x04
005fba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005fbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005fc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005fc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fc6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005fc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fca   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
005fcc   f050
005fce   0e04     movlw	0x4                	MOVLW	0x04
005fd0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	271; MainDemo.c	DisplayString(pos+8, c);
005fd2   0e08     movlw	0x8                	MOVLW	0x08
005fd4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005fd6   6e01     movwf	0x1, 0             	MOVWF	r0x01
005fd8   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_c_1_1)
005fda   6e03     movwf	0x3, 0             	MOVWF	r0x03
005fdc   0ea0     movlw	0xa0               	MOVLW	LOW(_display_ip_c_1_1)
005fde   6e02     movwf	0x2, 0             	MOVWF	r0x02
005fe0   0e80     movlw	0x80               	MOVLW	0x80
005fe2   6e04     movwf	0x4, 0             	MOVWF	r0x04
005fe4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fe8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ff0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ff4   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
005ff6   f050
005ff8   0e04     movlw	0x4                	MOVLW	0x04
005ffa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	272; MainDemo.c	DisplayString(pos+12, d);
005ffc   0e0c     movlw	0xc                	MOVLW	0x0c
005ffe   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006000   0e0b     movlw	0xb                	MOVLW	HIGH(_display_ip_d_1_1)
006002   6e02     movwf	0x2, 0             	MOVWF	r0x02
006004   0eaa     movlw	0xaa               	MOVLW	LOW(_display_ip_d_1_1)
006006   6e01     movwf	0x1, 0             	MOVWF	r0x01
006008   0e80     movlw	0x80               	MOVLW	0x80
00600a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00600c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00600e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006010   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006014   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006018   5000     movf	0, 0, 0             	MOVF	r0x00, W
00601a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00601c   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00601e   f050
006020   0e04     movlw	0x4                	MOVLW	0x04
006022   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006024   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006026   f009
006028   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00602a   f008
00602c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00602e   f007
006030   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006032   f006
006034   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006036   f005
006038   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00603a   f004
00603c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00603e   f003
006040   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006042   f002
006044   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006046   f001
006048   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00604a   f000
00604c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00604e   ffd9
006050   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__display_mac	code
                                           _display_mac:
                                           ;	.line	245; MainDemo.c	void display_mac(unsigned int pos, MAC_ADDR *mac){
0035ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0035f0   ffe5
0035f2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0035f4   ffd9
0035f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0035f8   ffe5
0035fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0035fc   ffe5
0035fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003600   ffe5
003602   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003604   ffe5
003606   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003608   ffe5
00360a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00360c   ffe5
00360e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003610   ffe5
003612   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003614   ffe5
003616   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003618   ffe5
00361a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00361c   ffe5
00361e   0e02     movlw	0x2                	MOVLW	0x02
003620   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003622   f000
003624   0e03     movlw	0x3                	MOVLW	0x03
003626   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003628   f001
00362a   0e04     movlw	0x4                	MOVLW	0x04
00362c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00362e   f002
003630   0e05     movlw	0x5                	MOVLW	0x05
003632   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003634   f003
003636   0e06     movlw	0x6                	MOVLW	0x06
003638   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00363a   f004
                                           ;	.line	247; MainDemo.c	int_to_string(mac->v[0], a);
00363c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00363e   ffe9
003640   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
003642   fff3
003644   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003646   ec55     call	0xbcaa, 0           	CALL	__gptrget1
003648   f05e
00364a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00364c   6a06     clrf	0x6, 0              	CLRF	r0x06
00364e   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_a_1_1)
003650   6e08     movwf	0x8, 0             	MOVWF	r0x08
003652   0e50     movlw	0x50               	MOVLW	LOW(_display_mac_a_1_1)
003654   6e07     movwf	0x7, 0             	MOVWF	r0x07
003656   0e80     movlw	0x80               	MOVLW	0x80
003658   6e09     movwf	0x9, 0             	MOVWF	r0x09
00365a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00365c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00365e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003660   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003662   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003664   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003666   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00366a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00366c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00366e   ec6f     call	0x92de, 0           	CALL	_int_to_string
003670   f049
003672   0e05     movlw	0x5                	MOVLW	0x05
003674   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	248; MainDemo.c	int_to_string(mac->v[1], b);
003676   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003678   0f01     addlw	0x1                	ADDLW	0x01
00367a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00367c   0e00     movlw	0                  	MOVLW	0x00
00367e   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
003680   6e06     movwf	0x6, 0             	MOVWF	r0x06
003682   0e00     movlw	0                  	MOVLW	0x00
003684   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
003686   6e07     movwf	0x7, 0             	MOVWF	r0x07
003688   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00368a   ffe9
00368c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00368e   fff3
003690   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003692   ec55     call	0xbcaa, 0           	CALL	__gptrget1
003694   f05e
003696   6e05     movwf	0x5, 0             	MOVWF	r0x05
003698   6a06     clrf	0x6, 0              	CLRF	r0x06
00369a   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_b_1_1)
00369c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00369e   0e5a     movlw	0x5a               	MOVLW	LOW(_display_mac_b_1_1)
0036a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0036a2   0e80     movlw	0x80               	MOVLW	0x80
0036a4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0036a6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0036a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036aa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0036ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036ae   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0036b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036b2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0036b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036b6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0036b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036ba   ec6f     call	0x92de, 0           	CALL	_int_to_string
0036bc   f049
0036be   0e05     movlw	0x5                	MOVLW	0x05
0036c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	249; MainDemo.c	int_to_string(mac->v[2], c);
0036c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0036c4   0f02     addlw	0x2                	ADDLW	0x02
0036c6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0036c8   0e00     movlw	0                  	MOVLW	0x00
0036ca   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
0036cc   6e06     movwf	0x6, 0             	MOVWF	r0x06
0036ce   0e00     movlw	0                  	MOVLW	0x00
0036d0   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0036d2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0036d4   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0036d6   ffe9
0036d8   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0036da   fff3
0036dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0036de   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0036e0   f05e
0036e2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0036e4   6a06     clrf	0x6, 0              	CLRF	r0x06
0036e6   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_c_1_1)
0036e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0036ea   0e64     movlw	0x64               	MOVLW	LOW(_display_mac_c_1_1)
0036ec   6e07     movwf	0x7, 0             	MOVWF	r0x07
0036ee   0e80     movlw	0x80               	MOVLW	0x80
0036f0   6e09     movwf	0x9, 0             	MOVWF	r0x09
0036f2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0036f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036f6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0036f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0036fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036fe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003702   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003706   ec6f     call	0x92de, 0           	CALL	_int_to_string
003708   f049
00370a   0e05     movlw	0x5                	MOVLW	0x05
00370c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	250; MainDemo.c	int_to_string(mac->v[3], d);
00370e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003710   0f03     addlw	0x3                	ADDLW	0x03
003712   6e05     movwf	0x5, 0             	MOVWF	r0x05
003714   0e00     movlw	0                  	MOVLW	0x00
003716   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
003718   6e06     movwf	0x6, 0             	MOVWF	r0x06
00371a   0e00     movlw	0                  	MOVLW	0x00
00371c   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00371e   6e07     movwf	0x7, 0             	MOVWF	r0x07
003720   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
003722   ffe9
003724   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
003726   fff3
003728   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00372a   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00372c   f05e
00372e   6e05     movwf	0x5, 0             	MOVWF	r0x05
003730   6a06     clrf	0x6, 0              	CLRF	r0x06
003732   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_d_1_1)
003734   6e08     movwf	0x8, 0             	MOVWF	r0x08
003736   0e6e     movlw	0x6e               	MOVLW	LOW(_display_mac_d_1_1)
003738   6e07     movwf	0x7, 0             	MOVWF	r0x07
00373a   0e80     movlw	0x80               	MOVLW	0x80
00373c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00373e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003742   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003746   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00374a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00374c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00374e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003752   ec6f     call	0x92de, 0           	CALL	_int_to_string
003754   f049
003756   0e05     movlw	0x5                	MOVLW	0x05
003758   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	251; MainDemo.c	int_to_string(mac->v[4], e);
00375a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00375c   0f04     addlw	0x4                	ADDLW	0x04
00375e   6e05     movwf	0x5, 0             	MOVWF	r0x05
003760   0e00     movlw	0                  	MOVLW	0x00
003762   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
003764   6e06     movwf	0x6, 0             	MOVWF	r0x06
003766   0e00     movlw	0                  	MOVLW	0x00
003768   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00376a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00376c   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00376e   ffe9
003770   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
003772   fff3
003774   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003776   ec55     call	0xbcaa, 0           	CALL	__gptrget1
003778   f05e
00377a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00377c   6a06     clrf	0x6, 0              	CLRF	r0x06
00377e   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_e_1_1)
003780   6e08     movwf	0x8, 0             	MOVWF	r0x08
003782   0e78     movlw	0x78               	MOVLW	LOW(_display_mac_e_1_1)
003784   6e07     movwf	0x7, 0             	MOVWF	r0x07
003786   0e80     movlw	0x80               	MOVLW	0x80
003788   6e09     movwf	0x9, 0             	MOVWF	r0x09
00378a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00378c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00378e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003790   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003792   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003796   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00379a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00379c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00379e   ec6f     call	0x92de, 0           	CALL	_int_to_string
0037a0   f049
0037a2   0e05     movlw	0x5                	MOVLW	0x05
0037a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	252; MainDemo.c	int_to_string(mac->v[5], f);
0037a6   0e05     movlw	0x5                	MOVLW	0x05
0037a8   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0037aa   0e00     movlw	0                  	MOVLW	0x00
0037ac   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0037ae   0e00     movlw	0                  	MOVLW	0x00
0037b0   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0037b2   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0037b4   ffe9
0037b6   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
0037b8   fff3
0037ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0037bc   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0037be   f05e
0037c0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0037c2   6a03     clrf	0x3, 0              	CLRF	r0x03
0037c4   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_f_1_1)
0037c6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0037c8   0e82     movlw	0x82               	MOVLW	LOW(_display_mac_f_1_1)
0037ca   6e04     movwf	0x4, 0             	MOVWF	r0x04
0037cc   0e80     movlw	0x80               	MOVLW	0x80
0037ce   6e06     movwf	0x6, 0             	MOVWF	r0x06
0037d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0037d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0037d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0037da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0037de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0037e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037e4   ec6f     call	0x92de, 0           	CALL	_int_to_string
0037e6   f049
0037e8   0e05     movlw	0x5                	MOVLW	0x05
0037ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	254; MainDemo.c	DisplayString(pos, a);
0037ec   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_a_1_1)
0037ee   6e02     movwf	0x2, 0             	MOVWF	r0x02
0037f0   0e50     movlw	0x50               	MOVLW	LOW(_display_mac_a_1_1)
0037f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0037f4   0e80     movlw	0x80               	MOVLW	0x80
0037f6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0037f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0037fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0037fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003800   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003804   5000     movf	0, 0, 0             	MOVF	r0x00, W
003806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003808   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00380a   f050
00380c   0e04     movlw	0x4                	MOVLW	0x04
00380e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	255; MainDemo.c	DisplayString(pos+4, b);
003810   0e04     movlw	0x4                	MOVLW	0x04
003812   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
003814   6e01     movwf	0x1, 0             	MOVWF	r0x01
003816   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_b_1_1)
003818   6e03     movwf	0x3, 0             	MOVWF	r0x03
00381a   0e5a     movlw	0x5a               	MOVLW	LOW(_display_mac_b_1_1)
00381c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00381e   0e80     movlw	0x80               	MOVLW	0x80
003820   6e04     movwf	0x4, 0             	MOVWF	r0x04
003822   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003824   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003826   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003828   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00382a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00382c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00382e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003830   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003832   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
003834   f050
003836   0e04     movlw	0x4                	MOVLW	0x04
003838   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	256; MainDemo.c	DisplayString(pos+8, c);
00383a   0e08     movlw	0x8                	MOVLW	0x08
00383c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00383e   6e01     movwf	0x1, 0             	MOVWF	r0x01
003840   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_c_1_1)
003842   6e03     movwf	0x3, 0             	MOVWF	r0x03
003844   0e64     movlw	0x64               	MOVLW	LOW(_display_mac_c_1_1)
003846   6e02     movwf	0x2, 0             	MOVWF	r0x02
003848   0e80     movlw	0x80               	MOVLW	0x80
00384a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00384c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00384e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003850   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003852   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003854   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003858   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00385a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00385c   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
00385e   f050
003860   0e04     movlw	0x4                	MOVLW	0x04
003862   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	257; MainDemo.c	DisplayString(pos+12, d);
003864   0e0c     movlw	0xc                	MOVLW	0x0c
003866   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
003868   6e01     movwf	0x1, 0             	MOVWF	r0x01
00386a   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_d_1_1)
00386c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00386e   0e6e     movlw	0x6e               	MOVLW	LOW(_display_mac_d_1_1)
003870   6e02     movwf	0x2, 0             	MOVWF	r0x02
003872   0e80     movlw	0x80               	MOVLW	0x80
003874   6e04     movwf	0x4, 0             	MOVWF	r0x04
003876   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003878   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00387a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00387c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00387e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003880   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003882   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003886   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
003888   f050
00388a   0e04     movlw	0x4                	MOVLW	0x04
00388c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	258; MainDemo.c	DisplayString(pos+16, e);
00388e   0e10     movlw	0x10               	MOVLW	0x10
003890   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
003892   6e01     movwf	0x1, 0             	MOVWF	r0x01
003894   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_e_1_1)
003896   6e03     movwf	0x3, 0             	MOVWF	r0x03
003898   0e78     movlw	0x78               	MOVLW	LOW(_display_mac_e_1_1)
00389a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00389c   0e80     movlw	0x80               	MOVLW	0x80
00389e   6e04     movwf	0x4, 0             	MOVWF	r0x04
0038a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0038a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0038a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0038aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0038ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038b0   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
0038b2   f050
0038b4   0e04     movlw	0x4                	MOVLW	0x04
0038b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	259; MainDemo.c	DisplayString(pos+20, f);
0038b8   0e14     movlw	0x14               	MOVLW	0x14
0038ba   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0038bc   0e0b     movlw	0xb                	MOVLW	HIGH(_display_mac_f_1_1)
0038be   6e02     movwf	0x2, 0             	MOVWF	r0x02
0038c0   0e82     movlw	0x82               	MOVLW	LOW(_display_mac_f_1_1)
0038c2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0038c4   0e80     movlw	0x80               	MOVLW	0x80
0038c6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0038c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0038ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0038ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0038d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0038d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038d8   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
0038da   f050
0038dc   0e04     movlw	0x4                	MOVLW	0x04
0038de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0038e0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0038e2   f009
0038e4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0038e6   f008
0038e8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0038ea   f007
0038ec   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0038ee   f006
0038f0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0038f2   f005
0038f4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0038f6   f004
0038f8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0038fa   f003
0038fc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0038fe   f002
003900   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003902   f001
003904   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003906   f000
003908   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00390a   ffd9
00390c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__int_to_string	code
                                           _int_to_string:
                                           ;	.line	234; MainDemo.c	void int_to_string(int value, char *r){
0092de   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0092e0   ffe5
0092e2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0092e4   ffd9
0092e6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0092e8   ffe5
0092ea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0092ec   ffe5
0092ee   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0092f0   ffe5
0092f2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0092f4   ffe5
0092f6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0092f8   ffe5
0092fa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0092fc   ffe5
0092fe   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009300   ffe5
009302   0e02     movlw	0x2                	MOVLW	0x02
009304   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009306   f000
009308   0e03     movlw	0x3                	MOVLW	0x03
00930a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00930c   f001
00930e   0e04     movlw	0x4                	MOVLW	0x04
009310   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009312   f002
009314   0e05     movlw	0x5                	MOVLW	0x05
009316   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009318   f003
00931a   0e06     movlw	0x6                	MOVLW	0x06
00931c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00931e   f004
                                           ;	.line	235; MainDemo.c	char *p = r+number_of_char(value);
009320   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009322   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009324   5000     movf	0, 0, 0             	MOVF	r0x00, W
009326   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009328   ec28     call	0xb450, 0           	CALL	_number_of_char
00932a   f05a
00932c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00932e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
009330   f006
009332   0e02     movlw	0x2                	MOVLW	0x02
009334   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009336   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
009338   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00933a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00933c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00933e   6ae8     clrf	0xe8, 0             	CLRF	WREG
009340   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
009342   68e8     setf	0xe8, 0             	SETF	WREG
009344   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
                                           ;	.line	236; MainDemo.c	*p = '\0';
009346   0e00     movlw	0                  	MOVLW	0x00
009348   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00934a   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00934c   ffe9
00934e   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
009350   fff3
009352   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009354   ec28     call	0xbe50, 0           	CALL	__gptrput1
009356   f05f
                                           ;	.line	237; MainDemo.c	p--;
009358   0eff     movlw	0xff               	MOVLW	0xff
00935a   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00935c   0eff     movlw	0xff               	MOVLW	0xff
00935e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
009360   0eff     movlw	0xff               	MOVLW	0xff
009362   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
                                           _00250_DS_:
                                           ;	.line	238; MainDemo.c	while(value != 0){
009364   5000     movf	0, 0, 0             	MOVF	r0x00, W
009366   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
009368   e030     bz	0x93ca                	BZ	_00253_DS_
                                           ;	.line	239; MainDemo.c	*p = (value%10)+48;
00936a   0e00     movlw	0                  	MOVLW	0x00
00936c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00936e   0e0a     movlw	0xa                	MOVLW	0x0a
009370   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009372   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009374   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009376   5000     movf	0, 0, 0             	MOVF	r0x00, W
009378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00937a   ec3a     call	0x9c74, 0           	CALL	__modsint
00937c   f04e
00937e   6e05     movwf	0x5, 0             	MOVWF	r0x05
009380   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
009382   f006
009384   0e04     movlw	0x4                	MOVLW	0x04
009386   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
009388   0e30     movlw	0x30               	MOVLW	0x30
00938a   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
00938c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00938e   ffe5
009390   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
009392   ffe9
009394   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
009396   fff3
009398   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00939a   ec28     call	0xbe50, 0           	CALL	__gptrput1
00939c   f05f
                                           ;	.line	240; MainDemo.c	value = value/10;
00939e   0e00     movlw	0                  	MOVLW	0x00
0093a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0093a2   0e0a     movlw	0xa                	MOVLW	0x0a
0093a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0093a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0093a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0093aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0093ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0093ae   ec7e     call	0x96fc, 0           	CALL	__divsint
0093b0   f04b
0093b2   6e00     movwf	0, 0               	MOVWF	r0x00
0093b4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0093b6   f001
0093b8   0e04     movlw	0x4                	MOVLW	0x04
0093ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	241; MainDemo.c	p--;
0093bc   0eff     movlw	0xff               	MOVLW	0xff
0093be   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0093c0   0eff     movlw	0xff               	MOVLW	0xff
0093c2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0093c4   0eff     movlw	0xff               	MOVLW	0xff
0093c6   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0093c8   d7cd     bra	0x9364               	BRA	_00250_DS_
                                           _00253_DS_:
0093ca   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0093cc   f006
0093ce   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0093d0   f005
0093d2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0093d4   f004
0093d6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0093d8   f003
0093da   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0093dc   f002
0093de   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0093e0   f001
0093e2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0093e4   f000
0093e6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0093e8   ffd9
0093ea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__number_of_char	code
                                           _number_of_char:
                                           ;	.line	225; MainDemo.c	int number_of_char(int value){
00b450   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b452   ffe5
00b454   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b456   ffd9
00b458   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b45a   ffe5
00b45c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b45e   ffe5
00b460   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b462   ffe5
00b464   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b466   ffe5
00b468   0e02     movlw	0x2                	MOVLW	0x02
00b46a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b46c   f000
00b46e   0e03     movlw	0x3                	MOVLW	0x03
00b470   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b472   f001
                                           ;	.line	227; MainDemo.c	while(value != 0){
00b474   6a02     clrf	0x2, 0              	CLRF	r0x02
00b476   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00242_DS_:
00b478   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b47a   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00b47c   e013     bz	0xb4a4                	BZ	_00244_DS_
                                           ;	.line	228; MainDemo.c	value = value/10;
00b47e   0e00     movlw	0                  	MOVLW	0x00
00b480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b482   0e0a     movlw	0xa                	MOVLW	0x0a
00b484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b486   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b48a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b48c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b48e   ec7e     call	0x96fc, 0           	CALL	__divsint
00b490   f04b
00b492   6e00     movwf	0, 0               	MOVWF	r0x00
00b494   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00b496   f001
00b498   0e04     movlw	0x4                	MOVLW	0x04
00b49a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	229; MainDemo.c	i++;
00b49c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00b49e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00b4a0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00b4a2   d7ea     bra	0xb478               	BRA	_00242_DS_
                                           _00244_DS_:
                                           ;	.line	231; MainDemo.c	return i;
00b4a4   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
00b4a6   fff3
00b4a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b4aa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b4ac   f003
00b4ae   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b4b0   f002
00b4b2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b4b4   f001
00b4b6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b4b8   f000
00b4ba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b4bc   ffd9
00b4be   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__set_to_MAC	code
                                           _set_to_MAC:
                                           ;	.line	218; MainDemo.c	void set_to_MAC(BYTE *src, MAC_ADDR *dest){
0093ec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0093ee   ffe5
0093f0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0093f2   ffd9
0093f4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0093f6   ffe5
0093f8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0093fa   ffe5
0093fc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0093fe   ffe5
009400   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009402   ffe5
009404   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009406   ffe5
009408   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00940a   ffe5
00940c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00940e   ffe5
009410   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009412   ffe5
009414   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
009416   ffe5
009418   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00941a   ffe5
00941c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00941e   ffe5
009420   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
009422   ffe5
009424   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
009426   ffe5
009428   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00942a   ffe5
00942c   0e02     movlw	0x2                	MOVLW	0x02
00942e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009430   f000
009432   0e03     movlw	0x3                	MOVLW	0x03
009434   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009436   f001
009438   0e04     movlw	0x4                	MOVLW	0x04
00943a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00943c   f002
00943e   0e05     movlw	0x5                	MOVLW	0x05
009440   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009442   f003
009444   0e06     movlw	0x6                	MOVLW	0x06
009446   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009448   f004
00944a   0e07     movlw	0x7                	MOVLW	0x07
00944c   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00944e   f005
                                           ;	.line	220; MainDemo.c	for(i=0; i<6; i++){
009450   6a06     clrf	0x6, 0              	CLRF	r0x06
009452   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00228_DS_:
009454   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009456   0f80     addlw	0x80               	ADDLW	0x80
009458   0f80     addlw	0x80               	ADDLW	0x80
00945a   e102     bnz	0x9460               	BNZ	_00237_DS_
00945c   0e06     movlw	0x6                	MOVLW	0x06
00945e   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00237_DS_:
009460   e22b     bc	0x94b8                	BC	_00232_DS_
                                           ;	.line	221; MainDemo.c	dest->v[i] = src[i];
009462   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
009464   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
009466   6e08     movwf	0x8, 0             	MOVWF	r0x08
009468   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00946a   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00946c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00946e   6ae8     clrf	0xe8, 0             	CLRF	WREG
009470   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
009472   68e8     setf	0xe8, 0             	SETF	WREG
009474   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
009476   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
009478   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00947a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00947c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00947e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009480   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
009482   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
009484   6ae8     clrf	0xe8, 0             	CLRF	WREG
009486   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
009488   68e8     setf	0xe8, 0             	SETF	WREG
00948a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00948c   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00948e   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
009490   ffe9
009492   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
009494   fff3
009496   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
009498   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00949a   f05e
00949c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00949e   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0094a0   ffe5
0094a2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0094a4   ffe9
0094a6   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0094a8   fff3
0094aa   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0094ac   ec28     call	0xbe50, 0           	CALL	__gptrput1
0094ae   f05f
                                           ;	.line	220; MainDemo.c	for(i=0; i<6; i++){
0094b0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0094b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0094b4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0094b6   d7ce     bra	0x9454               	BRA	_00228_DS_
                                           _00232_DS_:
0094b8   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0094ba   f00d
0094bc   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0094be   f00c
0094c0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0094c2   f00b
0094c4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0094c6   f00a
0094c8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0094ca   f009
0094cc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0094ce   f008
0094d0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0094d2   f007
0094d4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0094d6   f006
0094d8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0094da   f005
0094dc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0094de   f004
0094e0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0094e2   f003
0094e4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0094e6   f002
0094e8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0094ea   f001
0094ec   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0094ee   f000
0094f0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0094f2   ffd9
0094f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__set_to_dhcp_ip	code
                                           _set_to_dhcp_ip:
                                           ;	.line	211; MainDemo.c	void set_to_dhcp_ip(IP_ADDR *ip){
00a274   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a276   ffe5
00a278   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a27a   ffd9
00a27c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a27e   ffe5
00a280   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a282   ffe5
00a284   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a286   ffe5
00a288   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a28a   ffe5
00a28c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a28e   ffe5
00a290   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a292   ffe5
00a294   0e02     movlw	0x2                	MOVLW	0x02
00a296   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a298   f000
00a29a   0e03     movlw	0x3                	MOVLW	0x03
00a29c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a29e   f001
00a2a0   0e04     movlw	0x4                	MOVLW	0x04
00a2a2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00a2a4   f002
                                           ;	.line	212; MainDemo.c	ip->v[0] = DHCP_IP8;
00a2a6   0ec0     movlw	0xc0               	MOVLW	0xc0
00a2a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a2aa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00a2ac   ffe9
00a2ae   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00a2b0   fff3
00a2b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a2b4   ec28     call	0xbe50, 0           	CALL	__gptrput1
00a2b6   f05f
                                           ;	.line	213; MainDemo.c	ip->v[1] = DHCP_IP16;
00a2b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a2ba   0f01     addlw	0x1                	ADDLW	0x01
00a2bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a2be   0e00     movlw	0                  	MOVLW	0x00
00a2c0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00a2c2   6e04     movwf	0x4, 0             	MOVWF	r0x04
00a2c4   0e00     movlw	0                  	MOVLW	0x00
00a2c6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00a2c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a2ca   0ea8     movlw	0xa8               	MOVLW	0xa8
00a2cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a2ce   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00a2d0   ffe9
00a2d2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00a2d4   fff3
00a2d6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00a2d8   ec28     call	0xbe50, 0           	CALL	__gptrput1
00a2da   f05f
                                           ;	.line	214; MainDemo.c	ip->v[2] = DHCP_IP24;
00a2dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a2de   0f02     addlw	0x2                	ADDLW	0x02
00a2e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a2e2   0e00     movlw	0                  	MOVLW	0x00
00a2e4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00a2e6   6e04     movwf	0x4, 0             	MOVWF	r0x04
00a2e8   0e00     movlw	0                  	MOVLW	0x00
00a2ea   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00a2ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a2ee   0e58     movlw	0x58               	MOVLW	0x58
00a2f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a2f2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00a2f4   ffe9
00a2f6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00a2f8   fff3
00a2fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00a2fc   ec28     call	0xbe50, 0           	CALL	__gptrput1
00a2fe   f05f
                                           ;	.line	215; MainDemo.c	ip->v[3] = DHCP_IP32;
00a300   0e03     movlw	0x3                	MOVLW	0x03
00a302   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a304   0e00     movlw	0                  	MOVLW	0x00
00a306   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a308   0e00     movlw	0                  	MOVLW	0x00
00a30a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00a30c   0e02     movlw	0x2                	MOVLW	0x02
00a30e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a310   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00a312   ffe9
00a314   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00a316   fff3
00a318   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a31a   ec28     call	0xbe50, 0           	CALL	__gptrput1
00a31c   f05f
00a31e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a320   f005
00a322   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a324   f004
00a326   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a328   f003
00a32a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a32c   f002
00a32e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a330   f001
00a332   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a334   f000
00a336   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a338   ffd9
00a33a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__get_pool_el_mac	code
                                           _get_pool_el_mac:
                                           ;	.line	200; MainDemo.c	BOOL get_pool_el_mac(MAC_ADDR *mac, POOL_ELEMENT **pool_el){
0081ba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0081bc   ffe5
0081be   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0081c0   ffd9
0081c2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0081c4   ffe5
0081c6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0081c8   ffe5
0081ca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0081cc   ffe5
0081ce   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0081d0   ffe5
0081d2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0081d4   ffe5
0081d6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0081d8   ffe5
0081da   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0081dc   ffe5
0081de   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0081e0   ffe5
0081e2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0081e4   ffe5
0081e6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0081e8   ffe5
0081ea   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0081ec   ffe5
0081ee   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0081f0   ffe5
0081f2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0081f4   ffe5
0081f6   0e02     movlw	0x2                	MOVLW	0x02
0081f8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0081fa   f000
0081fc   0e03     movlw	0x3                	MOVLW	0x03
0081fe   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008200   f001
008202   0e04     movlw	0x4                	MOVLW	0x04
008204   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008206   f002
008208   0e05     movlw	0x5                	MOVLW	0x05
00820a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00820c   f003
00820e   0e06     movlw	0x6                	MOVLW	0x06
008210   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
008212   f004
008214   0e07     movlw	0x7                	MOVLW	0x07
008216   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
008218   f005
                                           ;	.line	202; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
00821a   6a06     clrf	0x6, 0              	CLRF	r0x06
00821c   6a07     clrf	0x7, 0              	CLRF	r0x07
00821e   6a08     clrf	0x8, 0              	CLRF	r0x08
008220   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00209_DS_:
008222   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
008224   0f80     addlw	0x80               	ADDLW	0x80
008226   0f80     addlw	0x80               	ADDLW	0x80
008228   e102     bnz	0x822e               	BNZ	_00218_DS_
00822a   0e0a     movlw	0xa                	MOVLW	0x0a
00822c   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00218_DS_:
00822e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
008230   d046     bra	0x82be               	BRA	_00212_DS_
                                           ;	.line	203; MainDemo.c	if(mac_cmp(mac, &pool[i].mac)){
008232   0e00     movlw	0                  	MOVLW	LOW(_pool)
008234   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
008236   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
008238   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
00823a   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
00823c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00823e   0e04     movlw	0x4                	MOVLW	0x04
008240   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
008242   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
008244   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
008246   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
008248   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00824a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00824c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00824e   0e80     movlw	0x80               	MOVLW	0x80
008250   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
008252   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
008254   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008256   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
008258   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00825a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00825c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00825e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008262   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008266   5000     movf	0, 0, 0             	MOVF	r0x00, W
008268   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00826a   ec5d     call	0x90ba, 0           	CALL	_mac_cmp
00826c   f048
00826e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
008270   0e06     movlw	0x6                	MOVLW	0x06
008272   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
008274   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
008276   e01b     bz	0x82ae                	BZ	_00211_DS_
                                           ;	.line	204; MainDemo.c	*pool_el = &pool[i];
008278   0e00     movlw	0                  	MOVLW	LOW(_pool)
00827a   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
00827c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00827e   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
008280   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
008282   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008284   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
008286   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008288   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00828a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00828c   0e80     movlw	0x80               	MOVLW	0x80
00828e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
008290   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
008292   ffe5
008294   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
008296   fff4
008298   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
00829a   fff6
00829c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00829e   ffe9
0082a0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0082a2   fff3
0082a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0082a6   ecee     call	0xbddc, 0           	CALL	__gptrput3
0082a8   f05e
                                           ;	.line	205; MainDemo.c	return TRUE;
0082aa   0e01     movlw	0x1                	MOVLW	0x01
0082ac   d009     bra	0x82c0               	BRA	_00213_DS_
                                           _00211_DS_:
                                           ;	.line	202; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
0082ae   0e14     movlw	0x14               	MOVLW	0x14
0082b0   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0082b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0082b4   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0082b6   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0082b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0082ba   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0082bc   d7b2     bra	0x8222               	BRA	_00209_DS_
                                           _00212_DS_:
                                           ;	.line	208; MainDemo.c	return FALSE;
0082be   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00213_DS_:
0082c0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0082c2   f00c
0082c4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0082c6   f00b
0082c8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0082ca   f00a
0082cc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0082ce   f009
0082d0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0082d2   f008
0082d4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0082d6   f007
0082d8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0082da   f006
0082dc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0082de   f005
0082e0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0082e2   f004
0082e4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0082e6   f003
0082e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0082ea   f002
0082ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0082ee   f001
0082f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0082f2   f000
0082f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0082f6   ffd9
0082f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__get_pool_el_ip	code
                                           _get_pool_el_ip:
                                           ;	.line	189; MainDemo.c	BOOL get_pool_el_ip(IP_ADDR *ip, POOL_ELEMENT **pool_el){
0086b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0086b4   ffe5
0086b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0086b8   ffd9
0086ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0086bc   ffe5
0086be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0086c0   ffe5
0086c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0086c4   ffe5
0086c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0086c8   ffe5
0086ca   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0086cc   ffe5
0086ce   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0086d0   ffe5
0086d2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0086d4   ffe5
0086d6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0086d8   ffe5
0086da   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0086dc   ffe5
0086de   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0086e0   ffe5
0086e2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0086e4   ffe5
0086e6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0086e8   ffe5
0086ea   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0086ec   ffe5
0086ee   0e02     movlw	0x2                	MOVLW	0x02
0086f0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0086f2   f000
0086f4   0e03     movlw	0x3                	MOVLW	0x03
0086f6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0086f8   f001
0086fa   0e04     movlw	0x4                	MOVLW	0x04
0086fc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0086fe   f002
008700   0e05     movlw	0x5                	MOVLW	0x05
008702   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008704   f003
008706   0e06     movlw	0x6                	MOVLW	0x06
008708   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00870a   f004
00870c   0e07     movlw	0x7                	MOVLW	0x07
00870e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
008710   f005
                                           ;	.line	191; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
008712   6a06     clrf	0x6, 0              	CLRF	r0x06
008714   6a07     clrf	0x7, 0              	CLRF	r0x07
008716   6a08     clrf	0x8, 0              	CLRF	r0x08
008718   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00193_DS_:
00871a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00871c   0f80     addlw	0x80               	ADDLW	0x80
00871e   0f80     addlw	0x80               	ADDLW	0x80
008720   e102     bnz	0x8726               	BNZ	_00202_DS_
008722   0e0a     movlw	0xa                	MOVLW	0x0a
008724   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00202_DS_:
008726   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
008728   d042     bra	0x87ae               	BRA	_00196_DS_
                                           ;	.line	192; MainDemo.c	if(ip_cmp(&pool[i].ip, ip)){
00872a   0e00     movlw	0                  	MOVLW	LOW(_pool)
00872c   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
00872e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
008730   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
008732   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
008734   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008736   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
008738   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00873a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00873c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00873e   0e80     movlw	0x80               	MOVLW	0x80
008740   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
008742   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008746   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00874a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00874c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00874e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
008750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008752   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
008754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008756   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
008758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00875a   ecd3     call	0x8fa6, 0           	CALL	_ip_cmp
00875c   f047
00875e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
008760   0e06     movlw	0x6                	MOVLW	0x06
008762   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
008764   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
008766   e01b     bz	0x879e                	BZ	_00195_DS_
                                           ;	.line	193; MainDemo.c	*pool_el = &pool[i];
008768   0e00     movlw	0                  	MOVLW	LOW(_pool)
00876a   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
00876c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00876e   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
008770   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
008772   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008774   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
008776   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
008778   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00877a   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00877c   0e80     movlw	0x80               	MOVLW	0x80
00877e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
008780   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
008782   ffe5
008784   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
008786   fff4
008788   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
00878a   fff6
00878c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00878e   ffe9
008790   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
008792   fff3
008794   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008796   ecee     call	0xbddc, 0           	CALL	__gptrput3
008798   f05e
                                           ;	.line	194; MainDemo.c	return TRUE;    
00879a   0e01     movlw	0x1                	MOVLW	0x01
00879c   d009     bra	0x87b0               	BRA	_00197_DS_
                                           _00195_DS_:
                                           ;	.line	191; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
00879e   0e14     movlw	0x14               	MOVLW	0x14
0087a0   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0087a2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0087a4   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0087a6   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0087a8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0087aa   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0087ac   d7b6     bra	0x871a               	BRA	_00193_DS_
                                           _00196_DS_:
                                           ;	.line	197; MainDemo.c	return FALSE;
0087ae   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00197_DS_:
0087b0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0087b2   f00c
0087b4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0087b6   f00b
0087b8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0087ba   f00a
0087bc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0087be   f009
0087c0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0087c2   f008
0087c4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0087c6   f007
0087c8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0087ca   f006
0087cc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0087ce   f005
0087d0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0087d2   f004
0087d4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0087d6   f003
0087d8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0087da   f002
0087dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0087de   f001
0087e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0087e2   f000
0087e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0087e6   ffd9
0087e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__remove_from_pool	code
                                           _remove_from_pool:
                                           ;	.line	181; MainDemo.c	BOOL remove_from_pool(IP_ADDR *ip){
00a8d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a8da   ffe5
00a8dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a8de   ffd9
00a8e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a8e2   ffe5
00a8e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a8e6   ffe5
00a8e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a8ea   ffe5
00a8ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a8ee   ffe5
00a8f0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a8f2   ffe5
00a8f4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a8f6   ffe5
00a8f8   0e02     movlw	0x2                	MOVLW	0x02
00a8fa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a8fc   f000
00a8fe   0e03     movlw	0x3                	MOVLW	0x03
00a900   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a902   f001
00a904   0e04     movlw	0x4                	MOVLW	0x04
00a906   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00a908   f002
                                           ;	.line	184; MainDemo.c	found = get_pool_el_ip(ip, &pool_el);
00a90a   0e02     movlw	0x2                	MOVLW	HIGH(_remove_from_pool_pool_el_1_1)
00a90c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00a90e   0e64     movlw	0x64               	MOVLW	LOW(_remove_from_pool_pool_el_1_1)
00a910   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a912   0e80     movlw	0x80               	MOVLW	0x80
00a914   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a916   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00a918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a91a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a91c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a91e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a920   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a922   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a926   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a92a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a92c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a92e   ec59     call	0x86b2, 0           	CALL	_get_pool_el_ip
00a930   f043
00a932   6e00     movwf	0, 0               	MOVWF	r0x00
00a934   0e06     movlw	0x6                	MOVLW	0x06
00a936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00a938   0102     movlb	0x2                	BANKSEL	(_remove_from_pool_pool_el_1_1 + 2)
                                           ;	.line	185; MainDemo.c	init_pool_el(pool_el);
00a93a   5166     movf	0x66, 0, 0x1        	MOVF	(_remove_from_pool_pool_el_1_1 + 2), W, B
00a93c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a93e   0102     movlb	0x2                	BANKSEL	(_remove_from_pool_pool_el_1_1 + 1)
00a940   5165     movf	0x65, 0, 0x1        	MOVF	(_remove_from_pool_pool_el_1_1 + 1), W, B
00a942   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a944   0102     movlb	0x2                	BANKSEL	_remove_from_pool_pool_el_1_1
00a946   5164     movf	0x64, 0, 0x1        	MOVF	_remove_from_pool_pool_el_1_1, W, B
00a948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a94a   ec24     call	0x7848, 0           	CALL	_init_pool_el
00a94c   f03c
00a94e   0e03     movlw	0x3                	MOVLW	0x03
00a950   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	186; MainDemo.c	return found;
00a952   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a954   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a956   f005
00a958   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a95a   f004
00a95c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a95e   f003
00a960   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a962   f002
00a964   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a966   f001
00a968   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a96a   f000
00a96c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a96e   ffd9
00a970   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__add_to_pool	code
                                           _add_to_pool:
                                           ;	.line	165; MainDemo.c	BOOL add_to_pool(IP_ADDR *ip, MAC_ADDR *mac, DWORD server_deadline, unsigned int miss_counter){
0054d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0054da   ffe5
0054dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0054de   ffd9
0054e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0054e2   ffe5
0054e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0054e6   ffe5
0054e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0054ea   ffe5
0054ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0054ee   ffe5
0054f0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0054f2   ffe5
0054f4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0054f6   ffe5
0054f8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0054fa   ffe5
0054fc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0054fe   ffe5
005500   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005502   ffe5
005504   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005506   ffe5
005508   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00550a   ffe5
00550c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00550e   ffe5
005510   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
005512   ffe5
005514   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
005516   ffe5
005518   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00551a   ffe5
00551c   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00551e   ffe5
005520   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
005522   ffe5
005524   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
005526   ffe5
005528   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
00552a   ffe5
00552c   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
00552e   ffe5
005530   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
005532   ffe5
005534   0e02     movlw	0x2                	MOVLW	0x02
005536   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005538   f000
00553a   0e03     movlw	0x3                	MOVLW	0x03
00553c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00553e   f001
005540   0e04     movlw	0x4                	MOVLW	0x04
005542   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005544   f002
005546   0e05     movlw	0x5                	MOVLW	0x05
005548   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00554a   f003
00554c   0e06     movlw	0x6                	MOVLW	0x06
00554e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005550   f004
005552   0e07     movlw	0x7                	MOVLW	0x07
005554   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005556   f005
005558   0e08     movlw	0x8                	MOVLW	0x08
00555a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00555c   f006
00555e   0e09     movlw	0x9                	MOVLW	0x09
005560   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
005562   f007
005564   0e0a     movlw	0xa                	MOVLW	0x0a
005566   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
005568   f008
00556a   0e0b     movlw	0xb                	MOVLW	0x0b
00556c   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
00556e   f009
005570   0e0c     movlw	0xc                	MOVLW	0x0c
005572   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
005574   f00a
005576   0e0d     movlw	0xd                	MOVLW	0x0d
005578   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
00557a   f00b
                                           ;	.line	167; MainDemo.c	BOOL added = FALSE;
00557c   6a0c     clrf	0xc, 0              	CLRF	r0x0c
                                           ;	.line	168; MainDemo.c	for(i=0; i<POOL_SIZE && !added; i++){
00557e   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005580   6a0e     clrf	0xe, 0              	CLRF	r0x0e
005582   6a0f     clrf	0xf, 0              	CLRF	r0x0f
005584   6a10     clrf	0x10, 0             	CLRF	r0x10
                                           _00170_DS_:
005586   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
005588   0f80     addlw	0x80               	ADDLW	0x80
00558a   0f80     addlw	0x80               	ADDLW	0x80
00558c   e102     bnz	0x5592               	BNZ	_00181_DS_
00558e   0e0a     movlw	0xa                	MOVLW	0x0a
005590   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
                                           _00181_DS_:
005592   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005594   d0a1     bra	0x56d8               	BRA	_00173_DS_
005596   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005598   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00559a   d09e     bra	0x56d8               	BRA	_00173_DS_
                                           ;	.line	169; MainDemo.c	if(is_free(&pool[i])){
00559c   0e00     movlw	0                  	MOVLW	LOW(_pool)
00559e   240f     addwf	0xf, 0, 0          	ADDWF	r0x0f, W
0055a0   6e11     movwf	0x11, 0            	MOVWF	r0x11
0055a2   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
0055a4   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0055a6   6e12     movwf	0x12, 0            	MOVWF	r0x12
0055a8   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0055aa   6e12     movwf	0x12, 0            	MOVWF	r0x12
0055ac   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0055ae   6e11     movwf	0x11, 0            	MOVWF	r0x11
0055b0   0e80     movlw	0x80               	MOVLW	0x80
0055b2   6e13     movwf	0x13, 0            	MOVWF	r0x13
0055b4   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0055b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055b8   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0055ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055bc   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0055be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055c0   ecbb     call	0xa576, 0           	CALL	_is_free
0055c2   f052
0055c4   6e11     movwf	0x11, 0            	MOVWF	r0x11
0055c6   0e03     movlw	0x3                	MOVLW	0x03
0055c8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0055ca   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0055cc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0055ce   d07c     bra	0x56c8               	BRA	_00172_DS_
                                           ;	.line	170; MainDemo.c	memcpy(pool[i].ip.v, ip->v, sizeof(IP_ADDR));
0055d0   0e00     movlw	0                  	MOVLW	LOW(_pool)
0055d2   240f     addwf	0xf, 0, 0          	ADDWF	r0x0f, W
0055d4   6e11     movwf	0x11, 0            	MOVWF	r0x11
0055d6   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
0055d8   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0055da   6e12     movwf	0x12, 0            	MOVWF	r0x12
0055dc   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0055de   6e12     movwf	0x12, 0            	MOVWF	r0x12
0055e0   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0055e2   6e11     movwf	0x11, 0            	MOVWF	r0x11
0055e4   0e80     movlw	0x80               	MOVLW	0x80
0055e6   6e13     movwf	0x13, 0            	MOVWF	r0x13
0055e8   0e00     movlw	0                  	MOVLW	0x00
0055ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055ec   0e04     movlw	0x4                	MOVLW	0x04
0055ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055f0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0055f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055f4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0055f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0055fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055fc   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0055fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005600   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
005602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005604   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005606   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005608   ec7b     call	0x94f6, 0           	CALL	_memcpy
00560a   f04a
00560c   0e08     movlw	0x8                	MOVLW	0x08
00560e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; MainDemo.c	memcpy(pool[i].mac.v, mac->v, sizeof(MAC_ADDR));
005610   0e00     movlw	0                  	MOVLW	LOW(_pool)
005612   240f     addwf	0xf, 0, 0          	ADDWF	r0x0f, W
005614   6e11     movwf	0x11, 0            	MOVWF	r0x11
005616   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
005618   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00561a   6e12     movwf	0x12, 0            	MOVWF	r0x12
00561c   0e04     movlw	0x4                	MOVLW	0x04
00561e   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x11, F
005620   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005622   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
005624   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
005626   6e12     movwf	0x12, 0            	MOVWF	r0x12
005628   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
00562a   6e11     movwf	0x11, 0            	MOVWF	r0x11
00562c   0e80     movlw	0x80               	MOVLW	0x80
00562e   6e13     movwf	0x13, 0            	MOVWF	r0x13
005630   0e00     movlw	0                  	MOVLW	0x00
005632   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005634   0e06     movlw	0x6                	MOVLW	0x06
005636   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005638   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00563a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00563c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00563e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005640   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005644   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
005646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005648   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00564a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00564c   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
00564e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005650   ec7b     call	0x94f6, 0           	CALL	_memcpy
005652   f04a
005654   0e08     movlw	0x8                	MOVLW	0x08
005656   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; MainDemo.c	pool[i].client_deadline = RELAY_LEASE_TIME;
005658   0e00     movlw	0                  	MOVLW	LOW(_pool)
00565a   240f     addwf	0xf, 0, 0          	ADDWF	r0x0f, W
00565c   6e11     movwf	0x11, 0            	MOVWF	r0x11
00565e   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
005660   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
005662   6e12     movwf	0x12, 0            	MOVWF	r0x12
005664   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005666   0f0a     addlw	0xa                	ADDLW	0x0a
005668   6e13     movwf	0x13, 0            	MOVWF	r0x13
00566a   0e00     movlw	0                  	MOVLW	0x00
00566c   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
00566e   6e14     movwf	0x14, 0            	MOVWF	r0x14
005670   c013     movff	0x13, 0xfe9        	MOVFF	r0x13, FSR0L
005672   ffe9
005674   c014     movff	0x14, 0xfea        	MOVFF	r0x14, FSR0H
005676   ffea
005678   0e2c     movlw	0x2c               	MOVLW	0x2c
00567a   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00567c   0e01     movlw	0x1                	MOVLW	0x01
00567e   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
005680   0e00     movlw	0                  	MOVLW	0x00
005682   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
005684   0e00     movlw	0                  	MOVLW	0x00
005686   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	173; MainDemo.c	pool[i].server_deadline = server_deadline;
005688   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
00568a   0f0e     addlw	0xe                	ADDLW	0x0e
00568c   6e13     movwf	0x13, 0            	MOVWF	r0x13
00568e   0e00     movlw	0                  	MOVLW	0x00
005690   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
005692   6e14     movwf	0x14, 0            	MOVWF	r0x14
005694   c013     movff	0x13, 0xfe9        	MOVFF	r0x13, FSR0L
005696   ffe9
005698   c014     movff	0x14, 0xfea        	MOVFF	r0x14, FSR0H
00569a   ffea
00569c   c006     movff	0x6, 0xfee         	MOVFF	r0x06, POSTINC0
00569e   ffee
0056a0   c007     movff	0x7, 0xfee         	MOVFF	r0x07, POSTINC0
0056a2   ffee
0056a4   c008     movff	0x8, 0xfee         	MOVFF	r0x08, POSTINC0
0056a6   ffee
0056a8   c009     movff	0x9, 0xfef         	MOVFF	r0x09, INDF0
0056aa   ffef
                                           ;	.line	174; MainDemo.c	pool[i].miss_counter = miss_counter;
0056ac   0e12     movlw	0x12               	MOVLW	0x12
0056ae   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x11, F
0056b0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0056b2   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
0056b4   c011     movff	0x11, 0xfe9        	MOVFF	r0x11, FSR0L
0056b6   ffe9
0056b8   c012     movff	0x12, 0xfea        	MOVFF	r0x12, FSR0H
0056ba   ffea
0056bc   c00a     movff	0xa, 0xfee         	MOVFF	r0x0a, POSTINC0
0056be   ffee
0056c0   c00b     movff	0xb, 0xfef         	MOVFF	r0x0b, INDF0
0056c2   ffef
                                           ;	.line	175; MainDemo.c	added = TRUE;
0056c4   0e01     movlw	0x1                	MOVLW	0x01
0056c6   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           _00172_DS_:
                                           ;	.line	168; MainDemo.c	for(i=0; i<POOL_SIZE && !added; i++){
0056c8   0e14     movlw	0x14               	MOVLW	0x14
0056ca   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0056cc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0056ce   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
0056d0   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
0056d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0056d4   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
0056d6   d757     bra	0x5586               	BRA	_00170_DS_
                                           _00173_DS_:
                                           ;	.line	178; MainDemo.c	return added;
0056d8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0056da   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0056dc   f014
0056de   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0056e0   f013
0056e2   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0056e4   f012
0056e6   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0056e8   f011
0056ea   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0056ec   f010
0056ee   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0056f0   f00f
0056f2   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0056f4   f00e
0056f6   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0056f8   f00d
0056fa   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0056fc   f00c
0056fe   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
005700   f00b
005702   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
005704   f00a
005706   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005708   f009
00570a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00570c   f008
00570e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005710   f007
005712   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005714   f006
005716   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005718   f005
00571a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00571c   f004
00571e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005720   f003
005722   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005724   f002
005726   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005728   f001
00572a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00572c   f000
00572e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005730   ffd9
005732   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__is_free	code
                                           _is_free:
                                           ;	.line	155; MainDemo.c	BOOL is_free(POOL_ELEMENT *el){
00a576   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a578   ffe5
00a57a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a57c   ffd9
00a57e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a580   ffe5
00a582   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a584   ffe5
00a586   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a588   ffe5
00a58a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a58c   ffe5
00a58e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a590   ffe5
00a592   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a594   ffe5
00a596   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00a598   ffe5
00a59a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00a59c   ffe5
00a59e   0e02     movlw	0x2                	MOVLW	0x02
00a5a0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a5a2   f000
00a5a4   0e03     movlw	0x3                	MOVLW	0x03
00a5a6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a5a8   f001
00a5aa   0e04     movlw	0x4                	MOVLW	0x04
00a5ac   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00a5ae   f002
                                           ;	.line	157; MainDemo.c	for(i=0; i<6; i++){
00a5b0   0e04     movlw	0x4                	MOVLW	0x04
00a5b2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a5b4   0e00     movlw	0                  	MOVLW	0x00
00a5b6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a5b8   0e00     movlw	0                  	MOVLW	0x00
00a5ba   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00a5bc   6a03     clrf	0x3, 0              	CLRF	r0x03
00a5be   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00153_DS_:
00a5c0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a5c2   0f80     addlw	0x80               	ADDLW	0x80
00a5c4   0f80     addlw	0x80               	ADDLW	0x80
00a5c6   e102     bnz	0xa5cc               	BNZ	_00162_DS_
00a5c8   0e06     movlw	0x6                	MOVLW	0x06
00a5ca   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00162_DS_:
00a5cc   e21b     bc	0xa604                	BC	_00156_DS_
                                           ;	.line	158; MainDemo.c	if(el->mac.v[i] != 0){
00a5ce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a5d0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00a5d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a5d4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a5d6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00a5d8   6e06     movwf	0x6, 0             	MOVWF	r0x06
00a5da   6ae8     clrf	0xe8, 0             	CLRF	WREG
00a5dc   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
00a5de   68e8     setf	0xe8, 0             	SETF	WREG
00a5e0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00a5e2   6e07     movwf	0x7, 0             	MOVWF	r0x07
00a5e4   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00a5e6   ffe9
00a5e8   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00a5ea   fff3
00a5ec   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00a5ee   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00a5f0   f05e
00a5f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
00a5f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00a5f6   e002     bz	0xa5fc                	BZ	_00155_DS_
                                           ;	.line	159; MainDemo.c	return FALSE;
00a5f8   6ae8     clrf	0xe8, 0             	CLRF	WREG
00a5fa   d005     bra	0xa606               	BRA	_00157_DS_
                                           _00155_DS_:
                                           ;	.line	157; MainDemo.c	for(i=0; i<6; i++){
00a5fc   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00a5fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00a600   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00a602   d7de     bra	0xa5c0               	BRA	_00153_DS_
                                           _00156_DS_:
                                           ;	.line	162; MainDemo.c	return TRUE;
00a604   0e01     movlw	0x1                	MOVLW	0x01
                                           _00157_DS_:
00a606   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00a608   f007
00a60a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00a60c   f006
00a60e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a610   f005
00a612   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a614   f004
00a616   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a618   f003
00a61a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a61c   f002
00a61e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a620   f001
00a622   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a624   f000
00a626   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a628   ffd9
00a62a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__init_pool	code
                                           _init_pool:
                                           ;	.line	148; MainDemo.c	void init_pool(){
00aaa6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aaa8   ffe5
00aaaa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aaac   ffd9
00aaae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00aab0   ffe5
00aab2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00aab4   ffe5
00aab6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00aab8   ffe5
00aaba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00aabc   ffe5
00aabe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00aac0   ffe5
00aac2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00aac4   ffe5
00aac6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00aac8   ffe5
                                           ;	.line	150; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
00aaca   6a00     clrf	0, 0                	CLRF	r0x00
00aacc   6a01     clrf	0x1, 0              	CLRF	r0x01
00aace   6a02     clrf	0x2, 0              	CLRF	r0x02
00aad0   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00137_DS_:
00aad2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00aad4   0f80     addlw	0x80               	ADDLW	0x80
00aad6   0f80     addlw	0x80               	ADDLW	0x80
00aad8   e102     bnz	0xaade               	BNZ	_00146_DS_
00aada   0e0a     movlw	0xa                	MOVLW	0x0a
00aadc   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00146_DS_:
00aade   e21e     bc	0xab1c                	BC	_00141_DS_
                                           ;	.line	151; MainDemo.c	init_pool_el(&pool[i]);
00aae0   0e00     movlw	0                  	MOVLW	LOW(_pool)
00aae2   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
00aae4   6e04     movwf	0x4, 0             	MOVWF	r0x04
00aae6   0e08     movlw	0x8                	MOVLW	HIGH(_pool)
00aae8   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
00aaea   6e05     movwf	0x5, 0             	MOVWF	r0x05
00aaec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00aaee   6e05     movwf	0x5, 0             	MOVWF	r0x05
00aaf0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00aaf2   6e04     movwf	0x4, 0             	MOVWF	r0x04
00aaf4   0e80     movlw	0x80               	MOVLW	0x80
00aaf6   6e06     movwf	0x6, 0             	MOVWF	r0x06
00aaf8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00aafa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aafc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00aafe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00ab00   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00ab02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00ab04   ec24     call	0x7848, 0           	CALL	_init_pool_el
00ab06   f03c
00ab08   0e03     movlw	0x3                	MOVLW	0x03
00ab0a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	150; MainDemo.c	for(i=0; i<POOL_SIZE; i++){
00ab0c   0e14     movlw	0x14               	MOVLW	0x14
00ab0e   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00ab10   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00ab12   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00ab14   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00ab16   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00ab18   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00ab1a   d7db     bra	0xaad2               	BRA	_00137_DS_
                                           _00141_DS_:
00ab1c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00ab1e   f006
00ab20   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00ab22   f005
00ab24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00ab26   f004
00ab28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00ab2a   f003
00ab2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00ab2e   f002
00ab30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00ab32   f001
00ab34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ab36   f000
00ab38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ab3a   ffd9
00ab3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__init_pool_el	code
                                           _init_pool_el:
                                           ;	.line	135; MainDemo.c	void init_pool_el(POOL_ELEMENT *pe){
007848   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00784a   ffe5
00784c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00784e   ffd9
007850   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007852   ffe5
007854   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007856   ffe5
007858   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00785a   ffe5
00785c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00785e   ffe5
007860   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007862   ffe5
007864   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007866   ffe5
007868   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00786a   ffe5
00786c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00786e   ffe5
007870   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007872   ffe5
007874   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007876   ffe5
007878   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00787a   ffe5
00787c   0e02     movlw	0x2                	MOVLW	0x02
00787e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007880   f000
007882   0e03     movlw	0x3                	MOVLW	0x03
007884   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007886   f001
007888   0e04     movlw	0x4                	MOVLW	0x04
00788a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00788c   f002
                                           ;	.line	137; MainDemo.c	for(j=0; j<4; j++){
00788e   6a03     clrf	0x3, 0              	CLRF	r0x03
007890   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00115_DS_:
007892   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007894   0f80     addlw	0x80               	ADDLW	0x80
007896   0f80     addlw	0x80               	ADDLW	0x80
007898   e102     bnz	0x789e               	BNZ	_00131_DS_
00789a   0e04     movlw	0x4                	MOVLW	0x04
00789c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00131_DS_:
00789e   e218     bc	0x78d0                	BC	_00118_DS_
                                           ;	.line	138; MainDemo.c	pe->ip.v[j] = 0;
0078a0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0078a2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0078a4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0078a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0078a8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0078aa   6e06     movwf	0x6, 0             	MOVWF	r0x06
0078ac   6ae8     clrf	0xe8, 0             	CLRF	WREG
0078ae   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
0078b0   68e8     setf	0xe8, 0             	SETF	WREG
0078b2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0078b4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0078b6   0e00     movlw	0                  	MOVLW	0x00
0078b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078ba   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0078bc   ffe9
0078be   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0078c0   fff3
0078c2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0078c4   ec28     call	0xbe50, 0           	CALL	__gptrput1
0078c6   f05f
                                           ;	.line	137; MainDemo.c	for(j=0; j<4; j++){
0078c8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0078ca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0078cc   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0078ce   d7e1     bra	0x7892               	BRA	_00115_DS_
                                           _00118_DS_:
                                           ;	.line	140; MainDemo.c	for(j=0; j<6; j++){
0078d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0078d2   0f04     addlw	0x4                	ADDLW	0x04
0078d4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0078d6   0e00     movlw	0                  	MOVLW	0x00
0078d8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0078da   6e04     movwf	0x4, 0             	MOVWF	r0x04
0078dc   0e00     movlw	0                  	MOVLW	0x00
0078de   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0078e0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0078e2   6a06     clrf	0x6, 0              	CLRF	r0x06
0078e4   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00119_DS_:
0078e6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0078e8   0f80     addlw	0x80               	ADDLW	0x80
0078ea   0f80     addlw	0x80               	ADDLW	0x80
0078ec   e102     bnz	0x78f2               	BNZ	_00132_DS_
0078ee   0e06     movlw	0x6                	MOVLW	0x06
0078f0   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00132_DS_:
0078f2   e218     bc	0x7924                	BC	_00122_DS_
                                           ;	.line	141; MainDemo.c	pe->mac.v[j] = 0;
0078f4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0078f6   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
0078f8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0078fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0078fc   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0078fe   6e09     movwf	0x9, 0             	MOVWF	r0x09
007900   6ae8     clrf	0xe8, 0             	CLRF	WREG
007902   be07     btfsc	0x7, 0x7, 0        	BTFSC	r0x07, 7
007904   68e8     setf	0xe8, 0             	SETF	WREG
007906   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
007908   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00790a   0e00     movlw	0                  	MOVLW	0x00
00790c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00790e   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
007910   ffe9
007912   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
007914   fff3
007916   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
007918   ec28     call	0xbe50, 0           	CALL	__gptrput1
00791a   f05f
                                           ;	.line	140; MainDemo.c	for(j=0; j<6; j++){
00791c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00791e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007920   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
007922   d7e1     bra	0x78e6               	BRA	_00119_DS_
                                           _00122_DS_:
                                           ;	.line	143; MainDemo.c	pe->client_deadline = 0;
007924   5000     movf	0, 0, 0             	MOVF	r0x00, W
007926   0f0a     addlw	0xa                	ADDLW	0x0a
007928   6e03     movwf	0x3, 0             	MOVWF	r0x03
00792a   0e00     movlw	0                  	MOVLW	0x00
00792c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00792e   6e04     movwf	0x4, 0             	MOVWF	r0x04
007930   0e00     movlw	0                  	MOVLW	0x00
007932   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
007934   6e05     movwf	0x5, 0             	MOVWF	r0x05
007936   0e00     movlw	0                  	MOVLW	0x00
007938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00793a   0e00     movlw	0                  	MOVLW	0x00
00793c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00793e   0e00     movlw	0                  	MOVLW	0x00
007940   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
007942   0e00     movlw	0                  	MOVLW	0x00
007944   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
007946   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007948   ffe9
00794a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00794c   fff3
00794e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007950   ec86     call	0xbd0c, 0           	CALL	__gptrput4
007952   f05e
                                           ;	.line	144; MainDemo.c	pe->server_deadline = 0;
007954   5000     movf	0, 0, 0             	MOVF	r0x00, W
007956   0f0e     addlw	0xe                	ADDLW	0x0e
007958   6e03     movwf	0x3, 0             	MOVWF	r0x03
00795a   0e00     movlw	0                  	MOVLW	0x00
00795c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00795e   6e04     movwf	0x4, 0             	MOVWF	r0x04
007960   0e00     movlw	0                  	MOVLW	0x00
007962   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
007964   6e05     movwf	0x5, 0             	MOVWF	r0x05
007966   0e00     movlw	0                  	MOVLW	0x00
007968   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00796a   0e00     movlw	0                  	MOVLW	0x00
00796c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00796e   0e00     movlw	0                  	MOVLW	0x00
007970   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
007972   0e00     movlw	0                  	MOVLW	0x00
007974   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
007976   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007978   ffe9
00797a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00797c   fff3
00797e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007980   ec86     call	0xbd0c, 0           	CALL	__gptrput4
007982   f05e
                                           ;	.line	145; MainDemo.c	pe->miss_counter = 0;
007984   0e12     movlw	0x12               	MOVLW	0x12
007986   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
007988   0e00     movlw	0                  	MOVLW	0x00
00798a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00798c   0e00     movlw	0                  	MOVLW	0x00
00798e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
007990   0e00     movlw	0                  	MOVLW	0x00
007992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007994   0e00     movlw	0                  	MOVLW	0x00
007996   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
007998   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00799a   ffe9
00799c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00799e   fff3
0079a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0079a2   ec08     call	0xbe10, 0           	CALL	__gptrput2
0079a4   f05f
0079a6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0079a8   f00a
0079aa   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0079ac   f009
0079ae   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0079b0   f008
0079b2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0079b4   f007
0079b6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0079b8   f006
0079ba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0079bc   f005
0079be   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0079c0   f004
0079c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0079c4   f003
0079c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0079c8   f002
0079ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0079cc   f001
0079ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0079d0   f000
0079d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0079d4   ffd9
0079d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__HighISR	code
                                           _HighISR:
                                           ;	.line	93; MainDemo.c	void HighISR(void) __interrupt(1) //ML for sdcc        
00b6a8   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00b6aa   ffe5
00b6ac   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00b6ae   ffe5
00b6b0   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00b6b2   ffe5
00b6b4   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00b6b6   ffe5
00b6b8   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00b6ba   ffe5
00b6bc   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00b6be   ffe5
00b6c0   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00b6c2   ffe5
00b6c4   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00b6c6   ffe5
00b6c8   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00b6ca   ffe5
00b6cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b6ce   ffe5
00b6d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b6d2   ffd9
                                           ;	.line	100; MainDemo.c	}
00b6d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b6d6   ffd9
00b6d8   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00b6da   fffb
00b6dc   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00b6de   fffa
00b6e0   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00b6e2   ffea
00b6e4   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00b6e6   ffe9
00b6e8   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00b6ea   fff4
00b6ec   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00b6ee   fff3
00b6f0   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00b6f2   ffe0
00b6f4   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00b6f6   ffd8
00b6f8   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00b6fa   ffe8
00b6fc   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__LowISR	code
                                           _LowISR:
                                           ;	.line	74; MainDemo.c	void LowISR(void) __interrupt (2) //ML for sdcc
009aac   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
009aae   ffe5
009ab0   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
009ab2   ffe5
009ab4   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
009ab6   ffe5
009ab8   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
009aba   ffe5
009abc   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
009abe   ffe5
009ac0   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
009ac2   ffe5
009ac4   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
009ac6   ffe5
009ac8   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
009aca   ffe5
009acc   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
009ace   ffe5
009ad0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009ad2   ffe5
009ad4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009ad6   ffd9
                                           ;	.line	80; MainDemo.c	TickUpdate();
009ad8   ecf6     call	0xbbec, 0           	CALL	_TickUpdate
009ada   f05d
009adc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009ade   ffd9
009ae0   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
009ae2   fffb
009ae4   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
009ae6   fffa
009ae8   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
009aea   ffea
009aec   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
009aee   ffe9
009af0   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
009af2   fff4
009af4   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
009af6   fff3
009af8   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
009afa   ffe0
009afc   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
009afe   ffd8
009b00   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
009b02   ffe8
009b04   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
009b06   6e69     movwf	0x69, 0            	DB	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x6f, 0x63, 0x6b
009b08   6176     cpfslt	0x76, 0x1         
009b0a   696c     setf	0x6c, 0x1           
009b0c   2064     addwfc	0x64, 0, 0        
009b0e   6f73     movwf	0x73, 0x1          
009b10   6b63     clrf	0x63, 0x1           
009b12   7465     btg	0x65, 0x2, 0         	DB	0x65, 0x74, 0x00
009b14   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
009b16   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x00
009b18   5043     movf	0x43, 0, 0          
009b1a   4f20     dcfsnz	0x20, 0x1, 0x1    
009b1c   4646     rlncf	0x46, 0x1, 0       
009b1e   5245     movf	0x45, 0x1, 0        
009b20   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
009b22   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x41, 0x43, 0x4b, 0x00
009b24   5043     movf	0x43, 0, 0          
009b26   4120     rrncf	0x20, 0, 0x1       
009b28   4b43     infsnz	0x43, 0x1, 0x1    
009b2a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
009b2c   4944     infsnz	0x44, 0, 0x1      	DB	0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x45, 0x44, 0x20, 0x68, 0x61
009b2e   4353     rrncf	0x53, 0x1, 0x1     
009b30   5241     movf	0x41, 0x1, 0        
009b32   4544     rlncf	0x44, 0, 0x1       
009b34   2044     addwfc	0x44, 0, 0        
009b36   6168     cpfslt	0x68, 0x1         
009b38   646e     cpfsgt	0x6e, 0           	DB	0x6e, 0x64, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00
009b3a   656c     cpfsgt	0x6c, 0x1         
009b3c   7320     btg	0x20, 0x1, 0x1       
009b3e   7265     btg	0x65, 0x1, 0         
009b40   6576     cpfsgt	0x76, 0x1         
009b42   0072     dw	0x72  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_4:
009b44   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45
009b46   5043     movf	0x43, 0, 0          
009b48   4420     rlncf	0x20, 0, 0         
009b4a   5349     movf	0x49, 0x1, 0x1      
009b4c   4f43     dcfsnz	0x43, 0x1, 0x1    
009b4e   4556     rlncf	0x56, 0, 0x1       
009b50   5952     subwfb	0x52, 0, 0x1      	DB	0x52, 0x59, 0x00
009b52   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
009b54   4844     infsnz	0x44, 0, 0        	DB	0x44, 0x48, 0x43, 0x50, 0x20, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54
009b56   5043     movf	0x43, 0, 0          
009b58   5220     movf	0x20, 0x1, 0        
009b5a   5145     movf	0x45, 0, 0x1        
009b5c   4555     rlncf	0x55, 0, 0x1       
009b5e   5453     subfwb	0x53, 0, 0        
009b60   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_6:
009b62   6e55     movwf	0x55, 0            	DB	0x55, 0x6e, 0x6b, 0x6e, 0x77, 0x20, 0x44, 0x48, 0x43, 0x50, 0x20, 0x74
009b64   6e6b     movwf	0x6b, 0            
009b66   2077     addwfc	0x77, 0, 0        
009b68   4844     infsnz	0x44, 0, 0        
009b6a   5043     movf	0x43, 0, 0          
009b6c   7420     btg	0x20, 0x2, 0         
009b6e   7079     btg	0x79, 0, 0           	DB	0x79, 0x70, 0x65, 0x00
009b70   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
009b72   4147     rrncf	0x47, 0, 0x1       	DB	0x47, 0x41, 0x54, 0x45, 0x57, 0x20, 0x41, 0x52, 0x50, 0x20, 0x66, 0x61
009b74   4554     rlncf	0x54, 0, 0x1       
009b76   2057     addwfc	0x57, 0, 0        
009b78   5241     movf	0x41, 0x1, 0        
009b7a   2050     addwfc	0x50, 0, 0        
009b7c   6166     cpfslt	0x66, 0x1         
009b7e   6c69     negf	0x69, 0             	DB	0x69, 0x6c, 0x20, 0x3a, 0x27, 0x28, 0x00
009b80   3a20     swapf	0x20, 0x1, 0       
009b82   2827     incf	0x27, 0, 0          
009b84   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
009b86   494c     infsnz	0x4c, 0, 0x1      	DB	0x4c, 0x49, 0x4e, 0x47, 0x49, 0x32, 0x33, 0x31, 0x35, 0x00
009b88   474e     rlncf	0x4e, 0x1, 0x1     
009b8a   3249     rrcf	0x49, 0x1, 0        
009b8c   3133     rrcf	0x33, 0, 0x1        
009b8e   0035     dw	0x35  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	18734 (0x492e) bytes (14.29%)
                                           ;           	 9367 (0x2497) words
                                           ; udata size:	 1170 (0x0492) bytes (30.47%)
                                           ; access size:	   27 (0x001b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ARPInit
                                           	global _ARPProcess
                                           	global _ARPResolve
                                           	global _ARPIsResolved
                                           	global _SwapARPPacket
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _swaps
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACPutHeader
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _ARPProcess_smARP_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_ARP_0	udata
                                           _Cache	res	10
                                           
                                           udata_ARP_1	udata
                                           _ARPProcess_Target_1_1	res	10
                                           
                                           udata_ARP_2	udata
                                           _ARPProcess_packet_1_1	res	28
                                           
                                           udata_ARP_3	udata
                                           _ARPResolve_packet_1_1	res	28
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ARP__SwapARPPacket	code
                                           _SwapARPPacket:
                                           ;	.line	412; TCPIP_Stack/ARP.c	void SwapARPPacket(ARP_PACKET* p)
00843a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00843c   ffe5
00843e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008440   ffd9
008442   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008444   ffe5
008446   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008448   ffe5
00844a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00844c   ffe5
00844e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008450   ffe5
008452   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008454   ffe5
008456   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008458   ffe5
00845a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00845c   ffe5
00845e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008460   ffe5
008462   0e02     movlw	0x2                	MOVLW	0x02
008464   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008466   f000
008468   0e03     movlw	0x3                	MOVLW	0x03
00846a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00846c   f001
00846e   0e04     movlw	0x4                	MOVLW	0x04
008470   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008472   f002
                                           ;	.line	414; TCPIP_Stack/ARP.c	p->HardwareType     = swaps(p->HardwareType);
008474   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
008476   ffe9
008478   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00847a   fff3
00847c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00847e   eccb     call	0xbb96, 0           	CALL	__gptrget2
008480   f05d
008482   6e03     movwf	0x3, 0             	MOVWF	r0x03
008484   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
008486   f004
008488   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00848a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00848c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00848e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008490   eca9     call	0xb752, 0           	CALL	_swaps
008492   f05b
008494   6e03     movwf	0x3, 0             	MOVWF	r0x03
008496   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
008498   f004
00849a   0e02     movlw	0x2                	MOVLW	0x02
00849c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00849e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0084a0   ffe5
0084a2   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0084a4   fff4
0084a6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0084a8   ffe9
0084aa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0084ac   fff3
0084ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0084b0   ec08     call	0xbe10, 0           	CALL	__gptrput2
0084b2   f05f
                                           ;	.line	415; TCPIP_Stack/ARP.c	p->Protocol         = swaps(p->Protocol);
0084b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0084b6   0f02     addlw	0x2                	ADDLW	0x02
0084b8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0084ba   0e00     movlw	0                  	MOVLW	0x00
0084bc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0084be   6e04     movwf	0x4, 0             	MOVWF	r0x04
0084c0   0e00     movlw	0                  	MOVLW	0x00
0084c2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0084c4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0084c6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0084c8   ffe9
0084ca   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0084cc   fff3
0084ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0084d0   eccb     call	0xbb96, 0           	CALL	__gptrget2
0084d2   f05d
0084d4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0084d6   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0084d8   f007
0084da   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0084dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084de   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0084e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0084e2   eca9     call	0xb752, 0           	CALL	_swaps
0084e4   f05b
0084e6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0084e8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0084ea   f007
0084ec   0e02     movlw	0x2                	MOVLW	0x02
0084ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0084f0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0084f2   ffe5
0084f4   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0084f6   fff4
0084f8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0084fa   ffe9
0084fc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0084fe   fff3
008500   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008502   ec08     call	0xbe10, 0           	CALL	__gptrput2
008504   f05f
                                           ;	.line	416; TCPIP_Stack/ARP.c	p->Operation        = swaps(p->Operation);
008506   0e06     movlw	0x6                	MOVLW	0x06
008508   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00850a   0e00     movlw	0                  	MOVLW	0x00
00850c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00850e   0e00     movlw	0                  	MOVLW	0x00
008510   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
008512   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
008514   ffe9
008516   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
008518   fff3
00851a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00851c   eccb     call	0xbb96, 0           	CALL	__gptrget2
00851e   f05d
008520   6e03     movwf	0x3, 0             	MOVWF	r0x03
008522   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
008524   f004
008526   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008528   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00852a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00852c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00852e   eca9     call	0xb752, 0           	CALL	_swaps
008530   f05b
008532   6e03     movwf	0x3, 0             	MOVWF	r0x03
008534   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
008536   f004
008538   0e02     movlw	0x2                	MOVLW	0x02
00853a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00853c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00853e   ffe5
008540   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
008542   fff4
008544   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
008546   ffe9
008548   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00854a   fff3
00854c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00854e   ec08     call	0xbe10, 0           	CALL	__gptrput2
008550   f05f
008552   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008554   f007
008556   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008558   f006
00855a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00855c   f005
00855e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008560   f004
008562   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008564   f003
008566   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008568   f002
00856a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00856c   f001
00856e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008570   f000
008572   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008574   ffd9
008576   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPIsResolved	code
                                           _ARPIsResolved:
                                           ;	.line	377; TCPIP_Stack/ARP.c	BOOL ARPIsResolved(IP_ADDR* IPAddr, MAC_ADDR* MACAddr)
0079d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0079da   ffe5
0079dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0079de   ffd9
0079e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0079e2   ffe5
0079e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0079e6   ffe5
0079e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0079ea   ffe5
0079ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0079ee   ffe5
0079f0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0079f2   ffe5
0079f4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0079f6   ffe5
0079f8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0079fa   ffe5
0079fc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0079fe   ffe5
007a00   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
007a02   ffe5
007a04   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
007a06   ffe5
007a08   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
007a0a   ffe5
007a0c   0e02     movlw	0x2                	MOVLW	0x02
007a0e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007a10   f000
007a12   0e03     movlw	0x3                	MOVLW	0x03
007a14   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007a16   f001
007a18   0e04     movlw	0x4                	MOVLW	0x04
007a1a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007a1c   f002
007a1e   0e05     movlw	0x5                	MOVLW	0x05
007a20   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
007a22   f003
007a24   0e06     movlw	0x6                	MOVLW	0x06
007a26   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007a28   f004
007a2a   0e07     movlw	0x7                	MOVLW	0x07
007a2c   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
007a2e   f005
                                           ;	.line	379; TCPIP_Stack/ARP.c	if((Cache.IPAddr.Val == IPAddr->Val) || 
007a30   cbb4     movff	0xbb4, 0x6         	MOVFF	_Cache, r0x06
007a32   f006
007a34   cbb5     movff	0xbb5, 0x7         	MOVFF	(_Cache + 1), r0x07
007a36   f007
007a38   cbb6     movff	0xbb6, 0x8         	MOVFF	(_Cache + 2), r0x08
007a3a   f008
007a3c   cbb7     movff	0xbb7, 0x9         	MOVFF	(_Cache + 3), r0x09
007a3e   f009
007a40   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007a42   ffe9
007a44   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007a46   fff3
007a48   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007a4a   ec40     call	0xba80, 0           	CALL	__gptrget4
007a4c   f05d
007a4e   6e00     movwf	0, 0               	MOVWF	r0x00
007a50   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007a52   f001
007a54   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
007a56   f002
007a58   cfe9     movff	0xfe9, 0xa         	MOVFF	FSR0L, r0x0a
007a5a   f00a
007a5c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007a5e   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
007a60   e109     bnz	0x7a74               	BNZ	_00180_DS_
007a62   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007a64   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
007a66   e106     bnz	0x7a74               	BNZ	_00180_DS_
007a68   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
007a6a   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
007a6c   e103     bnz	0x7a74               	BNZ	_00180_DS_
007a6e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007a70   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
007a72   e02e     bz	0x7ad0                	BZ	_00171_DS_
                                           _00180_DS_:
                                           ;	.line	380; TCPIP_Stack/ARP.c	((Cache.IPAddr.Val == AppConfig.MyGateway.Val) && 
007a74   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007a76   0108     movlb	0x8                	BANKSEL	(_AppConfig + 8)
007a78   19d0     xorwf	0xd0, 0, 0x1       	XORWF	(_AppConfig + 8), W, B
007a7a   e10c     bnz	0x7a94               	BNZ	_00181_DS_
007a7c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007a7e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 9)
007a80   19d1     xorwf	0xd1, 0, 0x1       	XORWF	(_AppConfig + 9), W, B
007a82   e108     bnz	0x7a94               	BNZ	_00181_DS_
007a84   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
007a86   0108     movlb	0x8                	BANKSEL	(_AppConfig + 10)
007a88   19d2     xorwf	0xd2, 0, 0x1       	XORWF	(_AppConfig + 10), W, B
007a8a   e104     bnz	0x7a94               	BNZ	_00181_DS_
007a8c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
007a8e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 11)
007a90   19d3     xorwf	0xd3, 0, 0x1       	XORWF	(_AppConfig + 11), W, B
007a92   e001     bz	0x7a96                	BZ	_00182_DS_
                                           _00181_DS_:
007a94   d039     bra	0x7b08               	BRA	_00172_DS_
                                           _00182_DS_:
007a96   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	381; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val)))
007a98   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
007a9a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
007a9c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
007a9e   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
007aa0   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
007aa2   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
007aa4   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
007aa6   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
007aa8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
007aaa   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
007aac   1a0a     xorwf	0xa, 0x1, 0        	XORWF	r0x0a, F
007aae   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
007ab0   51cc     movf	0xcc, 0, 0x1        	MOVF	(_AppConfig + 4), W, B
007ab2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
007ab4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
007ab6   51cd     movf	0xcd, 0, 0x1        	MOVF	(_AppConfig + 5), W, B
007ab8   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
007aba   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
007abc   51ce     movf	0xce, 0, 0x1        	MOVF	(_AppConfig + 6), W, B
007abe   1602     andwf	0x2, 0x1, 0        	ANDWF	r0x02, F
007ac0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
007ac2   51cf     movf	0xcf, 0, 0x1        	MOVF	(_AppConfig + 7), W, B
007ac4   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
007ac6   5000     movf	0, 0, 0             	MOVF	r0x00, W
007ac8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
007aca   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
007acc   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
007ace   e01c     bz	0x7b08                	BZ	_00172_DS_
                                           _00171_DS_:
                                           ;	.line	384; TCPIP_Stack/ARP.c	memcpy((void*)MACAddr, (void*)&Cache.MACAddr, sizeof(Cache.MACAddr));
007ad0   0e0b     movlw	0xb                	MOVLW	HIGH(_Cache + 4)
007ad2   6e01     movwf	0x1, 0             	MOVWF	r0x01
007ad4   0eb8     movlw	0xb8               	MOVLW	LOW(_Cache + 4)
007ad6   6e00     movwf	0, 0               	MOVWF	r0x00
007ad8   0e80     movlw	0x80               	MOVLW	0x80
007ada   6e02     movwf	0x2, 0             	MOVWF	r0x02
007adc   0e00     movlw	0                  	MOVLW	0x00
007ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ae0   0e06     movlw	0x6                	MOVLW	0x06
007ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ae4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ae8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007aec   5000     movf	0, 0, 0             	MOVF	r0x00, W
007aee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007af0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007af2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007af4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007af6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007af8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007afa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007afc   ec7b     call	0x94f6, 0           	CALL	_memcpy
007afe   f04a
007b00   0e08     movlw	0x8                	MOVLW	0x08
007b02   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	388; TCPIP_Stack/ARP.c	return TRUE;
007b04   0e01     movlw	0x1                	MOVLW	0x01
007b06   d001     bra	0x7b0a               	BRA	_00175_DS_
                                           _00172_DS_:
                                           ;	.line	390; TCPIP_Stack/ARP.c	return FALSE;
007b08   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00175_DS_:
007b0a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
007b0c   f00a
007b0e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
007b10   f009
007b12   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
007b14   f008
007b16   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007b18   f007
007b1a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007b1c   f006
007b1e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007b20   f005
007b22   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007b24   f004
007b26   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007b28   f003
007b2a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007b2c   f002
007b2e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007b30   f001
007b32   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007b34   f000
007b36   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007b38   ffd9
007b3a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPResolve	code
                                           _ARPResolve:
                                           ;	.line	324; TCPIP_Stack/ARP.c	void ARPResolve(IP_ADDR* IPAddr)
008578   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00857a   ffe5
00857c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00857e   ffd9
008580   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008582   ffe5
008584   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008586   ffe5
008588   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00858a   ffe5
00858c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00858e   ffe5
008590   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008592   ffe5
008594   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008596   ffe5
008598   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00859a   ffe5
00859c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00859e   ffe5
0085a0   0e02     movlw	0x2                	MOVLW	0x02
0085a2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0085a4   f000
0085a6   0e03     movlw	0x3                	MOVLW	0x03
0085a8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0085aa   f001
0085ac   0e04     movlw	0x4                	MOVLW	0x04
0085ae   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0085b0   f002
                                           ;	.line	328; TCPIP_Stack/ARP.c	packet.Operation            = ARP_OPERATION_REQ;
0085b2   0e01     movlw	0x1                	MOVLW	0x01
0085b4   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 6)
0085b6   6f06     movwf	0x6, 0x1           	MOVWF	(_ARPResolve_packet_1_1 + 6), B
0085b8   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 7)
0085ba   6b07     clrf	0x7, 0x1            	CLRF	(_ARPResolve_packet_1_1 + 7), B
0085bc   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 18)
                                           ;	.line	329; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[0]   = 0xff;
0085be   6912     setf	0x12, 0x1           	SETF	(_ARPResolve_packet_1_1 + 18), B
0085c0   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 19)
                                           ;	.line	330; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[1]   = 0xff;
0085c2   6913     setf	0x13, 0x1           	SETF	(_ARPResolve_packet_1_1 + 19), B
0085c4   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 20)
                                           ;	.line	331; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[2]   = 0xff;
0085c6   6914     setf	0x14, 0x1           	SETF	(_ARPResolve_packet_1_1 + 20), B
0085c8   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 21)
                                           ;	.line	332; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[3]   = 0xff;
0085ca   6915     setf	0x15, 0x1           	SETF	(_ARPResolve_packet_1_1 + 21), B
0085cc   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 22)
                                           ;	.line	333; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[4]   = 0xff;
0085ce   6916     setf	0x16, 0x1           	SETF	(_ARPResolve_packet_1_1 + 22), B
0085d0   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 23)
                                           ;	.line	334; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[5]   = 0xff;
0085d2   6917     setf	0x17, 0x1           	SETF	(_ARPResolve_packet_1_1 + 23), B
                                           ;	.line	340; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val) 
0085d4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0085d6   ffe9
0085d8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0085da   fff3
0085dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0085de   ec40     call	0xba80, 0           	CALL	__gptrget4
0085e0   f05d
0085e2   6e00     movwf	0, 0               	MOVWF	r0x00
0085e4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0085e6   f001
0085e8   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0085ea   f002
0085ec   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0085ee   f003
0085f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0085f2   0108     movlb	0x8                	BANKSEL	_AppConfig
0085f4   19c8     xorwf	0xc8, 0, 0x1       	XORWF	_AppConfig, W, B
0085f6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0085f8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0085fa   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
0085fc   19c9     xorwf	0xc9, 0, 0x1       	XORWF	(_AppConfig + 1), W, B
0085fe   6e05     movwf	0x5, 0             	MOVWF	r0x05
008600   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008602   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
008604   19ca     xorwf	0xca, 0, 0x1       	XORWF	(_AppConfig + 2), W, B
008606   6e06     movwf	0x6, 0             	MOVWF	r0x06
008608   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00860a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
00860c   19cb     xorwf	0xcb, 0, 0x1       	XORWF	(_AppConfig + 3), W, B
00860e   6e07     movwf	0x7, 0             	MOVWF	r0x07
008610   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
008612   51cc     movf	0xcc, 0, 0x1        	MOVF	(_AppConfig + 4), W, B
008614   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
008616   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
008618   51cd     movf	0xcd, 0, 0x1        	MOVF	(_AppConfig + 5), W, B
00861a   1605     andwf	0x5, 0x1, 0        	ANDWF	r0x05, F
00861c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
00861e   51ce     movf	0xce, 0, 0x1        	MOVF	(_AppConfig + 6), W, B
008620   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
008622   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
008624   51cf     movf	0xcf, 0, 0x1        	MOVF	(_AppConfig + 7), W, B
008626   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
008628   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00862a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00862c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00862e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
008630   e009     bz	0x8644                	BZ	_00165_DS_
                                           ;	.line	341; TCPIP_Stack/ARP.c	? AppConfig.MyGateway.Val 
008632   c8d0     movff	0x8d0, 0x4         	MOVFF	(_AppConfig + 8), r0x04
008634   f004
008636   c8d1     movff	0x8d1, 0x5         	MOVFF	(_AppConfig + 9), r0x05
008638   f005
00863a   c8d2     movff	0x8d2, 0x6         	MOVFF	(_AppConfig + 10), r0x06
00863c   f006
00863e   c8d3     movff	0x8d3, 0x7         	MOVFF	(_AppConfig + 11), r0x07
008640   f007
008642   d008     bra	0x8654               	BRA	_00166_DS_
                                           _00165_DS_:
                                           ;	.line	342; TCPIP_Stack/ARP.c	: (*IPAddr).Val;
008644   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
008646   f004
008648   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00864a   f005
00864c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00864e   f006
008650   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
008652   f007
                                           _00166_DS_:
008654   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008656   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 24)
008658   6f18     movwf	0x18, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 24), B
00865a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00865c   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 25)
00865e   6f19     movwf	0x19, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 25), B
008660   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008662   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 26)
008664   6f1a     movwf	0x1a, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 26), B
008666   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
008668   010b     movlb	0xb                	BANKSEL	(_ARPResolve_packet_1_1 + 27)
00866a   6f1b     movwf	0x1b, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 27), B
                                           ;	.line	343; TCPIP_Stack/ARP.c	ARPPut(&packet);
00866c   0e0b     movlw	0xb                	MOVLW	HIGH(_ARPResolve_packet_1_1)
00866e   6e01     movwf	0x1, 0             	MOVWF	r0x01
008670   0e00     movlw	0                  	MOVLW	LOW(_ARPResolve_packet_1_1)
008672   6e00     movwf	0, 0               	MOVWF	r0x00
008674   0e80     movlw	0x80               	MOVLW	0x80
008676   6e02     movwf	0x2, 0             	MOVWF	r0x02
008678   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00867a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00867c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00867e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008680   5000     movf	0, 0, 0             	MOVF	r0x00, W
008682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008684   ec3c     call	0x6678, 0           	CALL	_ARPPut
008686   f033
008688   0e03     movlw	0x3                	MOVLW	0x03
00868a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00868c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00868e   f007
008690   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008692   f006
008694   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008696   f005
008698   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00869a   f004
00869c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00869e   f003
0086a0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0086a2   f002
0086a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0086a6   f001
0086a8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0086aa   f000
0086ac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0086ae   ffd9
0086b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPProcess	code
                                           _ARPProcess:
                                           ;	.line	204; TCPIP_Stack/ARP.c	BOOL ARPProcess(void)
004d8c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004d8e   ffe5
004d90   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004d92   ffd9
004d94   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004d96   ffe5
004d98   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004d9a   ffe5
004d9c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004d9e   ffe5
004da0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004da2   ffe5
004da4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004da6   ffe5
004da8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004daa   ffe5
004dac   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004dae   ffe5
004db0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004db2   ffe5
004db4   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	214; TCPIP_Stack/ARP.c	switch(smARP)
004db6   5151     movf	0x51, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
004db8   e006     bz	0x4dc6                	BZ	_00118_DS_
                                           _00144_DS_:
004dba   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
004dbc   5151     movf	0x51, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
004dbe   0a01     xorlw	0x1                	XORLW	0x01
004dc0   e101     bnz	0x4dc4               	BNZ	_00146_DS_
004dc2   d0c4     bra	0x4f4c               	BRA	_00129_DS_
                                           _00146_DS_:
004dc4   d10f     bra	0x4fe4               	BRA	_00132_DS_
                                           _00118_DS_:
                                           ;	.line	218; TCPIP_Stack/ARP.c	MACGetArray((BYTE*)&packet, sizeof(packet));
004dc6   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
004dc8   6e01     movwf	0x1, 0             	MOVWF	r0x01
004dca   0e61     movlw	0x61               	MOVLW	LOW(_ARPProcess_packet_1_1)
004dcc   6e00     movwf	0, 0               	MOVWF	r0x00
004dce   0e80     movlw	0x80               	MOVLW	0x80
004dd0   6e02     movwf	0x2, 0             	MOVWF	r0x02
004dd2   0e00     movlw	0                  	MOVLW	0x00
004dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dd6   0e1c     movlw	0x1c               	MOVLW	0x1c
004dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dda   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dde   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004de2   5000     movf	0, 0, 0             	MOVF	r0x00, W
004de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004de6   ecac     call	0x9d58, 0           	CALL	_MACGetArray
004de8   f04e
004dea   0e05     movlw	0x5                	MOVLW	0x05
004dec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	219; TCPIP_Stack/ARP.c	MACDiscardRx();
004dee   ec81     call	0xad02, 0           	CALL	_MACDiscardRx
004df0   f056
                                           ;	.line	220; TCPIP_Stack/ARP.c	SwapARPPacket(&packet);
004df2   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
004df4   6e01     movwf	0x1, 0             	MOVWF	r0x01
004df6   0e61     movlw	0x61               	MOVLW	LOW(_ARPProcess_packet_1_1)
004df8   6e00     movwf	0, 0               	MOVWF	r0x00
004dfa   0e80     movlw	0x80               	MOVLW	0x80
004dfc   6e02     movwf	0x2, 0             	MOVWF	r0x02
004dfe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004e00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e02   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004e04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e06   5000     movf	0, 0, 0             	MOVF	r0x00, W
004e08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e0a   ec1d     call	0x843a, 0           	CALL	_SwapARPPacket
004e0c   f042
004e0e   0e03     movlw	0x3                	MOVLW	0x03
004e10   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004e12   010e     movlb	0xe                	BANKSEL	_ARPProcess_packet_1_1
                                           ;	.line	223; TCPIP_Stack/ARP.c	if ( packet.HardwareType != HW_ETHERNET     ||
004e14   5161     movf	0x61, 0, 0x1        	MOVF	_ARPProcess_packet_1_1, W, B
004e16   0a01     xorlw	0x1                	XORLW	0x01
004e18   e103     bnz	0x4e20               	BNZ	_00147_DS_
004e1a   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 1)
004e1c   5162     movf	0x62, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 1), W, B
004e1e   e001     bz	0x4e22                	BZ	_00148_DS_
                                           _00147_DS_:
004e20   d008     bra	0x4e32               	BRA	_00119_DS_
                                           _00148_DS_:
004e22   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 4)
                                           ;	.line	224; TCPIP_Stack/ARP.c	packet.MACAddrLen != sizeof(MAC_ADDR)  ||
004e24   5165     movf	0x65, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 4), W, B
004e26   0a06     xorlw	0x6                	XORLW	0x06
004e28   e104     bnz	0x4e32               	BNZ	_00119_DS_
                                           _00150_DS_:
004e2a   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 5)
                                           ;	.line	225; TCPIP_Stack/ARP.c	packet.ProtocolLen != sizeof(IP_ADDR) )
004e2c   5166     movf	0x66, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 5), W, B
004e2e   0a04     xorlw	0x4                	XORLW	0x04
004e30   e002     bz	0x4e36                	BZ	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	227; TCPIP_Stack/ARP.c	return TRUE;
004e32   0e01     movlw	0x1                	MOVLW	0x01
004e34   d0d8     bra	0x4fe6               	BRA	_00133_DS_
                                           _00120_DS_:
                                           ;	.line	232; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_RESP)
004e36   ce67     movff	0xe67, 0           	MOVFF	(_ARPProcess_packet_1_1 + 6), r0x00
004e38   f000
004e3a   ce68     movff	0xe68, 0x1         	MOVFF	(_ARPProcess_packet_1_1 + 7), r0x01
004e3c   f001
004e3e   5000     movf	0, 0, 0             	MOVF	r0x00, W
004e40   0a02     xorlw	0x2                	XORLW	0x02
004e42   e102     bnz	0x4e48               	BNZ	_00153_DS_
004e44   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004e46   e001     bz	0x4e4a                	BZ	_00154_DS_
                                           _00153_DS_:
004e48   d032     bra	0x4eae               	BRA	_00124_DS_
                                           _00154_DS_:
                                           ;	.line	238; TCPIP_Stack/ARP.c	memcpy((void*)&Cache.MACAddr, (void*)&packet.SenderMACAddr, 
004e4a   0e0b     movlw	0xb                	MOVLW	HIGH(_Cache + 4)
004e4c   6e03     movwf	0x3, 0             	MOVWF	r0x03
004e4e   0eb8     movlw	0xb8               	MOVLW	LOW(_Cache + 4)
004e50   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e52   0e80     movlw	0x80               	MOVLW	0x80
004e54   6e04     movwf	0x4, 0             	MOVWF	r0x04
004e56   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
004e58   6e06     movwf	0x6, 0             	MOVWF	r0x06
004e5a   0e69     movlw	0x69               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
004e5c   6e05     movwf	0x5, 0             	MOVWF	r0x05
004e5e   0e80     movlw	0x80               	MOVLW	0x80
004e60   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	239; TCPIP_Stack/ARP.c	sizeof(packet.SenderMACAddr));  
004e62   0e00     movlw	0                  	MOVLW	0x00
004e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e66   0e06     movlw	0x6                	MOVLW	0x06
004e68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e6a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e6e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e72   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e76   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e7a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004e7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e7e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004e80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e82   ec7b     call	0x94f6, 0           	CALL	_memcpy
004e84   f04a
004e86   0e08     movlw	0x8                	MOVLW	0x08
004e88   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004e8a   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	243; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = packet.SenderIPAddr.Val;
004e8c   516f     movf	0x6f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
004e8e   010b     movlb	0xb                	BANKSEL	_Cache
004e90   6fb4     movwf	0xb4, 0x1          	MOVWF	_Cache, B
004e92   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
004e94   5170     movf	0x70, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
004e96   010b     movlb	0xb                	BANKSEL	(_Cache + 1)
004e98   6fb5     movwf	0xb5, 0x1          	MOVWF	(_Cache + 1), B
004e9a   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
004e9c   5171     movf	0x71, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
004e9e   010b     movlb	0xb                	BANKSEL	(_Cache + 2)
004ea0   6fb6     movwf	0xb6, 0x1          	MOVWF	(_Cache + 2), B
004ea2   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
004ea4   5172     movf	0x72, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
004ea6   010b     movlb	0xb                	BANKSEL	(_Cache + 3)
004ea8   6fb7     movwf	0xb7, 0x1          	MOVWF	(_Cache + 3), B
                                           ;	.line	244; TCPIP_Stack/ARP.c	return TRUE;
004eaa   0e01     movlw	0x1                	MOVLW	0x01
004eac   d09c     bra	0x4fe6               	BRA	_00133_DS_
                                           _00124_DS_:
                                           ;	.line	249; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_REQ)
004eae   5000     movf	0, 0, 0             	MOVF	r0x00, W
004eb0   0a01     xorlw	0x1                	XORLW	0x01
004eb2   e102     bnz	0x4eb8               	BNZ	_00155_DS_
004eb4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004eb6   e001     bz	0x4eba                	BZ	_00156_DS_
                                           _00155_DS_:
004eb8   d049     bra	0x4f4c               	BRA	_00129_DS_
                                           _00156_DS_:
004eba   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
                                           ;	.line	251; TCPIP_Stack/ARP.c	if(packet.TargetIPAddr.Val != AppConfig.MyIPAddr.Val)
004ebc   5179     movf	0x79, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 24), W, B
004ebe   0108     movlb	0x8                	BANKSEL	_AppConfig
004ec0   19c8     xorwf	0xc8, 0, 0x1       	XORWF	_AppConfig, W, B
004ec2   e10f     bnz	0x4ee2               	BNZ	_00158_DS_
004ec4   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
004ec6   517a     movf	0x7a, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 25), W, B
004ec8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
004eca   19c9     xorwf	0xc9, 0, 0x1       	XORWF	(_AppConfig + 1), W, B
004ecc   e10a     bnz	0x4ee2               	BNZ	_00158_DS_
004ece   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
004ed0   517b     movf	0x7b, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 26), W, B
004ed2   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
004ed4   19ca     xorwf	0xca, 0, 0x1       	XORWF	(_AppConfig + 2), W, B
004ed6   e105     bnz	0x4ee2               	BNZ	_00158_DS_
004ed8   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
004eda   517c     movf	0x7c, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 27), W, B
004edc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
004ede   19cb     xorwf	0xcb, 0, 0x1       	XORWF	(_AppConfig + 3), W, B
004ee0   e002     bz	0x4ee6                	BZ	_00126_DS_
                                           _00158_DS_:
                                           ;	.line	253; TCPIP_Stack/ARP.c	return TRUE;
004ee2   0e01     movlw	0x1                	MOVLW	0x01
004ee4   d080     bra	0x4fe6               	BRA	_00133_DS_
                                           _00126_DS_:
004ee6   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	262; TCPIP_Stack/ARP.c	Target.IPAddr.Val = packet.SenderIPAddr.Val;
004ee8   516f     movf	0x6f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
004eea   010b     movlb	0xb                	BANKSEL	_ARPProcess_Target_1_1
004eec   6fbe     movwf	0xbe, 0x1          	MOVWF	_ARPProcess_Target_1_1, B
004eee   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
004ef0   5170     movf	0x70, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
004ef2   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
004ef4   6fbf     movwf	0xbf, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 1), B
004ef6   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
004ef8   5171     movf	0x71, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
004efa   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
004efc   6fc0     movwf	0xc0, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 2), B
004efe   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
004f00   5172     movf	0x72, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
004f02   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
004f04   6fc1     movwf	0xc1, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 3), B
                                           ;	.line	264; TCPIP_Stack/ARP.c	memcpy((void*)&Target.MACAddr, 
004f06   0e0b     movlw	0xb                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
004f08   6e01     movwf	0x1, 0             	MOVWF	r0x01
004f0a   0ec2     movlw	0xc2               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
004f0c   6e00     movwf	0, 0               	MOVWF	r0x00
004f0e   0e80     movlw	0x80               	MOVLW	0x80
004f10   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	265; TCPIP_Stack/ARP.c	(void*)&packet.SenderMACAddr, sizeof(packet.SenderMACAddr));
004f12   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
004f14   6e04     movwf	0x4, 0             	MOVWF	r0x04
004f16   0e69     movlw	0x69               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
004f18   6e03     movwf	0x3, 0             	MOVWF	r0x03
004f1a   0e80     movlw	0x80               	MOVLW	0x80
004f1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
004f1e   0e00     movlw	0                  	MOVLW	0x00
004f20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f22   0e06     movlw	0x6                	MOVLW	0x06
004f24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004f28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f2e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004f30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f32   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f36   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004f38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
004f3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f3e   ec7b     call	0x94f6, 0           	CALL	_memcpy
004f40   f04a
004f42   0e08     movlw	0x8                	MOVLW	0x08
004f44   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; TCPIP_Stack/ARP.c	smARP = SM_ARP_REPLY;
004f46   0e01     movlw	0x1                	MOVLW	0x01
004f48   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
004f4a   6f51     movwf	0x51, 0x1          	MOVWF	_ARPProcess_smARP_1_1, B
                                           _00129_DS_:
                                           ;	.line	274; TCPIP_Stack/ARP.c	packet.Operation  = ARP_OPERATION_RESP;
004f4c   0e02     movlw	0x2                	MOVLW	0x02
004f4e   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 6)
004f50   6f67     movwf	0x67, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 6), B
004f52   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 7)
004f54   6b68     clrf	0x68, 0x1           	CLRF	(_ARPProcess_packet_1_1 + 7), B
                                           ;	.line	276; TCPIP_Stack/ARP.c	memcpy(&packet.TargetMACAddr, (void*)&Target.MACAddr, 
004f56   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 18)
004f58   6e01     movwf	0x1, 0             	MOVWF	r0x01
004f5a   0e73     movlw	0x73               	MOVLW	LOW(_ARPProcess_packet_1_1 + 18)
004f5c   6e00     movwf	0, 0               	MOVWF	r0x00
004f5e   0e80     movlw	0x80               	MOVLW	0x80
004f60   6e02     movwf	0x2, 0             	MOVWF	r0x02
004f62   0e0b     movlw	0xb                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
004f64   6e04     movwf	0x4, 0             	MOVWF	r0x04
004f66   0ec2     movlw	0xc2               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
004f68   6e03     movwf	0x3, 0             	MOVWF	r0x03
004f6a   0e80     movlw	0x80               	MOVLW	0x80
004f6c   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	277; TCPIP_Stack/ARP.c	sizeof(Target.MACAddr));
004f6e   0e00     movlw	0                  	MOVLW	0x00
004f70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f72   0e06     movlw	0x6                	MOVLW	0x06
004f74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f76   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004f78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f7a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004f7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f7e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004f80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004f88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
004f8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f8e   ec7b     call	0x94f6, 0           	CALL	_memcpy
004f90   f04a
004f92   0e08     movlw	0x8                	MOVLW	0x08
004f94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004f96   010b     movlb	0xb                	BANKSEL	_ARPProcess_Target_1_1
                                           ;	.line	281; TCPIP_Stack/ARP.c	packet.TargetIPAddr.Val	= Target.IPAddr.Val;
004f98   51be     movf	0xbe, 0, 0x1        	MOVF	_ARPProcess_Target_1_1, W, B
004f9a   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
004f9c   6f79     movwf	0x79, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 24), B
004f9e   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
004fa0   51bf     movf	0xbf, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 1), W, B
004fa2   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
004fa4   6f7a     movwf	0x7a, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 25), B
004fa6   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
004fa8   51c0     movf	0xc0, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 2), W, B
004faa   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
004fac   6f7b     movwf	0x7b, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 26), B
004fae   010b     movlb	0xb                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
004fb0   51c1     movf	0xc1, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 3), W, B
004fb2   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
004fb4   6f7c     movwf	0x7c, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 27), B
                                           ;	.line	284; TCPIP_Stack/ARP.c	if(!ARPPut(&packet))
004fb6   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
004fb8   6e01     movwf	0x1, 0             	MOVWF	r0x01
004fba   0e61     movlw	0x61               	MOVLW	LOW(_ARPProcess_packet_1_1)
004fbc   6e00     movwf	0, 0               	MOVWF	r0x00
004fbe   0e80     movlw	0x80               	MOVLW	0x80
004fc0   6e02     movwf	0x2, 0             	MOVWF	r0x02
004fc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004fc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004fc6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004fc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004fca   5000     movf	0, 0, 0             	MOVF	r0x00, W
004fcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004fce   ec3c     call	0x6678, 0           	CALL	_ARPPut
004fd0   f033
004fd2   6e00     movwf	0, 0               	MOVWF	r0x00
004fd4   0e03     movlw	0x3                	MOVLW	0x03
004fd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004fd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
004fda   e102     bnz	0x4fe0               	BNZ	_00131_DS_
                                           ;	.line	286; TCPIP_Stack/ARP.c	return FALSE;
004fdc   6ae8     clrf	0xe8, 0             	CLRF	WREG
004fde   d003     bra	0x4fe6               	BRA	_00133_DS_
                                           _00131_DS_:
004fe0   010e     movlb	0xe                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	290; TCPIP_Stack/ARP.c	smARP = SM_ARP_IDLE;
004fe2   6b51     clrf	0x51, 0x1           	CLRF	_ARPProcess_smARP_1_1, B
                                           _00132_DS_:
                                           ;	.line	294; TCPIP_Stack/ARP.c	return TRUE;
004fe4   0e01     movlw	0x1                	MOVLW	0x01
                                           _00133_DS_:
004fe6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004fe8   f007
004fea   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004fec   f006
004fee   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004ff0   f005
004ff2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004ff4   f004
004ff6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004ff8   f003
004ffa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004ffc   f002
004ffe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005000   f001
005002   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005004   f000
005006   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005008   ffd9
00500a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPInit	code
                                           _ARPInit:
                                           ;	.line	165; TCPIP_Stack/ARP.c	void ARPInit(void)
00bb32   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bb34   ffe5
00bb36   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bb38   ffd9
00bb3a   010b     movlb	0xb                	BANKSEL	(_Cache + 4)
                                           ;	.line	167; TCPIP_Stack/ARP.c	Cache.MACAddr.v[0] = 0xff;
00bb3c   69b8     setf	0xb8, 0x1           	SETF	(_Cache + 4), B
00bb3e   010b     movlb	0xb                	BANKSEL	(_Cache + 5)
                                           ;	.line	168; TCPIP_Stack/ARP.c	Cache.MACAddr.v[1] = 0xff;
00bb40   69b9     setf	0xb9, 0x1           	SETF	(_Cache + 5), B
00bb42   010b     movlb	0xb                	BANKSEL	(_Cache + 6)
                                           ;	.line	169; TCPIP_Stack/ARP.c	Cache.MACAddr.v[2] = 0xff;
00bb44   69ba     setf	0xba, 0x1           	SETF	(_Cache + 6), B
00bb46   010b     movlb	0xb                	BANKSEL	(_Cache + 7)
                                           ;	.line	170; TCPIP_Stack/ARP.c	Cache.MACAddr.v[3] = 0xff;
00bb48   69bb     setf	0xbb, 0x1           	SETF	(_Cache + 7), B
00bb4a   010b     movlb	0xb                	BANKSEL	(_Cache + 8)
                                           ;	.line	171; TCPIP_Stack/ARP.c	Cache.MACAddr.v[4] = 0xff;
00bb4c   69bc     setf	0xbc, 0x1           	SETF	(_Cache + 8), B
00bb4e   010b     movlb	0xb                	BANKSEL	(_Cache + 9)
                                           ;	.line	172; TCPIP_Stack/ARP.c	Cache.MACAddr.v[5] = 0xff;
00bb50   69bd     setf	0xbd, 0x1           	SETF	(_Cache + 9), B
00bb52   010b     movlb	0xb                	BANKSEL	_Cache
                                           ;	.line	174; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = 0x0;
00bb54   6bb4     clrf	0xb4, 0x1           	CLRF	_Cache, B
00bb56   010b     movlb	0xb                	BANKSEL	(_Cache + 1)
00bb58   6bb5     clrf	0xb5, 0x1           	CLRF	(_Cache + 1), B
00bb5a   010b     movlb	0xb                	BANKSEL	(_Cache + 2)
00bb5c   6bb6     clrf	0xb6, 0x1           	CLRF	(_Cache + 2), B
00bb5e   010b     movlb	0xb                	BANKSEL	(_Cache + 3)
00bb60   6bb7     clrf	0xb7, 0x1           	CLRF	(_Cache + 3), B
00bb62   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bb64   ffd9
00bb66   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPPut	code
                                           _ARPPut:
                                           ;	.line	111; TCPIP_Stack/ARP.c	static BOOL ARPPut(ARP_PACKET* packet)
006678   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00667a   ffe5
00667c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00667e   ffd9
006680   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006682   ffe5
006684   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006686   ffe5
006688   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00668a   ffe5
00668c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00668e   ffe5
006690   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006692   ffe5
006694   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006696   ffe5
006698   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00669a   ffe5
00669c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00669e   ffe5
0066a0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0066a2   ffe5
0066a4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0066a6   ffe5
0066a8   0e02     movlw	0x2                	MOVLW	0x02
0066aa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0066ac   f000
0066ae   0e03     movlw	0x3                	MOVLW	0x03
0066b0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0066b2   f001
0066b4   0e04     movlw	0x4                	MOVLW	0x04
0066b6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0066b8   f002
                                           _00105_DS_:
                                           ;	.line	113; TCPIP_Stack/ARP.c	while(!MACIsTxReady());
0066ba   ecb2     call	0xb364, 0           	CALL	_MACIsTxReady
0066bc   f059
0066be   6e03     movwf	0x3, 0             	MOVWF	r0x03
0066c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0066c2   e0fb     bz	0x66ba                	BZ	_00105_DS_
                                           ;	.line	114; TCPIP_Stack/ARP.c	MACSetWritePtr(BASE_TX_ADDR);
0066c4   0e1a     movlw	0x1a               	MOVLW	0x1a
0066c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066c8   0e0b     movlw	0xb                	MOVLW	0x0b
0066ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066cc   ecb1     call	0xb162, 0           	CALL	_MACSetWritePtr
0066ce   f058
0066d0   0e02     movlw	0x2                	MOVLW	0x02
0066d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	117; TCPIP_Stack/ARP.c	packet->HardwareType  = HW_ETHERNET;
0066d4   0e01     movlw	0x1                	MOVLW	0x01
0066d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066d8   0e00     movlw	0                  	MOVLW	0x00
0066da   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0066dc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0066de   ffe9
0066e0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0066e2   fff3
0066e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0066e6   ec08     call	0xbe10, 0           	CALL	__gptrput2
0066e8   f05f
                                           ;	.line	118; TCPIP_Stack/ARP.c	packet->Protocol      = ARP_IP;
0066ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066ec   0f02     addlw	0x2                	ADDLW	0x02
0066ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0066f0   0e00     movlw	0                  	MOVLW	0x00
0066f2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0066f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0066f6   0e00     movlw	0                  	MOVLW	0x00
0066f8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0066fa   6e05     movwf	0x5, 0             	MOVWF	r0x05
0066fc   0e00     movlw	0                  	MOVLW	0x00
0066fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006700   0e08     movlw	0x8                	MOVLW	0x08
006702   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
006704   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
006706   ffe9
006708   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00670a   fff3
00670c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00670e   ec08     call	0xbe10, 0           	CALL	__gptrput2
006710   f05f
                                           ;	.line	119; TCPIP_Stack/ARP.c	packet->MACAddrLen    = sizeof(MAC_ADDR);
006712   5000     movf	0, 0, 0             	MOVF	r0x00, W
006714   0f04     addlw	0x4                	ADDLW	0x04
006716   6e03     movwf	0x3, 0             	MOVWF	r0x03
006718   0e00     movlw	0                  	MOVLW	0x00
00671a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00671c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00671e   0e00     movlw	0                  	MOVLW	0x00
006720   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006722   6e05     movwf	0x5, 0             	MOVWF	r0x05
006724   0e06     movlw	0x6                	MOVLW	0x06
006726   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006728   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00672a   ffe9
00672c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00672e   fff3
006730   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006732   ec28     call	0xbe50, 0           	CALL	__gptrput1
006734   f05f
                                           ;	.line	120; TCPIP_Stack/ARP.c	packet->ProtocolLen   = sizeof(IP_ADDR);
006736   5000     movf	0, 0, 0             	MOVF	r0x00, W
006738   0f05     addlw	0x5                	ADDLW	0x05
00673a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00673c   0e00     movlw	0                  	MOVLW	0x00
00673e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006740   6e04     movwf	0x4, 0             	MOVWF	r0x04
006742   0e00     movlw	0                  	MOVLW	0x00
006744   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006746   6e05     movwf	0x5, 0             	MOVWF	r0x05
006748   0e04     movlw	0x4                	MOVLW	0x04
00674a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00674c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00674e   ffe9
006750   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006752   fff3
006754   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006756   ec28     call	0xbe50, 0           	CALL	__gptrput1
006758   f05f
                                           ;	.line	122; TCPIP_Stack/ARP.c	memcpy(&packet->SenderMACAddr, (void*)&AppConfig.MyMACAddr, 
00675a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00675c   0f08     addlw	0x8                	ADDLW	0x08
00675e   6e03     movwf	0x3, 0             	MOVWF	r0x03
006760   0e00     movlw	0                  	MOVLW	0x00
006762   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006764   6e04     movwf	0x4, 0             	MOVWF	r0x04
006766   0e00     movlw	0                  	MOVLW	0x00
006768   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00676a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00676c   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
00676e   6e07     movwf	0x7, 0             	MOVWF	r0x07
006770   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
006772   6e06     movwf	0x6, 0             	MOVWF	r0x06
006774   0e80     movlw	0x80               	MOVLW	0x80
006776   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	123; TCPIP_Stack/ARP.c	sizeof(packet->SenderMACAddr));
006778   0e00     movlw	0                  	MOVLW	0x00
00677a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00677c   0e06     movlw	0x6                	MOVLW	0x06
00677e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006780   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006784   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006788   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00678a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00678c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00678e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006790   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006792   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006794   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006796   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006798   ec7b     call	0x94f6, 0           	CALL	_memcpy
00679a   f04a
00679c   0e08     movlw	0x8                	MOVLW	0x08
00679e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	127; TCPIP_Stack/ARP.c	packet->SenderIPAddr.Val  = AppConfig.MyIPAddr.Val;
0067a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067a2   0f0e     addlw	0xe                	ADDLW	0x0e
0067a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0067a6   0e00     movlw	0                  	MOVLW	0x00
0067a8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0067aa   6e04     movwf	0x4, 0             	MOVWF	r0x04
0067ac   0e00     movlw	0                  	MOVLW	0x00
0067ae   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0067b0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0067b2   c8c8     movff	0x8c8, 0x6         	MOVFF	_AppConfig, r0x06
0067b4   f006
0067b6   c8c9     movff	0x8c9, 0x7         	MOVFF	(_AppConfig + 1), r0x07
0067b8   f007
0067ba   c8ca     movff	0x8ca, 0x8         	MOVFF	(_AppConfig + 2), r0x08
0067bc   f008
0067be   c8cb     movff	0x8cb, 0x9         	MOVFF	(_AppConfig + 3), r0x09
0067c0   f009
0067c2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0067c4   ffe5
0067c6   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0067c8   fff4
0067ca   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
0067cc   fff6
0067ce   c009     movff	0x9, 0xff7         	MOVFF	r0x09, TBLPTRH
0067d0   fff7
0067d2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0067d4   ffe9
0067d6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0067d8   fff3
0067da   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0067dc   ec86     call	0xbd0c, 0           	CALL	__gptrput4
0067de   f05e
                                           ;	.line	129; TCPIP_Stack/ARP.c	SwapARPPacket(packet);
0067e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0067e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0067e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067ec   ec1d     call	0x843a, 0           	CALL	_SwapARPPacket
0067ee   f042
0067f0   0e03     movlw	0x3                	MOVLW	0x03
0067f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; TCPIP_Stack/ARP.c	MACPutHeader(&packet->TargetMACAddr, MAC_ARP, sizeof(*packet));
0067f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067f6   0f12     addlw	0x12               	ADDLW	0x12
0067f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0067fa   0e00     movlw	0                  	MOVLW	0x00
0067fc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0067fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
006800   0e00     movlw	0                  	MOVLW	0x00
006802   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
006804   6e05     movwf	0x5, 0             	MOVWF	r0x05
006806   0e00     movlw	0                  	MOVLW	0x00
006808   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00680a   0e1c     movlw	0x1c               	MOVLW	0x1c
00680c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00680e   0e06     movlw	0x6                	MOVLW	0x06
006810   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006812   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006814   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006816   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006818   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00681a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00681c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00681e   ec7d     call	0x82fa, 0           	CALL	_MACPutHeader
006820   f041
006822   0e06     movlw	0x6                	MOVLW	0x06
006824   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	132; TCPIP_Stack/ARP.c	MACPutArray((BYTE*)packet, sizeof(*packet));
006826   0e00     movlw	0                  	MOVLW	0x00
006828   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00682a   0e1c     movlw	0x1c               	MOVLW	0x1c
00682c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00682e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006830   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006834   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006836   5000     movf	0, 0, 0             	MOVF	r0x00, W
006838   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00683a   eceb     call	0xabd6, 0           	CALL	_MACPutArray
00683c   f055
00683e   0e05     movlw	0x5                	MOVLW	0x05
006840   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; TCPIP_Stack/ARP.c	MACFlush();
006842   ec95     call	0xb52a, 0           	CALL	_MACFlush
006844   f05a
                                           ;	.line	135; TCPIP_Stack/ARP.c	return TRUE;
006846   0e01     movlw	0x1                	MOVLW	0x01
006848   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00684a   f009
00684c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00684e   f008
006850   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006852   f007
006854   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006856   f006
006858   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00685a   f005
00685c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00685e   f004
006860   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006862   f003
006864   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006866   f002
006868   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00686a   f001
00686c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00686e   f000
006870   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006872   ffd9
006874   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2192 (0x0890) bytes ( 1.67%)
                                           ;           	 1096 (0x0448) words
                                           ; udata size:	   76 (0x004c) bytes ( 1.98%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DHCPInit
                                           	global _DHCPDisable
                                           	global _DHCPEnable
                                           	global _DHCPIsEnabled
                                           	global _DHCPIsBound
                                           	global _DHCPStateChanged
                                           	global _DHCPIsServerDetected
                                           	global _DHCPTask
                                           	global _DHCPClientInitializedOnce
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           	extern _TickGet
                                           	extern _MACIsLinked
                                           	extern _UDPOpen
                                           	extern _UDPClose
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _DHCPClientInitializedOnce	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_DHCP_0	udata
                                           _DHCPClient	res	28
                                           
                                           udata_DHCP_1	udata
                                           __DHCPReceive_type_1_1	res	1
                                           
                                           udata_DHCP_2	udata
                                           __DHCPReceive_j_1_1	res	1
                                           
                                           udata_DHCP_3	udata
                                           __DHCPReceive_v_1_1	res	1
                                           
                                           udata_DHCP_4	udata
                                           __DHCPReceive_tempServerID_1_1	res	4
                                           
                                           udata_DHCP_5	udata
                                           __DHCPSend_MyIP_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPSend	code
                                           __DHCPSend:
                                           ;	.line	1039; TCPIP_Stack/DHCP.c	static void _DHCPSend(BYTE messageType, BOOL bRenewing)
0028da   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028dc   ffe5
0028de   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028e0   ffd9
0028e2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028e4   ffe5
0028e6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028e8   ffe5
0028ea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028ec   ffe5
0028ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028f0   ffe5
0028f2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028f4   ffe5
0028f6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0028f8   ffe5
0028fa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0028fc   ffe5
0028fe   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002900   ffe5
002902   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002904   ffe5
002906   0e02     movlw	0x2                	MOVLW	0x02
002908   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00290a   f000
00290c   0e03     movlw	0x3                	MOVLW	0x03
00290e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002910   f001
                                           ;	.line	1045; TCPIP_Stack/DHCP.c	UDPPut(BOOT_REQUEST);                       // op
002912   0e01     movlw	0x1                	MOVLW	0x01
002914   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002916   ec36     call	0xac6c, 0           	CALL	_UDPPut
002918   f056
00291a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1046; TCPIP_Stack/DHCP.c	UDPPut(BOOT_HW_TYPE);                       // htype
00291c   0e01     movlw	0x1                	MOVLW	0x01
00291e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002920   ec36     call	0xac6c, 0           	CALL	_UDPPut
002922   f056
002924   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1047; TCPIP_Stack/DHCP.c	UDPPut(BOOT_LEN_OF_HW_TYPE);                // hlen
002926   0e06     movlw	0x6                	MOVLW	0x06
002928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00292a   ec36     call	0xac6c, 0           	CALL	_UDPPut
00292c   f056
00292e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1048; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // hops
002930   0e00     movlw	0                  	MOVLW	0x00
002932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002934   ec36     call	0xac6c, 0           	CALL	_UDPPut
002936   f056
002938   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1049; TCPIP_Stack/DHCP.c	UDPPut(0x12);                               // xid[0]
00293a   0e12     movlw	0x12               	MOVLW	0x12
00293c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00293e   ec36     call	0xac6c, 0           	CALL	_UDPPut
002940   f056
002942   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1050; TCPIP_Stack/DHCP.c	UDPPut(0x23);                               // xid[1]
002944   0e23     movlw	0x23               	MOVLW	0x23
002946   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002948   ec36     call	0xac6c, 0           	CALL	_UDPPut
00294a   f056
00294c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1051; TCPIP_Stack/DHCP.c	UDPPut(0x34);                               // xid[2]
00294e   0e34     movlw	0x34               	MOVLW	0x34
002950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002952   ec36     call	0xac6c, 0           	CALL	_UDPPut
002954   f056
002956   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1052; TCPIP_Stack/DHCP.c	UDPPut(0x56);                               // xid[3]
002958   0e56     movlw	0x56               	MOVLW	0x56
00295a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00295c   ec36     call	0xac6c, 0           	CALL	_UDPPut
00295e   f056
002960   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1053; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[0]
002962   0e00     movlw	0                  	MOVLW	0x00
002964   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002966   ec36     call	0xac6c, 0           	CALL	_UDPPut
002968   f056
00296a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1054; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[1]
00296c   0e00     movlw	0                  	MOVLW	0x00
00296e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002970   ec36     call	0xac6c, 0           	CALL	_UDPPut
002972   f056
002974   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002976   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1055; TCPIP_Stack/DHCP.c	UDPPut(DHCPClient.flags.bits.bUseUnicastMode ? 0x00: 0x80);
002978   a91e     btfss	0x1e, 0x4, 0x1     	BTFSS	(_DHCPClient + 2), 4, B
00297a   d002     bra	0x2980               	BRA	_00489_DS_
00297c   6a02     clrf	0x2, 0              	CLRF	r0x02
00297e   d002     bra	0x2984               	BRA	_00490_DS_
                                           _00489_DS_:
002980   0e80     movlw	0x80               	MOVLW	0x80
002982   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00490_DS_:
002984   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002986   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002988   ec36     call	0xac6c, 0           	CALL	_UDPPut
00298a   f056
00298c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1057; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // flags[1]
00298e   0e00     movlw	0                  	MOVLW	0x00
002990   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002992   ec36     call	0xac6c, 0           	CALL	_UDPPut
002994   f056
002996   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1060; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && bRenewing)
002998   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00299a   f002
00299c   6a03     clrf	0x3, 0              	CLRF	r0x03
00299e   6a04     clrf	0x4, 0              	CLRF	r0x04
0029a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029a2   0a03     xorlw	0x3                	XORLW	0x03
0029a4   e103     bnz	0x29ac               	BNZ	_00507_DS_
0029a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029a8   e101     bnz	0x29ac               	BNZ	_00507_DS_
0029aa   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           _00507_DS_:
0029ac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029ae   e017     bz	0x29de                	BZ	_00463_DS_
0029b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0029b2   e015     bz	0x29de                	BZ	_00463_DS_
                                           ;	.line	1062; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
0029b4   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 15)
0029b6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0029b8   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
0029ba   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029bc   0e80     movlw	0x80               	MOVLW	0x80
0029be   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	1063; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0029c0   0e00     movlw	0                  	MOVLW	0x00
0029c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c4   0e04     movlw	0x4                	MOVLW	0x04
0029c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029c8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0029ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029cc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029d4   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
0029d6   f04b
0029d8   0e05     movlw	0x5                	MOVLW	0x05
0029da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029dc   d014     bra	0x2a06               	BRA	_00464_DS_
                                           _00463_DS_:
                                           ;	.line	1067; TCPIP_Stack/DHCP.c	UDPPut(0x00);
0029de   0e00     movlw	0                  	MOVLW	0x00
0029e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e2   ec36     call	0xac6c, 0           	CALL	_UDPPut
0029e4   f056
0029e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1068; TCPIP_Stack/DHCP.c	UDPPut(0x00);
0029e8   0e00     movlw	0                  	MOVLW	0x00
0029ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ec   ec36     call	0xac6c, 0           	CALL	_UDPPut
0029ee   f056
0029f0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1069; TCPIP_Stack/DHCP.c	UDPPut(0x00);
0029f2   0e00     movlw	0                  	MOVLW	0x00
0029f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029f6   ec36     call	0xac6c, 0           	CALL	_UDPPut
0029f8   f056
0029fa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1070; TCPIP_Stack/DHCP.c	UDPPut(0x00);
0029fc   0e00     movlw	0                  	MOVLW	0x00
0029fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a00   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a02   f056
002a04   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00464_DS_:
                                           ;	.line	1074; TCPIP_Stack/DHCP.c	for ( i = 0; i < 12u; i++ )	UDPPut(0x00);
002a06   0e0c     movlw	0xc                	MOVLW	0x0c
002a08   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00483_DS_:
002a0a   0e00     movlw	0                  	MOVLW	0x00
002a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0e   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a10   f056
002a12   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002a14   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
002a16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a18   e1f8     bnz	0x2a0a               	BNZ	_00483_DS_
                                           ;	.line	1077; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
002a1a   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
002a1c   6e07     movwf	0x7, 0             	MOVWF	r0x07
002a1e   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
002a20   6e06     movwf	0x6, 0             	MOVWF	r0x06
002a22   0e80     movlw	0x80               	MOVLW	0x80
002a24   6e08     movwf	0x8, 0             	MOVWF	r0x08
002a26   0e00     movlw	0                  	MOVLW	0x00
002a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2a   0e06     movlw	0x6                	MOVLW	0x06
002a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a32   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a36   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a3a   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
002a3c   f04b
002a3e   0e05     movlw	0x5                	MOVLW	0x05
002a40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1080; TCPIP_Stack/DHCP.c	for ( i = 0; i < 202u; i++ ) UDPPut(0);
002a42   0eca     movlw	0xca               	MOVLW	0xca
002a44   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00486_DS_:
002a46   0e00     movlw	0                  	MOVLW	0x00
002a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4a   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a4c   f056
002a4e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002a50   2e05     decfsz	0x5, 0x1, 0       	DECFSZ	r0x05, F
002a52   d7f9     bra	0x2a46               	BRA	_00486_DS_
                                           ;	.line	1083; TCPIP_Stack/DHCP.c	UDPPut(99);
002a54   0e63     movlw	0x63               	MOVLW	0x63
002a56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a58   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a5a   f056
002a5c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1084; TCPIP_Stack/DHCP.c	UDPPut(130);
002a5e   0e82     movlw	0x82               	MOVLW	0x82
002a60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a62   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a64   f056
002a66   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1085; TCPIP_Stack/DHCP.c	UDPPut(83);
002a68   0e53     movlw	0x53               	MOVLW	0x53
002a6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a6c   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a6e   f056
002a70   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1086; TCPIP_Stack/DHCP.c	UDPPut(99);
002a72   0e63     movlw	0x63               	MOVLW	0x63
002a74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a76   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a78   f056
002a7a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1089; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE);
002a7c   0e35     movlw	0x35               	MOVLW	0x35
002a7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a80   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a82   f056
002a84   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1090; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
002a86   0e01     movlw	0x1                	MOVLW	0x01
002a88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a8a   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a8c   f056
002a8e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1091; TCPIP_Stack/DHCP.c	UDPPut(messageType);
002a90   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a94   ec36     call	0xac6c, 0           	CALL	_UDPPut
002a96   f056
002a98   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1093; TCPIP_Stack/DHCP.c	if(messageType == DHCP_DISCOVER_MESSAGE)
002a9a   6a00     clrf	0, 0                	CLRF	r0x00
002a9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a9e   0a01     xorlw	0x1                	XORLW	0x01
002aa0   e103     bnz	0x2aa8               	BNZ	_00511_DS_
002aa2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002aa4   e101     bnz	0x2aa8               	BNZ	_00511_DS_
002aa6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00511_DS_:
002aa8   5000     movf	0, 0, 0             	MOVF	r0x00, W
002aaa   e002     bz	0x2ab0                	BZ	_00467_DS_
002aac   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1096; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
002aae   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           _00467_DS_:
                                           ;	.line	1100; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing)
002ab0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ab2   e024     bz	0x2afc                	BZ	_00469_DS_
002ab4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002ab6   e122     bnz	0x2afc               	BNZ	_00469_DS_
                                           ;	.line	1108; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER);
002ab8   0e36     movlw	0x36               	MOVLW	0x36
002aba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002abc   ec36     call	0xac6c, 0           	CALL	_UDPPut
002abe   f056
002ac0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1109; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER_LEN);
002ac2   0e04     movlw	0x4                	MOVLW	0x04
002ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac6   ec36     call	0xac6c, 0           	CALL	_UDPPut
002ac8   f056
002aca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002acc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 14)
                                           ;	.line	1110; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[3]);
002ace   512a     movf	0x2a, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
002ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad2   ec36     call	0xac6c, 0           	CALL	_UDPPut
002ad4   f056
002ad6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002ad8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 13)
                                           ;	.line	1111; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[2]);
002ada   5129     movf	0x29, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
002adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ade   ec36     call	0xac6c, 0           	CALL	_UDPPut
002ae0   f056
002ae2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002ae4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 12)
                                           ;	.line	1112; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[1]);
002ae6   5128     movf	0x28, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
002ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aea   ec36     call	0xac6c, 0           	CALL	_UDPPut
002aec   f056
002aee   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002af0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1113; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[0]);
002af2   5127     movf	0x27, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
002af4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002af6   ec36     call	0xac6c, 0           	CALL	_UDPPut
002af8   f056
002afa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00469_DS_:
                                           ;	.line	1119; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST);
002afc   0e37     movlw	0x37               	MOVLW	0x37
002afe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b00   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b02   f056
002b04   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1120; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST_LEN);
002b06   0e04     movlw	0x4                	MOVLW	0x04
002b08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b0a   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b0c   f056
002b0e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1121; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SUBNET_MASK);
002b10   0e01     movlw	0x1                	MOVLW	0x01
002b12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b14   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b16   f056
002b18   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1122; TCPIP_Stack/DHCP.c	UDPPut(DHCP_ROUTER);
002b1a   0e03     movlw	0x3                	MOVLW	0x03
002b1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b1e   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b20   f056
002b22   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1123; TCPIP_Stack/DHCP.c	UDPPut(DHCP_DNS);
002b24   0e06     movlw	0x6                	MOVLW	0x06
002b26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b28   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b2a   f056
002b2c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1124; TCPIP_Stack/DHCP.c	UDPPut(DHCP_HOST_NAME);
002b2e   0e0c     movlw	0xc                	MOVLW	0x0c
002b30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b32   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b34   f056
002b36   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1127; TCPIP_Stack/DHCP.c	if( ((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing) || 
002b38   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002b3a   e002     bz	0x2b40                	BZ	_00475_DS_
002b3c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002b3e   e00b     bz	0x2b56                	BZ	_00471_DS_
                                           _00475_DS_:
                                           ;	.line	1128; TCPIP_Stack/DHCP.c	((messageType == DHCP_DISCOVER_MESSAGE) && 
002b40   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b42   e027     bz	0x2b92                	BZ	_00472_DS_
002b44   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	1129; TCPIP_Stack/DHCP.c	DHCPClient.tempIPAddress.Val))
002b46   512b     movf	0x2b, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
002b48   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 16)
002b4a   112c     iorwf	0x2c, 0, 0x1       	IORWF	(_DHCPClient + 16), W, B
002b4c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 17)
002b4e   112d     iorwf	0x2d, 0, 0x1       	IORWF	(_DHCPClient + 17), W, B
002b50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 18)
002b52   112e     iorwf	0x2e, 0, 0x1       	IORWF	(_DHCPClient + 18), W, B
002b54   e01e     bz	0x2b92                	BZ	_00472_DS_
                                           _00471_DS_:
                                           ;	.line	1131; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS);
002b56   0e32     movlw	0x32               	MOVLW	0x32
002b58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b5a   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b5c   f056
002b5e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1132; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
002b60   0e04     movlw	0x4                	MOVLW	0x04
002b62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b64   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b66   f056
002b68   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1133; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
002b6a   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 15)
002b6c   6e02     movwf	0x2, 0             	MOVWF	r0x02
002b6e   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
002b70   6e00     movwf	0, 0               	MOVWF	r0x00
002b72   0e80     movlw	0x80               	MOVLW	0x80
002b74   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	1134; TCPIP_Stack/DHCP.c	DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
002b76   0e00     movlw	0                  	MOVLW	0x00
002b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b7a   0e04     movlw	0x4                	MOVLW	0x04
002b7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b7e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b86   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b8a   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
002b8c   f04b
002b8e   0e05     movlw	0x5                	MOVLW	0x05
002b90   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00472_DS_:
                                           ;	.line	1140; TCPIP_Stack/DHCP.c	UDPPut(DHCP_END_OPTION);
002b92   0eff     movlw	0xff               	MOVLW	0xff
002b94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002b96   ec36     call	0xac6c, 0           	CALL	_UDPPut
002b98   f056
002b9a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00476_DS_:
                                           ;	.line	1144; TCPIP_Stack/DHCP.c	while(UDPTxCount < 300u) UDPPut(0); 
002b9c   0e01     movlw	0x1                	MOVLW	0x01
002b9e   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
002ba0   5da0     subwf	0xa0, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
002ba2   e103     bnz	0x2baa               	BNZ	_00512_DS_
002ba4   0e2c     movlw	0x2c               	MOVLW	0x2c
002ba6   0102     movlb	0x2                	BANKSEL	_UDPTxCount
002ba8   5d9f     subwf	0x9f, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00512_DS_:
002baa   e206     bc	0x2bb8                	BC	_00478_DS_
002bac   0e00     movlw	0                  	MOVLW	0x00
002bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bb0   ec36     call	0xac6c, 0           	CALL	_UDPPut
002bb2   f056
002bb4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002bb6   d7f2     bra	0x2b9c               	BRA	_00476_DS_
                                           _00478_DS_:
002bb8   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	1149; TCPIP_Stack/DHCP.c	MyIP.Val = AppConfig.MyIPAddr.Val;
002bba   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
002bbc   0102     movlb	0x2                	BANKSEL	__DHCPSend_MyIP_1_1
002bbe   6f20     movwf	0x20, 0x1          	MOVWF	__DHCPSend_MyIP_1_1, B
002bc0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
002bc2   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
002bc4   0102     movlb	0x2                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
002bc6   6f21     movwf	0x21, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 1), B
002bc8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
002bca   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
002bcc   0102     movlb	0x2                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
002bce   6f22     movwf	0x22, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 2), B
002bd0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
002bd2   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
002bd4   0102     movlb	0x2                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
002bd6   6f23     movwf	0x23, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 3), B
                                           ;	.line	1150; TCPIP_Stack/DHCP.c	if(!bRenewing) AppConfig.MyIPAddr.Val = 0x00000000;
002bd8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002bda   e108     bnz	0x2bec               	BNZ	_00480_DS_
002bdc   0108     movlb	0x8                	BANKSEL	_AppConfig
002bde   6bc8     clrf	0xc8, 0x1           	CLRF	_AppConfig, B
002be0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
002be2   6bc9     clrf	0xc9, 0x1           	CLRF	(_AppConfig + 1), B
002be4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
002be6   6bca     clrf	0xca, 0x1           	CLRF	(_AppConfig + 2), B
002be8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
002bea   6bcb     clrf	0xcb, 0x1           	CLRF	(_AppConfig + 3), B
                                           _00480_DS_:
                                           ;	.line	1151; TCPIP_Stack/DHCP.c	UDPFlush();
002bec   ec83     call	0x4506, 0           	CALL	_UDPFlush
002bee   f022
002bf0   0102     movlb	0x2                	BANKSEL	__DHCPSend_MyIP_1_1
                                           ;	.line	1152; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = MyIP.Val;
002bf2   5120     movf	0x20, 0, 0x1        	MOVF	__DHCPSend_MyIP_1_1, W, B
002bf4   0108     movlb	0x8                	BANKSEL	_AppConfig
002bf6   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
002bf8   0102     movlb	0x2                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
002bfa   5121     movf	0x21, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 1), W, B
002bfc   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
002bfe   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
002c00   0102     movlb	0x2                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
002c02   5122     movf	0x22, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 2), W, B
002c04   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
002c06   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
002c08   0102     movlb	0x2                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
002c0a   5123     movf	0x23, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 3), W, B
002c0c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
002c0e   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
002c10   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002c12   f008
002c14   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002c16   f007
002c18   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002c1a   f006
002c1c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002c1e   f005
002c20   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002c22   f004
002c24   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002c26   f003
002c28   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002c2a   f002
002c2c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002c2e   f001
002c30   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002c32   f000
002c34   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c36   ffd9
002c38   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPReceive	code
                                           __DHCPReceive:
                                           ;	.line	720; TCPIP_Stack/DHCP.c	static BYTE _DHCPReceive(void)
00001c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   0102     movlb	0x2                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	766; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
00003e   6bac     clrf	0xac, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           ;	.line	768; TCPIP_Stack/DHCP.c	UDPGet(&v);                             // op
000040   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000042   6e01     movwf	0x1, 0             	MOVWF	r0x01
000044   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
000046   6e00     movwf	0, 0               	MOVWF	r0x00
000048   0e80     movlw	0x80               	MOVLW	0x80
00004a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00004c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00004e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000050   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000054   5000     movf	0, 0, 0             	MOVF	r0x00, W
000056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000058   ec2c     call	0xb058, 0           	CALL	_UDPGet
00005a   f058
00005c   0e03     movlw	0x3                	MOVLW	0x03
00005e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	771; TCPIP_Stack/DHCP.c	if ( v == BOOT_REPLY )
000060   c2ae     movff	0x2ae, 0           	MOVFF	__DHCPReceive_v_1_1, r0x00
000062   f000
000064   6a01     clrf	0x1, 0              	CLRF	r0x01
000066   5000     movf	0, 0, 0             	MOVF	r0x00, W
000068   0a02     xorlw	0x2                	XORLW	0x02
00006a   e102     bnz	0x70                 	BNZ	_00424_DS_
00006c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00006e   e002     bz	0x74                  	BZ	_00425_DS_
                                           _00424_DS_:
000070   ef3a     goto	0x674               	GOTO	_00345_DS_
000072   f003
                                           _00425_DS_:
                                           ;	.line	774; TCPIP_Stack/DHCP.c	for ( i = 0; i < 15u; i++ ) UDPGet(&v);
000074   0e0f     movlw	0xf                	MOVLW	0x0f
000076   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00354_DS_:
000078   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00007a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00007c   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e80     movlw	0x80               	MOVLW	0x80
000082   6e03     movwf	0x3, 0             	MOVWF	r0x03
000084   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000088   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00008a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00008c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00008e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000090   ec2c     call	0xb058, 0           	CALL	_UDPGet
000092   f058
000094   0e03     movlw	0x3                	MOVLW	0x03
000096   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000098   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   e1ed     bnz	0x78                 	BNZ	_00354_DS_
00009e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	777; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0000a0   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0000a2   d016     bra	0xd0                 	BRA	_00294_DS_
                                           ;	.line	780; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0000a4   0e04     movlw	0x4                	MOVLW	0x04
0000a6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00357_DS_:
0000a8   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0000aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000ac   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0000ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000b0   0e80     movlw	0x80               	MOVLW	0x80
0000b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c0   ec2c     call	0xb058, 0           	CALL	_UDPGet
0000c2   f058
0000c4   0e03     movlw	0x3                	MOVLW	0x03
0000c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000c8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0000ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000cc   e1ed     bnz	0xa8                 	BNZ	_00357_DS_
0000ce   d016     bra	0xfc                 	BRA	_00295_DS_
                                           _00294_DS_:
                                           ;	.line	785; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempIPAddress, 
0000d0   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 15)
0000d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000d4   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
0000d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d8   0e80     movlw	0x80               	MOVLW	0x80
0000da   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	786; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0000dc   0e00     movlw	0                  	MOVLW	0x00
0000de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e0   0e04     movlw	0x4                	MOVLW	0x04
0000e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f0   ecc8     call	0x9b90, 0           	CALL	_UDPGetArray
0000f2   f04d
0000f4   0e05     movlw	0x5                	MOVLW	0x05
0000f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000f8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	787; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.IPAddress = 1;
0000fa   8137     bsf	0x37, 0, 0x1         	BSF	(_DHCPClient + 27), 0, B
                                           _00295_DS_:
                                           ;	.line	791; TCPIP_Stack/DHCP.c	for ( i = 0; i < 8u; i++ ) UDPGet(&v);
0000fc   0e08     movlw	0x8                	MOVLW	0x08
0000fe   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00360_DS_:
000100   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
000106   6e01     movwf	0x1, 0             	MOVWF	r0x01
000108   0e80     movlw	0x80               	MOVLW	0x80
00010a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00010c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00010e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000110   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000114   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000118   ec2c     call	0xb058, 0           	CALL	_UDPGet
00011a   f058
00011c   0e03     movlw	0x3                	MOVLW	0x03
00011e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000120   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000122   5000     movf	0, 0, 0             	MOVF	r0x00, W
000124   e1ed     bnz	0x100                	BNZ	_00360_DS_
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
000126   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00361_DS_:
000128   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00012a   f002
00012c   6a03     clrf	0x3, 0              	CLRF	r0x03
00012e   0e00     movlw	0                  	MOVLW	0x00
000130   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000132   e102     bnz	0x138                	BNZ	_00426_DS_
000134   0e06     movlw	0x6                	MOVLW	0x06
000136   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00426_DS_:
000138   e224     bc	0x182                 	BC	_00364_DS_
                                           ;	.line	796; TCPIP_Stack/DHCP.c	UDPGet(&v);
00013a   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00013c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00013e   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
000140   6e02     movwf	0x2, 0             	MOVWF	r0x02
000142   0e80     movlw	0x80               	MOVLW	0x80
000144   6e04     movwf	0x4, 0             	MOVWF	r0x04
000146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00014c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000152   ec2c     call	0xb058, 0           	CALL	_UDPGet
000154   f058
000156   0e03     movlw	0x3                	MOVLW	0x03
000158   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	797; TCPIP_Stack/DHCP.c	if ( v != AppConfig.MyMACAddr.v[i])	goto UDPInvalid;
00015a   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
00015c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00015e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000160   6a03     clrf	0x3, 0              	CLRF	r0x03
000162   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
000164   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000166   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000168   ffe9
00016a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00016c   ffea
00016e   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000170   f002
000172   0102     movlb	0x2                	BANKSEL	__DHCPReceive_v_1_1
000174   51ae     movf	0xae, 0, 0x1        	MOVF	__DHCPReceive_v_1_1, W, B
000176   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
000178   e002     bz	0x17e                 	BZ	_00428_DS_
00017a   ef71     goto	0x6e2               	GOTO	_00351_DS_
00017c   f003
                                           _00428_DS_:
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
00017e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000180   d7d3     bra	0x128                	BRA	_00361_DS_
                                           _00364_DS_:
                                           ;	.line	802; TCPIP_Stack/DHCP.c	for ( i = 0; i < 206u; i++ ) UDPGet(&v);
000182   0ece     movlw	0xce               	MOVLW	0xce
000184   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00367_DS_:
000186   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
00018c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00018e   0e80     movlw	0x80               	MOVLW	0x80
000190   6e03     movwf	0x3, 0             	MOVWF	r0x03
000192   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00019c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019e   ec2c     call	0xb058, 0           	CALL	_UDPGet
0001a0   f058
0001a2   0e03     movlw	0x3                	MOVLW	0x03
0001a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001a6   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0001a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001aa   e1ed     bnz	0x186                	BNZ	_00367_DS_
                                           ;	.line	804; TCPIP_Stack/DHCP.c	lbDone = FALSE;
0001ac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00341_DS_:
                                           ;	.line	810; TCPIP_Stack/DHCP.c	if(!UDPGet(&v))
0001ae   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0001b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001b2   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0001b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001b6   0e80     movlw	0x80               	MOVLW	0x80
0001b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0001ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0001bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c6   ec2c     call	0xb058, 0           	CALL	_UDPGet
0001c8   f058
0001ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001cc   0e03     movlw	0x3                	MOVLW	0x03
0001ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0001d4   ef3a     goto	0x674               	GOTO	_00345_DS_
0001d6   f003
                                           ;	.line	816; TCPIP_Stack/DHCP.c	switch(v)
0001d8   c2ae     movff	0x2ae, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0001da   f002
0001dc   6a03     clrf	0x3, 0              	CLRF	r0x03
0001de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001e0   0a01     xorlw	0x1                	XORLW	0x01
0001e2   e103     bnz	0x1ea                	BNZ	_00430_DS_
0001e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001e6   e101     bnz	0x1ea                	BNZ	_00430_DS_
0001e8   d058     bra	0x29a                	BRA	_00307_DS_
                                           _00430_DS_:
0001ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ec   0a03     xorlw	0x3                	XORLW	0x03
0001ee   e103     bnz	0x1f6                	BNZ	_00432_DS_
0001f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001f2   e101     bnz	0x1f6                	BNZ	_00432_DS_
0001f4   d09c     bra	0x32e                	BRA	_00314_DS_
                                           _00432_DS_:
0001f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001f8   0a33     xorlw	0x33               	XORLW	0x33
0001fa   e103     bnz	0x202                	BNZ	_00434_DS_
0001fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001fe   e101     bnz	0x202                	BNZ	_00434_DS_
000200   d15a     bra	0x4b6                	BRA	_00329_DS_
                                           _00434_DS_:
000202   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000204   0a35     xorlw	0x35               	XORLW	0x35
000206   e102     bnz	0x20c                	BNZ	_00436_DS_
000208   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00020a   e00e     bz	0x228                 	BZ	_00300_DS_
                                           _00436_DS_:
00020c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00020e   0a36     xorlw	0x36               	XORLW	0x36
000210   e103     bnz	0x218                	BNZ	_00438_DS_
000212   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000214   e101     bnz	0x218                	BNZ	_00438_DS_
000216   d0f2     bra	0x3fc                	BRA	_00324_DS_
                                           _00438_DS_:
000218   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00021a   0aff     xorlw	0xff               	XORLW	0xff
00021c   e103     bnz	0x224                	BNZ	_00440_DS_
00021e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000220   e101     bnz	0x224                	BNZ	_00440_DS_
000222   d146     bra	0x4b0                	BRA	_00328_DS_
                                           _00440_DS_:
000224   ef07     goto	0x60e               	GOTO	_00336_DS_
000226   f003
                                           _00300_DS_:
                                           ;	.line	819; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
000228   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00022a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00022c   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
00022e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000230   0e80     movlw	0x80               	MOVLW	0x80
000232   6e04     movwf	0x4, 0             	MOVWF	r0x04
000234   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000236   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000238   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00023a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00023e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000240   ec2c     call	0xb058, 0           	CALL	_UDPGet
000242   f058
000244   0e03     movlw	0x3                	MOVLW	0x03
000246   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	821; TCPIP_Stack/DHCP.c	if ( v == 1u )
000248   c2ae     movff	0x2ae, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
00024a   f002
00024c   6a03     clrf	0x3, 0              	CLRF	r0x03
00024e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000250   0a01     xorlw	0x1                	XORLW	0x01
000252   e102     bnz	0x258                	BNZ	_00441_DS_
000254   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000256   e002     bz	0x25c                 	BZ	_00442_DS_
                                           _00441_DS_:
000258   ef71     goto	0x6e2               	GOTO	_00351_DS_
00025a   f003
                                           _00442_DS_:
                                           ;	.line	823; TCPIP_Stack/DHCP.c	UDPGet(&type);                  // Get type
00025c   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_type_1_1)
00025e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000260   0eac     movlw	0xac               	MOVLW	LOW(__DHCPReceive_type_1_1)
000262   6e02     movwf	0x2, 0             	MOVWF	r0x02
000264   0e80     movlw	0x80               	MOVLW	0x80
000266   6e04     movwf	0x4, 0             	MOVWF	r0x04
000268   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00026a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00026e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000270   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000274   ec2c     call	0xb058, 0           	CALL	_UDPGet
000276   f058
000278   0e03     movlw	0x3                	MOVLW	0x03
00027a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00027c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	827; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived && 
00027e   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000280   ef36     goto	0x66c               	GOTO	_00342_DS_
000282   f003
                                           ;	.line	828; TCPIP_Stack/DHCP.c	(type == DHCP_OFFER_MESSAGE))
000284   c2ac     movff	0x2ac, 0x2         	MOVFF	__DHCPReceive_type_1_1, r0x02
000286   f002
000288   6a03     clrf	0x3, 0              	CLRF	r0x03
00028a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00028c   0a02     xorlw	0x2                	XORLW	0x02
00028e   e104     bnz	0x298                	BNZ	_00444_DS_
000290   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000292   e102     bnz	0x298                	BNZ	_00444_DS_
000294   ef71     goto	0x6e2               	GOTO	_00351_DS_
000296   f003
                                           _00444_DS_:
                                           ;	.line	835; TCPIP_Stack/DHCP.c	break;
000298   d1e9     bra	0x66c                	BRA	_00342_DS_
                                           _00307_DS_:
                                           ;	.line	838; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
00029a   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00029c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00029e   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002a2   0e80     movlw	0x80               	MOVLW	0x80
0002a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b2   ec2c     call	0xb058, 0           	CALL	_UDPGet
0002b4   f058
0002b6   0e03     movlw	0x3                	MOVLW	0x03
0002b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	840; TCPIP_Stack/DHCP.c	if ( v == 4u )
0002ba   c2ae     movff	0x2ae, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0002bc   f002
0002be   6a03     clrf	0x3, 0              	CLRF	r0x03
0002c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c2   0a04     xorlw	0x4                	XORLW	0x04
0002c4   e102     bnz	0x2ca                	BNZ	_00445_DS_
0002c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002c8   e002     bz	0x2ce                 	BZ	_00446_DS_
                                           _00445_DS_:
0002ca   ef71     goto	0x6e2               	GOTO	_00351_DS_
0002cc   f003
                                           _00446_DS_:
0002ce   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	843; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0002d0   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0002d2   d016     bra	0x300                	BRA	_00309_DS_
                                           ;	.line	847; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0002d4   0e04     movlw	0x4                	MOVLW	0x04
0002d6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00370_DS_:
0002d8   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0002da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002dc   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002e0   0e80     movlw	0x80               	MOVLW	0x80
0002e2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f0   ec2c     call	0xb058, 0           	CALL	_UDPGet
0002f2   f058
0002f4   0e03     movlw	0x3                	MOVLW	0x03
0002f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002f8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002fc   e1ed     bnz	0x2d8                	BNZ	_00370_DS_
0002fe   d1b6     bra	0x66c                	BRA	_00342_DS_
                                           _00309_DS_:
                                           ;	.line	851; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempMask, 
000300   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 23)
000302   6e03     movwf	0x3, 0             	MOVWF	r0x03
000304   0e33     movlw	0x33               	MOVLW	LOW(_DHCPClient + 23)
000306   6e02     movwf	0x2, 0             	MOVWF	r0x02
000308   0e80     movlw	0x80               	MOVLW	0x80
00030a   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	852; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempMask));
00030c   0e00     movlw	0                  	MOVLW	0x00
00030e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000310   0e04     movlw	0x4                	MOVLW	0x04
000312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000314   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000318   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00031a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00031e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000320   ecc8     call	0x9b90, 0           	CALL	_UDPGetArray
000322   f04d
000324   0e05     movlw	0x5                	MOVLW	0x05
000326   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000328   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	853; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Mask = 1;
00032a   8537     bsf	0x37, 0x2, 0x1       	BSF	(_DHCPClient + 27), 2, B
00032c   d19f     bra	0x66c                	BRA	_00342_DS_
                                           _00314_DS_:
                                           ;	.line	861; TCPIP_Stack/DHCP.c	UDPGet(&j);
00032e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000330   6e03     movwf	0x3, 0             	MOVWF	r0x03
000332   0ead     movlw	0xad               	MOVLW	LOW(__DHCPReceive_j_1_1)
000334   6e02     movwf	0x2, 0             	MOVWF	r0x02
000336   0e80     movlw	0x80               	MOVLW	0x80
000338   6e04     movwf	0x4, 0             	MOVWF	r0x04
00033a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00033c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00033e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000346   ec2c     call	0xb058, 0           	CALL	_UDPGet
000348   f058
00034a   0e03     movlw	0x3                	MOVLW	0x03
00034c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	863; TCPIP_Stack/DHCP.c	if ( j >= 4u )
00034e   c2ad     movff	0x2ad, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
000350   f002
000352   6a03     clrf	0x3, 0              	CLRF	r0x03
000354   0e00     movlw	0                  	MOVLW	0x00
000356   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000358   e102     bnz	0x35e                	BNZ	_00447_DS_
00035a   0e04     movlw	0x4                	MOVLW	0x04
00035c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00447_DS_:
00035e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000360   d1c0     bra	0x6e2                	BRA	_00351_DS_
000362   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	866; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
000364   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000366   d016     bra	0x394                	BRA	_00316_DS_
                                           ;	.line	870; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
000368   0e04     movlw	0x4                	MOVLW	0x04
00036a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00373_DS_:
00036c   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00036e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000370   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
000372   6e02     movwf	0x2, 0             	MOVWF	r0x02
000374   0e80     movlw	0x80               	MOVLW	0x80
000376   6e04     movwf	0x4, 0             	MOVWF	r0x04
000378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00037a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00037e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000380   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000384   ec2c     call	0xb058, 0           	CALL	_UDPGet
000386   f058
000388   0e03     movlw	0x3                	MOVLW	0x03
00038a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00038c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00038e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000390   e1ed     bnz	0x36c                	BNZ	_00373_DS_
000392   d016     bra	0x3c0                	BRA	_00320_DS_
                                           _00316_DS_:
                                           ;	.line	874; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempGateway, 
000394   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 19)
000396   6e03     movwf	0x3, 0             	MOVWF	r0x03
000398   0e2f     movlw	0x2f               	MOVLW	LOW(_DHCPClient + 19)
00039a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00039c   0e80     movlw	0x80               	MOVLW	0x80
00039e   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	875; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempGateway));
0003a0   0e00     movlw	0                  	MOVLW	0x00
0003a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a4   0e04     movlw	0x4                	MOVLW	0x04
0003a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b4   ecc8     call	0x9b90, 0           	CALL	_UDPGetArray
0003b6   f04d
0003b8   0e05     movlw	0x5                	MOVLW	0x05
0003ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003bc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	876; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Gateway = 1;
0003be   8337     bsf	0x37, 0x1, 0x1       	BSF	(_DHCPClient + 27), 1, B
                                           _00320_DS_:
                                           ;	.line	882; TCPIP_Stack/DHCP.c	j -= 4;
0003c0   0efc     movlw	0xfc               	MOVLW	0xfc
0003c2   0102     movlb	0x2                	BANKSEL	__DHCPReceive_j_1_1
0003c4   27ad     addwf	0xad, 0x1, 0x1     	ADDWF	__DHCPReceive_j_1_1, F, B
                                           ;	.line	883; TCPIP_Stack/DHCP.c	while(j--) UDPGet(&v);
0003c6   c2ad     movff	0x2ad, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
0003c8   f002
                                           _00321_DS_:
0003ca   c002     movff	0x2, 0x3           	MOVFF	r0x02, r0x03
0003cc   f003
0003ce   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
0003d0   c002     movff	0x2, 0x2ad         	MOVFF	r0x02, __DHCPReceive_j_1_1
0003d2   f2ad
0003d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003d6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0003d8   d144     bra	0x662                	BRA	_00422_DS_
0003da   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003de   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0003e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003e2   0e80     movlw	0x80               	MOVLW	0x80
0003e4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0003e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003f2   ec2c     call	0xb058, 0           	CALL	_UDPGet
0003f4   f058
0003f6   0e03     movlw	0x3                	MOVLW	0x03
0003f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003fa   d7e7     bra	0x3ca                	BRA	_00321_DS_
                                           _00324_DS_:
                                           ;	.line	945; TCPIP_Stack/DHCP.c	UDPGet(&v);    // Get len
0003fc   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000400   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
000402   6e03     movwf	0x3, 0             	MOVWF	r0x03
000404   0e80     movlw	0x80               	MOVLW	0x80
000406   6e05     movwf	0x5, 0             	MOVWF	r0x05
000408   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00040a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00040c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00040e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000410   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000414   ec2c     call	0xb058, 0           	CALL	_UDPGet
000416   f058
000418   0e03     movlw	0x3                	MOVLW	0x03
00041a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	947; TCPIP_Stack/DHCP.c	if ( v == 4u )
00041c   c2ae     movff	0x2ae, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
00041e   f003
000420   6a04     clrf	0x4, 0              	CLRF	r0x04
000422   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000424   0a04     xorlw	0x4                	XORLW	0x04
000426   e102     bnz	0x42c                	BNZ	_00448_DS_
000428   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00042a   e001     bz	0x42e                 	BZ	_00449_DS_
                                           _00448_DS_:
00042c   d15a     bra	0x6e2                	BRA	_00351_DS_
                                           _00449_DS_:
                                           ;	.line	949; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[3]);   // Get the id
00042e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 3)
000430   6e04     movwf	0x4, 0             	MOVWF	r0x04
000432   0e1f     movlw	0x1f               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 3)
000434   6e03     movwf	0x3, 0             	MOVWF	r0x03
000436   0e80     movlw	0x80               	MOVLW	0x80
000438   6e05     movwf	0x5, 0             	MOVWF	r0x05
00043a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00043c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00043e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000442   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000446   ec2c     call	0xb058, 0           	CALL	_UDPGet
000448   f058
00044a   0e03     movlw	0x3                	MOVLW	0x03
00044c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	950; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[2]);
00044e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 2)
000450   6e04     movwf	0x4, 0             	MOVWF	r0x04
000452   0e1e     movlw	0x1e               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 2)
000454   6e03     movwf	0x3, 0             	MOVWF	r0x03
000456   0e80     movlw	0x80               	MOVLW	0x80
000458   6e05     movwf	0x5, 0             	MOVWF	r0x05
00045a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00045c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000462   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000466   ec2c     call	0xb058, 0           	CALL	_UDPGet
000468   f058
00046a   0e03     movlw	0x3                	MOVLW	0x03
00046c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	951; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[1]);
00046e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 1)
000470   6e04     movwf	0x4, 0             	MOVWF	r0x04
000472   0e1d     movlw	0x1d               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 1)
000474   6e03     movwf	0x3, 0             	MOVWF	r0x03
000476   0e80     movlw	0x80               	MOVLW	0x80
000478   6e05     movwf	0x5, 0             	MOVWF	r0x05
00047a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00047c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00047e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000486   ec2c     call	0xb058, 0           	CALL	_UDPGet
000488   f058
00048a   0e03     movlw	0x3                	MOVLW	0x03
00048c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	952; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[0]);
00048e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1)
000490   6e04     movwf	0x4, 0             	MOVWF	r0x04
000492   0e1c     movlw	0x1c               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1)
000494   6e03     movwf	0x3, 0             	MOVWF	r0x03
000496   0e80     movlw	0x80               	MOVLW	0x80
000498   6e05     movwf	0x5, 0             	MOVWF	r0x05
00049a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00049c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00049e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a6   ec2c     call	0xb058, 0           	CALL	_UDPGet
0004a8   f058
0004aa   0e03     movlw	0x3                	MOVLW	0x03
0004ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0004ae   d0de     bra	0x66c                	BRA	_00342_DS_
                                           _00328_DS_:
                                           ;	.line	958; TCPIP_Stack/DHCP.c	lbDone = TRUE;
0004b0   0e01     movlw	0x1                	MOVLW	0x01
0004b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	959; TCPIP_Stack/DHCP.c	break;
0004b4   d0db     bra	0x66c                	BRA	_00342_DS_
                                           _00329_DS_:
                                           ;	.line	962; TCPIP_Stack/DHCP.c	UDPGet(&v);            // Get len
0004b6   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004ba   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004be   0e80     movlw	0x80               	MOVLW	0x80
0004c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0004c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   ec2c     call	0xb058, 0           	CALL	_UDPGet
0004d0   f058
0004d2   0e03     movlw	0x3                	MOVLW	0x03
0004d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/DHCP.c	if ( v == 4u )
0004d6   c2ae     movff	0x2ae, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
0004d8   f003
0004da   6a04     clrf	0x4, 0              	CLRF	r0x04
0004dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004de   0a04     xorlw	0x4                	XORLW	0x04
0004e0   e102     bnz	0x4e6                	BNZ	_00450_DS_
0004e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004e4   e001     bz	0x4e8                 	BZ	_00451_DS_
                                           _00450_DS_:
0004e6   d0fd     bra	0x6e2                	BRA	_00351_DS_
                                           _00451_DS_:
0004e8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	967; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0004ea   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0004ec   d015     bra	0x518                	BRA	_00331_DS_
                                           ;	.line	970; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0004ee   0e04     movlw	0x4                	MOVLW	0x04
0004f0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00376_DS_:
0004f2   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004f6   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004fa   0e80     movlw	0x80               	MOVLW	0x80
0004fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000502   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000506   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   ec2c     call	0xb058, 0           	CALL	_UDPGet
00050c   f058
00050e   0e03     movlw	0x3                	MOVLW	0x03
000510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000512   2e00     decfsz	0, 0x1, 0         	DECFSZ	r0x00, F
000514   d7ee     bra	0x4f2                	BRA	_00376_DS_
000516   d0aa     bra	0x66c                	BRA	_00342_DS_
                                           _00331_DS_:
                                           ;	.line	974; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[3]));
000518   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 10)
00051a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00051c   0e26     movlw	0x26               	MOVLW	LOW(_DHCPClient + 10)
00051e   6e00     movwf	0, 0               	MOVWF	r0x00
000520   0e80     movlw	0x80               	MOVLW	0x80
000522   6e04     movwf	0x4, 0             	MOVWF	r0x04
000524   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000528   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00052a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00052c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00052e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000530   ec2c     call	0xb058, 0           	CALL	_UDPGet
000532   f058
000534   0e03     movlw	0x3                	MOVLW	0x03
000536   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	975; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[2]));
000538   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 9)
00053a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00053c   0e25     movlw	0x25               	MOVLW	LOW(_DHCPClient + 9)
00053e   6e00     movwf	0, 0               	MOVWF	r0x00
000540   0e80     movlw	0x80               	MOVLW	0x80
000542   6e04     movwf	0x4, 0             	MOVWF	r0x04
000544   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000548   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00054a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00054c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000550   ec2c     call	0xb058, 0           	CALL	_UDPGet
000552   f058
000554   0e03     movlw	0x3                	MOVLW	0x03
000556   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	976; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[1]));
000558   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 8)
00055a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00055c   0e24     movlw	0x24               	MOVLW	LOW(_DHCPClient + 8)
00055e   6e00     movwf	0, 0               	MOVWF	r0x00
000560   0e80     movlw	0x80               	MOVLW	0x80
000562   6e04     movwf	0x4, 0             	MOVWF	r0x04
000564   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   ec2c     call	0xb058, 0           	CALL	_UDPGet
000572   f058
000574   0e03     movlw	0x3                	MOVLW	0x03
000576   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	977; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[0]));
000578   0e0b     movlw	0xb                	MOVLW	HIGH(_DHCPClient + 7)
00057a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00057c   0e23     movlw	0x23               	MOVLW	LOW(_DHCPClient + 7)
00057e   6e00     movwf	0, 0               	MOVWF	r0x00
000580   0e80     movlw	0x80               	MOVLW	0x80
000582   6e04     movwf	0x4, 0             	MOVWF	r0x04
000584   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000590   ec2c     call	0xb058, 0           	CALL	_UDPGet
000592   f058
000594   0e03     movlw	0x3                	MOVLW	0x03
000596   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000598   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
                                           ;	.line	981; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime -= DHCPClient.dwLeaseTime>>5;
00059a   3923     swapf	0x23, 0, 0x1       	SWAPF	(_DHCPClient + 7), W, B
00059c   0b0f     andlw	0xf                	ANDLW	0x0f
00059e   6e00     movwf	0, 0               	MOVWF	r0x00
0005a0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
0005a2   3924     swapf	0x24, 0, 0x1       	SWAPF	(_DHCPClient + 8), W, B
0005a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005a6   0bf0     andlw	0xf0               	ANDLW	0xf0
0005a8   1a03     xorwf	0x3, 0x1, 0        	XORWF	r0x03, F
0005aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005ac   3203     rrcf	0x3, 0x1, 0         	RRCF	r0x03, F
0005ae   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
0005b0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
0005b2   5125     movf	0x25, 0, 0x1        	MOVF	(_DHCPClient + 9), W, B
0005b4   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005b6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0005b8   0bf8     andlw	0xf8               	ANDLW	0xf8
0005ba   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0005bc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
0005be   3925     swapf	0x25, 0, 0x1       	SWAPF	(_DHCPClient + 9), W, B
0005c0   0b0f     andlw	0xf                	ANDLW	0x0f
0005c2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005c4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
0005c6   3926     swapf	0x26, 0, 0x1       	SWAPF	(_DHCPClient + 10), W, B
0005c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005ca   0bf0     andlw	0xf0               	ANDLW	0xf0
0005cc   1a05     xorwf	0x5, 0x1, 0        	XORWF	r0x05, F
0005ce   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005d0   3205     rrcf	0x5, 0x1, 0         	RRCF	r0x05, F
0005d2   3204     rrcf	0x4, 0x1, 0         	RRCF	r0x04, F
0005d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
0005d8   5d23     subwf	0x23, 0, 0x1       	SUBWF	(_DHCPClient + 7), W, B
0005da   6e00     movwf	0, 0               	MOVWF	r0x00
0005dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005de   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
0005e0   5924     subwfb	0x24, 0, 0x1      	SUBWFB	(_DHCPClient + 8), W, B
0005e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005e6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
0005e8   5925     subwfb	0x25, 0, 0x1      	SUBWFB	(_DHCPClient + 9), W, B
0005ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005ee   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
0005f0   5926     subwfb	0x26, 0, 0x1      	SUBWFB	(_DHCPClient + 10), W, B
0005f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005f6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
0005f8   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
0005fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005fc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
0005fe   6f24     movwf	0x24, 0x1          	MOVWF	(_DHCPClient + 8), B
000600   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000602   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
000604   6f25     movwf	0x25, 0x1          	MOVWF	(_DHCPClient + 9), B
000606   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000608   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
00060a   6f26     movwf	0x26, 0x1          	MOVWF	(_DHCPClient + 10), B
00060c   d02f     bra	0x66c                	BRA	_00342_DS_
                                           _00336_DS_:
                                           ;	.line	989; TCPIP_Stack/DHCP.c	UDPGet(&j);       // Get option len
00060e   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000610   6e03     movwf	0x3, 0             	MOVWF	r0x03
000612   0ead     movlw	0xad               	MOVLW	LOW(__DHCPReceive_j_1_1)
000614   6e00     movwf	0, 0               	MOVWF	r0x00
000616   0e80     movlw	0x80               	MOVLW	0x80
000618   6e04     movwf	0x4, 0             	MOVWF	r0x04
00061a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000622   5000     movf	0, 0, 0             	MOVF	r0x00, W
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   ec2c     call	0xb058, 0           	CALL	_UDPGet
000628   f058
00062a   0e03     movlw	0x3                	MOVLW	0x03
00062c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	990; TCPIP_Stack/DHCP.c	while( j-- )      // Ignore option values
00062e   c2ad     movff	0x2ad, 0           	MOVFF	__DHCPReceive_j_1_1, r0x00
000630   f000
                                           _00337_DS_:
000632   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000634   f003
000636   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000638   c000     movff	0, 0x2ad           	MOVFF	r0x00, __DHCPReceive_j_1_1
00063a   f2ad
00063c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00063e   e014     bz	0x668                 	BZ	_00423_DS_
                                           ;	.line	991; TCPIP_Stack/DHCP.c	UDPGet(&v);
000640   0e02     movlw	0x2                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000642   6e04     movwf	0x4, 0             	MOVWF	r0x04
000644   0eae     movlw	0xae               	MOVLW	LOW(__DHCPReceive_v_1_1)
000646   6e03     movwf	0x3, 0             	MOVWF	r0x03
000648   0e80     movlw	0x80               	MOVLW	0x80
00064a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00064c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00064e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000650   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000654   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000658   ec2c     call	0xb058, 0           	CALL	_UDPGet
00065a   f058
00065c   0e03     movlw	0x3                	MOVLW	0x03
00065e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000660   d7e8     bra	0x632                	BRA	_00337_DS_
                                           _00422_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000662   c002     movff	0x2, 0x2ad         	MOVFF	r0x02, __DHCPReceive_j_1_1
000664   f2ad
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
000666   d002     bra	0x66c                	BRA	_00342_DS_
                                           _00423_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000668   c000     movff	0, 0x2ad           	MOVFF	r0x00, __DHCPReceive_j_1_1
00066a   f2ad
                                           _00342_DS_:
                                           ;	.line	993; TCPIP_Stack/DHCP.c	} while( !lbDone );
00066c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00066e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000670   efd7     goto	0x1ae               	GOTO	_00341_DS_
000672   f000
                                           _00345_DS_:
                                           ;	.line	997; TCPIP_Stack/DHCP.c	if ( type == DHCP_OFFER_MESSAGE )
000674   c2ac     movff	0x2ac, 0           	MOVFF	__DHCPReceive_type_1_1, r0x00
000676   f000
000678   6a01     clrf	0x1, 0              	CLRF	r0x01
00067a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00067c   0a02     xorlw	0x2                	XORLW	0x02
00067e   e116     bnz	0x6ac                	BNZ	_00349_DS_
000680   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000682   e001     bz	0x686                 	BZ	_00455_DS_
                                           _00454_DS_:
000684   d013     bra	0x6ac                	BRA	_00349_DS_
                                           _00455_DS_:
000686   0102     movlb	0x2                	BANKSEL	__DHCPReceive_tempServerID_1_1
                                           ;	.line	999; TCPIP_Stack/DHCP.c	DHCPClient.dwServerID = tempServerID.Val;
000688   511c     movf	0x1c, 0, 0x1        	MOVF	__DHCPReceive_tempServerID_1_1, W, B
00068a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 11)
00068c   6f27     movwf	0x27, 0x1          	MOVWF	(_DHCPClient + 11), B
00068e   0102     movlb	0x2                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
000690   511d     movf	0x1d, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
000692   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 12)
000694   6f28     movwf	0x28, 0x1          	MOVWF	(_DHCPClient + 12), B
000696   0102     movlb	0x2                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
000698   511e     movf	0x1e, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
00069a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 13)
00069c   6f29     movwf	0x29, 0x1          	MOVWF	(_DHCPClient + 13), B
00069e   0102     movlb	0x2                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006a0   511f     movf	0x1f, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006a2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 14)
0006a4   6f2a     movwf	0x2a, 0x1          	MOVWF	(_DHCPClient + 14), B
0006a6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1000; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = TRUE;
0006a8   851e     bsf	0x1e, 0x2, 0x1       	BSF	(_DHCPClient + 2), 2, B
0006aa   d016     bra	0x6d8                	BRA	_00350_DS_
                                           _00349_DS_:
0006ac   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1006; TCPIP_Stack/DHCP.c	if ( DHCPClient.dwServerID != tempServerID.Val )
0006ae   5127     movf	0x27, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
0006b0   0102     movlb	0x2                	BANKSEL	__DHCPReceive_tempServerID_1_1
0006b2   191c     xorwf	0x1c, 0, 0x1       	XORWF	__DHCPReceive_tempServerID_1_1, W, B
0006b4   e10f     bnz	0x6d4                	BNZ	_00457_DS_
0006b6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 12)
0006b8   5128     movf	0x28, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
0006ba   0102     movlb	0x2                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
0006bc   191d     xorwf	0x1d, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
0006be   e10a     bnz	0x6d4                	BNZ	_00457_DS_
0006c0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 13)
0006c2   5129     movf	0x29, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
0006c4   0102     movlb	0x2                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
0006c6   191e     xorwf	0x1e, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
0006c8   e105     bnz	0x6d4                	BNZ	_00457_DS_
0006ca   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 14)
0006cc   512a     movf	0x2a, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
0006ce   0102     movlb	0x2                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006d0   191f     xorwf	0x1f, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006d2   e002     bz	0x6d8                 	BZ	_00350_DS_
                                           _00457_DS_:
0006d4   0102     movlb	0x2                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1007; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
0006d6   6bac     clrf	0xac, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           _00350_DS_:
                                           ;	.line	1010; TCPIP_Stack/DHCP.c	UDPDiscard();  // We are done with this packet
0006d8   ec0b     call	0xbc16, 0           	CALL	_UDPDiscard
0006da   f05e
0006dc   0102     movlb	0x2                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1011; TCPIP_Stack/DHCP.c	return type;
0006de   51ac     movf	0xac, 0, 0x1        	MOVF	__DHCPReceive_type_1_1, W, B
0006e0   d003     bra	0x6e8                	BRA	_00377_DS_
                                           _00351_DS_:
                                           ;	.line	1014; TCPIP_Stack/DHCP.c	UDPDiscard();
0006e2   ec0b     call	0xbc16, 0           	CALL	_UDPDiscard
0006e4   f05e
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
0006e6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00377_DS_:
0006e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006ea   f005
0006ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006ee   f004
0006f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006f2   f003
0006f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006f6   f002
0006f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006fa   f001
0006fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006fe   f000
000700   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000702   ffd9
000704   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPTask	code
                                           _DHCPTask:
                                           ;	.line	485; TCPIP_Stack/DHCP.c	void DHCPTask(void)
000706   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000708   ffe5
00070a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00070c   ffd9
00070e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000710   ffe5
000712   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000714   ffe5
000716   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000718   ffe5
00071a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00071c   ffe5
00071e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000720   ffe5
000722   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000724   ffe5
000726   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000728   ffe5
00072a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00072c   ffe5
00072e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000730   ffe5
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000732   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00227_DS_:
000734   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000736   f001
000738   6a02     clrf	0x2, 0              	CLRF	r0x02
00073a   0e00     movlw	0                  	MOVLW	0x00
00073c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00073e   e102     bnz	0x744                	BNZ	_00259_DS_
000740   0e01     movlw	0x1                	MOVLW	0x01
000742   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
000744   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000746   efe3     goto	0xdc6               	GOTO	_00231_DS_
000748   f006
                                           ;	.line	491; TCPIP_Stack/DHCP.c	LoadState(i);
00074a   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	492; TCPIP_Stack/DHCP.c	switch(DHCPClient.smState)
00074c   cb1d     movff	0xb1d, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
00074e   f001
000750   0e0d     movlw	0xd                	MOVLW	0x0d
000752   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000754   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000756   efe0     goto	0xdc0               	GOTO	_00229_DS_
000758   f006
00075a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00075c   ffe5
00075e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000760   ffe5
000762   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000764   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000766   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
000768   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00076a   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
00076c   0bfc     andlw	0xfc               	ANDLW	0xfc
00076e   6e09     movwf	0x9, 0             	MOVWF	r0x09
000770   0e00     movlw	0                  	MOVLW	UPPER(_00261_DS_)
000772   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000774   0e07     movlw	0x7                	MOVLW	HIGH(_00261_DS_)
000776   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000778   0e90     movlw	0x90               	MOVLW	LOW(_00261_DS_)
00077a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00077c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00077e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000780   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000782   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000784   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000786   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000788   f00a
00078a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00078c   f009
00078e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00261_DS_:
000790   efe2     goto	0x7c4               	GOTO	_00169_DS_
000792   f003
000794   efe4     goto	0x7c8               	GOTO	_00170_DS_
000796   f003
000798   ef07     goto	0x80e               	GOTO	_00173_DS_
00079a   f004
00079c   ef78     goto	0x8f0               	GOTO	_00178_DS_
00079e   f004
0007a0   efbf     goto	0x97e               	GOTO	_00185_DS_
0007a2   f004
0007a4   ef0a     goto	0xa14               	GOTO	_00188_DS_
0007a6   f005
0007a8   efb1     goto	0xb62               	GOTO	_00202_DS_
0007aa   f005
0007ac   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007ae   f006
0007b0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007b2   f006
0007b4   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007b6   f006
0007b8   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007ba   f006
0007bc   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007be   f006
0007c0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007c2   f006
                                           _00169_DS_:
                                           ;	.line	496; TCPIP_Stack/DHCP.c	break;
0007c4   efe0     goto	0xdc0               	GOTO	_00229_DS_
0007c6   f006
                                           _00170_DS_:
                                           ;	.line	501; TCPIP_Stack/DHCP.c	UDPOpen(DHCP_CLIENT_PORT, NULL, DHCP_SERVER_PORT);
0007c8   0e00     movlw	0                  	MOVLW	0x00
0007ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007cc   0e43     movlw	0x43               	MOVLW	0x43
0007ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d0   0e00     movlw	0                  	MOVLW	0x00
0007d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d4   0e00     movlw	0                  	MOVLW	0x00
0007d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d8   0e00     movlw	0                  	MOVLW	0x00
0007da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007dc   0e00     movlw	0                  	MOVLW	0x00
0007de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e0   0e44     movlw	0x44               	MOVLW	0x44
0007e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e4   ec3b     call	0x5276, 0           	CALL	_UDPOpen
0007e6   f029
0007e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007ea   0e07     movlw	0x7                	MOVLW	0x07
0007ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007f0   010b     movlb	0xb                	BANKSEL	_DHCPClient
0007f2   6f1c     movwf	0x1c, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	502; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
0007f4   cb1c     movff	0xb1c, 0x1         	MOVFF	_DHCPClient, r0x01
0007f6   f001
0007f8   6a02     clrf	0x2, 0              	CLRF	r0x02
0007fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007fc   0aff     xorlw	0xff               	XORLW	0xff
0007fe   e104     bnz	0x808                	BNZ	_00263_DS_
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   e102     bnz	0x808                	BNZ	_00263_DS_
000804   efe0     goto	0xdc0               	GOTO	_00229_DS_
000806   f006
                                           _00263_DS_:
                                           ;	.line	504; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000808   0e02     movlw	0x2                	MOVLW	0x02
00080a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00080c   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00173_DS_:
                                           ;	.line	512; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime = 60;
00080e   0e3c     movlw	0x3c               	MOVLW	0x3c
000810   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
000812   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
000814   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
000816   6b24     clrf	0x24, 0x1           	CLRF	(_DHCPClient + 8), B
000818   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
00081a   6b25     clrf	0x25, 0x1           	CLRF	(_DHCPClient + 9), B
00081c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
00081e   6b26     clrf	0x26, 0x1           	CLRF	(_DHCPClient + 10), B
000820   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	513; TCPIP_Stack/DHCP.c	DHCPClient.validValues.val = 0x00;
000822   6b37     clrf	0x37, 0x1           	CLRF	(_DHCPClient + 27), B
000824   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	514; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;	
000826   911e     bcf	0x1e, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
000828   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	515; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
00082a   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	519; TCPIP_Stack/DHCP.c	if(!MACIsLinked()) break;
00082c   ecdc     call	0xb9b8, 0           	CALL	_MACIsLinked
00082e   f05c
000830   6e01     movwf	0x1, 0             	MOVWF	r0x01
000832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000834   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000836   efe0     goto	0xdc0               	GOTO	_00229_DS_
000838   f006
00083a   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	522; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 300u) break;
00083c   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
00083e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000840   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
000842   f057
000844   6e01     movwf	0x1, 0             	MOVWF	r0x01
000846   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000848   f002
00084a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00084c   0e01     movlw	0x1                	MOVLW	0x01
00084e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000850   e102     bnz	0x856                	BNZ	_00264_DS_
000852   0e2c     movlw	0x2c               	MOVLW	0x2c
000854   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00264_DS_:
000856   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000858   efe0     goto	0xdc0               	GOTO	_00229_DS_
00085a   f006
                                           ;	.line	528; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode ^= 1;
00085c   6a01     clrf	0x1, 0              	CLRF	r0x01
00085e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
000860   b91e     btfsc	0x1e, 0x4, 0x1     	BTFSC	(_DHCPClient + 2), 4, B
000862   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000864   0e01     movlw	0x1                	MOVLW	0x01
000866   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
000868   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00086a   0b01     andlw	0x1                	ANDLW	0x01
00086c   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
00086e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000870   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
000872   511e     movf	0x1e, 0, 0x1        	MOVF	(_DHCPClient + 2), W, B
000874   0bef     andlw	0xef               	ANDLW	0xef
000876   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000878   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
00087a   6f1e     movwf	0x1e, 0x1          	MOVWF	(_DHCPClient + 2), B
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00087c   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	533; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
00087e   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000880   0d0e     mullw	0xe                	MULLW	0x0e
000882   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000884   f001
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00088a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00088c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00088e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	534; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
000890   0e00     movlw	0                  	MOVLW	0x00
000892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000894   0e0a     movlw	0xa                	MOVLW	0x0a
000896   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000898   0eff     movlw	0xff               	MOVLW	0xff
00089a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a4   ecd5     call	0xa1aa, 0           	CALL	_memset
0008a6   f050
0008a8   0e05     movlw	0x5                	MOVLW	0x05
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_DISCOVER_MESSAGE, FALSE);
0008ac   0e00     movlw	0                  	MOVLW	0x00
0008ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b0   0e01     movlw	0x1                	MOVLW	0x01
0008b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b4   ec6d     call	0x28da, 0           	CALL	__DHCPSend
0008b6   f014
0008b8   0e02     movlw	0x2                	MOVLW	0x02
0008ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	540; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0008bc   ec44     call	0xbc88, 0           	CALL	_TickGet
0008be   f05e
0008c0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c2   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008c4   f002
0008c6   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0008c8   f003
0008ca   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0008cc   f004
0008ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
0008d2   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
0008d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008d6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
0008d8   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
0008da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008dc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
0008de   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
0008e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008e2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
0008e4   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	541; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_OFFER;
0008e6   0e03     movlw	0x3                	MOVLW	0x03
0008e8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
0008ea   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	542; TCPIP_Stack/DHCP.c	break;
0008ec   efe0     goto	0xdc0               	GOTO	_00229_DS_
0008ee   f006
                                           _00178_DS_:
0008f0   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	546; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
0008f2   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   ec60     call	0xb4c0, 0           	CALL	_UDPIsGetReady
0008f8   f05a
0008fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008fc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008fe   f002
000900   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000902   0e00     movlw	0                  	MOVLW	0x00
000904   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000906   e102     bnz	0x90c                	BNZ	_00266_DS_
000908   0efa     movlw	0xfa               	MOVLW	0xfa
00090a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00266_DS_:
00090c   e228     bc	0x95e                 	BC	_00182_DS_
                                           ;	.line	550; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
00090e   ec44     call	0xbc88, 0           	CALL	_TickGet
000910   f05e
000912   6e01     movwf	0x1, 0             	MOVWF	r0x01
000914   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000916   f002
000918   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00091a   f003
00091c   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00091e   f004
000920   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000922   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000924   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000926   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000928   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
00092a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
00092c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
00092e   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000930   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000932   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000934   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000936   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000938   0e00     movlw	0                  	MOVLW	0x00
00093a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00093c   e108     bnz	0x94e                	BNZ	_00267_DS_
00093e   0e01     movlw	0x1                	MOVLW	0x01
000940   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000942   e105     bnz	0x94e                	BNZ	_00267_DS_
000944   0e3d     movlw	0x3d               	MOVLW	0x3d
000946   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000948   e102     bnz	0x94e                	BNZ	_00267_DS_
00094a   0ee4     movlw	0xe4               	MOVLW	0xe4
00094c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00267_DS_:
00094e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000950   efe0     goto	0xdc0               	GOTO	_00229_DS_
000952   f006
                                           ;	.line	551; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000954   0e02     movlw	0x2                	MOVLW	0x02
000956   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000958   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	552; TCPIP_Stack/DHCP.c	break;
00095a   efe0     goto	0xdc0               	GOTO	_00229_DS_
00095c   f006
                                           _00182_DS_:
00095e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	557; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bDHCPServerDetected = TRUE;
000960   871e     bsf	0x1e, 0x3, 0x1       	BSF	(_DHCPClient + 2), 3, B
                                           ;	.line	560; TCPIP_Stack/DHCP.c	if(_DHCPReceive() != DHCP_OFFER_MESSAGE) break;
000962   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000964   f000
000966   6e01     movwf	0x1, 0             	MOVWF	r0x01
000968   6a02     clrf	0x2, 0              	CLRF	r0x02
00096a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00096c   0a02     xorlw	0x2                	XORLW	0x02
00096e   e102     bnz	0x974                	BNZ	_00268_DS_
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   e002     bz	0x978                 	BZ	_00269_DS_
                                           _00268_DS_:
000974   efe0     goto	0xdc0               	GOTO	_00229_DS_
000976   f006
                                           _00269_DS_:
                                           ;	.line	561; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_REQUEST;
000978   0e04     movlw	0x4                	MOVLW	0x04
00097a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00097c   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00185_DS_:
00097e   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	565; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000980   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
000986   f057
000988   6e01     movwf	0x1, 0             	MOVWF	r0x01
00098a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00098c   f002
00098e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000990   0e01     movlw	0x1                	MOVLW	0x01
000992   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000994   e102     bnz	0x99a                	BNZ	_00270_DS_
000996   0e02     movlw	0x2                	MOVLW	0x02
000998   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00270_DS_:
00099a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00099c   efe0     goto	0xdc0               	GOTO	_00229_DS_
00099e   f006
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0009a0   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	572; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
0009a2   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
0009a4   0d0e     mullw	0xe                	MULLW	0x0e
0009a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0009a8   f001
0009aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0009ac   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0009ae   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0009b0   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0009b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	573; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
0009b4   0e00     movlw	0                  	MOVLW	0x00
0009b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b8   0e0a     movlw	0xa                	MOVLW	0x0a
0009ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009bc   0eff     movlw	0xff               	MOVLW	0xff
0009be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c8   ecd5     call	0xa1aa, 0           	CALL	_memset
0009ca   f050
0009cc   0e05     movlw	0x5                	MOVLW	0x05
0009ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	576; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, FALSE);	
0009d0   0e00     movlw	0                  	MOVLW	0x00
0009d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d4   0e03     movlw	0x3                	MOVLW	0x03
0009d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d8   ec6d     call	0x28da, 0           	CALL	__DHCPSend
0009da   f014
0009dc   0e02     movlw	0x2                	MOVLW	0x02
0009de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0009e0   ec44     call	0xbc88, 0           	CALL	_TickGet
0009e2   f05e
0009e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009e6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0009e8   f002
0009ea   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0009ec   f003
0009ee   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0009f0   f004
0009f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009f4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
0009f6   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
0009f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009fa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
0009fc   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
0009fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a00   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000a02   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a06   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000a08   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	580; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_REQUEST_ACK;
000a0a   0e05     movlw	0x5                	MOVLW	0x05
000a0c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000a0e   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	581; TCPIP_Stack/DHCP.c	break;
000a10   efe0     goto	0xdc0               	GOTO	_00229_DS_
000a12   f006
                                           _00188_DS_:
000a14   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	585; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000a16   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   ec60     call	0xb4c0, 0           	CALL	_UDPIsGetReady
000a1c   f05a
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a22   f002
000a24   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000a26   0e00     movlw	0                  	MOVLW	0x00
000a28   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a2a   e102     bnz	0xa30                	BNZ	_00271_DS_
000a2c   0efa     movlw	0xfa               	MOVLW	0xfa
000a2e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00271_DS_:
000a30   e226     bc	0xa7e                 	BC	_00192_DS_
                                           ;	.line	589; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
000a32   ec44     call	0xbc88, 0           	CALL	_TickGet
000a34   f05e
000a36   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a38   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a3a   f002
000a3c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000a3e   f003
000a40   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000a42   f004
000a44   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000a46   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000a48   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000a4a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000a4c   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000a4e   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000a50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000a52   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000a54   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000a56   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000a58   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000a5a   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000a5c   0e00     movlw	0                  	MOVLW	0x00
000a5e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000a60   e108     bnz	0xa72                	BNZ	_00272_DS_
000a62   0e01     movlw	0x1                	MOVLW	0x01
000a64   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000a66   e105     bnz	0xa72                	BNZ	_00272_DS_
000a68   0e3d     movlw	0x3d               	MOVLW	0x3d
000a6a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a6c   e102     bnz	0xa72                	BNZ	_00272_DS_
000a6e   0ee4     movlw	0xe4               	MOVLW	0xe4
000a70   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00272_DS_:
000a72   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a74   d1a5     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	590; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000a76   0e02     movlw	0x2                	MOVLW	0x02
000a78   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000a7a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	591; TCPIP_Stack/DHCP.c	break;
000a7c   d1a1     bra	0xdc0                	BRA	_00229_DS_
                                           _00192_DS_:
                                           ;	.line	595; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000a7e   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000a80   f000
000a82   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a84   6a02     clrf	0x2, 0              	CLRF	r0x02
000a86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a88   0a05     xorlw	0x5                	XORLW	0x05
000a8a   e102     bnz	0xa90                	BNZ	_00274_DS_
000a8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a8e   e007     bz	0xa9e                 	BZ	_00193_DS_
                                           _00274_DS_:
000a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a92   0a06     xorlw	0x6                	XORLW	0x06
000a94   e103     bnz	0xa9c                	BNZ	_00276_DS_
000a96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a98   e101     bnz	0xa9c                	BNZ	_00276_DS_
000a9a   d05f     bra	0xb5a                	BRA	_00200_DS_
                                           _00276_DS_:
000a9c   d191     bra	0xdc0                	BRA	_00229_DS_
                                           _00193_DS_:
000a9e   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	598; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000aa0   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   eca3     call	0xaf46, 0           	CALL	_UDPClose
000aa6   f057
000aa8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000aaa   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	599; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000aac   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	600; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000aae   ec44     call	0xbc88, 0           	CALL	_TickGet
000ab0   f05e
000ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ab6   f002
000ab8   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000aba   f003
000abc   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000abe   f004
000ac0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000ac4   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000ac6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000aca   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000acc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ace   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000ad0   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000ad6   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	601; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000ad8   0e06     movlw	0x6                	MOVLW	0x06
000ada   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000adc   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000ade   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	602; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000ae0   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
000ae2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	603; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = TRUE;	
000ae4   811e     bsf	0x1e, 0, 0x1         	BSF	(_DHCPClient + 2), 0, B
000ae6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	605; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.IPAddress)
000ae8   a137     btfss	0x37, 0, 0x1       	BTFSS	(_DHCPClient + 27), 0, B
000aea   d010     bra	0xb0c                	BRA	_00195_DS_
000aec   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	606; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = DHCPClient.tempIPAddress.Val;
000aee   512b     movf	0x2b, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
000af0   0108     movlb	0x8                	BANKSEL	_AppConfig
000af2   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
000af4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 16)
000af6   512c     movf	0x2c, 0, 0x1        	MOVF	(_DHCPClient + 16), W, B
000af8   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
000afa   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
000afc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 17)
000afe   512d     movf	0x2d, 0, 0x1        	MOVF	(_DHCPClient + 17), W, B
000b00   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
000b02   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
000b04   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 18)
000b06   512e     movf	0x2e, 0, 0x1        	MOVF	(_DHCPClient + 18), W, B
000b08   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
000b0a   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
                                           _00195_DS_:
000b0c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	607; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Mask)
000b0e   a537     btfss	0x37, 0x2, 0x1     	BTFSS	(_DHCPClient + 27), 2, B
000b10   d010     bra	0xb32                	BRA	_00197_DS_
000b12   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 23)
                                           ;	.line	608; TCPIP_Stack/DHCP.c	AppConfig.MyMask.Val = DHCPClient.tempMask.Val;
000b14   5133     movf	0x33, 0, 0x1        	MOVF	(_DHCPClient + 23), W, B
000b16   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
000b18   6fcc     movwf	0xcc, 0x1          	MOVWF	(_AppConfig + 4), B
000b1a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 24)
000b1c   5134     movf	0x34, 0, 0x1        	MOVF	(_DHCPClient + 24), W, B
000b1e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
000b20   6fcd     movwf	0xcd, 0x1          	MOVWF	(_AppConfig + 5), B
000b22   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 25)
000b24   5135     movf	0x35, 0, 0x1        	MOVF	(_DHCPClient + 25), W, B
000b26   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
000b28   6fce     movwf	0xce, 0x1          	MOVWF	(_AppConfig + 6), B
000b2a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 26)
000b2c   5136     movf	0x36, 0, 0x1        	MOVF	(_DHCPClient + 26), W, B
000b2e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
000b30   6fcf     movwf	0xcf, 0x1          	MOVWF	(_AppConfig + 7), B
                                           _00197_DS_:
000b32   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	609; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Gateway)
000b34   a337     btfss	0x37, 0x1, 0x1     	BTFSS	(_DHCPClient + 27), 1, B
000b36   d144     bra	0xdc0                	BRA	_00229_DS_
000b38   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 19)
                                           ;	.line	610; TCPIP_Stack/DHCP.c	AppConfig.MyGateway.Val = DHCPClient.tempGateway.Val;
000b3a   512f     movf	0x2f, 0, 0x1        	MOVF	(_DHCPClient + 19), W, B
000b3c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 8)
000b3e   6fd0     movwf	0xd0, 0x1          	MOVWF	(_AppConfig + 8), B
000b40   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 20)
000b42   5130     movf	0x30, 0, 0x1        	MOVF	(_DHCPClient + 20), W, B
000b44   0108     movlb	0x8                	BANKSEL	(_AppConfig + 9)
000b46   6fd1     movwf	0xd1, 0x1          	MOVWF	(_AppConfig + 9), B
000b48   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 21)
000b4a   5131     movf	0x31, 0, 0x1        	MOVF	(_DHCPClient + 21), W, B
000b4c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 10)
000b4e   6fd2     movwf	0xd2, 0x1          	MOVWF	(_AppConfig + 10), B
000b50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 22)
000b52   5132     movf	0x32, 0, 0x1        	MOVF	(_DHCPClient + 22), W, B
000b54   0108     movlb	0x8                	BANKSEL	(_AppConfig + 11)
000b56   6fd3     movwf	0xd3, 0x1          	MOVWF	(_AppConfig + 11), B
                                           ;	.line	624; TCPIP_Stack/DHCP.c	break;
000b58   d133     bra	0xdc0                	BRA	_00229_DS_
                                           _00200_DS_:
                                           ;	.line	627; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000b5a   0e02     movlw	0x2                	MOVLW	0x02
000b5c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000b5e   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	630; TCPIP_Stack/DHCP.c	break;
000b60   d12f     bra	0xdc0                	BRA	_00229_DS_
                                           _00202_DS_:
                                           ;	.line	633; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer < TICK_SECOND) break;
000b62   ec44     call	0xbc88, 0           	CALL	_TickGet
000b64   f05e
000b66   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b68   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b6a   f002
000b6c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b6e   f003
000b70   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b72   f004
000b74   cb1f     movff	0xb1f, 0x5         	MOVFF	(_DHCPClient + 3), r0x05
000b76   f005
000b78   cb20     movff	0xb20, 0x6         	MOVFF	(_DHCPClient + 4), r0x06
000b7a   f006
000b7c   cb21     movff	0xb21, 0x7         	MOVFF	(_DHCPClient + 5), r0x07
000b7e   f007
000b80   cb22     movff	0xb22, 0x8         	MOVFF	(_DHCPClient + 6), r0x08
000b82   f008
000b84   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b86   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000b88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b8a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000b8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b8e   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000b90   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000b92   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000b94   0e00     movlw	0                  	MOVLW	0x00
000b96   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000b98   e108     bnz	0xbaa                	BNZ	_00277_DS_
000b9a   0e00     movlw	0                  	MOVLW	0x00
000b9c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b9e   e105     bnz	0xbaa                	BNZ	_00277_DS_
000ba0   0e9e     movlw	0x9e               	MOVLW	0x9e
000ba2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000ba4   e102     bnz	0xbaa                	BNZ	_00277_DS_
000ba6   0ef2     movlw	0xf2               	MOVLW	0xf2
000ba8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00277_DS_:
000baa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000bac   d109     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	637; TCPIP_Stack/DHCP.c	if(DHCPClient.dwLeaseTime >= 2ul)
000bae   cb23     movff	0xb23, 0x1         	MOVFF	(_DHCPClient + 7), r0x01
000bb0   f001
000bb2   cb24     movff	0xb24, 0x2         	MOVFF	(_DHCPClient + 8), r0x02
000bb4   f002
000bb6   cb25     movff	0xb25, 0x3         	MOVFF	(_DHCPClient + 9), r0x03
000bb8   f003
000bba   cb26     movff	0xb26, 0x4         	MOVFF	(_DHCPClient + 10), r0x04
000bbc   f004
000bbe   0e00     movlw	0                  	MOVLW	0x00
000bc0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000bc2   e108     bnz	0xbd4                	BNZ	_00278_DS_
000bc4   0e00     movlw	0                  	MOVLW	0x00
000bc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000bc8   e105     bnz	0xbd4                	BNZ	_00278_DS_
000bca   0e00     movlw	0                  	MOVLW	0x00
000bcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000bce   e102     bnz	0xbd4                	BNZ	_00278_DS_
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00278_DS_:
000bd4   e329     bnc	0xc28                	BNC	_00206_DS_
                                           ;	.line	639; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer += TICK_SECOND;
000bd6   0ef2     movlw	0xf2               	MOVLW	0xf2
000bd8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000bda   0e9e     movlw	0x9e               	MOVLW	0x9e
000bdc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000bde   0e00     movlw	0                  	MOVLW	0x00
000be0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000be2   0e00     movlw	0                  	MOVLW	0x00
000be4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000be6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be8   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000bea   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000bec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bee   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000bf0   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000bf2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bf4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000bf6   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000bf8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bfa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000bfc   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	640; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime--;
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c06   0eff     movlw	0xff               	MOVLW	0xff
000c08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c0a   0eff     movlw	0xff               	MOVLW	0xff
000c0c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000c0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c10   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 7)
000c12   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
000c14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c16   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 8)
000c18   6f24     movwf	0x24, 0x1          	MOVWF	(_DHCPClient + 8), B
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 9)
000c1e   6f25     movwf	0x25, 0x1          	MOVWF	(_DHCPClient + 9), B
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 10)
000c24   6f26     movwf	0x26, 0x1          	MOVWF	(_DHCPClient + 10), B
                                           ;	.line	641; TCPIP_Stack/DHCP.c	break;
000c26   d0cc     bra	0xdc0                	BRA	_00229_DS_
                                           _00206_DS_:
                                           ;	.line	646; TCPIP_Stack/DHCP.c	NULL, DHCP_SERVER_PORT);
000c28   0e00     movlw	0                  	MOVLW	0x00
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e43     movlw	0x43               	MOVLW	0x43
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   0e00     movlw	0                  	MOVLW	0x00
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   0e00     movlw	0                  	MOVLW	0x00
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   0e00     movlw	0                  	MOVLW	0x00
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c40   0e44     movlw	0x44               	MOVLW	0x44
000c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c44   ec3b     call	0x5276, 0           	CALL	_UDPOpen
000c46   f029
000c48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c4a   0e07     movlw	0x7                	MOVLW	0x07
000c4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c50   010b     movlb	0xb                	BANKSEL	_DHCPClient
000c52   6f1c     movwf	0x1c, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	647; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
000c54   cb1c     movff	0xb1c, 0x1         	MOVFF	_DHCPClient, r0x01
000c56   f001
000c58   6a02     clrf	0x2, 0              	CLRF	r0x02
000c5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c5c   0aff     xorlw	0xff               	XORLW	0xff
000c5e   e103     bnz	0xc66                	BNZ	_00280_DS_
000c60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c62   e101     bnz	0xc66                	BNZ	_00280_DS_
000c64   d0ad     bra	0xdc0                	BRA	_00229_DS_
                                           _00280_DS_:
                                           ;	.line	649; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_RENEW;
000c66   0e07     movlw	0x7                	MOVLW	0x07
000c68   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000c6a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00211_DS_:
000c6c   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	655; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000c6e   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ec14     call	0xae28, 0           	CALL	_UDPIsPutReady
000c74   f057
000c76   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c78   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c7a   f002
000c7c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000c7e   0e01     movlw	0x1                	MOVLW	0x01
000c80   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c82   e102     bnz	0xc88                	BNZ	_00281_DS_
000c84   0e02     movlw	0x2                	MOVLW	0x02
000c86   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00281_DS_:
000c88   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c8a   d09a     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	658; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, TRUE);
000c8c   0e01     movlw	0x1                	MOVLW	0x01
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   0e03     movlw	0x3                	MOVLW	0x03
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ec6d     call	0x28da, 0           	CALL	__DHCPSend
000c96   f014
000c98   0e02     movlw	0x2                	MOVLW	0x02
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c9c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	659; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
000c9e   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	662; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000ca0   ec44     call	0xbc88, 0           	CALL	_TickGet
000ca2   f05e
000ca4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ca8   f002
000caa   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000cac   f003
000cae   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000cb0   f004
000cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000cb6   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000cb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cba   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000cbc   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000cbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000cc2   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000cc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc6   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000cc8   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	663; TCPIP_Stack/DHCP.c	DHCPClient.smState++;
000cca   cb1d     movff	0xb1d, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
000ccc   f001
000cce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cd2   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000cd4   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	664; TCPIP_Stack/DHCP.c	break;
000cd6   d074     bra	0xdc0                	BRA	_00229_DS_
                                           _00216_DS_:
000cd8   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	670; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000cda   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ec60     call	0xb4c0, 0           	CALL	_UDPIsGetReady
000ce0   f05a
000ce2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ce6   f002
000ce8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cea   0e00     movlw	0                  	MOVLW	0x00
000cec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000cee   e102     bnz	0xcf4                	BNZ	_00282_DS_
000cf0   0efa     movlw	0xfa               	MOVLW	0xfa
000cf2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00282_DS_:
000cf4   e230     bc	0xd56                 	BC	_00222_DS_
                                           ;	.line	674; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >=  DHCP_TIMEOUT)
000cf6   ec44     call	0xbc88, 0           	CALL	_TickGet
000cf8   f05e
000cfa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cfc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000cfe   f002
000d00   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d02   f003
000d04   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d06   f004
000d08   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000d0a   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000d0c   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000d0e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000d10   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000d12   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000d14   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000d16   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000d18   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000d1a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000d1c   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000d1e   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000d20   0e00     movlw	0                  	MOVLW	0x00
000d22   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000d24   e108     bnz	0xd36                	BNZ	_00283_DS_
000d26   0e01     movlw	0x1                	MOVLW	0x01
000d28   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000d2a   e105     bnz	0xd36                	BNZ	_00283_DS_
000d2c   0e3d     movlw	0x3d               	MOVLW	0x3d
000d2e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000d30   e102     bnz	0xd36                	BNZ	_00283_DS_
000d32   0ee4     movlw	0xe4               	MOVLW	0xe4
000d34   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00283_DS_:
000d36   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d38   d043     bra	0xdc0                	BRA	_00229_DS_
000d3a   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	676; TCPIP_Stack/DHCP.c	if(++DHCPClient.smState > SM_DHCP_GET_RENEW_ACK3)
000d3c   291d     incf	0x1d, 0, 0x1        	INCF	(_DHCPClient + 1), W, B
000d3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d42   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000d44   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000d46   0e0d     movlw	0xd                	MOVLW	0x0d
000d48   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000d4a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d4c   d039     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	677; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000d4e   0e02     movlw	0x2                	MOVLW	0x02
000d50   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000d52   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	679; TCPIP_Stack/DHCP.c	break;
000d54   d035     bra	0xdc0                	BRA	_00229_DS_
                                           _00222_DS_:
                                           ;	.line	683; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000d56   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000d58   f000
000d5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d5c   6a02     clrf	0x2, 0              	CLRF	r0x02
000d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d60   0a05     xorlw	0x5                	XORLW	0x05
000d62   e102     bnz	0xd68                	BNZ	_00286_DS_
000d64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d66   e006     bz	0xd74                 	BZ	_00223_DS_
                                           _00286_DS_:
000d68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d6a   0a06     xorlw	0x6                	XORLW	0x06
000d6c   e129     bnz	0xdc0                	BNZ	_00229_DS_
000d6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d70   e024     bz	0xdba                 	BZ	_00224_DS_
                                           _00288_DS_:
000d72   d026     bra	0xdc0                	BRA	_00229_DS_
                                           _00223_DS_:
000d74   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	686; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000d76   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   eca3     call	0xaf46, 0           	CALL	_UDPClose
000d7c   f057
000d7e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000d80   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	687; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000d82   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	688; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000d84   ec44     call	0xbc88, 0           	CALL	_TickGet
000d86   f05e
000d88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d8a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000d8c   f002
000d8e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d90   f003
000d92   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d94   f004
000d96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d98   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 3)
000d9a   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 4)
000da0   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000da4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 5)
000da6   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 6)
000dac   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	689; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000dae   0e06     movlw	0x6                	MOVLW	0x06
000db0   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000db2   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000db4   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	690; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000db6   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
                                           ;	.line	691; TCPIP_Stack/DHCP.c	break;
000db8   d003     bra	0xdc0                	BRA	_00229_DS_
                                           _00224_DS_:
                                           ;	.line	694; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000dba   0e02     movlw	0x2                	MOVLW	0x02
000dbc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
000dbe   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00229_DS_:
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000dc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dc2   ef9a     goto	0x734               	GOTO	_00227_DS_
000dc4   f003
                                           _00231_DS_:
000dc6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000dc8   f008
000dca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000dcc   f007
000dce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000dd0   f006
000dd2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000dd4   f005
000dd6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000dd8   f004
000dda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ddc   f003
000dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000de0   f002
000de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000de4   f001
000de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de8   f000
000dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dec   ffd9
000dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsServerDetected	code
                                           _DHCPIsServerDetected:
                                           ;	.line	457; TCPIP_Stack/DHCP.c	BOOL DHCPIsServerDetected(BYTE vInterface)
00bccc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bcce   ffe5
00bcd0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bcd2   ffd9
00bcd4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00bcd6   ffe5
                                           ;	.line	460; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bDHCPServerDetected;
00bcd8   6a00     clrf	0, 0                	CLRF	r0x00
00bcda   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
00bcdc   b71e     btfsc	0x1e, 0x3, 0x1     	BTFSC	(_DHCPClient + 2), 3, B
00bcde   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00bce0   5000     movf	0, 0, 0             	MOVF	r0x00, W
00bce2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00bce4   f000
00bce6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bce8   ffd9
00bcea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPStateChanged	code
                                           _DHCPStateChanged:
                                           ;	.line	420; TCPIP_Stack/DHCP.c	BOOL DHCPStateChanged(BYTE vInterface)
00bd4a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bd4c   ffe5
00bd4e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bd50   ffd9
00bd52   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	423; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bEvent)
00bd54   a31e     btfss	0x1e, 0x1, 0x1     	BTFSS	(_DHCPClient + 2), 1, B
00bd56   d004     bra	0xbd60               	BRA	_00158_DS_
00bd58   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	425; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 0;
00bd5a   931e     bcf	0x1e, 0x1, 0x1       	BCF	(_DHCPClient + 2), 1, B
                                           ;	.line	426; TCPIP_Stack/DHCP.c	return TRUE;
00bd5c   0e01     movlw	0x1                	MOVLW	0x01
00bd5e   d001     bra	0xbd62               	BRA	_00159_DS_
                                           _00158_DS_:
                                           ;	.line	428; TCPIP_Stack/DHCP.c	return FALSE;
00bd60   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00159_DS_:
00bd62   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bd64   ffd9
00bd66   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsBound	code
                                           _DHCPIsBound:
                                           ;	.line	386; TCPIP_Stack/DHCP.c	BOOL DHCPIsBound(BYTE vInterface)
00bcec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bcee   ffe5
00bcf0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bcf2   ffd9
00bcf4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00bcf6   ffe5
                                           ;	.line	389; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bIsBound;
00bcf8   6a00     clrf	0, 0                	CLRF	r0x00
00bcfa   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
00bcfc   b11e     btfsc	0x1e, 0, 0x1       	BTFSC	(_DHCPClient + 2), 0, B
00bcfe   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00bd00   5000     movf	0, 0, 0             	MOVF	r0x00, W
00bd02   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00bd04   f000
00bd06   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bd08   ffd9
00bd0a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsEnabled	code
                                           _DHCPIsEnabled:
                                           ;	.line	355; TCPIP_Stack/DHCP.c	BOOL DHCPIsEnabled(BYTE vInterface)
00bb68   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bb6a   ffe5
00bb6c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bb6e   ffd9
00bb70   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00bb72   ffe5
                                           ;	.line	358; TCPIP_Stack/DHCP.c	return DHCPClient.smState != SM_DHCP_DISABLED;
00bb74   6a00     clrf	0, 0                	CLRF	r0x00
00bb76   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00bb78   511d     movf	0x1d, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
00bb7a   e101     bnz	0xbb7e               	BNZ	_00147_DS_
00bb7c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00147_DS_:
00bb7e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00bb80   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00bb82   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00bb84   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00bb86   6a00     clrf	0, 0                	CLRF	r0x00
00bb88   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00bb8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00bb8c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00bb8e   f000
00bb90   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bb92   ffd9
00bb94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPEnable	code
                                           _DHCPEnable:
                                           ;	.line	324; TCPIP_Stack/DHCP.c	void DHCPEnable(BYTE vInterface)
00bd68   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bd6a   ffe5
00bd6c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bd6e   ffd9
00bd70   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	328; TCPIP_Stack/DHCP.c	if(DHCPClient.smState == SM_DHCP_DISABLED)
00bd72   511d     movf	0x1d, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
00bd74   e105     bnz	0xbd80               	BNZ	_00139_DS_
                                           ;	.line	330; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
00bd76   0e01     movlw	0x1                	MOVLW	0x01
00bd78   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00bd7a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
00bd7c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	331; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;
00bd7e   911e     bcf	0x1e, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
                                           _00139_DS_:
00bd80   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bd82   ffd9
00bd84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPDisable	code
                                           _DHCPDisable:
                                           ;	.line	289; TCPIP_Stack/DHCP.c	void DHCPDisable(BYTE vInterface)
00b896   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b898   ffe5
00b89a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b89c   ffd9
00b89e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b8a0   ffe5
00b8a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b8a4   ffe5
00b8a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b8a8   ffe5
                                           ;	.line	293; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
00b8aa   cb1c     movff	0xb1c, 0           	MOVFF	_DHCPClient, r0x00
00b8ac   f000
00b8ae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00b8b0   f001
00b8b2   6a02     clrf	0x2, 0              	CLRF	r0x02
00b8b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b8b6   0aff     xorlw	0xff               	XORLW	0xff
00b8b8   e102     bnz	0xb8be               	BNZ	_00132_DS_
00b8ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b8bc   e007     bz	0xb8cc                	BZ	_00127_DS_
                                           _00132_DS_:
                                           ;	.line	295; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
00b8be   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b8c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b8c2   eca3     call	0xaf46, 0           	CALL	_UDPClose
00b8c4   f057
00b8c6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00b8c8   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	296; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00b8ca   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           _00127_DS_:
00b8cc   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	299; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_DISABLED;
00b8ce   6b1d     clrf	0x1d, 0x1           	CLRF	(_DHCPClient + 1), B
00b8d0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b8d2   f002
00b8d4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b8d6   f001
00b8d8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b8da   f000
00b8dc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b8de   ffd9
00b8e0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPInit	code
                                           _DHCPInit:
                                           ;	.line	223; TCPIP_Stack/DHCP.c	void DHCPInit(BYTE vInterface)
00b0de   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b0e0   ffe5
00b0e2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b0e4   ffd9
00b0e6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b0e8   ffe5
00b0ea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b0ec   ffe5
00b0ee   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b0f0   ffe5
00b0f2   010e     movlb	0xe                	BANKSEL	_DHCPClientInitializedOnce
                                           ;	.line	229; TCPIP_Stack/DHCP.c	if(!DHCPClientInitializedOnce)
00b0f4   5152     movf	0x52, 0, 0x1        	MOVF	_DHCPClientInitializedOnce, W, B
00b0f6   e112     bnz	0xb11c               	BNZ	_00106_DS_
                                           ;	.line	231; TCPIP_Stack/DHCP.c	DHCPClientInitializedOnce = TRUE;
00b0f8   0e01     movlw	0x1                	MOVLW	0x01
00b0fa   010e     movlb	0xe                	BANKSEL	_DHCPClientInitializedOnce
00b0fc   6f52     movwf	0x52, 0x1          	MOVWF	_DHCPClientInitializedOnce, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
00b0fe   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00109_DS_:
00b100   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00b102   f001
00b104   6a02     clrf	0x2, 0              	CLRF	r0x02
00b106   0e00     movlw	0                  	MOVLW	0x00
00b108   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00b10a   e102     bnz	0xb110               	BNZ	_00119_DS_
00b10c   0e01     movlw	0x1                	MOVLW	0x01
00b10e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00119_DS_:
00b110   e205     bc	0xb11c                	BC	_00106_DS_
00b112   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	235; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00b114   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
00b116   0e01     movlw	0x1                	MOVLW	0x01
00b118   6e00     movwf	0, 0               	MOVWF	r0x00
00b11a   d7f2     bra	0xb100               	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	242; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
00b11c   cb1c     movff	0xb1c, 0           	MOVFF	_DHCPClient, r0x00
00b11e   f000
00b120   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00b122   f001
00b124   6a02     clrf	0x2, 0              	CLRF	r0x02
00b126   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b128   0aff     xorlw	0xff               	XORLW	0xff
00b12a   e102     bnz	0xb130               	BNZ	_00121_DS_
00b12c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b12e   e007     bz	0xb13e                	BZ	_00108_DS_
                                           _00121_DS_:
                                           ;	.line	244; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
00b130   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b134   eca3     call	0xaf46, 0           	CALL	_UDPClose
00b136   f057
00b138   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00b13a   010b     movlb	0xb                	BANKSEL	_DHCPClient
                                           ;	.line	245; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00b13c   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           _00108_DS_:
                                           ;	.line	249; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
00b13e   0e01     movlw	0x1                	MOVLW	0x01
00b140   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 1)
00b142   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
00b144   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	250; TCPIP_Stack/DHCP.c	DHCPClient.flags.val = 0;
00b146   6b1e     clrf	0x1e, 0x1           	CLRF	(_DHCPClient + 2), B
00b148   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	251; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode = TRUE; // This flag toggles before 
00b14a   891e     bsf	0x1e, 0x4, 0x1       	BSF	(_DHCPClient + 2), 4, B
00b14c   010b     movlb	0xb                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	255; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = TRUE;
00b14e   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
00b150   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b152   f002
00b154   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b156   f001
00b158   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b15a   f000
00b15c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b15e   ffd9
00b160   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4782 (0x12ae) bytes ( 3.65%)
                                           ;           	 2391 (0x0957) words
                                           ; udata size:	   39 (0x0027) bytes ( 1.02%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _MACInit
                                           	global _MACIsLinked
                                           	global _MACIsTxReady
                                           	global _MACDiscardRx
                                           	global _MACGetFreeRxSize
                                           	global _MACGetHeader
                                           	global _MACPutHeader
                                           	global _MACFlush
                                           	global _MACSetReadPtrInRx
                                           	global _MACSetWritePtr
                                           	global _MACSetReadPtr
                                           	global _MACCalcRxChecksum
                                           	global _CalcIPBufferChecksum
                                           	global _MACMemCopyAsync
                                           	global _MACIsMemCopyDone
                                           	global _MACGet
                                           	global _MACGetArray
                                           	global _MACPut
                                           	global _MACPutArray
                                           	global _ReadPHYReg
                                           	global _WritePHYReg
                                           	global _MACPowerDown
                                           	global _MACPowerUp
                                           	global _MACPrintHeader
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrget1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _DisplayString
                                           	extern _swaps
                                           	extern _TickGet
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_ETH97J60_0	udata
                                           _NextPacketLocation	res	2
                                           
                                           udata_ETH97J60_1	udata
                                           _CurrentPacketLocation	res	2
                                           
                                           udata_ETH97J60_2	udata
                                           _WasDiscarded	res	1
                                           
                                           udata_ETH97J60_3	udata
                                           _wTXWatchdog	res	2
                                           
                                           udata_ETH97J60_4	udata
                                           _MACIsLinked_pr_1_1	res	2
                                           
                                           udata_ETH97J60_5	udata
                                           _MACDiscardRx_NewRXRDLocation_1_1	res	2
                                           
                                           udata_ETH97J60_6	udata
                                           _MACGetFreeRxSize_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_7	udata
                                           _MACGetFreeRxSize_WritePT_1_1	res	2
                                           
                                           udata_ETH97J60_8	udata
                                           _MACGetHeader_header_1_1	res	20
                                           
                                           udata_ETH97J60_9	udata
                                           _MACFlush_i_2_2	res	1
                                           
                                           udata_ETH97J60_10	udata
                                           _MACSetReadPtrInRx_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_11	udata
                                           _CalcIPBufferChecksum_ChunkLen_1_1	res	2
                                           
                                           udata_ETH97J60_12	udata
                                           _CalcIPBufferChecksum_Checksum_1_1	res	4
                                           
                                           udata_ETH97J60_13	udata
                                           _CalcIPBufferChecksum_DataBuffer_1_1	res	20
                                           
                                           udata_ETH97J60_14	udata
                                           _MACMemCopyAsync_destAddr_1_1	res	2
                                           
                                           udata_ETH97J60_15	udata
                                           _MACMemCopyAsync_sourceAddr_1_1	res	2
                                           
                                           udata_ETH97J60_16	udata
                                           _MACMemCopyAsync_ReadSave_1_1	res	2
                                           
                                           udata_ETH97J60_17	udata
                                           _MACMemCopyAsync_WriteSave_1_1	res	2
                                           
                                           udata_ETH97J60_18	udata
                                           _MACGetArray_i_1_1	res	1
                                           
                                           udata_ETH97J60_19	udata
                                           _ReadPHYReg_Result_1_1	res	2
                                           
                                           udata_ETH97J60_20	udata
                                           _WritePHYReg_Data_1_1	res	2
                                           
                                           udata_ETH97J60_21	udata
                                           _MACPrintHeader_header_1_1	res	64
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPrintHeader	code
                                           _MACPrintHeader:
                                           ;	.line	1452; TCPIP_Stack/ETH97J60.c	void MACPrintHeader(BYTE woffset)
007dde   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007de0   ffe5
007de2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007de4   ffd9
007de6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007de8   ffe5
007dea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007dec   ffe5
007dee   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007df0   ffe5
007df2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007df4   ffe5
007df6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007df8   ffe5
007dfa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007dfc   ffe5
007dfe   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007e00   ffe5
007e02   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007e04   ffe5
007e06   0e02     movlw	0x2                	MOVLW	0x02
007e08   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007e0a   f000
                                           ;	.line	1458; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(TXSTART + 1) ;
007e0c   0e0b     movlw	0xb                	MOVLW	0x0b
007e0e   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	1459; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(TXSTART + 1) ;
007e10   0e1a     movlw	0x1a               	MOVLW	0x1a
007e12   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	1462; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header[0], sizeof(header));
007e14   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
007e16   6e02     movwf	0x2, 0             	MOVWF	r0x02
007e18   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
007e1a   6e01     movwf	0x1, 0             	MOVWF	r0x01
007e1c   0e80     movlw	0x80               	MOVLW	0x80
007e1e   6e03     movwf	0x3, 0             	MOVWF	r0x03
007e20   0e00     movlw	0                  	MOVLW	0x00
007e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e24   0e40     movlw	0x40               	MOVLW	0x40
007e26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e28   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007e2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007e2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e30   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e34   ecac     call	0x9d58, 0           	CALL	_MACGetArray
007e36   f04e
007e38   0e05     movlw	0x5                	MOVLW	0x05
007e3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
007e3c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007e3e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
007e40   6a01     clrf	0x1, 0              	CLRF	r0x01
007e42   6a02     clrf	0x2, 0              	CLRF	r0x02
007e44   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00492_DS_:
007e46   0e10     movlw	0x10               	MOVLW	0x10
007e48   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
007e4a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
007e4c   d057     bra	0x7efc               	BRA	_00495_DS_
                                           ;	.line	1466; TCPIP_Stack/ETH97J60.c	c = (header[i+2*woffset]>>4)&0x0F;
007e4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007e50   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
007e52   6e04     movwf	0x4, 0             	MOVWF	r0x04
007e54   6a05     clrf	0x5, 0              	CLRF	r0x05
007e56   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
007e58   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
007e5a   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
007e5c   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
007e5e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
007e60   ffe9
007e62   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
007e64   ffea
007e66   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
007e68   f004
007e6a   3804     swapf	0x4, 0, 0          	SWAPF	r0x04, W
007e6c   0b0f     andlw	0xf                	ANDLW	0x0f
007e6e   6e04     movwf	0x4, 0             	MOVWF	r0x04
007e70   0e0f     movlw	0xf                	MOVLW	0x0f
007e72   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
                                           ;	.line	1467; TCPIP_Stack/ETH97J60.c	LCDText[2*i] = c + (c < 0x0A ? '0' : 'A');
007e74   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
007e76   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
007e78   6e05     movwf	0x5, 0             	MOVWF	r0x05
007e7a   6a06     clrf	0x6, 0              	CLRF	r0x06
007e7c   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007e7e   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
007e80   0e0a     movlw	0xa                	MOVLW	0x0a
007e82   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
007e84   e203     bc	0x7e8c                	BC	_00498_DS_
007e86   0e30     movlw	0x30               	MOVLW	0x30
007e88   6e07     movwf	0x7, 0             	MOVWF	r0x07
007e8a   d002     bra	0x7e90               	BRA	_00499_DS_
                                           _00498_DS_:
007e8c   0e41     movlw	0x41               	MOVLW	0x41
007e8e   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00499_DS_:
007e90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007e92   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
007e94   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007e96   ffe9
007e98   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
007e9a   ffea
007e9c   c007     movff	0x7, 0xfef         	MOVFF	r0x07, INDF0
007e9e   ffef
                                           ;	.line	1468; TCPIP_Stack/ETH97J60.c	c = header[i+2*woffset]&0x0F;
007ea0   5000     movf	0, 0, 0             	MOVF	r0x00, W
007ea2   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
007ea4   6e05     movwf	0x5, 0             	MOVWF	r0x05
007ea6   6a06     clrf	0x6, 0              	CLRF	r0x06
007ea8   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
007eaa   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
007eac   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
007eae   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
007eb0   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007eb2   ffe9
007eb4   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
007eb6   ffea
007eb8   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
007eba   f005
007ebc   0e0f     movlw	0xf                	MOVLW	0x0f
007ebe   1405     andwf	0x5, 0, 0          	ANDWF	r0x05, W
007ec0   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	1469; TCPIP_Stack/ETH97J60.c	LCDText[2*i+1] = c + (c < 0x0A ? '0' : 'A');
007ec2   2803     incf	0x3, 0, 0           	INCF	r0x03, W
007ec4   6e05     movwf	0x5, 0             	MOVWF	r0x05
007ec6   6a06     clrf	0x6, 0              	CLRF	r0x06
007ec8   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
007eca   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
007ecc   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007ece   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
007ed0   0e0a     movlw	0xa                	MOVLW	0x0a
007ed2   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
007ed4   e203     bc	0x7edc                	BC	_00500_DS_
007ed6   0e30     movlw	0x30               	MOVLW	0x30
007ed8   6e07     movwf	0x7, 0             	MOVWF	r0x07
007eda   d002     bra	0x7ee0               	BRA	_00501_DS_
                                           _00500_DS_:
007edc   0e41     movlw	0x41               	MOVLW	0x41
007ede   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00501_DS_:
007ee0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007ee2   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
007ee4   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
007ee6   ffe9
007ee8   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
007eea   ffea
007eec   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
007eee   ffef
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
007ef0   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
007ef2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
007ef4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
007ef6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
007ef8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
007efa   d7a5     bra	0x7e46               	BRA	_00492_DS_
                                           _00495_DS_:
007efc   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	1471; TCPIP_Stack/ETH97J60.c	LCDText[32]=0;
007efe   6b42     clrf	0x42, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	1473; TCPIP_Stack/ETH97J60.c	LCDUpdate();
007f00   ec06     call	0x500c, 0           	CALL	_LCDUpdate
007f02   f028
007f04   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007f06   f007
007f08   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007f0a   f006
007f0c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007f0e   f005
007f10   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007f12   f004
007f14   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007f16   f003
007f18   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007f1a   f002
007f1c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007f1e   f001
007f20   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007f22   f000
007f24   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f26   ffd9
007f28   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerUp	code
                                           _MACPowerUp:
                                           ;	.line	1357; TCPIP_Stack/ETH97J60.c	void MACPowerUp(void)
00bda4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bda6   ffe5
00bda8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bdaa   ffd9
00bdac   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1360; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;
00bdae   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00484_DS_:
00bdb0   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1363; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY)
00bdb2   b1fd     btfsc	0xfd, 0, 0x1       	BTFSC	_ESTATbits, 0, B
00bdb4   d002     bra	0xbdba               	BRA	_00487_DS_
                                           ;	.line	1366; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
00bdb6   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
00bdb8   d7fb     bra	0xbdb0               	BRA	_00484_DS_
                                           _00487_DS_:
00bdba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bdbc   ffd9
00bdbe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerDown	code
                                           _MACPowerDown:
                                           ;	.line	1320; TCPIP_Stack/ETH97J60.c	void MACPowerDown(void)
00bd86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bd88   ffe5
00bd8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bd8c   ffd9
                                           ;	.line	1323; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 0;
00bd8e   94d2     bcf	0xd2, 0x2, 0         	BCF	_ECON1bits, 2
                                           _00473_DS_:
00bd90   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1327; TCPIP_Stack/ETH97J60.c	while(ESTATbits.RXBUSY);
00bd92   b5fd     btfsc	0xfd, 0x2, 0x1     	BTFSC	_ESTATbits, 2, B
00bd94   d7fd     bra	0xbd90               	BRA	_00473_DS_
                                           _00476_DS_:
                                           ;	.line	1330; TCPIP_Stack/ETH97J60.c	while(ECON1bits.TXRTS);
00bd96   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
00bd98   d7fe     bra	0xbd96               	BRA	_00476_DS_
00bd9a   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1333; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 0;
00bd9c   9bfe     bcf	0xfe, 0x5, 0x1       	BCF	_ECON2bits, 5, B
00bd9e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bda0   ffd9
00bda2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__WritePHYReg	code
                                           _WritePHYReg:
                                           ;	.line	1251; TCPIP_Stack/ETH97J60.c	void WritePHYReg(BYTE Register, WORD Data)
00b848   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b84a   ffe5
00b84c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b84e   ffd9
00b850   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b852   ffe5
00b854   0e02     movlw	0x2                	MOVLW	0x02
00b856   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
00b858   feb4
00b85a   0e03     movlw	0x3                	MOVLW	0x03
00b85c   cfdb     movff	0xfdb, 0x28b       	MOVFF	PLUSW2, _WritePHYReg_Data_1_1
00b85e   f28b
00b860   0e04     movlw	0x4                	MOVLW	0x04
00b862   cfdb     movff	0xfdb, 0x28c       	MOVFF	PLUSW2, (_WritePHYReg_Data_1_1 + 1)
00b864   f28c
                                           ;	.line	1268; TCPIP_Stack/ETH97J60.c	PRODL = ((WORD_VAL*)&Data)->v[0];
00b866   c28b     movff	0x28b, 0xff3       	MOVFF	_WritePHYReg_Data_1_1, _PRODL
00b868   fff3
                                           ;	.line	1269; TCPIP_Stack/ETH97J60.c	PRODH = ((WORD_VAL*)&Data)->v[1];
00b86a   c28c     movff	0x28c, 0xff4       	MOVFF	(_WritePHYReg_Data_1_1 + 1), _PRODH
00b86c   fff4
                                           ;	.line	1270; TCPIP_Stack/ETH97J60.c	GIESave = INTCON & 0xC0;	 // Save GIEH and GIEL bits
00b86e   0ec0     movlw	0xc0               	MOVLW	0xc0
00b870   14f2     andwf	0xf2, 0, 0         	ANDWF	_INTCON, W
00b872   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	1271; TCPIP_Stack/ETH97J60.c	INTCON &= 0x3F;		 // Clear INTCONbits.GIEH and INTCONbits.GIEL
00b874   0e3f     movlw	0x3f               	MOVLW	0x3f
00b876   16f2     andwf	0xf2, 0x1, 0       	ANDWF	_INTCON, F
00b878   cff3     movff	0xff3, 0xeb6       	movff _PRODL, _MIWRL
00b87a   feb6
00b87c   0000     nop                      	nop
00b87e   cff4     movff	0xff4, 0xeb7       	movff _PRODH, _MIWRH
00b880   feb7
                                           	
                                           ;	.line	1289; TCPIP_Stack/ETH97J60.c	INTCON |= GIESave;		       // Restore GIEH and GIEL value
00b882   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b884   12f2     iorwf	0xf2, 0x1, 0       	IORWF	_INTCON, F
                                           _00465_DS_:
00b886   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1293; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
00b888   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
00b88a   d7fd     bra	0xb886               	BRA	_00465_DS_
00b88c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b88e   f000
00b890   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b892   ffd9
00b894   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__ReadPHYReg	code
                                           _ReadPHYReg:
                                           ;	.line	1208; TCPIP_Stack/ETH97J60.c	WORD ReadPHYReg(BYTE Register)
00b974   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b976   ffe5
00b978   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b97a   ffd9
00b97c   0e02     movlw	0x2                	MOVLW	0x02
00b97e   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
00b980   feb4
00b982   0000     nop                      	nop 
                                           ;	.line	1215; TCPIP_Stack/ETH97J60.c	MICMD = MICMD_MIIRD; Nop();
00b984   0e01     movlw	0x1                	MOVLW	0x01
00b986   010e     movlb	0xe                	BANKSEL	_MICMD
00b988   6fb2     movwf	0xb2, 0x1          	MOVWF	_MICMD, B
00b98a   0000     nop                      	nop 
                                           _00451_DS_:
00b98c   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1219; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
00b98e   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
00b990   d7fd     bra	0xb98c               	BRA	_00451_DS_
00b992   010e     movlb	0xe                	BANKSEL	_MICMD
                                           ;	.line	1222; TCPIP_Stack/ETH97J60.c	MICMD = 0x00; Nop();
00b994   6bb2     clrf	0xb2, 0x1           	CLRF	_MICMD, B
00b996   0000     nop                      	nop 
00b998   010e     movlb	0xe                	BANKSEL	_MIRDL
                                           ;	.line	1225; TCPIP_Stack/ETH97J60.c	Result.VAL.v[0] = MIRDL;
00b99a   51b8     movf	0xb8, 0, 0x1        	MOVF	_MIRDL, W, B
00b99c   0102     movlb	0x2                	BANKSEL	_ReadPHYReg_Result_1_1
00b99e   6f89     movwf	0x89, 0x1          	MOVWF	_ReadPHYReg_Result_1_1, B
00b9a0   0000     nop                      	nop 
00b9a2   010e     movlb	0xe                	BANKSEL	_MIRDH
                                           ;	.line	1227; TCPIP_Stack/ETH97J60.c	Result.VAL.v[1] = MIRDH;
00b9a4   51b9     movf	0xb9, 0, 0x1        	MOVF	_MIRDH, W, B
00b9a6   0102     movlb	0x2                	BANKSEL	(_ReadPHYReg_Result_1_1 + 1)
00b9a8   6f8a     movwf	0x8a, 0x1          	MOVWF	(_ReadPHYReg_Result_1_1 + 1), B
                                           ;	.line	1229; TCPIP_Stack/ETH97J60.c	return Result2;
00b9aa   c28a     movff	0x28a, 0xff3       	MOVFF	(_ReadPHYReg_Result_1_1 + 1), PRODL
00b9ac   fff3
00b9ae   0102     movlb	0x2                	BANKSEL	_ReadPHYReg_Result_1_1
00b9b0   5189     movf	0x89, 0, 0x1        	MOVF	_ReadPHYReg_Result_1_1, W, B
00b9b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b9b4   ffd9
00b9b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutArray	code
                                           _MACPutArray:
                                           ;	.line	1149; TCPIP_Stack/ETH97J60.c	void MACPutArray(BYTE *val, WORD len)
00abd6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00abd8   ffe5
00abda   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00abdc   ffd9
00abde   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00abe0   ffe5
00abe2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00abe4   ffe5
00abe6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00abe8   ffe5
00abea   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00abec   ffe5
00abee   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00abf0   ffe5
00abf2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00abf4   ffe5
00abf6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00abf8   ffe5
00abfa   0e02     movlw	0x2                	MOVLW	0x02
00abfc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00abfe   f000
00ac00   0e03     movlw	0x3                	MOVLW	0x03
00ac02   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00ac04   f001
00ac06   0e04     movlw	0x4                	MOVLW	0x04
00ac08   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00ac0a   f002
00ac0c   0e05     movlw	0x5                	MOVLW	0x05
00ac0e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00ac10   f003
00ac12   0e06     movlw	0x6                	MOVLW	0x06
00ac14   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00ac16   f004
                                           _00437_DS_:
                                           ;	.line	1151; TCPIP_Stack/ETH97J60.c	while(len--)
00ac18   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
00ac1a   f005
00ac1c   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
00ac1e   f006
00ac20   0eff     movlw	0xff               	MOVLW	0xff
00ac22   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00ac24   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00ac26   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
00ac28   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00ac2a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00ac2c   e00e     bz	0xac4a                	BZ	_00440_DS_
                                           ;	.line	1167; TCPIP_Stack/ETH97J60.c	EDATA = *val++; 
00ac2e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00ac30   ffe9
00ac32   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00ac34   fff3
00ac36   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00ac38   ec55     call	0xbcaa, 0           	CALL	__gptrget1
00ac3a   f05e
00ac3c   6e61     movwf	0x61, 0            	MOVWF	_EDATA
00ac3e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00ac40   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00ac42   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00ac44   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00ac46   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00ac48   d7e7     bra	0xac18               	BRA	_00437_DS_
                                           _00440_DS_:
00ac4a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00ac4c   f006
00ac4e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00ac50   f005
00ac52   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00ac54   f004
00ac56   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00ac58   f003
00ac5a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00ac5c   f002
00ac5e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00ac60   f001
00ac62   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ac64   f000
00ac66   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ac68   ffd9
00ac6a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPut	code
                                           _MACPut:
                                           ;	.line	1104; TCPIP_Stack/ETH97J60.c	void MACPut(BYTE val)
00be28   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00be2a   ffe5
00be2c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00be2e   ffd9
00be30   0e02     movlw	0x2                	MOVLW	0x02
00be32   cfdb     movff	0xfdb, 0xf61       	MOVFF	PLUSW2, _EDATA
00be34   ff61
                                           ;	.line	1121; TCPIP_Stack/ETH97J60.c	EDATA = val;
00be36   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00be38   ffd9
00be3a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetArray	code
                                           _MACGetArray:
                                           ;	.line	1062; TCPIP_Stack/ETH97J60.c	WORD MACGetArray(BYTE *val, WORD len)
009d58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009d5a   ffe5
009d5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009d5e   ffd9
009d60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009d62   ffe5
009d64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009d66   ffe5
009d68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009d6a   ffe5
009d6c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009d6e   ffe5
009d70   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009d72   ffe5
009d74   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009d76   ffe5
009d78   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009d7a   ffe5
009d7c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009d7e   ffe5
009d80   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
009d82   ffe5
009d84   0e02     movlw	0x2                	MOVLW	0x02
009d86   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009d88   f000
009d8a   0e03     movlw	0x3                	MOVLW	0x03
009d8c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009d8e   f001
009d90   0e04     movlw	0x4                	MOVLW	0x04
009d92   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009d94   f002
009d96   0e05     movlw	0x5                	MOVLW	0x05
009d98   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009d9a   f003
009d9c   0e06     movlw	0x6                	MOVLW	0x06
009d9e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009da0   f004
                                           ;	.line	1068; TCPIP_Stack/ETH97J60.c	if(val)
009da2   5000     movf	0, 0, 0             	MOVF	r0x00, W
009da4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
009da6   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
009da8   e01e     bz	0x9de6                	BZ	_00427_DS_
                                           ;	.line	1070; TCPIP_Stack/ETH97J60.c	while(w--)
009daa   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
009dac   f005
009dae   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
009db0   f006
                                           _00413_DS_:
009db2   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
009db4   f007
009db6   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
009db8   f008
009dba   0eff     movlw	0xff               	MOVLW	0xff
009dbc   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
009dbe   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
009dc0   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
009dc2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
009dc4   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
009dc6   e021     bz	0x9e0a                	BZ	_00421_DS_
                                           ;	.line	1072; TCPIP_Stack/ETH97J60.c	*val++ = EDATA;
009dc8   cf61     movff	0xf61, 0xfe5       	MOVFF	_EDATA, POSTDEC1
009dca   ffe5
009dcc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
009dce   ffe9
009dd0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
009dd2   fff3
009dd4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009dd6   ec28     call	0xbe50, 0           	CALL	__gptrput1
009dd8   f05f
009dda   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
009ddc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009dde   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
009de0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009de2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
009de4   d7e6     bra	0x9db2               	BRA	_00413_DS_
                                           _00427_DS_:
                                           ;	.line	1077; TCPIP_Stack/ETH97J60.c	while(w--)
009de6   c003     movff	0x3, 0             	MOVFF	r0x03, r0x00
009de8   f000
009dea   c004     movff	0x4, 0x1           	MOVFF	r0x04, r0x01
009dec   f001
                                           _00416_DS_:
009dee   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
009df0   f002
009df2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
009df4   f005
009df6   0eff     movlw	0xff               	MOVLW	0xff
009df8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009dfa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
009dfc   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
009dfe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009e00   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
009e02   e003     bz	0x9e0a                	BZ	_00421_DS_
                                           ;	.line	1079; TCPIP_Stack/ETH97J60.c	i = EDATA;
009e04   cf61     movff	0xf61, 0x2b1       	MOVFF	_EDATA, _MACGetArray_i_1_1
009e06   f2b1
009e08   d7f2     bra	0x9dee               	BRA	_00416_DS_
                                           _00421_DS_:
                                           ;	.line	1083; TCPIP_Stack/ETH97J60.c	return len;
009e0a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
009e0c   fff3
009e0e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009e10   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
009e12   f008
009e14   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
009e16   f007
009e18   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009e1a   f006
009e1c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009e1e   f005
009e20   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009e22   f004
009e24   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009e26   f003
009e28   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009e2a   f002
009e2c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009e2e   f001
009e30   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009e32   f000
009e34   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009e36   ffd9
009e38   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGet	code
                                           _MACGet:
                                           ;	.line	1037; TCPIP_Stack/ETH97J60.c	BYTE MACGet()
00be64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00be66   ffe5
00be68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00be6a   ffd9
                                           ;	.line	1039; TCPIP_Stack/ETH97J60.c	return EDATA;
00be6c   5061     movf	0x61, 0, 0          	MOVF	_EDATA, W
00be6e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00be70   ffd9
00be72   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsMemCopyDone	code
                                           _MACIsMemCopyDone:
                                           ;	.line	1014; TCPIP_Stack/ETH97J60.c	BOOL MACIsMemCopyDone(void)
00bbc2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bbc4   ffe5
00bbc6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bbc8   ffd9
00bbca   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00bbcc   ffe5
                                           ;	.line	1016; TCPIP_Stack/ETH97J60.c	return !ECON1bits.DMAST;
00bbce   6a00     clrf	0, 0                	CLRF	r0x00
00bbd0   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
00bbd2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00bbd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
00bbd6   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00bbd8   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00bbda   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00bbdc   6a00     clrf	0, 0                	CLRF	r0x00
00bbde   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00bbe0   5000     movf	0, 0, 0             	MOVF	r0x00, W
00bbe2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00bbe4   f000
00bbe6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bbe8   ffd9
00bbea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACMemCopyAsync	code
                                           _MACMemCopyAsync:
                                           ;	.line	899; TCPIP_Stack/ETH97J60.c	void MACMemCopyAsync(WORD destAddr, WORD sourceAddr, WORD len)
002c3a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c3c   ffe5
002c3e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c40   ffd9
002c42   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002c44   ffe5
002c46   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002c48   ffe5
002c4a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002c4c   ffe5
002c4e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002c50   ffe5
002c52   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002c54   ffe5
002c56   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002c58   ffe5
002c5a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002c5c   ffe5
002c5e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002c60   ffe5
002c62   0e02     movlw	0x2                	MOVLW	0x02
002c64   cfdb     movff	0xfdb, 0x281       	MOVFF	PLUSW2, _MACMemCopyAsync_destAddr_1_1
002c66   f281
002c68   0e03     movlw	0x3                	MOVLW	0x03
002c6a   cfdb     movff	0xfdb, 0x282       	MOVFF	PLUSW2, (_MACMemCopyAsync_destAddr_1_1 + 1)
002c6c   f282
002c6e   0e04     movlw	0x4                	MOVLW	0x04
002c70   cfdb     movff	0xfdb, 0x283       	MOVFF	PLUSW2, _MACMemCopyAsync_sourceAddr_1_1
002c72   f283
002c74   0e05     movlw	0x5                	MOVLW	0x05
002c76   cfdb     movff	0xfdb, 0x284       	MOVFF	PLUSW2, (_MACMemCopyAsync_sourceAddr_1_1 + 1)
002c78   f284
002c7a   0e06     movlw	0x6                	MOVLW	0x06
002c7c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002c7e   f000
002c80   0e07     movlw	0x7                	MOVLW	0x07
002c82   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002c84   f001
                                           ;	.line	902; TCPIP_Stack/ETH97J60.c	BOOL UpdateWritePointer = FALSE;
002c86   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           ;	.line	903; TCPIP_Stack/ETH97J60.c	BOOL UpdateReadPointer = FALSE;
002c88   6a03     clrf	0x3, 0              	CLRF	r0x03
002c8a   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	905; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&destAddr)->bits.b15)
002c8c   af82     btfss	0x82, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_destAddr_1_1 + 1), 7, B
002c8e   d013     bra	0x2cb6               	BRA	_00325_DS_
                                           ;	.line	907; TCPIP_Stack/ETH97J60.c	UpdateWritePointer = TRUE;
002c90   0e01     movlw	0x1                	MOVLW	0x01
002c92   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	908; TCPIP_Stack/ETH97J60.c	destAddr = ((WORD)EWRPTH)<<8|EWRPTL;
002c94   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
002c96   f004
002c98   6a05     clrf	0x5, 0              	CLRF	r0x05
002c9a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002c9c   6e07     movwf	0x7, 0             	MOVWF	r0x07
002c9e   6a06     clrf	0x6, 0              	CLRF	r0x06
002ca0   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
002ca2   f004
002ca4   6a05     clrf	0x5, 0              	CLRF	r0x05
002ca6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ca8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002caa   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
002cac   6f81     movwf	0x81, 0x1          	MOVWF	_MACMemCopyAsync_destAddr_1_1, B
002cae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002cb0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002cb2   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
002cb4   6f82     movwf	0x82, 0x1          	MOVWF	(_MACMemCopyAsync_destAddr_1_1 + 1), B
                                           _00325_DS_:
002cb6   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	910; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&sourceAddr)->bits.b15)
002cb8   af84     btfss	0x84, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_sourceAddr_1_1 + 1), 7, B
002cba   d013     bra	0x2ce2               	BRA	_00327_DS_
                                           ;	.line	912; TCPIP_Stack/ETH97J60.c	UpdateReadPointer = TRUE;
002cbc   0e01     movlw	0x1                	MOVLW	0x01
002cbe   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	913; TCPIP_Stack/ETH97J60.c	sourceAddr = ((WORD)ERDPTH)<<8|ERDPTL;
002cc0   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
002cc2   f004
002cc4   6a05     clrf	0x5, 0              	CLRF	r0x05
002cc6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002cc8   6e07     movwf	0x7, 0             	MOVWF	r0x07
002cca   6a06     clrf	0x6, 0              	CLRF	r0x06
002ccc   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
002cce   f004
002cd0   6a05     clrf	0x5, 0              	CLRF	r0x05
002cd2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002cd4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002cd6   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
002cd8   6f83     movwf	0x83, 0x1          	MOVWF	_MACMemCopyAsync_sourceAddr_1_1, B
002cda   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002cdc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002cde   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
002ce0   6f84     movwf	0x84, 0x1          	MOVWF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), B
                                           _00327_DS_:
                                           ;	.line	918; TCPIP_Stack/ETH97J60.c	if(len <= 1u)
002ce2   0e00     movlw	0                  	MOVLW	0x00
002ce4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
002ce6   e102     bnz	0x2cec               	BNZ	_00376_DS_
002ce8   0e02     movlw	0x2                	MOVLW	0x02
002cea   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00376_DS_:
002cec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cee   d07c     bra	0x2de8               	BRA	_00352_DS_
                                           ;	.line	920; TCPIP_Stack/ETH97J60.c	ReadSave.Val = ((WORD)ERDPTH)<<8|ERDPTL;
002cf0   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
002cf2   f004
002cf4   6a05     clrf	0x5, 0              	CLRF	r0x05
002cf6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002cf8   6e07     movwf	0x7, 0             	MOVWF	r0x07
002cfa   6a06     clrf	0x6, 0              	CLRF	r0x06
002cfc   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
002cfe   f004
002d00   6a05     clrf	0x5, 0              	CLRF	r0x05
002d02   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d04   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
002d06   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002d08   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
002d0a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d0c   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
002d0e   6f85     movwf	0x85, 0x1          	MOVWF	_MACMemCopyAsync_ReadSave_1_1, B
002d10   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002d12   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
002d14   6f86     movwf	0x86, 0x1          	MOVWF	(_MACMemCopyAsync_ReadSave_1_1 + 1), B
                                           ;	.line	921; TCPIP_Stack/ETH97J60.c	WriteSave.Val =  ((WORD)EWRPTH)<<8|EWRPTL;
002d16   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
002d18   f004
002d1a   6a05     clrf	0x5, 0              	CLRF	r0x05
002d1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d1e   6e07     movwf	0x7, 0             	MOVWF	r0x07
002d20   6a06     clrf	0x6, 0              	CLRF	r0x06
002d22   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
002d24   f004
002d26   6a05     clrf	0x5, 0              	CLRF	r0x05
002d28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d2a   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
002d2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002d2e   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
002d30   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d32   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
002d34   6f87     movwf	0x87, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
002d36   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002d38   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
002d3a   6f88     movwf	0x88, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
002d3c   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	922; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(sourceAddr);
002d3e   5183     movf	0x83, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
002d40   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d42   6a05     clrf	0x5, 0              	CLRF	r0x05
002d44   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d46   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
002d48   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	923; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(sourceAddr);
002d4a   5184     movf	0x84, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
002d4c   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d4e   6a05     clrf	0x5, 0              	CLRF	r0x05
002d50   6a05     clrf	0x5, 0              	CLRF	r0x05
002d52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d54   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
002d56   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	924; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(destAddr);
002d58   5181     movf	0x81, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
002d5a   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d5c   6a05     clrf	0x5, 0              	CLRF	r0x05
002d5e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d60   010e     movlb	0xe                	BANKSEL	_EWRPTL
002d62   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
002d64   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	925; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(destAddr);
002d66   5182     movf	0x82, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
002d68   6e04     movwf	0x4, 0             	MOVWF	r0x04
002d6a   6a05     clrf	0x5, 0              	CLRF	r0x05
002d6c   6a05     clrf	0x5, 0              	CLRF	r0x05
002d6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002d70   010e     movlb	0xe                	BANKSEL	_EWRPTH
002d72   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	926; TCPIP_Stack/ETH97J60.c	while(len--) MACPut(MACGet());
002d74   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002d76   f004
002d78   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002d7a   f005
                                           _00328_DS_:
002d7c   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
002d7e   f006
002d80   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
002d82   f007
002d84   0eff     movlw	0xff               	MOVLW	0xff
002d86   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
002d88   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002d8a   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
002d8c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d8e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002d90   e009     bz	0x2da4                	BZ	_00330_DS_
002d92   ec32     call	0xbe64, 0           	CALL	_MACGet
002d94   f05f
002d96   6e06     movwf	0x6, 0             	MOVWF	r0x06
002d98   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9c   ec14     call	0xbe28, 0           	CALL	_MACPut
002d9e   f05f
002da0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002da2   d7ec     bra	0x2d7c               	BRA	_00328_DS_
                                           _00330_DS_:
                                           ;	.line	927; TCPIP_Stack/ETH97J60.c	if(!UpdateReadPointer)
002da4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002da6   e10d     bnz	0x2dc2               	BNZ	_00332_DS_
002da8   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
                                           ;	.line	929; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(ReadSave.Val);
002daa   5185     movf	0x85, 0, 0x1        	MOVF	_MACMemCopyAsync_ReadSave_1_1, W, B
002dac   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dae   6a05     clrf	0x5, 0              	CLRF	r0x05
002db0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002db2   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
002db4   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
                                           ;	.line	930; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(ReadSave.Val);
002db6   5186     movf	0x86, 0, 0x1        	MOVF	(_MACMemCopyAsync_ReadSave_1_1 + 1), W, B
002db8   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dba   6a05     clrf	0x5, 0              	CLRF	r0x05
002dbc   6a05     clrf	0x5, 0              	CLRF	r0x05
002dbe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002dc0   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00332_DS_:
                                           ;	.line	932; TCPIP_Stack/ETH97J60.c	if(!UpdateWritePointer)
002dc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002dc4   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
002dc6   d0d5     bra	0x2f72               	BRA	_00354_DS_
002dc8   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
                                           ;	.line	934; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
002dca   5187     movf	0x87, 0, 0x1        	MOVF	_MACMemCopyAsync_WriteSave_1_1, W, B
002dcc   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dce   6a05     clrf	0x5, 0              	CLRF	r0x05
002dd0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002dd2   010e     movlb	0xe                	BANKSEL	_EWRPTL
002dd4   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
002dd6   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
                                           ;	.line	935; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
002dd8   5188     movf	0x88, 0, 0x1        	MOVF	(_MACMemCopyAsync_WriteSave_1_1 + 1), W, B
002dda   6e04     movwf	0x4, 0             	MOVWF	r0x04
002ddc   6a05     clrf	0x5, 0              	CLRF	r0x05
002dde   6a05     clrf	0x5, 0              	CLRF	r0x05
002de0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002de2   010e     movlb	0xe                	BANKSEL	_EWRPTH
002de4   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
002de6   d0c5     bra	0x2f72               	BRA	_00354_DS_
                                           _00352_DS_:
                                           ;	.line	940; TCPIP_Stack/ETH97J60.c	if(UpdateWritePointer)
002de8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002dea   e023     bz	0x2e32                	BZ	_00336_DS_
                                           ;	.line	942; TCPIP_Stack/ETH97J60.c	WriteSave.Val = destAddr + len;
002dec   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dee   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
002df0   2581     addwf	0x81, 0, 0x1       	ADDWF	_MACMemCopyAsync_destAddr_1_1, W, B
002df2   6e02     movwf	0x2, 0             	MOVWF	r0x02
002df4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002df6   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
002df8   2182     addwfc	0x82, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
002dfa   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dfc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002dfe   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
002e00   6f87     movwf	0x87, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
002e02   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e04   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
002e06   6f88     movwf	0x88, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
                                           ;	.line	943; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
002e08   c287     movff	0x287, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
002e0a   ffe8
002e0c   c288     movff	0x288, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
002e0e   ffe8
002e10   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e12   6e05     movwf	0x5, 0             	MOVWF	r0x05
002e14   6a06     clrf	0x6, 0              	CLRF	r0x06
002e16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002e18   010e     movlb	0xe                	BANKSEL	_EWRPTL
002e1a   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	944; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
002e1c   c287     movff	0x287, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
002e1e   ffe8
002e20   c288     movff	0x288, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
002e22   ffe8
002e24   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e26   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e28   6a04     clrf	0x4, 0              	CLRF	r0x04
002e2a   6a04     clrf	0x4, 0              	CLRF	r0x04
002e2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e2e   010e     movlb	0xe                	BANKSEL	_EWRPTH
002e30   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           _00336_DS_:
002e32   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	946; TCPIP_Stack/ETH97J60.c	len += sourceAddr - 1;
002e34   5183     movf	0x83, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
002e36   0fff     addlw	0xff               	ADDLW	0xff
002e38   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e3a   0eff     movlw	0xff               	MOVLW	0xff
002e3c   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
002e3e   2184     addwfc	0x84, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
002e40   6e04     movwf	0x4, 0             	MOVWF	r0x04
002e42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e44   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002e46   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e48   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           _00337_DS_:
                                           ;	.line	947; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);
002e4a   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
002e4c   d7fe     bra	0x2e4a               	BRA	_00337_DS_
002e4e   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	948; TCPIP_Stack/ETH97J60.c	EDMASTL = LOW(sourceAddr);
002e50   5183     movf	0x83, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
002e52   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e54   6a04     clrf	0x4, 0              	CLRF	r0x04
002e56   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e58   010e     movlb	0xe                	BANKSEL	_EDMASTL
002e5a   6ff0     movwf	0xf0, 0x1          	MOVWF	_EDMASTL, B
002e5c   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	949; TCPIP_Stack/ETH97J60.c	EDMASTH = HIGH(sourceAddr);
002e5e   5184     movf	0x84, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
002e60   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e62   6a04     clrf	0x4, 0              	CLRF	r0x04
002e64   6a04     clrf	0x4, 0              	CLRF	r0x04
002e66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e68   010e     movlb	0xe                	BANKSEL	_EDMASTH
002e6a   6ff1     movwf	0xf1, 0x1          	MOVWF	_EDMASTH, B
002e6c   0102     movlb	0x2                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	950; TCPIP_Stack/ETH97J60.c	EDMADSTL = LOW(destAddr);
002e6e   5181     movf	0x81, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
002e70   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e72   6a04     clrf	0x4, 0              	CLRF	r0x04
002e74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e76   010e     movlb	0xe                	BANKSEL	_EDMADSTL
002e78   6ff4     movwf	0xf4, 0x1          	MOVWF	_EDMADSTL, B
002e7a   0102     movlb	0x2                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	951; TCPIP_Stack/ETH97J60.c	EDMADSTH = HIGH(destAddr);
002e7c   5182     movf	0x82, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
002e7e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e80   6a04     clrf	0x4, 0              	CLRF	r0x04
002e82   6a04     clrf	0x4, 0              	CLRF	r0x04
002e84   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e86   010e     movlb	0xe                	BANKSEL	_EDMADSTH
002e88   6ff5     movwf	0xf5, 0x1          	MOVWF	_EDMADSTH, B
                                           ;	.line	952; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
002e8a   c283     movff	0x283, 0x2         	MOVFF	_MACMemCopyAsync_sourceAddr_1_1, r0x02
002e8c   f002
002e8e   c284     movff	0x284, 0x4         	MOVFF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), r0x04
002e90   f004
002e92   6a05     clrf	0x5, 0              	CLRF	r0x05
002e94   6a06     clrf	0x6, 0              	CLRF	r0x06
002e96   0e00     movlw	0                  	MOVLW	0x00
002e98   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002e9a   e108     bnz	0x2eac               	BNZ	_00394_DS_
002e9c   0e00     movlw	0                  	MOVLW	0x00
002e9e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002ea0   e105     bnz	0x2eac               	BNZ	_00394_DS_
002ea2   0e1a     movlw	0x1a               	MOVLW	0x1a
002ea4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
002ea6   e102     bnz	0x2eac               	BNZ	_00394_DS_
002ea8   0e0a     movlw	0xa                	MOVLW	0x0a
002eaa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00394_DS_:
002eac   6a02     clrf	0x2, 0              	CLRF	r0x02
002eae   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
002eb0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002eb2   e11e     bnz	0x2ef0               	BNZ	_00341_DS_
002eb4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002eb6   f004
002eb8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002eba   f005
002ebc   6a06     clrf	0x6, 0              	CLRF	r0x06
002ebe   6a07     clrf	0x7, 0              	CLRF	r0x07
002ec0   0e00     movlw	0                  	MOVLW	0x00
002ec2   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
002ec4   e108     bnz	0x2ed6               	BNZ	_00395_DS_
002ec6   0e00     movlw	0                  	MOVLW	0x00
002ec8   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002eca   e105     bnz	0x2ed6               	BNZ	_00395_DS_
002ecc   0e1a     movlw	0x1a               	MOVLW	0x1a
002ece   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002ed0   e102     bnz	0x2ed6               	BNZ	_00395_DS_
002ed2   0e0a     movlw	0xa                	MOVLW	0x0a
002ed4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00395_DS_:
002ed6   e30c     bnc	0x2ef0               	BNC	_00341_DS_
                                           ;	.line	953; TCPIP_Stack/ETH97J60.c	len -= RXSIZE; //it is a circular buffer
002ed8   0ef6     movlw	0xf6               	MOVLW	0xf6
002eda   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
002edc   0ee5     movlw	0xe5               	MOVLW	0xe5
002ede   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002ee0   0eff     movlw	0xff               	MOVLW	0xff
002ee2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002ee4   0eff     movlw	0xff               	MOVLW	0xff
002ee6   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
002ee8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002eea   6e00     movwf	0, 0               	MOVWF	r0x00
002eec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002eee   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00341_DS_:
                                           ;	.line	954; TCPIP_Stack/ETH97J60.c	EDMANDL = LOW(len);
002ef0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ef2   6e04     movwf	0x4, 0             	MOVWF	r0x04
002ef4   6a05     clrf	0x5, 0              	CLRF	r0x05
002ef6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ef8   010e     movlb	0xe                	BANKSEL	_EDMANDL
002efa   6ff2     movwf	0xf2, 0x1          	MOVWF	_EDMANDL, B
                                           ;	.line	955; TCPIP_Stack/ETH97J60.c	EDMANDH = HIGH(len);
002efc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002efe   6e04     movwf	0x4, 0             	MOVWF	r0x04
002f00   6a05     clrf	0x5, 0              	CLRF	r0x05
002f02   6a05     clrf	0x5, 0              	CLRF	r0x05
002f04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f06   010e     movlb	0xe                	BANKSEL	_EDMANDH
002f08   6ff3     movwf	0xf3, 0x1          	MOVWF	_EDMANDH, B
                                           ;	.line	956; TCPIP_Stack/ETH97J60.c	ECON1bits.CSUMEN = 0;
002f0a   98d2     bcf	0xd2, 0x4, 0         	BCF	_ECON1bits, 4
                                           ;	.line	957; TCPIP_Stack/ETH97J60.c	ECON1bits.DMAST = 1;
002f0c   8ad2     bsf	0xd2, 0x5, 0         	BSF	_ECON1bits, 5
                                           _00343_DS_:
                                           ;	.line	958; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);	// DMA requires that you must not 
002f0e   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
002f10   d7fe     bra	0x2f0e               	BRA	_00343_DS_
                                           ;	.line	961; TCPIP_Stack/ETH97J60.c	if(UpdateReadPointer)
002f12   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f14   e02e     bz	0x2f72                	BZ	_00354_DS_
                                           ;	.line	963; TCPIP_Stack/ETH97J60.c	len++;
002f16   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002f18   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002f1a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
                                           ;	.line	964; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
002f1c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f1e   e11e     bnz	0x2f5c               	BNZ	_00347_DS_
002f20   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
002f22   f002
002f24   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
002f26   f003
002f28   6a04     clrf	0x4, 0              	CLRF	r0x04
002f2a   6a05     clrf	0x5, 0              	CLRF	r0x05
002f2c   0e00     movlw	0                  	MOVLW	0x00
002f2e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002f30   e108     bnz	0x2f42               	BNZ	_00398_DS_
002f32   0e00     movlw	0                  	MOVLW	0x00
002f34   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
002f36   e105     bnz	0x2f42               	BNZ	_00398_DS_
002f38   0e1a     movlw	0x1a               	MOVLW	0x1a
002f3a   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
002f3c   e102     bnz	0x2f42               	BNZ	_00398_DS_
002f3e   0e0a     movlw	0xa                	MOVLW	0x0a
002f40   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00398_DS_:
002f42   e30c     bnc	0x2f5c               	BNC	_00347_DS_
                                           ;	.line	965; TCPIP_Stack/ETH97J60.c	len -= RXSIZE;
002f44   0ef6     movlw	0xf6               	MOVLW	0xf6
002f46   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
002f48   0ee5     movlw	0xe5               	MOVLW	0xe5
002f4a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002f4c   0eff     movlw	0xff               	MOVLW	0xff
002f4e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002f50   0eff     movlw	0xff               	MOVLW	0xff
002f52   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002f54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f56   6e00     movwf	0, 0               	MOVWF	r0x00
002f58   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00347_DS_:
                                           ;	.line	966; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(len);
002f5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f5e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002f60   6a03     clrf	0x3, 0              	CLRF	r0x03
002f62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f64   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	967; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(len);
002f66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f68   6e00     movwf	0, 0               	MOVWF	r0x00
002f6a   6a01     clrf	0x1, 0              	CLRF	r0x01
002f6c   6a01     clrf	0x1, 0              	CLRF	r0x01
002f6e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f70   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00354_DS_:
002f72   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002f74   f007
002f76   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002f78   f006
002f7a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002f7c   f005
002f7e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002f80   f004
002f82   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002f84   f003
002f86   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002f88   f002
002f8a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002f8c   f001
002f8e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002f90   f000
002f92   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002f94   ffd9
002f96   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__CalcIPBufferChecksum	code
                                           _CalcIPBufferChecksum:
                                           ;	.line	824; TCPIP_Stack/ETH97J60.c	WORD CalcIPBufferChecksum(WORD len)
001702   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001704   ffe5
001706   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001708   ffd9
00170a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00170c   ffe5
00170e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001710   ffe5
001712   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001714   ffe5
001716   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001718   ffe5
00171a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00171c   ffe5
00171e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001720   ffe5
001722   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001724   ffe5
001726   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001728   ffe5
00172a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00172c   ffe5
00172e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001730   ffe5
001732   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001734   ffe5
001736   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001738   ffe5
00173a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00173c   ffe5
00173e   0e02     movlw	0x2                	MOVLW	0x02
001740   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001742   f000
001744   0e03     movlw	0x3                	MOVLW	0x03
001746   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001748   f001
00174a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	827; TCPIP_Stack/ETH97J60.c	DWORD_VAL Checksum = {0x00000000ul};
00174c   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
00174e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001750   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001752   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001754   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001756   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001758   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00175a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00175c   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
00175e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001760   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001762   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001764   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001766   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001768   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00176a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00176c   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
00176e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001770   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001772   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001774   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001776   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001778   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00177a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00177c   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
00177e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001780   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001782   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001784   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001786   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001788   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00178a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00178c   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
00178e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001790   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001792   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001794   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001796   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001798   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00179a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00179c   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
00179e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017a0   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0017a2   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017a4   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
0017a6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017a8   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0017aa   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017ac   6b24     clrf	0x24, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
0017ae   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017b0   6b25     clrf	0x25, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0017b2   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017b4   9124     bcf	0x24, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
0017b6   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017b8   9324     bcf	0x24, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
0017ba   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017bc   9524     bcf	0x24, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
0017be   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017c0   9724     bcf	0x24, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
0017c2   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017c4   9924     bcf	0x24, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
0017c6   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017c8   9b24     bcf	0x24, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
0017ca   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017cc   9d24     bcf	0x24, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
0017ce   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0017d0   9f24     bcf	0x24, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
0017d2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017d4   9125     bcf	0x25, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
0017d6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017d8   9325     bcf	0x25, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
0017da   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017dc   9525     bcf	0x25, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
0017de   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017e0   9725     bcf	0x25, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
0017e2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017e4   9925     bcf	0x25, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
0017e6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017e8   9b25     bcf	0x25, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
0017ea   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017ec   9d25     bcf	0x25, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
0017ee   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0017f0   9f25     bcf	0x25, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
0017f2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0017f4   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
0017f6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0017f8   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
0017fa   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0017fc   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
0017fe   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001800   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001802   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001804   6b26     clrf	0x26, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001806   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001808   6b27     clrf	0x27, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00180a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
00180c   9126     bcf	0x26, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
00180e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001810   9326     bcf	0x26, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
001812   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001814   9526     bcf	0x26, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
001816   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001818   9726     bcf	0x26, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
00181a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
00181c   9926     bcf	0x26, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
00181e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001820   9b26     bcf	0x26, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
001822   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001824   9d26     bcf	0x26, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
001826   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001828   9f26     bcf	0x26, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
00182a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
00182c   9127     bcf	0x27, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
00182e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001830   9327     bcf	0x27, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
001832   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001834   9527     bcf	0x27, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
001836   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001838   9727     bcf	0x27, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
00183a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
00183c   9927     bcf	0x27, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
00183e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001840   9b27     bcf	0x27, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
001842   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001844   9d27     bcf	0x27, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
001846   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001848   9f27     bcf	0x27, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
00184a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00184c   9124     bcf	0x24, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
00184e   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001850   9324     bcf	0x24, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
001852   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001854   9524     bcf	0x24, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
001856   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001858   9724     bcf	0x24, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
00185a   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00185c   9924     bcf	0x24, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
00185e   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001860   9b24     bcf	0x24, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
001862   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001864   9d24     bcf	0x24, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
001866   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001868   9f24     bcf	0x24, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
00186a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00186c   9125     bcf	0x25, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
00186e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001870   9325     bcf	0x25, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
001872   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001874   9525     bcf	0x25, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
001876   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001878   9725     bcf	0x25, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
00187a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00187c   9925     bcf	0x25, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
00187e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001880   9b25     bcf	0x25, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
001882   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001884   9d25     bcf	0x25, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
001886   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001888   9f25     bcf	0x25, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
00188a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
00188c   9126     bcf	0x26, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
00188e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001890   9326     bcf	0x26, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
001892   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001894   9526     bcf	0x26, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
001896   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001898   9726     bcf	0x26, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
00189a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
00189c   9926     bcf	0x26, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
00189e   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0018a0   9b26     bcf	0x26, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
0018a2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0018a4   9d26     bcf	0x26, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
0018a6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0018a8   9f26     bcf	0x26, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
0018aa   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018ac   9127     bcf	0x27, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
0018ae   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018b0   9327     bcf	0x27, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
0018b2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018b4   9527     bcf	0x27, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
0018b6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018b8   9727     bcf	0x27, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
0018ba   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018bc   9927     bcf	0x27, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
0018be   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018c0   9b27     bcf	0x27, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
0018c2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018c4   9d27     bcf	0x27, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
0018c6   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0018c8   9f27     bcf	0x27, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
                                           ;	.line	833; TCPIP_Stack/ETH97J60.c	Start = ((WORD)ERDPTH)<<8|ERDPTL;
0018ca   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
0018cc   f002
0018ce   6a03     clrf	0x3, 0              	CLRF	r0x03
0018d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0018d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0018d4   6a04     clrf	0x4, 0              	CLRF	r0x04
0018d6   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
0018d8   f002
0018da   6a03     clrf	0x3, 0              	CLRF	r0x03
0018dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018de   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
0018e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0018e2   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
                                           _00305_DS_:
                                           ;	.line	835; TCPIP_Stack/ETH97J60.c	while(len)
0018e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018e6   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0018e8   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0018ea   d07d     bra	0x19e6               	BRA	_00307_DS_
                                           ;	.line	839; TCPIP_Stack/ETH97J60.c	ChunkLen = len > sizeof(DataBuffer) ? sizeof(DataBuffer) : len;
0018ec   0e00     movlw	0                  	MOVLW	0x00
0018ee   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0018f0   e102     bnz	0x18f6               	BNZ	_00319_DS_
0018f2   0e15     movlw	0x15               	MOVLW	0x15
0018f4   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00319_DS_:
0018f6   e304     bnc	0x1900               	BNC	_00310_DS_
0018f8   0e14     movlw	0x14               	MOVLW	0x14
0018fa   6e04     movwf	0x4, 0             	MOVWF	r0x04
0018fc   6a05     clrf	0x5, 0              	CLRF	r0x05
0018fe   d004     bra	0x1908               	BRA	_00311_DS_
                                           _00310_DS_:
001900   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001902   f004
001904   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001906   f005
                                           _00311_DS_:
001908   c004     movff	0x4, 0x27f         	MOVFF	r0x04, _CalcIPBufferChecksum_ChunkLen_1_1
00190a   f27f
00190c   c005     movff	0x5, 0x280         	MOVFF	r0x05, (_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
00190e   f280
                                           ;	.line	840; TCPIP_Stack/ETH97J60.c	MACGetArray(DataBuffer, ChunkLen);
001910   0e0a     movlw	0xa                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001912   6e07     movwf	0x7, 0             	MOVWF	r0x07
001914   0eea     movlw	0xea               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001916   6e06     movwf	0x6, 0             	MOVWF	r0x06
001918   0e80     movlw	0x80               	MOVLW	0x80
00191a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00191c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00191e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001920   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001924   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001928   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00192a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00192c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00192e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001930   ecac     call	0x9d58, 0           	CALL	_MACGetArray
001932   f04e
001934   0e05     movlw	0x5                	MOVLW	0x05
001936   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	842; TCPIP_Stack/ETH97J60.c	len -= ChunkLen;
001938   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00193a   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00193c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00193e   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
001940   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	845; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&ChunkLen)->bits.b0)
001942   a17f     btfss	0x7f, 0, 0x1       	BTFSS	_CalcIPBufferChecksum_ChunkLen_1_1, 0, B
001944   d013     bra	0x196c               	BRA	_00301_DS_
                                           ;	.line	847; TCPIP_Stack/ETH97J60.c	DataBuffer[ChunkLen] = 0x00;
001946   0eea     movlw	0xea               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001948   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
00194a   257f     addwf	0x7f, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_ChunkLen_1_1, W, B
00194c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00194e   0e0a     movlw	0xa                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001950   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001952   2180     addwfc	0x80, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), W, B
001954   6e05     movwf	0x5, 0             	MOVWF	r0x05
001956   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001958   ffe9
00195a   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00195c   ffea
00195e   0e00     movlw	0                  	MOVLW	0x00
001960   6eef     movwf	0xef, 0            	MOVWF	INDF0
001962   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	848; TCPIP_Stack/ETH97J60.c	ChunkLen++;
001964   2b7f     incf	0x7f, 0x1, 0x1      	INCF	_CalcIPBufferChecksum_ChunkLen_1_1, F, B
001966   e302     bnc	0x196c               	BNC	_10492_DS_
001968   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
00196a   2b80     incf	0x80, 0x1, 0x1      	INCF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), F, B
                                           _10492_DS_:
                                           _00301_DS_:
                                           ;	.line	852; TCPIP_Stack/ETH97J60.c	DataPtr = (WORD*)&DataBuffer[0];
00196c   0e0a     movlw	0xa                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00196e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001970   0eea     movlw	0xea               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001972   6e04     movwf	0x4, 0             	MOVWF	r0x04
001974   0e80     movlw	0x80               	MOVLW	0x80
001976   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/ETH97J60.c	while(ChunkLen)
001978   c27f     movff	0x27f, 0x7         	MOVFF	_CalcIPBufferChecksum_ChunkLen_1_1, r0x07
00197a   f007
00197c   c280     movff	0x280, 0x8         	MOVFF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), r0x08
00197e   f008
                                           _00302_DS_:
001980   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001982   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001984   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001986   d7ae     bra	0x18e4               	BRA	_00305_DS_
                                           ;	.line	855; TCPIP_Stack/ETH97J60.c	Checksum.Val += *DataPtr++;
001988   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00198a   ffe9
00198c   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00198e   fff3
001990   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001992   eccb     call	0xbb96, 0           	CALL	__gptrget2
001994   f05d
001996   6e09     movwf	0x9, 0             	MOVWF	r0x09
001998   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
00199a   f00a
00199c   0e02     movlw	0x2                	MOVLW	0x02
00199e   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0019a0   0e00     movlw	0                  	MOVLW	0x00
0019a2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0019a4   0e00     movlw	0                  	MOVLW	0x00
0019a6   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0019a8   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0019aa   6a0c     clrf	0xc, 0              	CLRF	r0x0c
0019ac   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0019ae   5124     movf	0x24, 0, 0x1        	MOVF	_CalcIPBufferChecksum_Checksum_1_1, W, B
0019b0   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0019b2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0019b4   5125     movf	0x25, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
0019b6   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0019b8   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0019ba   5126     movf	0x26, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
0019bc   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
0019be   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0019c0   5127     movf	0x27, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
0019c2   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0019c4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0019c6   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0019c8   6f24     movwf	0x24, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
0019ca   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0019cc   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0019ce   6f25     movwf	0x25, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0019d0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0019d2   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0019d4   6f26     movwf	0x26, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
0019d6   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0019d8   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0019da   6f27     movwf	0x27, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
                                           ;	.line	856; TCPIP_Stack/ETH97J60.c	ChunkLen -= 2;
0019dc   0efe     movlw	0xfe               	MOVLW	0xfe
0019de   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0019e0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0019e2   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
0019e4   d7cd     bra	0x1980               	BRA	_00302_DS_
                                           _00307_DS_:
                                           ;	.line	861; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(Start);
0019e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019e8   6e00     movwf	0, 0               	MOVWF	r0x00
0019ea   6a01     clrf	0x1, 0              	CLRF	r0x01
0019ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019ee   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	862; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(Start);
0019f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0019f4   6a03     clrf	0x3, 0              	CLRF	r0x03
0019f6   6a03     clrf	0x3, 0              	CLRF	r0x03
0019f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019fa   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	865; TCPIP_Stack/ETH97J60.c	Checksum.Val = (DWORD)Checksum.w[0] + (DWORD)Checksum.w[1];
0019fc   c224     movff	0x224, 0           	MOVFF	_CalcIPBufferChecksum_Checksum_1_1, r0x00
0019fe   f000
001a00   c225     movff	0x225, 0x1         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), r0x01
001a02   f001
001a04   6a02     clrf	0x2, 0              	CLRF	r0x02
001a06   6a03     clrf	0x3, 0              	CLRF	r0x03
001a08   c226     movff	0x226, 0x4         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), r0x04
001a0a   f004
001a0c   c227     movff	0x227, 0x5         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), r0x05
001a0e   f005
001a10   6a06     clrf	0x6, 0              	CLRF	r0x06
001a12   6a07     clrf	0x7, 0              	CLRF	r0x07
001a14   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a16   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a18   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a1a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001a1c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a1e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001a20   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001a22   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001a24   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a26   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001a28   6f24     movwf	0x24, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001a2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a2c   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001a2e   6f25     movwf	0x25, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001a30   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a32   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001a34   6f26     movwf	0x26, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001a36   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001a38   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001a3a   6f27     movwf	0x27, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
001a3c   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
                                           ;	.line	869; TCPIP_Stack/ETH97J60.c	Checksum.w[0] += Checksum.w[1];
001a3e   5126     movf	0x26, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
001a40   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001a42   2524     addwf	0x24, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001a44   6e00     movwf	0, 0               	MOVWF	r0x00
001a46   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001a48   5127     movf	0x27, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
001a4a   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001a4c   2125     addwfc	0x25, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001a4e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001a50   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a52   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001a54   6f24     movwf	0x24, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001a56   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a58   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001a5a   6f25     movwf	0x25, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
001a5c   0102     movlb	0x2                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	872; TCPIP_Stack/ETH97J60.c	return ~Checksum.w[0];
001a5e   1d24     comf	0x24, 0, 0x1        	COMF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001a60   6e00     movwf	0, 0               	MOVWF	r0x00
001a62   0102     movlb	0x2                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001a64   1d25     comf	0x25, 0, 0x1        	COMF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001a66   6e01     movwf	0x1, 0             	MOVWF	r0x01
001a68   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001a6a   fff3
001a6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a6e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001a70   f00c
001a72   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001a74   f00b
001a76   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001a78   f00a
001a7a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001a7c   f009
001a7e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a80   f008
001a82   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a84   f007
001a86   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a88   f006
001a8a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a8c   f005
001a8e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a90   f004
001a92   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a94   f003
001a96   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a98   f002
001a9a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a9c   f001
001a9e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001aa0   f000
001aa2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001aa4   ffd9
001aa6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACCalcRxChecksum	code
                                           _MACCalcRxChecksum:
                                           ;	.line	699; TCPIP_Stack/ETH97J60.c	WORD MACCalcRxChecksum(WORD offset, WORD len)
008a2c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008a2e   ffe5
008a30   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008a32   ffd9
008a34   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008a36   ffe5
008a38   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008a3a   ffe5
008a3c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008a3e   ffe5
008a40   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008a42   ffe5
008a44   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008a46   ffe5
008a48   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008a4a   ffe5
008a4c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
008a4e   ffe5
008a50   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008a52   ffe5
008a54   0e02     movlw	0x2                	MOVLW	0x02
008a56   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008a58   f000
008a5a   0e03     movlw	0x3                	MOVLW	0x03
008a5c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008a5e   f001
008a60   0e04     movlw	0x4                	MOVLW	0x04
008a62   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
008a64   f002
008a66   0e05     movlw	0x5                	MOVLW	0x05
008a68   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008a6a   f003
008a6c   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	705; TCPIP_Stack/ETH97J60.c	temp = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
008a6e   5171     movf	0x71, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
008a70   0f14     addlw	0x14               	ADDLW	0x14
008a72   6e04     movwf	0x4, 0             	MOVWF	r0x04
008a74   0e00     movlw	0                  	MOVLW	0x00
008a76   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
008a78   2172     addwfc	0x72, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
008a7a   6e05     movwf	0x5, 0             	MOVWF	r0x05
008a7c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008a7e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
008a80   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008a82   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           ;	.line	706; TCPIP_Stack/ETH97J60.c	if(temp > RXSTOP)		// Adjust value if a wrap is needed
008a84   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
008a86   f004
008a88   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
008a8a   f005
008a8c   6a06     clrf	0x6, 0              	CLRF	r0x06
008a8e   6a07     clrf	0x7, 0              	CLRF	r0x07
008a90   0e00     movlw	0                  	MOVLW	0x00
008a92   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
008a94   e108     bnz	0x8aa6               	BNZ	_00295_DS_
008a96   0e00     movlw	0                  	MOVLW	0x00
008a98   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
008a9a   e105     bnz	0x8aa6               	BNZ	_00295_DS_
008a9c   0e1a     movlw	0x1a               	MOVLW	0x1a
008a9e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
008aa0   e102     bnz	0x8aa6               	BNZ	_00295_DS_
008aa2   0e0a     movlw	0xa                	MOVLW	0x0a
008aa4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00295_DS_:
008aa6   e30c     bnc	0x8ac0               	BNC	_00291_DS_
                                           ;	.line	708; TCPIP_Stack/ETH97J60.c	temp -= RXSIZE;
008aa8   0ef6     movlw	0xf6               	MOVLW	0xf6
008aaa   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
008aac   0ee5     movlw	0xe5               	MOVLW	0xe5
008aae   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
008ab0   0eff     movlw	0xff               	MOVLW	0xff
008ab2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
008ab4   0eff     movlw	0xff               	MOVLW	0xff
008ab6   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
008ab8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008aba   6e00     movwf	0, 0               	MOVWF	r0x00
008abc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008abe   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00291_DS_:
                                           ;	.line	711; TCPIP_Stack/ETH97J60.c	RDSave = ((WORD)ERDPTH)<<8|ERDPTL;
008ac0   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
008ac2   f004
008ac4   6a05     clrf	0x5, 0              	CLRF	r0x05
008ac6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008ac8   6e07     movwf	0x7, 0             	MOVWF	r0x07
008aca   6a06     clrf	0x6, 0              	CLRF	r0x06
008acc   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
008ace   f004
008ad0   6a05     clrf	0x5, 0              	CLRF	r0x05
008ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008ad4   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
008ad6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
008ad8   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
                                           ;	.line	712; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(temp);
008ada   5000     movf	0, 0, 0             	MOVF	r0x00, W
008adc   6e04     movwf	0x4, 0             	MOVWF	r0x04
008ade   6a05     clrf	0x5, 0              	CLRF	r0x05
008ae0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008ae2   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	713; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(temp);
008ae4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008ae6   6e04     movwf	0x4, 0             	MOVWF	r0x04
008ae8   6a05     clrf	0x5, 0              	CLRF	r0x05
008aea   6a05     clrf	0x5, 0              	CLRF	r0x05
008aec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008aee   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	714; TCPIP_Stack/ETH97J60.c	temp = CalcIPBufferChecksum(len);
008af0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008af2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008af4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008af6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008af8   ec81     call	0x1702, 0           	CALL	_CalcIPBufferChecksum
008afa   f00b
008afc   6e00     movwf	0, 0               	MOVWF	r0x00
008afe   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
008b00   f001
008b02   0e02     movlw	0x2                	MOVLW	0x02
008b04   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	715; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(RDSave);
008b06   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008b08   6e02     movwf	0x2, 0             	MOVWF	r0x02
008b0a   6a03     clrf	0x3, 0              	CLRF	r0x03
008b0c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008b0e   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	716; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(RDSave);
008b10   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
008b12   6e06     movwf	0x6, 0             	MOVWF	r0x06
008b14   6a07     clrf	0x7, 0              	CLRF	r0x07
008b16   6a07     clrf	0x7, 0              	CLRF	r0x07
008b18   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008b1a   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	718; TCPIP_Stack/ETH97J60.c	return temp;
008b1c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
008b1e   fff3
008b20   5000     movf	0, 0, 0             	MOVF	r0x00, W
008b22   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008b24   f007
008b26   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
008b28   f006
008b2a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008b2c   f005
008b2e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008b30   f004
008b32   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008b34   f003
008b36   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008b38   f002
008b3a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008b3c   f001
008b3e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008b40   f000
008b42   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008b44   ffd9
008b46   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtr	code
                                           _MACSetReadPtr:
                                           ;	.line	669; TCPIP_Stack/ETH97J60.c	WORD MACSetReadPtr(WORD address)
00b1e6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b1e8   ffe5
00b1ea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b1ec   ffd9
00b1ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b1f0   ffe5
00b1f2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b1f4   ffe5
00b1f6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b1f8   ffe5
00b1fa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b1fc   ffe5
00b1fe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00b200   ffe5
00b202   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00b204   ffe5
00b206   0e02     movlw	0x2                	MOVLW	0x02
00b208   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b20a   f000
00b20c   0e03     movlw	0x3                	MOVLW	0x03
00b20e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b210   f001
                                           ;	.line	673; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)ERDPTH)<<8|ERDPTL;
00b212   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
00b214   f002
00b216   6a03     clrf	0x3, 0              	CLRF	r0x03
00b218   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b21a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00b21c   6a04     clrf	0x4, 0              	CLRF	r0x04
00b21e   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
00b220   f002
00b222   6a03     clrf	0x3, 0              	CLRF	r0x03
00b224   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b226   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
00b228   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00b22a   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	674; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(address);
00b22c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b22e   6e02     movwf	0x2, 0             	MOVWF	r0x02
00b230   6a03     clrf	0x3, 0              	CLRF	r0x03
00b232   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b234   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	675; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(address);
00b236   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b238   6e00     movwf	0, 0               	MOVWF	r0x00
00b23a   6a01     clrf	0x1, 0              	CLRF	r0x01
00b23c   6a01     clrf	0x1, 0              	CLRF	r0x01
00b23e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b240   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	676; TCPIP_Stack/ETH97J60.c	return oldVal;
00b242   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00b244   fff3
00b246   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00b248   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00b24a   f005
00b24c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00b24e   f004
00b250   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b252   f003
00b254   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b256   f002
00b258   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b25a   f001
00b25c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b25e   f000
00b260   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b262   ffd9
00b264   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetWritePtr	code
                                           _MACSetWritePtr:
                                           ;	.line	642; TCPIP_Stack/ETH97J60.c	WORD MACSetWritePtr(WORD address)
00b162   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b164   ffe5
00b166   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b168   ffd9
00b16a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b16c   ffe5
00b16e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b170   ffe5
00b172   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b174   ffe5
00b176   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b178   ffe5
00b17a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00b17c   ffe5
00b17e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00b180   ffe5
00b182   0e02     movlw	0x2                	MOVLW	0x02
00b184   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b186   f000
00b188   0e03     movlw	0x3                	MOVLW	0x03
00b18a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b18c   f001
                                           ;	.line	646; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)EWRPTH)<<8|EWRPTL;
00b18e   cee3     movff	0xee3, 0x2         	MOVFF	_EWRPTH, r0x02
00b190   f002
00b192   6a03     clrf	0x3, 0              	CLRF	r0x03
00b194   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b196   6e05     movwf	0x5, 0             	MOVWF	r0x05
00b198   6a04     clrf	0x4, 0              	CLRF	r0x04
00b19a   cee2     movff	0xee2, 0x2         	MOVFF	_EWRPTL, r0x02
00b19c   f002
00b19e   6a03     clrf	0x3, 0              	CLRF	r0x03
00b1a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b1a2   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
00b1a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00b1a6   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	648; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(address);
00b1a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b1aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
00b1ac   6a03     clrf	0x3, 0              	CLRF	r0x03
00b1ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b1b0   010e     movlb	0xe                	BANKSEL	_EWRPTL
00b1b2   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	649; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(address);
00b1b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b1b6   6e00     movwf	0, 0               	MOVWF	r0x00
00b1b8   6a01     clrf	0x1, 0              	CLRF	r0x01
00b1ba   6a01     clrf	0x1, 0              	CLRF	r0x01
00b1bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b1be   010e     movlb	0xe                	BANKSEL	_EWRPTH
00b1c0   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	650; TCPIP_Stack/ETH97J60.c	return oldVal;
00b1c2   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00b1c4   fff3
00b1c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00b1c8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00b1ca   f005
00b1cc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00b1ce   f004
00b1d0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b1d2   f003
00b1d4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b1d6   f002
00b1d8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b1da   f001
00b1dc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b1de   f000
00b1e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b1e2   ffd9
00b1e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtrInRx	code
                                           _MACSetReadPtrInRx:
                                           ;	.line	609; TCPIP_Stack/ETH97J60.c	void MACSetReadPtrInRx(WORD offset)
00a404   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a406   ffe5
00a408   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a40a   ffd9
00a40c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a40e   ffe5
00a410   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a412   ffe5
00a414   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a416   ffe5
00a418   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a41a   ffe5
00a41c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a41e   ffe5
00a420   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a422   ffe5
00a424   0e02     movlw	0x2                	MOVLW	0x02
00a426   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a428   f000
00a42a   0e03     movlw	0x3                	MOVLW	0x03
00a42c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a42e   f001
00a430   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	615; TCPIP_Stack/ETH97J60.c	ReadPT.Val = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
00a432   5171     movf	0x71, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
00a434   0f14     addlw	0x14               	ADDLW	0x14
00a436   6e02     movwf	0x2, 0             	MOVWF	r0x02
00a438   0e00     movlw	0                  	MOVLW	0x00
00a43a   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
00a43c   2172     addwfc	0x72, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
00a43e   6e03     movwf	0x3, 0             	MOVWF	r0x03
00a440   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a442   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a444   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a446   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a448   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a44a   0102     movlb	0x2                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
00a44c   6f7d     movwf	0x7d, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
00a44e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a450   0102     movlb	0x2                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00a452   6f7e     movwf	0x7e, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           ;	.line	618; TCPIP_Stack/ETH97J60.c	if(ReadPT.Val > RXSTOP)  ReadPT.Val -= RXSIZE;
00a454   c27d     movff	0x27d, 0x2         	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, r0x02
00a456   f002
00a458   c27e     movff	0x27e, 0x3         	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), r0x03
00a45a   f003
00a45c   6a04     clrf	0x4, 0              	CLRF	r0x04
00a45e   6a05     clrf	0x5, 0              	CLRF	r0x05
00a460   0e00     movlw	0                  	MOVLW	0x00
00a462   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00a464   e108     bnz	0xa476               	BNZ	_00275_DS_
00a466   0e00     movlw	0                  	MOVLW	0x00
00a468   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00a46a   e105     bnz	0xa476               	BNZ	_00275_DS_
00a46c   0e1a     movlw	0x1a               	MOVLW	0x1a
00a46e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00a470   e102     bnz	0xa476               	BNZ	_00275_DS_
00a472   0e0a     movlw	0xa                	MOVLW	0x0a
00a474   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00275_DS_:
00a476   e310     bnc	0xa498               	BNC	_00271_DS_
00a478   6a00     clrf	0, 0                	CLRF	r0x00
00a47a   6a01     clrf	0x1, 0              	CLRF	r0x01
00a47c   0ef6     movlw	0xf6               	MOVLW	0xf6
00a47e   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00a480   0ee5     movlw	0xe5               	MOVLW	0xe5
00a482   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00a484   0eff     movlw	0xff               	MOVLW	0xff
00a486   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
00a488   0eff     movlw	0xff               	MOVLW	0xff
00a48a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a48c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a48e   0102     movlb	0x2                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
00a490   6f7d     movwf	0x7d, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
00a492   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a494   0102     movlb	0x2                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00a496   6f7e     movwf	0x7e, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           _00271_DS_:
                                           ;	.line	621; TCPIP_Stack/ETH97J60.c	ERDPTL = ReadPT.v[0];
00a498   c27d     movff	0x27d, 0xf7a       	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, _ERDPTL
00a49a   ff7a
                                           ;	.line	622; TCPIP_Stack/ETH97J60.c	ERDPTH = ReadPT.v[1];
00a49c   c27e     movff	0x27e, 0xf7b       	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), _ERDPTH
00a49e   ff7b
00a4a0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a4a2   f005
00a4a4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a4a6   f004
00a4a8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a4aa   f003
00a4ac   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a4ae   f002
00a4b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a4b2   f001
00a4b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a4b6   f000
00a4b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a4ba   ffd9
00a4bc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACFlush	code
                                           _MACFlush:
                                           ;	.line	563; TCPIP_Stack/ETH97J60.c	void MACFlush(void)
00b52a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b52c   ffe5
00b52e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b530   ffd9
00b532   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b534   ffe5
00b536   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b538   ffe5
00b53a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b53c   ffe5
00b53e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b540   ffe5
                                           ;	.line	569; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 1;
00b542   8ed2     bsf	0xd2, 0x7, 0         	BSF	_ECON1bits, 7
                                           ;	.line	570; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 0;
00b544   9ed2     bcf	0xd2, 0x7, 0         	BCF	_ECON1bits, 7
                                           ;	.line	574; TCPIP_Stack/ETH97J60.c	{volatile BYTE i = 8; while(i--);}
00b546   0e08     movlw	0x8                	MOVLW	0x08
00b548   0102     movlb	0x2                	BANKSEL	_MACFlush_i_2_2
00b54a   6fb0     movwf	0xb0, 0x1          	MOVWF	_MACFlush_i_2_2, B
                                           _00262_DS_:
00b54c   c2b0     movff	0x2b0, 0           	MOVFF	_MACFlush_i_2_2, r0x00
00b54e   f000
00b550   0102     movlb	0x2                	BANKSEL	_MACFlush_i_2_2
00b552   07b0     decf	0xb0, 0x1, 0x1      	DECF	_MACFlush_i_2_2, F, B
00b554   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b556   e1fa     bnz	0xb54c               	BNZ	_00262_DS_
                                           ;	.line	575; TCPIP_Stack/ETH97J60.c	EIRbits.TXERIF = 0;
00b558   9260     bcf	0x60, 0x1, 0         	BCF	_EIRbits, 1
                                           ;	.line	582; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 1;
00b55a   86d2     bsf	0xd2, 0x3, 0         	BSF	_ECON1bits, 3
                                           ;	.line	583; TCPIP_Stack/ETH97J60.c	wTXWatchdog = TickGet();
00b55c   ec44     call	0xbc88, 0           	CALL	_TickGet
00b55e   f05e
00b560   6e00     movwf	0, 0               	MOVWF	r0x00
00b562   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00b564   f001
00b566   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00b568   f002
00b56a   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00b56c   f003
00b56e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b570   0102     movlb	0x2                	BANKSEL	_wTXWatchdog
00b572   6f73     movwf	0x73, 0x1          	MOVWF	_wTXWatchdog, B
00b574   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b576   0102     movlb	0x2                	BANKSEL	(_wTXWatchdog + 1)
00b578   6f74     movwf	0x74, 0x1          	MOVWF	(_wTXWatchdog + 1), B
00b57a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b57c   f003
00b57e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b580   f002
00b582   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b584   f001
00b586   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b588   f000
00b58a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b58c   ffd9
00b58e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutHeader	code
                                           _MACPutHeader:
                                           ;	.line	515; TCPIP_Stack/ETH97J60.c	void MACPutHeader(MAC_ADDR *remote, BYTE type, WORD dataLen)
0082fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0082fc   ffe5
0082fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008300   ffd9
008302   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008304   ffe5
008306   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008308   ffe5
00830a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00830c   ffe5
00830e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008310   ffe5
008312   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008314   ffe5
008316   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008318   ffe5
00831a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00831c   ffe5
00831e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
008320   ffe5
008322   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
008324   ffe5
008326   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
008328   ffe5
00832a   0e02     movlw	0x2                	MOVLW	0x02
00832c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00832e   f000
008330   0e03     movlw	0x3                	MOVLW	0x03
008332   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008334   f001
008336   0e04     movlw	0x4                	MOVLW	0x04
008338   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00833a   f002
00833c   0e05     movlw	0x5                	MOVLW	0x05
00833e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
008340   f003
008342   0e06     movlw	0x6                	MOVLW	0x06
008344   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
008346   f004
008348   0e07     movlw	0x7                	MOVLW	0x07
00834a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00834c   f005
                                           ;	.line	518; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART + 1);
00834e   0e0b     movlw	0xb                	MOVLW	0x0b
008350   010e     movlb	0xe                	BANKSEL	_EWRPTL
008352   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	519; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART + 1);
008354   0e1a     movlw	0x1a               	MOVLW	0x1a
008356   010e     movlb	0xe                	BANKSEL	_EWRPTH
008358   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	522; TCPIP_Stack/ETH97J60.c	dataLen += (WORD)sizeof(ETHER_HEADER) + TXSTART;
00835a   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
00835c   f006
00835e   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
008360   f007
008362   6a08     clrf	0x8, 0              	CLRF	r0x08
008364   6a09     clrf	0x9, 0              	CLRF	r0x09
008366   0e18     movlw	0x18               	MOVLW	0x18
008368   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
00836a   0e1a     movlw	0x1a               	MOVLW	0x1a
00836c   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00836e   0e00     movlw	0                  	MOVLW	0x00
008370   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
008372   0e00     movlw	0                  	MOVLW	0x00
008374   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
008376   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008378   6e04     movwf	0x4, 0             	MOVWF	r0x04
00837a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00837c   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	525; TCPIP_Stack/ETH97J60.c	ETXNDL = LOW(dataLen);
00837e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008380   6e06     movwf	0x6, 0             	MOVWF	r0x06
008382   6a07     clrf	0x7, 0              	CLRF	r0x07
008384   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
008386   010e     movlb	0xe                	BANKSEL	_ETXNDL
008388   6fe6     movwf	0xe6, 0x1          	MOVWF	_ETXNDL, B
                                           ;	.line	526; TCPIP_Stack/ETH97J60.c	ETXNDH = HIGH(dataLen);
00838a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00838c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00838e   6a05     clrf	0x5, 0              	CLRF	r0x05
008390   6a05     clrf	0x5, 0              	CLRF	r0x05
008392   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
008394   010e     movlb	0xe                	BANKSEL	_ETXNDH
008396   6fe7     movwf	0xe7, 0x1          	MOVWF	_ETXNDH, B
                                           ;	.line	530; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)remote, sizeof(*remote));
008398   0e00     movlw	0                  	MOVLW	0x00
00839a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00839c   0e06     movlw	0x6                	MOVLW	0x06
00839e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0083a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0083a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0083aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083ac   eceb     call	0xabd6, 0           	CALL	_MACPutArray
0083ae   f055
0083b0   0e05     movlw	0x5                	MOVLW	0x05
0083b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	533; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
0083b4   0e08     movlw	0x8                	MOVLW	HIGH(_AppConfig + 45)
0083b6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0083b8   0ef5     movlw	0xf5               	MOVLW	LOW(_AppConfig + 45)
0083ba   6e00     movwf	0, 0               	MOVWF	r0x00
0083bc   0e80     movlw	0x80               	MOVLW	0x80
0083be   6e02     movwf	0x2, 0             	MOVWF	r0x02
0083c0   0e00     movlw	0                  	MOVLW	0x00
0083c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083c4   0e06     movlw	0x6                	MOVLW	0x06
0083c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0083ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0083ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0083d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083d4   eceb     call	0xabd6, 0           	CALL	_MACPutArray
0083d6   f055
0083d8   0e05     movlw	0x5                	MOVLW	0x05
0083da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	536; TCPIP_Stack/ETH97J60.c	MACPut(0x08);
0083dc   0e08     movlw	0x8                	MOVLW	0x08
0083de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0083e0   ec14     call	0xbe28, 0           	CALL	_MACPut
0083e2   f05f
0083e4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/ETH97J60.c	MACPut((type == MAC_IP) ? ETHER_IP : ETHER_ARP);
0083e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0083e8   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0083ea   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0083ec   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0083ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0083f0   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
0083f2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0083f4   e003     bz	0x83fc                	BZ	_00256_DS_
0083f6   6a00     clrf	0, 0                	CLRF	r0x00
0083f8   6a01     clrf	0x1, 0              	CLRF	r0x01
0083fa   d003     bra	0x8402               	BRA	_00257_DS_
                                           _00256_DS_:
0083fc   0e06     movlw	0x6                	MOVLW	0x06
0083fe   6e00     movwf	0, 0               	MOVWF	r0x00
008400   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00257_DS_:
008402   5000     movf	0, 0, 0             	MOVF	r0x00, W
008404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008406   ec14     call	0xbe28, 0           	CALL	_MACPut
008408   f05f
00840a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00840c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00840e   f009
008410   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
008412   f008
008414   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
008416   f007
008418   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00841a   f006
00841c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00841e   f005
008420   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008422   f004
008424   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008426   f003
008428   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00842a   f002
00842c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00842e   f001
008430   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008432   f000
008434   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008436   ffd9
008438   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetHeader	code
                                           _MACGetHeader:
                                           ;	.line	425; TCPIP_Stack/ETH97J60.c	BOOL MACGetHeader(MAC_ADDR *remote, BYTE* type)
006266   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006268   ffe5
00626a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00626c   ffd9
00626e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006270   ffe5
006272   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006274   ffe5
006276   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006278   ffe5
00627a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00627c   ffe5
00627e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006280   ffe5
006282   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006284   ffe5
006286   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006288   ffe5
00628a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00628c   ffe5
00628e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006290   ffe5
006292   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
006294   ffe5
006296   0e02     movlw	0x2                	MOVLW	0x02
006298   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00629a   f000
00629c   0e03     movlw	0x3                	MOVLW	0x03
00629e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0062a0   f001
0062a2   0e04     movlw	0x4                	MOVLW	0x04
0062a4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0062a6   f002
0062a8   0e05     movlw	0x5                	MOVLW	0x05
0062aa   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0062ac   f003
0062ae   0e06     movlw	0x6                	MOVLW	0x06
0062b0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0062b2   f004
0062b4   0e07     movlw	0x7                	MOVLW	0x07
0062b6   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0062b8   f005
0062ba   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	430; TCPIP_Stack/ETH97J60.c	if(EPKTCNT == 0u)
0062bc   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
0062be   e102     bnz	0x62c4               	BNZ	_00213_DS_
                                           ;	.line	432; TCPIP_Stack/ETH97J60.c	return FALSE;
0062c0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0062c2   d0c3     bra	0x644a               	BRA	_00230_DS_
                                           _00213_DS_:
0062c4   0102     movlb	0x2                	BANKSEL	_WasDiscarded
                                           ;	.line	436; TCPIP_Stack/ETH97J60.c	if(WasDiscarded == FALSE)
0062c6   51af     movf	0xaf, 0, 0x1        	MOVF	_WasDiscarded, W, B
0062c8   e104     bnz	0x62d2               	BNZ	_00215_DS_
                                           ;	.line	438; TCPIP_Stack/ETH97J60.c	MACDiscardRx();
0062ca   ec81     call	0xad02, 0           	CALL	_MACDiscardRx
0062cc   f056
                                           ;	.line	439; TCPIP_Stack/ETH97J60.c	return FALSE;
0062ce   6ae8     clrf	0xe8, 0             	CLRF	WREG
0062d0   d0bc     bra	0x644a               	BRA	_00230_DS_
                                           _00215_DS_:
0062d2   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
                                           ;	.line	442; TCPIP_Stack/ETH97J60.c	CurrentPacketLocation.Val = NextPacketLocation.Val;
0062d4   516f     movf	0x6f, 0, 0x1        	MOVF	_NextPacketLocation, W, B
0062d6   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
0062d8   6f71     movwf	0x71, 0x1          	MOVWF	_CurrentPacketLocation, B
0062da   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
0062dc   5170     movf	0x70, 0, 0x1        	MOVF	(_NextPacketLocation + 1), W, B
0062de   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
0062e0   6f72     movwf	0x72, 0x1          	MOVWF	(_CurrentPacketLocation + 1), B
0062e2   0102     movlb	0x2                	BANKSEL	(_CurrentPacketLocation + 1)
                                           ;	.line	445; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(CurrentPacketLocation.Val);
0062e4   5172     movf	0x72, 0, 0x1        	MOVF	(_CurrentPacketLocation + 1), W, B
0062e6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0062e8   6a07     clrf	0x7, 0              	CLRF	r0x07
0062ea   6a07     clrf	0x7, 0              	CLRF	r0x07
0062ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0062ee   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
0062f0   0102     movlb	0x2                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	446; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(CurrentPacketLocation.Val);
0062f2   5171     movf	0x71, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0062f4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0062f6   6a07     clrf	0x7, 0              	CLRF	r0x07
0062f8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0062fa   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	449; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header, sizeof(header));
0062fc   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1)
0062fe   6e07     movwf	0x7, 0             	MOVWF	r0x07
006300   0eec     movlw	0xec               	MOVLW	LOW(_MACGetHeader_header_1_1)
006302   6e06     movwf	0x6, 0             	MOVWF	r0x06
006304   0e80     movlw	0x80               	MOVLW	0x80
006306   6e08     movwf	0x8, 0             	MOVWF	r0x08
006308   0e00     movlw	0                  	MOVLW	0x00
00630a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00630c   0e14     movlw	0x14               	MOVLW	0x14
00630e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006310   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006314   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006318   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00631a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00631c   ecac     call	0x9d58, 0           	CALL	_MACGetArray
00631e   f04e
006320   0e05     movlw	0x5                	MOVLW	0x05
006322   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006324   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
                                           ;	.line	453; TCPIP_Stack/ETH97J60.c	header.Type.Val = swaps(header.Type.Val);
006326   51ff     movf	0xff, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 19), W, B
006328   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00632a   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
00632c   51fe     movf	0xfe, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 18), W, B
00632e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006330   eca9     call	0xb752, 0           	CALL	_swaps
006332   f05b
006334   6e06     movwf	0x6, 0             	MOVWF	r0x06
006336   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
006338   f007
00633a   0e02     movlw	0x2                	MOVLW	0x02
00633c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00633e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006340   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
006342   6ffe     movwf	0xfe, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 18), B
006344   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006346   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
006348   6fff     movwf	0xff, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 19), B
                                           ;	.line	458; TCPIP_Stack/ETH97J60.c	if(header.NextPacketPointer > RXSTOP || 
00634a   c0ec     movff	0xec, 0x6          	MOVFF	_MACGetHeader_header_1_1, r0x06
00634c   f006
00634e   c0ed     movff	0xed, 0x7          	MOVFF	(_MACGetHeader_header_1_1 + 1), r0x07
006350   f007
006352   6a08     clrf	0x8, 0              	CLRF	r0x08
006354   6a09     clrf	0x9, 0              	CLRF	r0x09
006356   0e00     movlw	0                  	MOVLW	0x00
006358   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
00635a   e108     bnz	0x636c               	BNZ	_00244_DS_
00635c   0e00     movlw	0                  	MOVLW	0x00
00635e   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
006360   e105     bnz	0x636c               	BNZ	_00244_DS_
006362   0e1a     movlw	0x1a               	MOVLW	0x1a
006364   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
006366   e102     bnz	0x636c               	BNZ	_00244_DS_
006368   0e0a     movlw	0xa                	MOVLW	0x0a
00636a   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00244_DS_:
00636c   e214     bc	0x6396                	BC	_00219_DS_
00636e   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	459; TCPIP_Stack/ETH97J60.c	((BYTE_VAL*)(&header.NextPacketPointer))->bits.b0 ||
006370   b1ec     btfsc	0xec, 0, 0x1       	BTFSC	_MACGetHeader_header_1_1, 0, B
006372   d011     bra	0x6396               	BRA	_00219_DS_
006374   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 5)
                                           ;	.line	460; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.Zero ||
006376   bff1     btfsc	0xf1, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 5), 7, B
006378   d00e     bra	0x6396               	BRA	_00219_DS_
00637a   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	461; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.CRCError ||
00637c   b9f0     btfsc	0xf0, 0x4, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 4, B
00637e   d00b     bra	0x6396               	BRA	_00219_DS_
                                           ;	.line	462; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.ByteCount > 1518u ||
006380   0e05     movlw	0x5                	MOVLW	0x05
006382   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 3)
006384   5def     subwf	0xef, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 3), W, B
006386   e103     bnz	0x638e               	BNZ	_00245_DS_
006388   0eef     movlw	0xef               	MOVLW	0xef
00638a   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 2)
00638c   5dee     subwf	0xee, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 2), W, B
                                           _00245_DS_:
00638e   e203     bc	0x6396                	BC	_00219_DS_
006390   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	463; TCPIP_Stack/ETH97J60.c	!header.StatusVector.bits.ReceiveOk)
006392   bff0     btfsc	0xf0, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 7, B
006394   d00d     bra	0x63b0               	BRA	_00220_DS_
                                           _00219_DS_:
                                           ;	.line	465; TCPIP_Stack/ETH97J60.c	DisplayString(0,"error reading hdr");while(1);//////////////////////ML
006396   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
006398   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00639a   0e8d     movlw	0x8d               	MOVLW	HIGH(__str_0)
00639c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00639e   0e68     movlw	0x68               	MOVLW	LOW(__str_0)
0063a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063a2   0e00     movlw	0                  	MOVLW	0x00
0063a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063a6   ec6a     call	0xa0d4, 0           	CALL	_DisplayString
0063a8   f050
0063aa   0e04     movlw	0x4                	MOVLW	0x04
0063ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00217_DS_:
0063ae   d7ff     bra	0x63ae               	BRA	_00217_DS_
                                           _00220_DS_:
0063b0   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	470; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = header.NextPacketPointer;
0063b2   51ec     movf	0xec, 0, 0x1        	MOVF	_MACGetHeader_header_1_1, W, B
0063b4   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
0063b6   6f6f     movwf	0x6f, 0x1          	MOVWF	_NextPacketLocation, B
0063b8   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 1)
0063ba   51ed     movf	0xed, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 1), W, B
0063bc   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
0063be   6f70     movwf	0x70, 0x1          	MOVWF	(_NextPacketLocation + 1), B
                                           ;	.line	475; TCPIP_Stack/ETH97J60.c	memcpy((void*)remote->v, (void*)header.SourceMACAddr.v, sizeof(*remote));
0063c0   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1 + 12)
0063c2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0063c4   0ef8     movlw	0xf8               	MOVLW	LOW(_MACGetHeader_header_1_1 + 12)
0063c6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0063c8   0e80     movlw	0x80               	MOVLW	0x80
0063ca   6e08     movwf	0x8, 0             	MOVWF	r0x08
0063cc   0e00     movlw	0                  	MOVLW	0x00
0063ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063d0   0e06     movlw	0x6                	MOVLW	0x06
0063d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063d4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0063d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063d8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0063da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063dc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0063de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0063e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0063e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0063ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063ec   ec7b     call	0x94f6, 0           	CALL	_memcpy
0063ee   f04a
0063f0   0e08     movlw	0x8                	MOVLW	0x08
0063f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	478; TCPIP_Stack/ETH97J60.c	*type = MAC_UNKNOWN;
0063f4   0eff     movlw	0xff               	MOVLW	0xff
0063f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0063f8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0063fa   ffe9
0063fc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0063fe   fff3
006400   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006402   ec28     call	0xbe50, 0           	CALL	__gptrput1
006404   f05f
                                           ;	.line	479; TCPIP_Stack/ETH97J60.c	if( (header.Type.v[1] == 0x08u) &&
006406   c0ff     movff	0xff, 0            	MOVFF	(_MACGetHeader_header_1_1 + 19), r0x00
006408   f000
00640a   6a01     clrf	0x1, 0              	CLRF	r0x01
00640c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00640e   0a08     xorlw	0x8                	XORLW	0x08
006410   e102     bnz	0x6416               	BNZ	_00246_DS_
006412   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006414   e001     bz	0x6418                	BZ	_00247_DS_
                                           _00246_DS_:
006416   d016     bra	0x6444               	BRA	_00227_DS_
                                           _00247_DS_:
                                           ;	.line	480; TCPIP_Stack/ETH97J60.c	((header.Type.v[0] == ETHER_IP) || (header.Type.v[0] == ETHER_ARP)) )
006418   c0fe     movff	0xfe, 0            	MOVFF	(_MACGetHeader_header_1_1 + 18), r0x00
00641a   f000
00641c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00641e   e009     bz	0x6432                	BZ	_00226_DS_
006420   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
006422   f001
006424   6a02     clrf	0x2, 0              	CLRF	r0x02
006426   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006428   0a06     xorlw	0x6                	XORLW	0x06
00642a   e102     bnz	0x6430               	BNZ	_00248_DS_
00642c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00642e   e001     bz	0x6432                	BZ	_00226_DS_
                                           _00248_DS_:
006430   d009     bra	0x6444               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	482; TCPIP_Stack/ETH97J60.c	*type = header.Type.v[0];
006432   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006434   ffe5
006436   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
006438   ffe9
00643a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00643c   fff3
00643e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006440   ec28     call	0xbe50, 0           	CALL	__gptrput1
006442   f05f
                                           _00227_DS_:
006444   0102     movlb	0x2                	BANKSEL	_WasDiscarded
                                           ;	.line	486; TCPIP_Stack/ETH97J60.c	WasDiscarded = FALSE;
006446   6baf     clrf	0xaf, 0x1           	CLRF	_WasDiscarded, B
                                           ;	.line	487; TCPIP_Stack/ETH97J60.c	return TRUE;
006448   0e01     movlw	0x1                	MOVLW	0x01
                                           _00230_DS_:
00644a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00644c   f009
00644e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006450   f008
006452   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006454   f007
006456   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006458   f006
00645a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00645c   f005
00645e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006460   f004
006462   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006464   f003
006466   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006468   f002
00646a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00646c   f001
00646e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006470   f000
006472   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006474   ffd9
006476   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetFreeRxSize	code
                                           _MACGetFreeRxSize:
                                           ;	.line	367; TCPIP_Stack/ETH97J60.c	WORD MACGetFreeRxSize(void)
008d7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008d7c   ffe5
008d7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008d80   ffd9
008d82   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008d84   ffe5
008d86   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008d88   ffe5
008d8a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008d8c   ffe5
008d8e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008d90   ffe5
008d92   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
008d94   ffe5
008d96   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
008d98   ffe5
                                           _00186_DS_:
008d9a   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	377; TCPIP_Stack/ETH97J60.c	ReadPT.v[0] = EPKTCNT;
008d9c   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
008d9e   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
008da0   6f79     movwf	0x79, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
                                           ;	.line	379; TCPIP_Stack/ETH97J60.c	WritePT.Val = ((WORD)ERXWRPTH)<<8|ERXWRPTL;
008da2   ceef     movff	0xeef, 0           	MOVFF	_ERXWRPTH, r0x00
008da4   f000
008da6   6a01     clrf	0x1, 0              	CLRF	r0x01
008da8   5000     movf	0, 0, 0             	MOVF	r0x00, W
008daa   6e03     movwf	0x3, 0             	MOVWF	r0x03
008dac   6a02     clrf	0x2, 0              	CLRF	r0x02
008dae   ceee     movff	0xeee, 0           	MOVFF	_ERXWRPTL, r0x00
008db0   f000
008db2   6a01     clrf	0x1, 0              	CLRF	r0x01
008db4   5000     movf	0, 0, 0             	MOVF	r0x00, W
008db6   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
008db8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008dba   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
008dbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008dbe   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
008dc0   6f7b     movwf	0x7b, 0x1          	MOVWF	_MACGetFreeRxSize_WritePT_1_1, B
008dc2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008dc4   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
008dc6   6f7c     movwf	0x7c, 0x1          	MOVWF	(_MACGetFreeRxSize_WritePT_1_1 + 1), B
008dc8   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	380; TCPIP_Stack/ETH97J60.c	} while(EPKTCNT != ReadPT.v[0]);
008dca   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
008dcc   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
008dce   1979     xorwf	0x79, 0, 0x1       	XORWF	_MACGetFreeRxSize_ReadPT_1_1, W, B
008dd0   e1e4     bnz	0x8d9a               	BNZ	_00186_DS_
                                           ;	.line	383; TCPIP_Stack/ETH97J60.c	ReadPT.Val = ERXRDPTH<<8|ERXRDPTL;
008dd2   ceed     movff	0xeed, 0           	MOVFF	_ERXRDPTH, r0x00
008dd4   f000
008dd6   6a01     clrf	0x1, 0              	CLRF	r0x01
008dd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
008dda   6e03     movwf	0x3, 0             	MOVWF	r0x03
008ddc   6a02     clrf	0x2, 0              	CLRF	r0x02
008dde   ceec     movff	0xeec, 0           	MOVFF	_ERXRDPTL, r0x00
008de0   f000
008de2   6a01     clrf	0x1, 0              	CLRF	r0x01
008de4   5000     movf	0, 0, 0             	MOVF	r0x00, W
008de6   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
008de8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008dea   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
008dec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008dee   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
008df0   6f79     movwf	0x79, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
008df2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
008df4   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_ReadPT_1_1 + 1)
008df6   6f7a     movwf	0x7a, 0x1          	MOVWF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), B
                                           ;	.line	388; TCPIP_Stack/ETH97J60.c	if(WritePT.Val > ReadPT.Val)
008df8   c279     movff	0x279, 0           	MOVFF	_MACGetFreeRxSize_ReadPT_1_1, r0x00
008dfa   f000
008dfc   c27a     movff	0x27a, 0x1         	MOVFF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), r0x01
008dfe   f001
008e00   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
008e02   517c     movf	0x7c, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
008e04   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
008e06   e103     bnz	0x8e0e               	BNZ	_00205_DS_
008e08   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
008e0a   517b     movf	0x7b, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
008e0c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00205_DS_:
008e0e   e217     bc	0x8e3e                	BC	_00193_DS_
                                           ;	.line	390; TCPIP_Stack/ETH97J60.c	return (RXSTOP - RXSTART) - (WritePT.Val - ReadPT.Val);
008e10   5000     movf	0, 0, 0             	MOVF	r0x00, W
008e12   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
008e14   5d7b     subwf	0x7b, 0, 0x1       	SUBWF	_MACGetFreeRxSize_WritePT_1_1, W, B
008e16   6e02     movwf	0x2, 0             	MOVWF	r0x02
008e18   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008e1a   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
008e1c   597c     subwfb	0x7c, 0, 0x1      	SUBWFB	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
008e1e   6e03     movwf	0x3, 0             	MOVWF	r0x03
008e20   6a04     clrf	0x4, 0              	CLRF	r0x04
008e22   6a05     clrf	0x5, 0              	CLRF	r0x05
008e24   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008e26   0809     sublw	0x9                	SUBLW	0x09
008e28   6e02     movwf	0x2, 0             	MOVWF	r0x02
008e2a   0e1a     movlw	0x1a               	MOVLW	0x1a
008e2c   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
008e2e   0e00     movlw	0                  	MOVLW	0x00
008e30   5604     subfwb	0x4, 0x1, 0       	SUBFWB	r0x04, F
008e32   0e00     movlw	0                  	MOVLW	0x00
008e34   5605     subfwb	0x5, 0x1, 0       	SUBFWB	r0x05, F
008e36   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
008e38   fff3
008e3a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008e3c   d01a     bra	0x8e72               	BRA	_00195_DS_
                                           _00193_DS_:
008e3e   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	392; TCPIP_Stack/ETH97J60.c	else if(WritePT.Val == ReadPT.Val)
008e40   517b     movf	0x7b, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
008e42   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
008e44   e104     bnz	0x8e4e               	BNZ	_00206_DS_
008e46   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
008e48   517c     movf	0x7c, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
008e4a   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
008e4c   e001     bz	0x8e50                	BZ	_00207_DS_
                                           _00206_DS_:
008e4e   d004     bra	0x8e58               	BRA	_00190_DS_
                                           _00207_DS_:
                                           ;	.line	394; TCPIP_Stack/ETH97J60.c	return RXSIZE - 1;
008e50   0e1a     movlw	0x1a               	MOVLW	0x1a
008e52   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
008e54   0e09     movlw	0x9                	MOVLW	0x09
008e56   d00d     bra	0x8e72               	BRA	_00195_DS_
                                           _00190_DS_:
008e58   0102     movlb	0x2                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	398; TCPIP_Stack/ETH97J60.c	return ReadPT.Val - WritePT.Val - 1;
008e5a   517b     movf	0x7b, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
008e5c   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
008e5e   0102     movlb	0x2                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
008e60   517c     movf	0x7c, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
008e62   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
008e64   0eff     movlw	0xff               	MOVLW	0xff
008e66   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
008e68   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
008e6a   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
008e6c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
008e6e   fff3
008e70   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00195_DS_:
008e72   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
008e74   f005
008e76   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
008e78   f004
008e7a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008e7c   f003
008e7e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008e80   f002
008e82   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008e84   f001
008e86   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008e88   f000
008e8a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008e8c   ffd9
008e8e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACDiscardRx	code
                                           _MACDiscardRx:
                                           ;	.line	313; TCPIP_Stack/ETH97J60.c	void MACDiscardRx(void)
00ad02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ad04   ffe5
00ad06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ad08   ffd9
00ad0a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ad0c   ffe5
00ad0e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00ad10   ffe5
00ad12   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00ad14   ffe5
00ad16   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00ad18   ffe5
00ad1a   0102     movlb	0x2                	BANKSEL	_WasDiscarded
                                           ;	.line	318; TCPIP_Stack/ETH97J60.c	if(WasDiscarded) return;
00ad1c   51af     movf	0xaf, 0, 0x1        	MOVF	_WasDiscarded, W, B
00ad1e   e130     bnz	0xad80               	BNZ	_00177_DS_
                                           ;	.line	319; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
00ad20   0e01     movlw	0x1                	MOVLW	0x01
00ad22   0102     movlb	0x2                	BANKSEL	_WasDiscarded
00ad24   6faf     movwf	0xaf, 0x1          	MOVWF	_WasDiscarded, B
00ad26   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
                                           ;	.line	325; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = NextPacketLocation.Val - 1;
00ad28   516f     movf	0x6f, 0, 0x1        	MOVF	_NextPacketLocation, W, B
00ad2a   0fff     addlw	0xff               	ADDLW	0xff
00ad2c   6e00     movwf	0, 0               	MOVWF	r0x00
00ad2e   0eff     movlw	0xff               	MOVLW	0xff
00ad30   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
00ad32   2170     addwfc	0x70, 0, 0x1      	ADDWFC	(_NextPacketLocation + 1), W, B
00ad34   6e01     movwf	0x1, 0             	MOVWF	r0x01
00ad36   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ad38   0102     movlb	0x2                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
00ad3a   6f77     movwf	0x77, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
00ad3c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00ad3e   0102     movlb	0x2                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
00ad40   6f78     movwf	0x78, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           ;	.line	327; TCPIP_Stack/ETH97J60.c	if(NewRXRDLocation.Val > RXSTOP)
00ad42   c277     movff	0x277, 0xfe8       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, WREG
00ad44   ffe8
00ad46   c278     movff	0x278, 0xfe8       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), WREG
00ad48   ffe8
00ad4a   6a02     clrf	0x2, 0              	CLRF	r0x02
00ad4c   6a03     clrf	0x3, 0              	CLRF	r0x03
00ad4e   0e00     movlw	0                  	MOVLW	0x00
00ad50   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00ad52   e108     bnz	0xad64               	BNZ	_00181_DS_
00ad54   0e00     movlw	0                  	MOVLW	0x00
00ad56   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00ad58   e105     bnz	0xad64               	BNZ	_00181_DS_
00ad5a   0e1a     movlw	0x1a               	MOVLW	0x1a
00ad5c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00ad5e   e102     bnz	0xad64               	BNZ	_00181_DS_
00ad60   0e0a     movlw	0xa                	MOVLW	0x0a
00ad62   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00181_DS_:
00ad64   e306     bnc	0xad72               	BNC	_00176_DS_
                                           ;	.line	332; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = RXSTOP;
00ad66   0e09     movlw	0x9                	MOVLW	0x09
00ad68   0102     movlb	0x2                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
00ad6a   6f77     movwf	0x77, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
00ad6c   0e1a     movlw	0x1a               	MOVLW	0x1a
00ad6e   0102     movlb	0x2                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
00ad70   6f78     movwf	0x78, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           _00176_DS_:
00ad72   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	336; TCPIP_Stack/ETH97J60.c	ECON2bits.PKTDEC = 1;
00ad74   8dfe     bsf	0xfe, 0x6, 0x1       	BSF	_ECON2bits, 6, B
                                           ;	.line	341; TCPIP_Stack/ETH97J60.c	ERXRDPTL = NewRXRDLocation.v[0];
00ad76   c277     movff	0x277, 0xeec       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, _ERXRDPTL
00ad78   feec
                                           ;	.line	342; TCPIP_Stack/ETH97J60.c	ERXRDPTH = NewRXRDLocation.v[1];
00ad7a   c278     movff	0x278, 0xeed       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), _ERXRDPTH
00ad7c   feed
                                           ;	.line	347; TCPIP_Stack/ETH97J60.c	EIRbits.PKTIF = 0;
00ad7e   9c60     bcf	0x60, 0x6, 0         	BCF	_EIRbits, 6
                                           _00177_DS_:
00ad80   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00ad82   f003
00ad84   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00ad86   f002
00ad88   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00ad8a   f001
00ad8c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00ad8e   f000
00ad90   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ad92   ffd9
00ad94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsTxReady	code
                                           _MACIsTxReady:
                                           ;	.line	278; TCPIP_Stack/ETH97J60.c	BOOL MACIsTxReady(void)
00b364   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b366   ffe5
00b368   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b36a   ffd9
00b36c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b36e   ffe5
00b370   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b372   ffe5
00b374   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b376   ffe5
00b378   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b37a   ffe5
                                           ;	.line	280; TCPIP_Stack/ETH97J60.c	if(!ECON1bits.TXRTS)
00b37c   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
00b37e   d002     bra	0xb384               	BRA	_00161_DS_
                                           ;	.line	281; TCPIP_Stack/ETH97J60.c	return TRUE;
00b380   0e01     movlw	0x1                	MOVLW	0x01
00b382   d021     bra	0xb3c6               	BRA	_00164_DS_
                                           _00161_DS_:
                                           ;	.line	285; TCPIP_Stack/ETH97J60.c	if((WORD)TickGet() - wTXWatchdog >= (3ull*TICK_SECOND/1000ull))
00b384   ec44     call	0xbc88, 0           	CALL	_TickGet
00b386   f05e
00b388   6e00     movwf	0, 0               	MOVWF	r0x00
00b38a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00b38c   f001
00b38e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00b390   f002
00b392   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00b394   f003
00b396   0102     movlb	0x2                	BANKSEL	_wTXWatchdog
00b398   5173     movf	0x73, 0, 0x1        	MOVF	_wTXWatchdog, W, B
00b39a   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00b39c   0102     movlb	0x2                	BANKSEL	(_wTXWatchdog + 1)
00b39e   5174     movf	0x74, 0, 0x1        	MOVF	(_wTXWatchdog + 1), W, B
00b3a0   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
00b3a2   6a02     clrf	0x2, 0              	CLRF	r0x02
00b3a4   6a03     clrf	0x3, 0              	CLRF	r0x03
00b3a6   0e00     movlw	0                  	MOVLW	0x00
00b3a8   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00b3aa   e108     bnz	0xb3bc               	BNZ	_00168_DS_
00b3ac   0e00     movlw	0                  	MOVLW	0x00
00b3ae   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00b3b0   e105     bnz	0xb3bc               	BNZ	_00168_DS_
00b3b2   0e00     movlw	0                  	MOVLW	0x00
00b3b4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00b3b6   e102     bnz	0xb3bc               	BNZ	_00168_DS_
00b3b8   0e7a     movlw	0x7a               	MOVLW	0x7a
00b3ba   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00168_DS_:
00b3bc   e303     bnc	0xb3c4               	BNC	_00163_DS_
                                           ;	.line	287; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 0;
00b3be   96d2     bcf	0xd2, 0x3, 0         	BCF	_ECON1bits, 3
                                           ;	.line	288; TCPIP_Stack/ETH97J60.c	MACFlush();
00b3c0   ec95     call	0xb52a, 0           	CALL	_MACFlush
00b3c2   f05a
                                           _00163_DS_:
                                           ;	.line	290; TCPIP_Stack/ETH97J60.c	return FALSE;
00b3c4   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00164_DS_:
00b3c6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b3c8   f003
00b3ca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b3cc   f002
00b3ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b3d0   f001
00b3d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b3d4   f000
00b3d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b3d8   ffd9
00b3da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsLinked	code
                                           _MACIsLinked:
                                           ;	.line	244; TCPIP_Stack/ETH97J60.c	BOOL MACIsLinked(void)
00b9b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b9ba   ffe5
00b9bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b9be   ffd9
00b9c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b9c2   ffe5
00b9c4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b9c6   ffe5
                                           ;	.line	253; TCPIP_Stack/ETH97J60.c	pr.Val= ReadPHYReg(PHSTAT1);
00b9c8   0e01     movlw	0x1                	MOVLW	0x01
00b9ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b9cc   ecba     call	0xb974, 0           	CALL	_ReadPHYReg
00b9ce   f05c
00b9d0   6e00     movwf	0, 0               	MOVWF	r0x00
00b9d2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00b9d4   f001
00b9d6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00b9d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b9da   0102     movlb	0x2                	BANKSEL	_MACIsLinked_pr_1_1
00b9dc   6f75     movwf	0x75, 0x1          	MOVWF	_MACIsLinked_pr_1_1, B
00b9de   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b9e0   0102     movlb	0x2                	BANKSEL	(_MACIsLinked_pr_1_1 + 1)
00b9e2   6f76     movwf	0x76, 0x1          	MOVWF	(_MACIsLinked_pr_1_1 + 1), B
                                           ;	.line	254; TCPIP_Stack/ETH97J60.c	return pr.PHSTAT1bits.LLSTAT;
00b9e4   6a00     clrf	0, 0                	CLRF	r0x00
00b9e6   0102     movlb	0x2                	BANKSEL	_MACIsLinked_pr_1_1
00b9e8   b575     btfsc	0x75, 0x2, 0x1     	BTFSC	_MACIsLinked_pr_1_1, 2, B
00b9ea   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00b9ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b9ee   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b9f0   f001
00b9f2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b9f4   f000
00b9f6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b9f8   ffd9
00b9fa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACInit	code
                                           _MACInit:
                                           ;	.line	131; TCPIP_Stack/ETH97J60.c	void MACInit(void)
008c62   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008c64   ffe5
008c66   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008c68   ffd9
                                           ;	.line	135; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA0 = 0; // Set LEDA as output (green on ethernet connector)
008c6a   9092     bcf	0x92, 0, 0           	BCF	_TRISAbits, 0
                                           ;	.line	136; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA1 = 0; // Set LEDB as output (yellow on ethernet connector)
008c6c   9292     bcf	0x92, 0x1, 0         	BCF	_TRISAbits, 1
008c6e   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	137; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;    // Enable Ethernet!
008c70   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00105_DS_:
008c72   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	140; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY);
008c74   a1fd     btfss	0xfd, 0, 0x1       	BTFSS	_ESTATbits, 0, B
008c76   d7fd     bra	0x8c72               	BRA	_00105_DS_
                                           ;	.line	144; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
008c78   0e01     movlw	0x1                	MOVLW	0x01
008c7a   0102     movlb	0x2                	BANKSEL	_WasDiscarded
008c7c   6faf     movwf	0xaf, 0x1          	MOVWF	_WasDiscarded, B
008c7e   0102     movlb	0x2                	BANKSEL	_NextPacketLocation
                                           ;	.line	145; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = RXSTART;
008c80   6b6f     clrf	0x6f, 0x1           	CLRF	_NextPacketLocation, B
008c82   0102     movlb	0x2                	BANKSEL	(_NextPacketLocation + 1)
008c84   6b70     clrf	0x70, 0x1           	CLRF	(_NextPacketLocation + 1), B
008c86   010e     movlb	0xe                	BANKSEL	_ERXSTL
                                           ;	.line	146; TCPIP_Stack/ETH97J60.c	ERXSTL = LOW(RXSTART);
008c88   6be8     clrf	0xe8, 0x1           	CLRF	_ERXSTL, B
008c8a   010e     movlb	0xe                	BANKSEL	_ERXSTH
                                           ;	.line	147; TCPIP_Stack/ETH97J60.c	ERXSTH = HIGH(RXSTART);
008c8c   6be9     clrf	0xe9, 0x1           	CLRF	_ERXSTH, B
                                           ;	.line	149; TCPIP_Stack/ETH97J60.c	ERXRDPTL = LOW(RXSTOP);	// Write low byte first
008c8e   0e09     movlw	0x9                	MOVLW	0x09
008c90   010e     movlb	0xe                	BANKSEL	_ERXRDPTL
008c92   6fec     movwf	0xec, 0x1          	MOVWF	_ERXRDPTL, B
                                           ;	.line	150; TCPIP_Stack/ETH97J60.c	ERXRDPTH = HIGH(RXSTOP);    // Write high byte last
008c94   0e1a     movlw	0x1a               	MOVLW	0x1a
008c96   010e     movlb	0xe                	BANKSEL	_ERXRDPTH
008c98   6fed     movwf	0xed, 0x1          	MOVWF	_ERXRDPTH, B
                                           ;	.line	152; TCPIP_Stack/ETH97J60.c	ERXNDL = LOW(RXSTOP);
008c9a   0e09     movlw	0x9                	MOVLW	0x09
008c9c   010e     movlb	0xe                	BANKSEL	_ERXNDL
008c9e   6fea     movwf	0xea, 0x1          	MOVWF	_ERXNDL, B
                                           ;	.line	153; TCPIP_Stack/ETH97J60.c	ERXNDH = HIGH(RXSTOP);
008ca0   0e1a     movlw	0x1a               	MOVLW	0x1a
008ca2   010e     movlb	0xe                	BANKSEL	_ERXNDH
008ca4   6feb     movwf	0xeb, 0x1          	MOVWF	_ERXNDH, B
                                           ;	.line	155; TCPIP_Stack/ETH97J60.c	ETXSTL = LOW(TXSTART);
008ca6   0e0a     movlw	0xa                	MOVLW	0x0a
008ca8   010e     movlb	0xe                	BANKSEL	_ETXSTL
008caa   6fe4     movwf	0xe4, 0x1          	MOVWF	_ETXSTL, B
                                           ;	.line	156; TCPIP_Stack/ETH97J60.c	ETXSTH = HIGH(TXSTART);
008cac   0e1a     movlw	0x1a               	MOVLW	0x1a
008cae   010e     movlb	0xe                	BANKSEL	_ETXSTH
008cb0   6fe5     movwf	0xe5, 0x1          	MOVWF	_ETXSTH, B
                                           ;	.line	159; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART);
008cb2   0e0a     movlw	0xa                	MOVLW	0x0a
008cb4   010e     movlb	0xe                	BANKSEL	_EWRPTL
008cb6   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	160; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART);
008cb8   0e1a     movlw	0x1a               	MOVLW	0x1a
008cba   010e     movlb	0xe                	BANKSEL	_EWRPTH
008cbc   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	161; TCPIP_Stack/ETH97J60.c	EDATA = 0x00;
008cbe   6a61     clrf	0x61, 0             	CLRF	_EDATA
                                           ;	.line	171; TCPIP_Stack/ETH97J60.c	MACON1 = MACON1_TXPAUS | MACON1_RXPAUS | MACON1_MARXEN; Nop();
008cc0   0e0d     movlw	0xd                	MOVLW	0x0d
008cc2   010e     movlb	0xe                	BANKSEL	_MACON1
008cc4   6fa0     movwf	0xa0, 0x1          	MOVWF	_MACON1, B
008cc6   0000     nop                      	nop 
                                           ;	.line	179; TCPIP_Stack/ETH97J60.c	MACON3 = MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN; Nop();
008cc8   0e32     movlw	0x32               	MOVLW	0x32
008cca   010e     movlb	0xe                	BANKSEL	_MACON3
008ccc   6fa2     movwf	0xa2, 0x1          	MOVWF	_MACON3, B
008cce   0000     nop                      	nop 
                                           ;	.line	180; TCPIP_Stack/ETH97J60.c	MABBIPG = 0x12; Nop();
008cd0   0e12     movlw	0x12               	MOVLW	0x12
008cd2   010e     movlb	0xe                	BANKSEL	_MABBIPG
008cd4   6fa4     movwf	0xa4, 0x1          	MOVWF	_MABBIPG, B
008cd6   0000     nop                      	nop 
                                           ;	.line	186; TCPIP_Stack/ETH97J60.c	MACON4 = MACON4_DEFER; Nop();
008cd8   0e40     movlw	0x40               	MOVLW	0x40
008cda   010e     movlb	0xe                	BANKSEL	_MACON4
008cdc   6fa3     movwf	0xa3, 0x1          	MOVWF	_MACON4, B
008cde   0000     nop                      	nop 
                                           ;	.line	191; TCPIP_Stack/ETH97J60.c	MAIPGL = 0x12; Nop();
008ce0   0e12     movlw	0x12               	MOVLW	0x12
008ce2   010e     movlb	0xe                	BANKSEL	_MAIPGL
008ce4   6fa6     movwf	0xa6, 0x1          	MOVWF	_MAIPGL, B
008ce6   0000     nop                      	nop 
                                           ;	.line	192; TCPIP_Stack/ETH97J60.c	MAIPGH = 0x0C; Nop();
008ce8   0e0c     movlw	0xc                	MOVLW	0x0c
008cea   010e     movlb	0xe                	BANKSEL	_MAIPGH
008cec   6fa7     movwf	0xa7, 0x1          	MOVWF	_MAIPGH, B
008cee   0000     nop                      	nop 
                                           ;	.line	195; TCPIP_Stack/ETH97J60.c	MAMXFLL = LOW(6+6+2+1500+4); Nop();
008cf0   0eee     movlw	0xee               	MOVLW	0xee
008cf2   010e     movlb	0xe                	BANKSEL	_MAMXFLL
008cf4   6faa     movwf	0xaa, 0x1          	MOVWF	_MAMXFLL, B
008cf6   0000     nop                      	nop 
                                           ;	.line	196; TCPIP_Stack/ETH97J60.c	MAMXFLH = HIGH(6+6+2+1500+4); Nop();
008cf8   0e05     movlw	0x5                	MOVLW	0x05
008cfa   010e     movlb	0xe                	BANKSEL	_MAMXFLH
008cfc   6fab     movwf	0xab, 0x1          	MOVWF	_MAMXFLH, B
008cfe   0000     nop                      	nop 
                                           ;	.line	199; TCPIP_Stack/ETH97J60.c	MAADR1 = AppConfig.MyMACAddr.v[0]; Nop();
008d00   c8f5     movff	0x8f5, 0xe84       	MOVFF	(_AppConfig + 45), _MAADR1
008d02   fe84
008d04   0000     nop                      	nop 
                                           ;	.line	200; TCPIP_Stack/ETH97J60.c	MAADR2 = AppConfig.MyMACAddr.v[1]; Nop();
008d06   c8f6     movff	0x8f6, 0xe85       	MOVFF	(_AppConfig + 46), _MAADR2
008d08   fe85
008d0a   0000     nop                      	nop 
                                           ;	.line	201; TCPIP_Stack/ETH97J60.c	MAADR3 = AppConfig.MyMACAddr.v[2]; Nop();
008d0c   c8f7     movff	0x8f7, 0xe82       	MOVFF	(_AppConfig + 47), _MAADR3
008d0e   fe82
008d10   0000     nop                      	nop 
                                           ;	.line	202; TCPIP_Stack/ETH97J60.c	MAADR4 = AppConfig.MyMACAddr.v[3]; Nop();
008d12   c8f8     movff	0x8f8, 0xe83       	MOVFF	(_AppConfig + 48), _MAADR4
008d14   fe83
008d16   0000     nop                      	nop 
                                           ;	.line	203; TCPIP_Stack/ETH97J60.c	MAADR5 = AppConfig.MyMACAddr.v[4]; Nop();
008d18   c8f9     movff	0x8f9, 0xe80       	MOVFF	(_AppConfig + 49), _MAADR5
008d1a   fe80
008d1c   0000     nop                      	nop 
                                           ;	.line	204; TCPIP_Stack/ETH97J60.c	MAADR6 = AppConfig.MyMACAddr.v[5]; Nop();
008d1e   c8fa     movff	0x8fa, 0xe81       	MOVFF	(_AppConfig + 50), _MAADR6
008d20   fe81
008d22   0000     nop                      	nop 
                                           ;	.line	207; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON2, PHCON2_HDLDIS | PHCON2_RXAPDIS);
008d24   0e01     movlw	0x1                	MOVLW	0x01
008d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d28   0e10     movlw	0x10               	MOVLW	0x10
008d2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d2c   0e10     movlw	0x10               	MOVLW	0x10
008d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d30   ec24     call	0xb848, 0           	CALL	_WritePHYReg
008d32   f05c
008d34   0e03     movlw	0x3                	MOVLW	0x03
008d36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; TCPIP_Stack/ETH97J60.c	SetLEDConfig(0x3472);
008d38   0e34     movlw	0x34               	MOVLW	0x34
008d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d3c   0e72     movlw	0x72               	MOVLW	0x72
008d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d40   0e14     movlw	0x14               	MOVLW	0x14
008d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d44   ec24     call	0xb848, 0           	CALL	_WritePHYReg
008d46   f05c
008d48   0e03     movlw	0x3                	MOVLW	0x03
008d4a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON1, 0x0000);
008d4c   0e00     movlw	0                  	MOVLW	0x00
008d4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d50   0e00     movlw	0                  	MOVLW	0x00
008d52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d54   0e00     movlw	0                  	MOVLW	0x00
008d56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
008d58   ec24     call	0xb848, 0           	CALL	_WritePHYReg
008d5a   f05c
008d5c   0e03     movlw	0x3                	MOVLW	0x03
008d5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	220; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
008d60   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
008d62   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008d64   ffd9
008d66   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
008d68   7265     btg	0x65, 0x1, 0         	DB	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e
008d6a   6f72     movwf	0x72, 0x1          
008d6c   2072     addwfc	0x72, 0, 0        
008d6e   6572     cpfsgt	0x72, 0x1         
008d70   6461     cpfsgt	0x61, 0           
008d72   6e69     movwf	0x69, 0            
008d74   2067     addwfc	0x67, 0, 0        	DB	0x67, 0x20, 0x68, 0x64, 0x72, 0x00
008d76   6468     cpfsgt	0x68, 0           
008d78   0072     dw	0x72  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5346 (0x14e2) bytes ( 4.08%)
                                           ;           	 2673 (0x0a71) words
                                           ; udata size:	  141 (0x008d) bytes ( 3.67%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:45 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _GenerateRandomDWORD
                                           	global _StringToIPAddress
                                           	global _btohexa_high
                                           	global _btohexa_low
                                           	global _swaps
                                           	global _swapl
                                           	global _CalcIPChecksum
                                           	global _leftRotateDWORD
                                           	global _strnchr
                                           	global _toRotate
                                           	global _hexatob
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _rand
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           
                                           udata_Helpers_0	udata
                                           _GenerateRandomDWORD_wTime_1_1	res	2
                                           
                                           udata_Helpers_1	udata
                                           _StringToIPAddress_dwVal_1_1	res	4
                                           
                                           udata_Helpers_2	udata
                                           _hexatob_AsciiChars_1_1	res	2
                                           
                                           udata_Helpers_3	udata
                                           _swaps_t_1_1	res	2
                                           
                                           udata_Helpers_4	udata
                                           _swapl_v_1_1	res	4
                                           
                                           udata_Helpers_5	udata
                                           _CalcIPChecksum_count_1_1	res	2
                                           
                                           udata_Helpers_6	udata
                                           _CalcIPChecksum_sum_1_1	res	4
                                           
                                           udata_Helpers_7	udata
                                           _toRotate	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Helpers__strnchr	code
                                           _strnchr:
                                           ;	.line	1359; TCPIP_Stack/Helpers.c	char * strnchr(const char *searchString, size_t count, char c)
009600   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009602   ffe5
009604   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009606   ffd9
009608   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00960a   ffe5
00960c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00960e   ffe5
009610   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009612   ffe5
009614   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009616   ffe5
009618   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00961a   ffe5
00961c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00961e   ffe5
009620   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009622   ffe5
009624   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009626   ffe5
009628   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00962a   ffe5
00962c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00962e   ffe5
009630   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
009632   ffe5
009634   0e02     movlw	0x2                	MOVLW	0x02
009636   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009638   f000
00963a   0e03     movlw	0x3                	MOVLW	0x03
00963c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00963e   f001
009640   0e04     movlw	0x4                	MOVLW	0x04
009642   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009644   f002
009646   0e05     movlw	0x5                	MOVLW	0x05
009648   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00964a   f003
00964c   0e06     movlw	0x6                	MOVLW	0x06
00964e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009650   f004
009652   0e07     movlw	0x7                	MOVLW	0x07
009654   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
009656   f005
                                           ;	.line	1363; TCPIP_Stack/Helpers.c	while(count--)
009658   c000     movff	0, 0x6             	MOVFF	r0x00, r0x06
00965a   f006
00965c   c001     movff	0x1, 0x7           	MOVFF	r0x01, r0x07
00965e   f007
009660   c002     movff	0x2, 0x8           	MOVFF	r0x02, r0x08
009662   f008
                                           _00311_DS_:
009664   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
009666   f009
009668   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
00966a   f00a
00966c   0eff     movlw	0xff               	MOVLW	0xff
00966e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
009670   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
009672   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
009674   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
009676   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
009678   e025     bz	0x96c4                	BZ	_00313_DS_
                                           ;	.line	1365; TCPIP_Stack/Helpers.c	c2  = *searchString++;
00967a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00967c   ffe9
00967e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
009680   fff3
009682   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
009684   ec55     call	0xbcaa, 0           	CALL	__gptrget1
009686   f05e
009688   6e09     movwf	0x9, 0             	MOVWF	r0x09
00968a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00968c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00968e   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
009690   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
009692   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
                                           ;	.line	1366; TCPIP_Stack/Helpers.c	if(c2 == 0u)
009694   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
009696   e104     bnz	0x96a0               	BNZ	_00308_DS_
                                           ;	.line	1367; TCPIP_Stack/Helpers.c	return NULL;
009698   6af4     clrf	0xf4, 0             	CLRF	PRODH
00969a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00969c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00969e   d015     bra	0x96ca               	BRA	_00314_DS_
                                           _00308_DS_:
                                           ;	.line	1368; TCPIP_Stack/Helpers.c	if(c2 == c)
0096a0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0096a2   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
0096a4   e1df     bnz	0x9664               	BNZ	_00311_DS_
                                           ;	.line	1369; TCPIP_Stack/Helpers.c	return (char*)--searchString;
0096a6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0096a8   0fff     addlw	0xff               	ADDLW	0xff
0096aa   6e00     movwf	0, 0               	MOVWF	r0x00
0096ac   0eff     movlw	0xff               	MOVLW	0xff
0096ae   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0096b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0096b2   0eff     movlw	0xff               	MOVLW	0xff
0096b4   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0096b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0096b8   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0096ba   fff4
0096bc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0096be   fff3
0096c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0096c2   d003     bra	0x96ca               	BRA	_00314_DS_
                                           _00313_DS_:
                                           ;	.line	1371; TCPIP_Stack/Helpers.c	return NULL;
0096c4   6af4     clrf	0xf4, 0             	CLRF	PRODH
0096c6   6af3     clrf	0xf3, 0             	CLRF	PRODL
0096c8   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00314_DS_:
0096ca   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0096cc   f00a
0096ce   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0096d0   f009
0096d2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0096d4   f008
0096d6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0096d8   f007
0096da   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0096dc   f006
0096de   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0096e0   f005
0096e2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0096e4   f004
0096e6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0096e8   f003
0096ea   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0096ec   f002
0096ee   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0096f0   f001
0096f2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0096f4   f000
0096f6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0096f8   ffd9
0096fa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__leftRotateDWORD	code
                                           _leftRotateDWORD:
                                           ;	.line	1235; TCPIP_Stack/Helpers.c	DWORD leftRotateDWORD(DWORD val, BYTE bits)
009e3a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009e3c   ffe5
009e3e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009e40   ffd9
009e42   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009e44   ffe5
009e46   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009e48   ffe5
009e4a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009e4c   ffe5
009e4e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009e50   ffe5
009e52   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009e54   ffe5
009e56   0e02     movlw	0x2                	MOVLW	0x02
009e58   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009e5a   f000
009e5c   0e03     movlw	0x3                	MOVLW	0x03
009e5e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009e60   f001
009e62   0e04     movlw	0x4                	MOVLW	0x04
009e64   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009e66   f002
009e68   0e05     movlw	0x5                	MOVLW	0x05
009e6a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009e6c   f003
009e6e   0e06     movlw	0x6                	MOVLW	0x06
009e70   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009e72   f004
                                           ;	.line	1239; TCPIP_Stack/Helpers.c	toRotate.Val = val;
009e74   5000     movf	0, 0, 0             	MOVF	r0x00, W
009e76   0102     movlb	0x2                	BANKSEL	_toRotate
009e78   6f34     movwf	0x34, 0x1          	MOVWF	_toRotate, B
009e7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009e7c   0102     movlb	0x2                	BANKSEL	(_toRotate + 1)
009e7e   6f35     movwf	0x35, 0x1          	MOVWF	(_toRotate + 1), B
009e80   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009e82   0102     movlb	0x2                	BANKSEL	(_toRotate + 2)
009e84   6f36     movwf	0x36, 0x1          	MOVWF	(_toRotate + 2), B
009e86   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009e88   0102     movlb	0x2                	BANKSEL	(_toRotate + 3)
009e8a   6f37     movwf	0x37, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
009e8c   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
009e8e   f000
                                           _00284_DS_:
009e90   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
009e92   f001
009e94   6a02     clrf	0x2, 0              	CLRF	r0x02
009e96   0e00     movlw	0                  	MOVLW	0x00
009e98   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
009e9a   e102     bnz	0x9ea0               	BNZ	_00300_DS_
009e9c   0e08     movlw	0x8                	MOVLW	0x08
009e9e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00300_DS_:
009ea0   e317     bnc	0x9ed0               	BNC	_00288_DS_
                                           ;	.line	1243; TCPIP_Stack/Helpers.c	t = toRotate.v[3];
009ea2   c237     movff	0x237, 0x1         	MOVFF	(_toRotate + 3), r0x01
009ea4   f001
                                           ;	.line	1244; TCPIP_Stack/Helpers.c	toRotate.v[3] = toRotate.v[2];
009ea6   c236     movff	0x236, 0x2         	MOVFF	(_toRotate + 2), r0x02
009ea8   f002
009eaa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009eac   0102     movlb	0x2                	BANKSEL	(_toRotate + 3)
009eae   6f37     movwf	0x37, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1245; TCPIP_Stack/Helpers.c	toRotate.v[2] = toRotate.v[1];
009eb0   c235     movff	0x235, 0x2         	MOVFF	(_toRotate + 1), r0x02
009eb2   f002
009eb4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009eb6   0102     movlb	0x2                	BANKSEL	(_toRotate + 2)
009eb8   6f36     movwf	0x36, 0x1          	MOVWF	(_toRotate + 2), B
                                           ;	.line	1246; TCPIP_Stack/Helpers.c	toRotate.v[1] = toRotate.v[0];
009eba   c234     movff	0x234, 0x2         	MOVFF	_toRotate, r0x02
009ebc   f002
009ebe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009ec0   0102     movlb	0x2                	BANKSEL	(_toRotate + 1)
009ec2   6f35     movwf	0x35, 0x1          	MOVWF	(_toRotate + 1), B
                                           ;	.line	1247; TCPIP_Stack/Helpers.c	toRotate.v[0] = t;
009ec4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009ec6   0102     movlb	0x2                	BANKSEL	_toRotate
009ec8   6f34     movwf	0x34, 0x1          	MOVWF	_toRotate, B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
009eca   0ef8     movlw	0xf8               	MOVLW	0xf8
009ecc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
009ece   d7e0     bra	0x9e90               	BRA	_00284_DS_
                                           _00288_DS_:
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
009ed0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
009ed2   f001
009ed4   6a02     clrf	0x2, 0              	CLRF	r0x02
009ed6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009ed8   e102     bnz	0x9ede               	BNZ	_00302_DS_
009eda   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009edc   e00a     bz	0x9ef2                	BZ	_00291_DS_
                                           _00301_DS_:
                                           _00302_DS_:
009ede   0102     movlb	0x2                	movlb _toRotate
009ee0   90d8     bcf	0xd8, 0, 0           	bcf STATUS,0,0
009ee2   bf37     btfsc	0x37, 0x7, 0x1     	btfsc _toRotate+3,7,1
009ee4   80d8     bsf	0xd8, 0, 0           	bsf STATUS,0,0
009ee6   3734     rlcf	0x34, 0x1, 0x1      	rlcf _toRotate+0,1,1
009ee8   3735     rlcf	0x35, 0x1, 0x1      	rlcf _toRotate+1,1,1
009eea   3736     rlcf	0x36, 0x1, 0x1      	rlcf _toRotate+2,1,1
009eec   3737     rlcf	0x37, 0x1, 0x1      	rlcf _toRotate+3,1,1
                                           	
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
009eee   0600     decf	0, 0x1, 0           	DECF	r0x00, F
009ef0   d7ef     bra	0x9ed0               	BRA	_00288_DS_
                                           _00291_DS_:
                                           ;	.line	1281; TCPIP_Stack/Helpers.c	return toRotate.Val;
009ef2   c237     movff	0x237, 0xfe9       	MOVFF	(_toRotate + 3), FSR0L
009ef4   ffe9
009ef6   c236     movff	0x236, 0xff4       	MOVFF	(_toRotate + 2), PRODH
009ef8   fff4
009efa   c235     movff	0x235, 0xff3       	MOVFF	(_toRotate + 1), PRODL
009efc   fff3
009efe   0102     movlb	0x2                	BANKSEL	_toRotate
009f00   5134     movf	0x34, 0, 0x1        	MOVF	_toRotate, W, B
009f02   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009f04   f004
009f06   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009f08   f003
009f0a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009f0c   f002
009f0e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009f10   f001
009f12   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009f14   f000
009f16   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009f18   ffd9
009f1a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__CalcIPChecksum	code
                                           _CalcIPChecksum:
                                           ;	.line	1062; TCPIP_Stack/Helpers.c	WORD CalcIPChecksum(BYTE* buffer, WORD count)
002f98   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002f9a   ffe5
002f9c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002f9e   ffd9
002fa0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002fa2   ffe5
002fa4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002fa6   ffe5
002fa8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002faa   ffe5
002fac   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002fae   ffe5
002fb0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002fb2   ffe5
002fb4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002fb6   ffe5
002fb8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002fba   ffe5
002fbc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002fbe   ffe5
002fc0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002fc2   ffe5
002fc4   0e02     movlw	0x2                	MOVLW	0x02
002fc6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002fc8   f000
002fca   0e03     movlw	0x3                	MOVLW	0x03
002fcc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002fce   f001
002fd0   0e04     movlw	0x4                	MOVLW	0x04
002fd2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002fd4   f002
002fd6   0e05     movlw	0x5                	MOVLW	0x05
002fd8   cfdb     movff	0xfdb, 0x293       	MOVFF	PLUSW2, _CalcIPChecksum_count_1_1
002fda   f293
002fdc   0e06     movlw	0x6                	MOVLW	0x06
002fde   cfdb     movff	0xfdb, 0x294       	MOVFF	PLUSW2, (_CalcIPChecksum_count_1_1 + 1)
002fe0   f294
002fe2   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1066; TCPIP_Stack/Helpers.c	DWORD_VAL sum = {0x00000000ul};
002fe4   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
002fe6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002fe8   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
002fea   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002fec   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
002fee   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002ff0   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
002ff2   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
002ff4   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
002ff6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002ff8   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
002ffa   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002ffc   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
002ffe   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003000   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003002   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003004   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
003006   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003008   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00300a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00300c   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
00300e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003010   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003012   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003014   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
003016   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003018   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00301a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00301c   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
00301e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003020   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003022   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003024   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
003026   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003028   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00302a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00302c   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
00302e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003030   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003032   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003034   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
003036   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003038   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00303a   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
00303c   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
00303e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003040   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
003042   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003044   6b30     clrf	0x30, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
003046   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003048   6b31     clrf	0x31, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
00304a   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
00304c   9130     bcf	0x30, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
00304e   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003050   9330     bcf	0x30, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
003052   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003054   9530     bcf	0x30, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
003056   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003058   9730     bcf	0x30, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
00305a   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
00305c   9930     bcf	0x30, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
00305e   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003060   9b30     bcf	0x30, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
003062   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003064   9d30     bcf	0x30, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
003066   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003068   9f30     bcf	0x30, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
00306a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00306c   9131     bcf	0x31, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
00306e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003070   9331     bcf	0x31, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
003072   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003074   9531     bcf	0x31, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
003076   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003078   9731     bcf	0x31, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
00307a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00307c   9931     bcf	0x31, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
00307e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003080   9b31     bcf	0x31, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
003082   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003084   9d31     bcf	0x31, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
003086   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003088   9f31     bcf	0x31, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
00308a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00308c   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
00308e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003090   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
003092   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003094   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
003096   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003098   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
00309a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00309c   6b32     clrf	0x32, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
00309e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030a0   6b33     clrf	0x33, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
0030a2   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030a4   9132     bcf	0x32, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
0030a6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030a8   9332     bcf	0x32, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
0030aa   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030ac   9532     bcf	0x32, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
0030ae   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030b0   9732     bcf	0x32, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
0030b2   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030b4   9932     bcf	0x32, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
0030b6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030b8   9b32     bcf	0x32, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
0030ba   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030bc   9d32     bcf	0x32, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
0030be   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0030c0   9f32     bcf	0x32, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
0030c2   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030c4   9133     bcf	0x33, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
0030c6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030c8   9333     bcf	0x33, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
0030ca   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030cc   9533     bcf	0x33, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
0030ce   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030d0   9733     bcf	0x33, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
0030d2   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030d4   9933     bcf	0x33, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
0030d6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030d8   9b33     bcf	0x33, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
0030da   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030dc   9d33     bcf	0x33, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
0030de   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0030e0   9f33     bcf	0x33, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
0030e2   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030e4   9130     bcf	0x30, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
0030e6   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030e8   9330     bcf	0x30, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
0030ea   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030ec   9530     bcf	0x30, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
0030ee   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030f0   9730     bcf	0x30, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
0030f2   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030f4   9930     bcf	0x30, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
0030f6   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030f8   9b30     bcf	0x30, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
0030fa   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0030fc   9d30     bcf	0x30, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
0030fe   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003100   9f30     bcf	0x30, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
003102   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003104   9131     bcf	0x31, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
003106   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003108   9331     bcf	0x31, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
00310a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00310c   9531     bcf	0x31, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
00310e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003110   9731     bcf	0x31, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
003112   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003114   9931     bcf	0x31, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
003116   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003118   9b31     bcf	0x31, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
00311a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00311c   9d31     bcf	0x31, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
00311e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003120   9f31     bcf	0x31, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
003122   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003124   9132     bcf	0x32, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
003126   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003128   9332     bcf	0x32, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00312a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00312c   9532     bcf	0x32, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00312e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003130   9732     bcf	0x32, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
003132   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003134   9932     bcf	0x32, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
003136   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003138   9b32     bcf	0x32, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00313a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00313c   9d32     bcf	0x32, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00313e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003140   9f32     bcf	0x32, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
003142   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003144   9133     bcf	0x33, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
003146   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003148   9333     bcf	0x33, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
00314a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00314c   9533     bcf	0x33, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
00314e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003150   9733     bcf	0x33, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
003152   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003154   9933     bcf	0x33, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
003156   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003158   9b33     bcf	0x33, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
00315a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00315c   9d33     bcf	0x33, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
00315e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003160   9f33     bcf	0x33, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
                                           ;	.line	1068; TCPIP_Stack/Helpers.c	i = count >> 1;
003162   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003164   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_count_1_1 + 1)
003166   3194     rrcf	0x94, 0, 0x1        	RRCF	(_CalcIPChecksum_count_1_1 + 1), W, B
003168   6e04     movwf	0x4, 0             	MOVWF	r0x04
00316a   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_count_1_1
00316c   3193     rrcf	0x93, 0, 0x1        	RRCF	_CalcIPChecksum_count_1_1, W, B
00316e   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00274_DS_:
                                           ;	.line	1072; TCPIP_Stack/Helpers.c	while(i--)
003170   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
003172   f005
003174   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
003176   f006
003178   0eff     movlw	0xff               	MOVLW	0xff
00317a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00317c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00317e   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
003180   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003182   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
003184   e02b     bz	0x31dc                	BZ	_00276_DS_
                                           ;	.line	1073; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*val++;
003186   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003188   ffe9
00318a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00318c   fff3
00318e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003190   eccb     call	0xbb96, 0           	CALL	__gptrget2
003192   f05d
003194   6e05     movwf	0x5, 0             	MOVWF	r0x05
003196   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
003198   f006
00319a   0e02     movlw	0x2                	MOVLW	0x02
00319c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00319e   0e00     movlw	0                  	MOVLW	0x00
0031a0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0031a2   0e00     movlw	0                  	MOVLW	0x00
0031a4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0031a6   6a07     clrf	0x7, 0              	CLRF	r0x07
0031a8   6a08     clrf	0x8, 0              	CLRF	r0x08
0031aa   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0031ac   5130     movf	0x30, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
0031ae   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0031b0   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0031b2   5131     movf	0x31, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
0031b4   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0031b6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0031b8   5132     movf	0x32, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
0031ba   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0031bc   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0031be   5133     movf	0x33, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
0031c0   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
0031c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0031c4   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0031c6   6f30     movwf	0x30, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0031c8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0031ca   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0031cc   6f31     movwf	0x31, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0031ce   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0031d0   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0031d2   6f32     movwf	0x32, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
0031d4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0031d6   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0031d8   6f33     movwf	0x33, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
0031da   d7ca     bra	0x3170               	BRA	_00274_DS_
                                           _00276_DS_:
0031dc   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_count_1_1
                                           ;	.line	1076; TCPIP_Stack/Helpers.c	if(((WORD_VAL*)&count)->bits.b0)
0031de   a193     btfss	0x93, 0, 0x1       	BTFSS	_CalcIPChecksum_count_1_1, 0, B
0031e0   d023     bra	0x3228               	BRA	_00278_DS_
                                           ;	.line	1077; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*(BYTE*)val;
0031e2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0031e4   ffe9
0031e6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0031e8   fff3
0031ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031ec   ec55     call	0xbcaa, 0           	CALL	__gptrget1
0031ee   f05e
0031f0   6e00     movwf	0, 0               	MOVWF	r0x00
0031f2   6a01     clrf	0x1, 0              	CLRF	r0x01
0031f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0031f6   6a03     clrf	0x3, 0              	CLRF	r0x03
0031f8   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
0031fa   5130     movf	0x30, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
0031fc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0031fe   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003200   5131     movf	0x31, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
003202   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003204   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003206   5132     movf	0x32, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
003208   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00320a   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00320c   5133     movf	0x33, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
00320e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003210   5000     movf	0, 0, 0             	MOVF	r0x00, W
003212   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003214   6f30     movwf	0x30, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
003216   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003218   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00321a   6f31     movwf	0x31, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00321c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00321e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003220   6f32     movwf	0x32, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
003222   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003224   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003226   6f33     movwf	0x33, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
                                           _00278_DS_:
                                           ;	.line	1080; TCPIP_Stack/Helpers.c	sum.Val = (DWORD)sum.w[0] + (DWORD)sum.w[1];
003228   c230     movff	0x230, 0           	MOVFF	_CalcIPChecksum_sum_1_1, r0x00
00322a   f000
00322c   c231     movff	0x231, 0x1         	MOVFF	(_CalcIPChecksum_sum_1_1 + 1), r0x01
00322e   f001
003230   6a02     clrf	0x2, 0              	CLRF	r0x02
003232   6a03     clrf	0x3, 0              	CLRF	r0x03
003234   c232     movff	0x232, 0x4         	MOVFF	(_CalcIPChecksum_sum_1_1 + 2), r0x04
003236   f004
003238   c233     movff	0x233, 0x5         	MOVFF	(_CalcIPChecksum_sum_1_1 + 3), r0x05
00323a   f005
00323c   6a06     clrf	0x6, 0              	CLRF	r0x06
00323e   6a07     clrf	0x7, 0              	CLRF	r0x07
003240   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003242   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003244   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003246   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003248   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00324a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00324c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00324e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003250   5000     movf	0, 0, 0             	MOVF	r0x00, W
003252   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003254   6f30     movwf	0x30, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
003256   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003258   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00325a   6f31     movwf	0x31, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00325c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00325e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
003260   6f32     movwf	0x32, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
003262   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003264   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003266   6f33     movwf	0x33, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
003268   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
                                           ;	.line	1084; TCPIP_Stack/Helpers.c	sum.w[0] += sum.w[1];
00326a   5132     movf	0x32, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
00326c   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
00326e   2530     addwf	0x30, 0, 0x1       	ADDWF	_CalcIPChecksum_sum_1_1, W, B
003270   6e00     movwf	0, 0               	MOVWF	r0x00
003272   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
003274   5133     movf	0x33, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
003276   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003278   2131     addwfc	0x31, 0, 0x1      	ADDWFC	(_CalcIPChecksum_sum_1_1 + 1), W, B
00327a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00327c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00327e   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
003280   6f30     movwf	0x30, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
003282   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003284   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003286   6f31     movwf	0x31, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
003288   0102     movlb	0x2                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1087; TCPIP_Stack/Helpers.c	return ~sum.w[0];
00328a   1d30     comf	0x30, 0, 0x1        	COMF	_CalcIPChecksum_sum_1_1, W, B
00328c   6e00     movwf	0, 0               	MOVWF	r0x00
00328e   0102     movlb	0x2                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
003290   1d31     comf	0x31, 0, 0x1        	COMF	(_CalcIPChecksum_sum_1_1 + 1), W, B
003292   6e01     movwf	0x1, 0             	MOVWF	r0x01
003294   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003296   fff3
003298   5000     movf	0, 0, 0             	MOVF	r0x00, W
00329a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00329c   f008
00329e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0032a0   f007
0032a2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0032a4   f006
0032a6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0032a8   f005
0032aa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0032ac   f004
0032ae   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0032b0   f003
0032b2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0032b4   f002
0032b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032b8   f001
0032ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032bc   f000
0032be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0032c0   ffd9
0032c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swapl	code
                                           _swapl:
                                           ;	.line	1020; TCPIP_Stack/Helpers.c	DWORD swapl(DWORD v)
00a836   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a838   ffe5
00a83a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a83c   ffd9
00a83e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a840   ffe5
00a842   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a844   ffe5
00a846   0e02     movlw	0x2                	MOVLW	0x02
00a848   cfdb     movff	0xfdb, 0x22c       	MOVFF	PLUSW2, _swapl_v_1_1
00a84a   f22c
00a84c   0e03     movlw	0x3                	MOVLW	0x03
00a84e   cfdb     movff	0xfdb, 0x22d       	MOVFF	PLUSW2, (_swapl_v_1_1 + 1)
00a850   f22d
00a852   0e04     movlw	0x4                	MOVLW	0x04
00a854   cfdb     movff	0xfdb, 0x22e       	MOVFF	PLUSW2, (_swapl_v_1_1 + 2)
00a856   f22e
00a858   0e05     movlw	0x5                	MOVLW	0x05
00a85a   cfdb     movff	0xfdb, 0x22f       	MOVFF	PLUSW2, (_swapl_v_1_1 + 3)
00a85c   f22f
                                           ;	.line	1023; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
00a85e   c22f     movff	0x22f, 0           	MOVFF	(_swapl_v_1_1 + 3), r0x00
00a860   f000
00a862   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a864   0102     movlb	0x2                	BANKSEL	_swapl_v_1_1
00a866   192c     xorwf	0x2c, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
00a868   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a86a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a86c   0102     movlb	0x2                	BANKSEL	_swapl_v_1_1
00a86e   6f2c     movwf	0x2c, 0x1          	MOVWF	_swapl_v_1_1, B
00a870   0102     movlb	0x2                	BANKSEL	_swapl_v_1_1
                                           ;	.line	1024; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[3] ^= ((DWORD_VAL*)&v)->v[0];
00a872   512c     movf	0x2c, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
00a874   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00a876   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a878   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 3)
00a87a   6f2f     movwf	0x2f, 0x1          	MOVWF	(_swapl_v_1_1 + 3), B
00a87c   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 3)
                                           ;	.line	1025; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
00a87e   512f     movf	0x2f, 0, 0x1        	MOVF	(_swapl_v_1_1 + 3), W, B
00a880   0102     movlb	0x2                	BANKSEL	_swapl_v_1_1
00a882   192c     xorwf	0x2c, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
00a884   6e00     movwf	0, 0               	MOVWF	r0x00
00a886   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a888   0102     movlb	0x2                	BANKSEL	_swapl_v_1_1
00a88a   6f2c     movwf	0x2c, 0x1          	MOVWF	_swapl_v_1_1, B
                                           ;	.line	1028; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
00a88c   c22e     movff	0x22e, 0           	MOVFF	(_swapl_v_1_1 + 2), r0x00
00a88e   f000
00a890   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a892   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 1)
00a894   192d     xorwf	0x2d, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
00a896   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a898   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a89a   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 1)
00a89c   6f2d     movwf	0x2d, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
00a89e   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 1)
                                           ;	.line	1029; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[2] ^= ((DWORD_VAL*)&v)->v[1];
00a8a0   512d     movf	0x2d, 0, 0x1        	MOVF	(_swapl_v_1_1 + 1), W, B
00a8a2   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00a8a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a8a6   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 2)
00a8a8   6f2e     movwf	0x2e, 0x1          	MOVWF	(_swapl_v_1_1 + 2), B
00a8aa   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 2)
                                           ;	.line	1030; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
00a8ac   512e     movf	0x2e, 0, 0x1        	MOVF	(_swapl_v_1_1 + 2), W, B
00a8ae   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 1)
00a8b0   192d     xorwf	0x2d, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
00a8b2   6e00     movwf	0, 0               	MOVWF	r0x00
00a8b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a8b6   0102     movlb	0x2                	BANKSEL	(_swapl_v_1_1 + 1)
00a8b8   6f2d     movwf	0x2d, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
                                           ;	.line	1032; TCPIP_Stack/Helpers.c	return v;
00a8ba   c22f     movff	0x22f, 0xfe9       	MOVFF	(_swapl_v_1_1 + 3), FSR0L
00a8bc   ffe9
00a8be   c22e     movff	0x22e, 0xff4       	MOVFF	(_swapl_v_1_1 + 2), PRODH
00a8c0   fff4
00a8c2   c22d     movff	0x22d, 0xff3       	MOVFF	(_swapl_v_1_1 + 1), PRODL
00a8c4   fff3
00a8c6   0102     movlb	0x2                	BANKSEL	_swapl_v_1_1
00a8c8   512c     movf	0x2c, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
00a8ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a8cc   f001
00a8ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a8d0   f000
00a8d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a8d4   ffd9
00a8d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swaps	code
                                           _swaps:
                                           ;	.line	991; TCPIP_Stack/Helpers.c	WORD swaps(WORD v)
00b752   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b754   ffe5
00b756   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b758   ffd9
00b75a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b75c   ffe5
00b75e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b760   ffe5
00b762   0e02     movlw	0x2                	MOVLW	0x02
00b764   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b766   f000
00b768   0e03     movlw	0x3                	MOVLW	0x03
00b76a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b76c   f001
                                           ;	.line	996; TCPIP_Stack/Helpers.c	t.Val   = v;
00b76e   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b770   0102     movlb	0x2                	BANKSEL	_swaps_t_1_1
00b772   6f91     movwf	0x91, 0x1          	MOVWF	_swaps_t_1_1, B
00b774   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b776   0102     movlb	0x2                	BANKSEL	(_swaps_t_1_1 + 1)
00b778   6f92     movwf	0x92, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	997; TCPIP_Stack/Helpers.c	b       = t.v[1];
00b77a   c292     movff	0x292, 0           	MOVFF	(_swaps_t_1_1 + 1), r0x00
00b77c   f000
                                           ;	.line	998; TCPIP_Stack/Helpers.c	t.v[1]  = t.v[0];
00b77e   c291     movff	0x291, 0x1         	MOVFF	_swaps_t_1_1, r0x01
00b780   f001
00b782   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b784   0102     movlb	0x2                	BANKSEL	(_swaps_t_1_1 + 1)
00b786   6f92     movwf	0x92, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	999; TCPIP_Stack/Helpers.c	t.v[0]  = b;
00b788   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b78a   0102     movlb	0x2                	BANKSEL	_swaps_t_1_1
00b78c   6f91     movwf	0x91, 0x1          	MOVWF	_swaps_t_1_1, B
                                           ;	.line	1001; TCPIP_Stack/Helpers.c	return t.Val;
00b78e   c292     movff	0x292, 0xff3       	MOVFF	(_swaps_t_1_1 + 1), PRODL
00b790   fff3
00b792   0102     movlb	0x2                	BANKSEL	_swaps_t_1_1
00b794   5191     movf	0x91, 0, 0x1        	MOVF	_swaps_t_1_1, W, B
00b796   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b798   f001
00b79a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b79c   f000
00b79e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b7a0   ffd9
00b7a2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_low	code
                                           _btohexa_low:
                                           ;	.line	904; TCPIP_Stack/Helpers.c	BYTE btohexa_low(BYTE b)
00b7a4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b7a6   ffe5
00b7a8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b7aa   ffd9
00b7ac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b7ae   ffe5
00b7b0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b7b2   ffe5
00b7b4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b7b6   ffe5
00b7b8   0e02     movlw	0x2                	MOVLW	0x02
00b7ba   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b7bc   f000
                                           ;	.line	906; TCPIP_Stack/Helpers.c	b &= 0x0F;
00b7be   0e0f     movlw	0xf                	MOVLW	0x0f
00b7c0   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
                                           ;	.line	907; TCPIP_Stack/Helpers.c	return (b>9u) ? b+'A'-10:b+'0';
00b7c2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00b7c4   f001
00b7c6   6a02     clrf	0x2, 0              	CLRF	r0x02
00b7c8   0e00     movlw	0                  	MOVLW	0x00
00b7ca   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00b7cc   e102     bnz	0xb7d2               	BNZ	_00259_DS_
00b7ce   0e0a     movlw	0xa                	MOVLW	0x0a
00b7d0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
00b7d2   e304     bnc	0xb7dc               	BNC	_00255_DS_
00b7d4   0e37     movlw	0x37               	MOVLW	0x37
00b7d6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00b7d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
00b7da   d003     bra	0xb7e2               	BRA	_00256_DS_
                                           _00255_DS_:
00b7dc   0e30     movlw	0x30               	MOVLW	0x30
00b7de   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00b7e0   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00256_DS_:
00b7e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b7e4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b7e6   f002
00b7e8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b7ea   f001
00b7ec   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b7ee   f000
00b7f0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b7f2   ffd9
00b7f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_high	code
                                           _btohexa_high:
                                           ;	.line	878; TCPIP_Stack/Helpers.c	BYTE btohexa_high(BYTE b)
00b6fe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b700   ffe5
00b702   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b704   ffd9
00b706   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b708   ffe5
00b70a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b70c   ffe5
00b70e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b710   ffe5
00b712   0e02     movlw	0x2                	MOVLW	0x02
00b714   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b716   f000
                                           ;	.line	880; TCPIP_Stack/Helpers.c	b >>= 4;
00b718   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
00b71a   0b0f     andlw	0xf                	ANDLW	0x0f
00b71c   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	881; TCPIP_Stack/Helpers.c	return (b>0x9u) ? b+'A'-10:b+'0';
00b71e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00b720   f001
00b722   6a02     clrf	0x2, 0              	CLRF	r0x02
00b724   0e00     movlw	0                  	MOVLW	0x00
00b726   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00b728   e102     bnz	0xb72e               	BNZ	_00248_DS_
00b72a   0e0a     movlw	0xa                	MOVLW	0x0a
00b72c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00248_DS_:
00b72e   e304     bnc	0xb738               	BNC	_00245_DS_
00b730   0e37     movlw	0x37               	MOVLW	0x37
00b732   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00b734   6e01     movwf	0x1, 0             	MOVWF	r0x01
00b736   d003     bra	0xb73e               	BRA	_00246_DS_
                                           _00245_DS_:
00b738   0e30     movlw	0x30               	MOVLW	0x30
00b73a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00b73c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00246_DS_:
00b73e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b740   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b742   f002
00b744   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b746   f001
00b748   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b74a   f000
00b74c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b74e   ffd9
00b750   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__hexatob	code
                                           _hexatob:
                                           ;	.line	829; TCPIP_Stack/Helpers.c	BYTE hexatob(WORD AsciiCharsarg)
008e90   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008e92   ffe5
008e94   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008e96   ffd9
008e98   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
008e9a   ffe5
008e9c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
008e9e   ffe5
008ea0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
008ea2   ffe5
008ea4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
008ea6   ffe5
008ea8   0e02     movlw	0x2                	MOVLW	0x02
008eaa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
008eac   f000
008eae   0e03     movlw	0x3                	MOVLW	0x03
008eb0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
008eb2   f001
                                           ;	.line	832; TCPIP_Stack/Helpers.c	AsciiChars.v[0] = (BYTE)AsciiCharsarg&0xFF; //ML
008eb4   5000     movf	0, 0, 0             	MOVF	r0x00, W
008eb6   6e02     movwf	0x2, 0             	MOVWF	r0x02
008eb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008eba   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
008ebc   6f8f     movwf	0x8f, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           ;	.line	833; TCPIP_Stack/Helpers.c	AsciiChars.v[1] = (BYTE)(AsciiCharsarg>>8)&0xFF; //ML
008ebe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008ec0   6e00     movwf	0, 0               	MOVWF	r0x00
008ec2   6a01     clrf	0x1, 0              	CLRF	r0x01
008ec4   5000     movf	0, 0, 0             	MOVF	r0x00, W
008ec6   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
008ec8   6f90     movwf	0x90, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           ;	.line	836; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'F')
008eca   c290     movff	0x290, 0x1         	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x01
008ecc   f001
008ece   6a02     clrf	0x2, 0              	CLRF	r0x02
008ed0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008ed2   0f80     addlw	0x80               	ADDLW	0x80
008ed4   0f80     addlw	0x80               	ADDLW	0x80
008ed6   e102     bnz	0x8edc               	BNZ	_00235_DS_
008ed8   0e47     movlw	0x47               	MOVLW	0x47
008eda   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00235_DS_:
008edc   e305     bnc	0x8ee8               	BNC	_00220_DS_
                                           ;	.line	837; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'a'-(int)'A';
008ede   0ee0     movlw	0xe0               	MOVLW	0xe0
008ee0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
008ee2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008ee4   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
008ee6   6f90     movwf	0x90, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00220_DS_:
                                           ;	.line	838; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'F')
008ee8   c28f     movff	0x28f, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
008eea   f000
008eec   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
008eee   f001
008ef0   6a02     clrf	0x2, 0              	CLRF	r0x02
008ef2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008ef4   0f80     addlw	0x80               	ADDLW	0x80
008ef6   0f80     addlw	0x80               	ADDLW	0x80
008ef8   e102     bnz	0x8efe               	BNZ	_00236_DS_
008efa   0e47     movlw	0x47               	MOVLW	0x47
008efc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00236_DS_:
008efe   e305     bnc	0x8f0a               	BNC	_00222_DS_
                                           ;	.line	839; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'a'-(int)'A';
008f00   0ee0     movlw	0xe0               	MOVLW	0xe0
008f02   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
008f04   5000     movf	0, 0, 0             	MOVF	r0x00, W
008f06   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
008f08   6f8f     movwf	0x8f, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00222_DS_:
                                           ;	.line	842; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'9')
008f0a   c290     movff	0x290, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
008f0c   f000
008f0e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
008f10   f001
008f12   6a02     clrf	0x2, 0              	CLRF	r0x02
008f14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008f16   0f80     addlw	0x80               	ADDLW	0x80
008f18   0f80     addlw	0x80               	ADDLW	0x80
008f1a   e102     bnz	0x8f20               	BNZ	_00237_DS_
008f1c   0e3a     movlw	0x3a               	MOVLW	0x3a
008f1e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00237_DS_:
008f20   e307     bnc	0x8f30               	BNC	_00224_DS_
                                           ;	.line	843; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'A' - 10;
008f22   0ec9     movlw	0xc9               	MOVLW	0xc9
008f24   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
008f26   6e01     movwf	0x1, 0             	MOVWF	r0x01
008f28   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008f2a   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
008f2c   6f90     movwf	0x90, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
008f2e   d005     bra	0x8f3a               	BRA	_00225_DS_
                                           _00224_DS_:
                                           ;	.line	845; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= '0';
008f30   0ed0     movlw	0xd0               	MOVLW	0xd0
008f32   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
008f34   5000     movf	0, 0, 0             	MOVF	r0x00, W
008f36   0102     movlb	0x2                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
008f38   6f90     movwf	0x90, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00225_DS_:
                                           ;	.line	847; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'9')
008f3a   c28f     movff	0x28f, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
008f3c   f000
008f3e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
008f40   f001
008f42   6a02     clrf	0x2, 0              	CLRF	r0x02
008f44   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008f46   0f80     addlw	0x80               	ADDLW	0x80
008f48   0f80     addlw	0x80               	ADDLW	0x80
008f4a   e102     bnz	0x8f50               	BNZ	_00238_DS_
008f4c   0e3a     movlw	0x3a               	MOVLW	0x3a
008f4e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00238_DS_:
008f50   e307     bnc	0x8f60               	BNC	_00227_DS_
                                           ;	.line	848; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'A' - 10;
008f52   0ec9     movlw	0xc9               	MOVLW	0xc9
008f54   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
008f56   6e01     movwf	0x1, 0             	MOVWF	r0x01
008f58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008f5a   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
008f5c   6f8f     movwf	0x8f, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
008f5e   d005     bra	0x8f6a               	BRA	_00228_DS_
                                           _00227_DS_:
                                           ;	.line	850; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'0';
008f60   0ed0     movlw	0xd0               	MOVLW	0xd0
008f62   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
008f64   5000     movf	0, 0, 0             	MOVF	r0x00, W
008f66   0102     movlb	0x2                	BANKSEL	_hexatob_AsciiChars_1_1
008f68   6f8f     movwf	0x8f, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00228_DS_:
                                           ;	.line	854; TCPIP_Stack/Helpers.c	return (WORD)((AsciiChars.v[1]<<4) |  AsciiChars.v[0]);
008f6a   c290     movff	0x290, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
008f6c   f000
008f6e   6a01     clrf	0x1, 0              	CLRF	r0x01
008f70   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
008f72   0bf0     andlw	0xf0               	ANDLW	0xf0
008f74   6e03     movwf	0x3, 0             	MOVWF	r0x03
008f76   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
008f78   6e02     movwf	0x2, 0             	MOVWF	r0x02
008f7a   0b0f     andlw	0xf                	ANDLW	0x0f
008f7c   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
008f7e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
008f80   c28f     movff	0x28f, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
008f82   f000
008f84   6a01     clrf	0x1, 0              	CLRF	r0x01
008f86   5000     movf	0, 0, 0             	MOVF	r0x00, W
008f88   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
008f8a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
008f8c   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
008f8e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
008f90   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
008f92   f003
008f94   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
008f96   f002
008f98   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
008f9a   f001
008f9c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
008f9e   f000
008fa0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008fa2   ffd9
008fa4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__StringToIPAddress	code
                                           _StringToIPAddress:
                                           ;	.line	330; TCPIP_Stack/Helpers.c	BOOL StringToIPAddress(BYTE* str, IP_ADDR* IPAddress)
00390e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003910   ffe5
003912   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003914   ffd9
003916   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003918   ffe5
00391a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00391c   ffe5
00391e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003920   ffe5
003922   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003924   ffe5
003926   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003928   ffe5
00392a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00392c   ffe5
00392e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003930   ffe5
003932   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003934   ffe5
003936   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003938   ffe5
00393a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00393c   ffe5
00393e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003940   ffe5
003942   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003944   ffe5
003946   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003948   ffe5
00394a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00394c   ffe5
00394e   0e02     movlw	0x2                	MOVLW	0x02
003950   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003952   f000
003954   0e03     movlw	0x3                	MOVLW	0x03
003956   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003958   f001
00395a   0e04     movlw	0x4                	MOVLW	0x04
00395c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00395e   f002
003960   0e05     movlw	0x5                	MOVLW	0x05
003962   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003964   f003
003966   0e06     movlw	0x6                	MOVLW	0x06
003968   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00396a   f004
00396c   0e07     movlw	0x7                	MOVLW	0x07
00396e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003970   f005
                                           ;	.line	335; TCPIP_Stack/Helpers.c	charLen = 0;
003972   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           ;	.line	336; TCPIP_Stack/Helpers.c	currentOctet = 0;
003974   6a07     clrf	0x7, 0              	CLRF	r0x07
003976   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	337; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
003978   6b28     clrf	0x28, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
00397a   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00397c   6b29     clrf	0x29, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
00397e   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003980   6b2a     clrf	0x2a, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
003982   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003984   6b2b     clrf	0x2b, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           _00161_DS_:
                                           ;	.line	338; TCPIP_Stack/Helpers.c	while((i = *str++))
003986   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003988   ffe9
00398a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00398c   fff3
00398e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003990   ec55     call	0xbcaa, 0           	CALL	__gptrget1
003992   f05e
003994   6e08     movwf	0x8, 0             	MOVWF	r0x08
003996   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003998   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00399a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00399c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00399e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0039a0   c008     movff	0x8, 0x9           	MOVFF	r0x08, r0x09
0039a2   f009
0039a4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0039a6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0039a8   d0d0     bra	0x3b4a               	BRA	_00163_DS_
                                           ;	.line	340; TCPIP_Stack/Helpers.c	if(currentOctet > 3u)
0039aa   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0039ac   f008
0039ae   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0039b0   0e00     movlw	0                  	MOVLW	0x00
0039b2   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0039b4   e102     bnz	0x39ba               	BNZ	_00193_DS_
0039b6   0e04     movlw	0x4                	MOVLW	0x04
0039b8   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00193_DS_:
0039ba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0039bc   d0c6     bra	0x3b4a               	BRA	_00163_DS_
                                           ;	.line	343; TCPIP_Stack/Helpers.c	i -= '0';
0039be   0ed0     movlw	0xd0               	MOVLW	0xd0
0039c0   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
                                           ;	.line	347; TCPIP_Stack/Helpers.c	if(charLen == 0u)
0039c2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039c4   e10c     bnz	0x39de               	BNZ	_00159_DS_
                                           ;	.line	349; TCPIP_Stack/Helpers.c	if(i > 9u)
0039c6   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
0039c8   f008
0039ca   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0039cc   0e00     movlw	0                  	MOVLW	0x00
0039ce   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0039d0   e102     bnz	0x39d6               	BNZ	_00194_DS_
0039d2   0e0a     movlw	0xa                	MOVLW	0x0a
0039d4   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00194_DS_:
0039d6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0039d8   d09d     bra	0x3b14               	BRA	_00160_DS_
                                           ;	.line	350; TCPIP_Stack/Helpers.c	return FALSE;
0039da   6ae8     clrf	0xe8, 0             	CLRF	WREG
0039dc   d107     bra	0x3bec               	BRA	_00173_DS_
                                           _00159_DS_:
                                           ;	.line	352; TCPIP_Stack/Helpers.c	else if(charLen == 3u)
0039de   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
0039e0   f008
0039e2   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0039e4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0039e6   0a03     xorlw	0x3                	XORLW	0x03
0039e8   e102     bnz	0x39ee               	BNZ	_00195_DS_
0039ea   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0039ec   e001     bz	0x39f0                	BZ	_00196_DS_
                                           _00195_DS_:
0039ee   d044     bra	0x3a78               	BRA	_00156_DS_
                                           _00196_DS_:
                                           ;	.line	354; TCPIP_Stack/Helpers.c	if(i != (BYTE)('.' - '0'))
0039f0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0039f2   0afe     xorlw	0xfe               	XORLW	0xfe
0039f4   e002     bz	0x39fa                	BZ	_00146_DS_
                                           ;	.line	355; TCPIP_Stack/Helpers.c	return FALSE;
0039f6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0039f8   d0f9     bra	0x3bec               	BRA	_00173_DS_
                                           _00146_DS_:
                                           ;	.line	357; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
0039fa   0e00     movlw	0                  	MOVLW	0x00
0039fc   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
0039fe   5d2b     subwf	0x2b, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
003a00   e10b     bnz	0x3a18               	BNZ	_00199_DS_
003a02   0e02     movlw	0x2                	MOVLW	0x02
003a04   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003a06   5d2a     subwf	0x2a, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003a08   e107     bnz	0x3a18               	BNZ	_00199_DS_
003a0a   0e05     movlw	0x5                	MOVLW	0x05
003a0c   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003a0e   5d29     subwf	0x29, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003a10   e103     bnz	0x3a18               	BNZ	_00199_DS_
003a12   0e06     movlw	0x6                	MOVLW	0x06
003a14   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003a16   5d28     subwf	0x28, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00199_DS_:
003a18   e302     bnc	0x3a1e               	BNC	_00148_DS_
                                           ;	.line	358; TCPIP_Stack/Helpers.c	return FALSE;
003a1a   6ae8     clrf	0xe8, 0             	CLRF	WREG
003a1c   d0e7     bra	0x3bec               	BRA	_00173_DS_
                                           _00148_DS_:
                                           ;	.line	360; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
003a1e   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
003a20   f008
003a22   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
003a24   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003a26   6a0b     clrf	0xb, 0              	CLRF	r0x0b
003a28   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003a2a   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
003a2c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003a2e   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
003a30   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003a32   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003a34   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003a36   512a     movf	0x2a, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003a38   0d64     mullw	0x64               	MULLW	0x64
003a3a   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
003a3c   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003a3e   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003a40   5129     movf	0x29, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003a42   0d0a     mullw	0xa                	MULLW	0x0a
003a44   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
003a46   f00d
003a48   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003a4a   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
003a4c   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003a4e   5128     movf	0x28, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
003a50   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
003a52   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003a54   ffe5
003a56   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003a58   ffe9
003a5a   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
003a5c   fff3
003a5e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003a60   ec28     call	0xbe50, 0           	CALL	__gptrput1
003a62   f05f
                                           ;	.line	361; TCPIP_Stack/Helpers.c	charLen = 0;
003a64   6a06     clrf	0x6, 0              	CLRF	r0x06
003a66   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	362; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
003a68   6b28     clrf	0x28, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
003a6a   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003a6c   6b29     clrf	0x29, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
003a6e   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003a70   6b2a     clrf	0x2a, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
003a72   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003a74   6b2b     clrf	0x2b, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	363; TCPIP_Stack/Helpers.c	continue;
003a76   d787     bra	0x3986               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	367; TCPIP_Stack/Helpers.c	if(i == (BYTE)('.' - '0'))
003a78   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003a7a   0afe     xorlw	0xfe               	XORLW	0xfe
003a7c   e001     bz	0x3a80                	BZ	_00201_DS_
003a7e   d03f     bra	0x3afe               	BRA	_00152_DS_
                                           _00201_DS_:
                                           ;	.line	369; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
003a80   0e00     movlw	0                  	MOVLW	0x00
003a82   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003a84   5d2b     subwf	0x2b, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
003a86   e10b     bnz	0x3a9e               	BNZ	_00202_DS_
003a88   0e02     movlw	0x2                	MOVLW	0x02
003a8a   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003a8c   5d2a     subwf	0x2a, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003a8e   e107     bnz	0x3a9e               	BNZ	_00202_DS_
003a90   0e05     movlw	0x5                	MOVLW	0x05
003a92   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003a94   5d29     subwf	0x29, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003a96   e103     bnz	0x3a9e               	BNZ	_00202_DS_
003a98   0e06     movlw	0x6                	MOVLW	0x06
003a9a   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003a9c   5d28     subwf	0x28, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00202_DS_:
003a9e   e302     bnc	0x3aa4               	BNC	_00150_DS_
                                           ;	.line	370; TCPIP_Stack/Helpers.c	return FALSE;
003aa0   6ae8     clrf	0xe8, 0             	CLRF	WREG
003aa2   d0a4     bra	0x3bec               	BRA	_00173_DS_
                                           _00150_DS_:
                                           ;	.line	372; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
003aa4   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
003aa6   f008
003aa8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
003aaa   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003aac   6a0b     clrf	0xb, 0              	CLRF	r0x0b
003aae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003ab0   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
003ab2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003ab4   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
003ab6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003ab8   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003aba   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003abc   512a     movf	0x2a, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003abe   0d64     mullw	0x64               	MULLW	0x64
003ac0   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
003ac2   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003ac4   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003ac6   5129     movf	0x29, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003ac8   0d0a     mullw	0xa                	MULLW	0x0a
003aca   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
003acc   f00d
003ace   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003ad0   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
003ad2   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003ad4   5128     movf	0x28, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
003ad6   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
003ad8   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003ada   ffe5
003adc   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003ade   ffe9
003ae0   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
003ae2   fff3
003ae4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003ae6   ec28     call	0xbe50, 0           	CALL	__gptrput1
003ae8   f05f
                                           ;	.line	373; TCPIP_Stack/Helpers.c	charLen = 0;
003aea   6a06     clrf	0x6, 0              	CLRF	r0x06
003aec   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	374; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
003aee   6b28     clrf	0x28, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
003af0   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003af2   6b29     clrf	0x29, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
003af4   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003af6   6b2a     clrf	0x2a, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
003af8   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003afa   6b2b     clrf	0x2b, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	375; TCPIP_Stack/Helpers.c	continue;
003afc   d744     bra	0x3986               	BRA	_00161_DS_
                                           _00152_DS_:
                                           ;	.line	377; TCPIP_Stack/Helpers.c	if(i > 9u)
003afe   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
003b00   f008
003b02   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003b04   0e00     movlw	0                  	MOVLW	0x00
003b06   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
003b08   e102     bnz	0x3b0e               	BNZ	_00203_DS_
003b0a   0e0a     movlw	0xa                	MOVLW	0x0a
003b0c   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00203_DS_:
003b0e   e302     bnc	0x3b14               	BNC	_00160_DS_
                                           ;	.line	378; TCPIP_Stack/Helpers.c	return FALSE;
003b10   6ae8     clrf	0xe8, 0             	CLRF	WREG
003b12   d06c     bra	0x3bec               	BRA	_00173_DS_
                                           _00160_DS_:
                                           ;	.line	381; TCPIP_Stack/Helpers.c	charLen++;
003b14   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
003b16   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
                                           ;	.line	382; TCPIP_Stack/Helpers.c	dwVal.Val <<= 8;
003b18   512a     movf	0x2a, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003b1a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003b1c   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003b1e   5129     movf	0x29, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003b20   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
003b22   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003b24   5128     movf	0x28, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
003b26   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003b28   6a08     clrf	0x8, 0              	CLRF	r0x08
003b2a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003b2c   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003b2e   6f28     movwf	0x28, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
003b30   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003b32   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003b34   6f29     movwf	0x29, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 1), B
003b36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003b38   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003b3a   6f2a     movwf	0x2a, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 2), B
003b3c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003b3e   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003b40   6f2b     movwf	0x2b, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	383; TCPIP_Stack/Helpers.c	dwVal.v[0] = i;
003b42   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003b44   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003b46   6f28     movwf	0x28, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
003b48   d71e     bra	0x3986               	BRA	_00161_DS_
                                           _00163_DS_:
                                           ;	.line	389; TCPIP_Stack/Helpers.c	if(i != 0u && i != (int)'/' && i != (int)'\r' && i != (int)'\n' && i !=(int) ' ' && i != (int)'\t')
003b4a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003b4c   e01e     bz	0x3b8a                	BZ	_00165_DS_
003b4e   c009     movff	0x9, 0             	MOVFF	r0x09, r0x00
003b50   f000
003b52   6a01     clrf	0x1, 0              	CLRF	r0x01
003b54   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b56   0a2f     xorlw	0x2f               	XORLW	0x2f
003b58   e102     bnz	0x3b5e               	BNZ	_00205_DS_
003b5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b5c   e016     bz	0x3b8a                	BZ	_00165_DS_
                                           _00205_DS_:
003b5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b60   0a0d     xorlw	0xd                	XORLW	0x0d
003b62   e102     bnz	0x3b68               	BNZ	_00207_DS_
003b64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b66   e011     bz	0x3b8a                	BZ	_00165_DS_
                                           _00207_DS_:
003b68   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b6a   0a0a     xorlw	0xa                	XORLW	0x0a
003b6c   e102     bnz	0x3b72               	BNZ	_00209_DS_
003b6e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b70   e00c     bz	0x3b8a                	BZ	_00165_DS_
                                           _00209_DS_:
003b72   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b74   0a20     xorlw	0x20               	XORLW	0x20
003b76   e102     bnz	0x3b7c               	BNZ	_00211_DS_
003b78   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b7a   e007     bz	0x3b8a                	BZ	_00165_DS_
                                           _00211_DS_:
003b7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b7e   0a09     xorlw	0x9                	XORLW	0x09
003b80   e102     bnz	0x3b86               	BNZ	_00213_DS_
003b82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b84   e002     bz	0x3b8a                	BZ	_00165_DS_
                                           _00213_DS_:
                                           ;	.line	390; TCPIP_Stack/Helpers.c	return FALSE;
003b86   6ae8     clrf	0xe8, 0             	CLRF	WREG
003b88   d031     bra	0x3bec               	BRA	_00173_DS_
                                           _00165_DS_:
                                           ;	.line	393; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
003b8a   0e00     movlw	0                  	MOVLW	0x00
003b8c   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
003b8e   5d2b     subwf	0x2b, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
003b90   e10b     bnz	0x3ba8               	BNZ	_00214_DS_
003b92   0e02     movlw	0x2                	MOVLW	0x02
003b94   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003b96   5d2a     subwf	0x2a, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003b98   e107     bnz	0x3ba8               	BNZ	_00214_DS_
003b9a   0e05     movlw	0x5                	MOVLW	0x05
003b9c   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003b9e   5d29     subwf	0x29, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003ba0   e103     bnz	0x3ba8               	BNZ	_00214_DS_
003ba2   0e06     movlw	0x6                	MOVLW	0x06
003ba4   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003ba6   5d28     subwf	0x28, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00214_DS_:
003ba8   e302     bnc	0x3bae               	BNC	_00172_DS_
                                           ;	.line	394; TCPIP_Stack/Helpers.c	return FALSE;
003baa   6ae8     clrf	0xe8, 0             	CLRF	WREG
003bac   d01f     bra	0x3bec               	BRA	_00173_DS_
                                           _00172_DS_:
                                           ;	.line	396; TCPIP_Stack/Helpers.c	IPAddress->v[3] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
003bae   0e03     movlw	0x3                	MOVLW	0x03
003bb0   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
003bb2   0e00     movlw	0                  	MOVLW	0x00
003bb4   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
003bb6   0e00     movlw	0                  	MOVLW	0x00
003bb8   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003bba   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
003bbc   512a     movf	0x2a, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
003bbe   0d64     mullw	0x64               	MULLW	0x64
003bc0   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
003bc2   f000
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003bc4   0102     movlb	0x2                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
003bc6   5129     movf	0x29, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
003bc8   0d0a     mullw	0xa                	MULLW	0x0a
003bca   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003bcc   f001
003bce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003bd0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003bd2   0102     movlb	0x2                	BANKSEL	_StringToIPAddress_dwVal_1_1
003bd4   5128     movf	0x28, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
003bd6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003bd8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003bda   ffe5
003bdc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003bde   ffe9
003be0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003be2   fff3
003be4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003be6   ec28     call	0xbe50, 0           	CALL	__gptrput1
003be8   f05f
                                           ;	.line	398; TCPIP_Stack/Helpers.c	return TRUE;
003bea   0e01     movlw	0x1                	MOVLW	0x01
                                           _00173_DS_:
003bec   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003bee   f00d
003bf0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003bf2   f00c
003bf4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003bf6   f00b
003bf8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003bfa   f00a
003bfc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003bfe   f009
003c00   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003c02   f008
003c04   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003c06   f007
003c08   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003c0a   f006
003c0c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003c0e   f005
003c10   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003c12   f004
003c14   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003c16   f003
003c18   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003c1a   f002
003c1c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003c1e   f001
003c20   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003c22   f000
003c24   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003c26   ffd9
003c28   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__GenerateRandomDWORD	code
                                           _GenerateRandomDWORD:
                                           ;	.line	106; TCPIP_Stack/Helpers.c	DWORD GenerateRandomDWORD(void)
0047f0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0047f2   ffe5
0047f4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0047f6   ffd9
0047f8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0047fa   ffe5
0047fc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0047fe   ffe5
004800   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004802   ffe5
004804   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004806   ffe5
004808   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00480a   ffe5
00480c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00480e   ffe5
004810   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004812   ffe5
004814   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004816   ffe5
004818   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00481a   ffe5
00481c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00481e   ffe5
004820   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004822   ffe5
004824   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004826   ffe5
004828   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00482a   ffe5
00482c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00482e   ffe5
004830   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
004832   ffe5
004834   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
004836   ffe5
004838   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00483a   ffe5
00483c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00483e   ffe5
004840   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
004842   ffe5
004844   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
004846   ffe5
004848   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00484a   ffe5
00484c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00484e   ffe5
004850   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
004852   ffe5
004854   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
004856   ffe5
004858   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
00485a   ffe5
00485c   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
00485e   ffe5
004860   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
004862   ffe5
004864   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
004866   ffe5
004868   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
00486a   ffe5
00486c   c01d     movff	0x1d, 0xfe5        	MOVFF	r0x1d, POSTDEC1
00486e   ffe5
                                           ;	.line	119; TCPIP_Stack/Helpers.c	ADCON0Save = ADCON0;
004870   cfc2     movff	0xfc2, 0           	MOVFF	_ADCON0, r0x00
004872   f000
                                           ;	.line	120; TCPIP_Stack/Helpers.c	ADCON2Save = ADCON2;
004874   cfc0     movff	0xfc0, 0x1         	MOVFF	_ADCON2, r0x01
004876   f001
                                           ;	.line	121; TCPIP_Stack/Helpers.c	T0CONSave = T0CON;
004878   cfd5     movff	0xfd5, 0x2         	MOVFF	_T0CON, r0x02
00487a   f002
                                           ;	.line	122; TCPIP_Stack/Helpers.c	TMR0LSave = TMR0L;
00487c   cfd6     movff	0xfd6, 0x3         	MOVFF	_TMR0L, r0x03
00487e   f003
                                           ;	.line	123; TCPIP_Stack/Helpers.c	TMR0HSave = TMR0H;
004880   cfd7     movff	0xfd7, 0x4         	MOVFF	_TMR0H, r0x04
004882   f004
                                           ;	.line	126; TCPIP_Stack/Helpers.c	ADCON0 = 0x01;	// Turn on the A/D module
004884   0e01     movlw	0x1                	MOVLW	0x01
004886   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	127; TCPIP_Stack/Helpers.c	ADCON2 = 0x3F;	// 20 Tad acquisition, Frc A/D clock used for conversion
004888   0e3f     movlw	0x3f               	MOVLW	0x3f
00488a   6ec0     movwf	0xc0, 0            	MOVWF	_ADCON2
                                           ;	.line	128; TCPIP_Stack/Helpers.c	T0CON = 0x88;	// TMR0ON = 1, no prescalar
00488c   0e88     movlw	0x88               	MOVLW	0x88
00488e   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	130; TCPIP_Stack/Helpers.c	dwTotalTime = 0;
004890   6a05     clrf	0x5, 0              	CLRF	r0x05
004892   6a06     clrf	0x6, 0              	CLRF	r0x06
004894   6a07     clrf	0x7, 0              	CLRF	r0x07
004896   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           ;	.line	131; TCPIP_Stack/Helpers.c	wLastValue = 0;
004898   6a09     clrf	0x9, 0              	CLRF	r0x09
00489a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	132; TCPIP_Stack/Helpers.c	dwRandomResult = rand();
00489c   ecfb     call	0xb7f6, 0           	CALL	_rand
00489e   f05b
0048a0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0048a2   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
0048a4   f00c
0048a6   cff4     movff	0xff4, 0xd         	MOVFF	PRODH, r0x0d
0048a8   f00d
0048aa   cfe9     movff	0xfe9, 0xe         	MOVFF	FSR0L, r0x0e
0048ac   f00e
                                           ;	.line	133; TCPIP_Stack/Helpers.c	while(1)
0048ae   6a0f     clrf	0xf, 0              	CLRF	r0x0f
                                           _00120_DS_:
                                           ;	.line	136; TCPIP_Stack/Helpers.c	TMR0H = 0x00;
0048b0   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	137; TCPIP_Stack/Helpers.c	TMR0L = 0x00;
0048b2   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	138; TCPIP_Stack/Helpers.c	ADCON0bits.GO = 1;
0048b4   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
0048b6   0004     clrwdt                   	clrwdt 
                                           _00108_DS_:
                                           ;	.line	140; TCPIP_Stack/Helpers.c	while(ADCON0bits.GO);
0048b8   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
0048ba   d7fe     bra	0x48b8               	BRA	_00108_DS_
                                           ;	.line	141; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[0] = TMR0L;
0048bc   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
0048be   0102     movlb	0x2                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
0048c0   6f8d     movwf	0x8d, 0x1          	MOVWF	_GenerateRandomDWORD_wTime_1_1, B
                                           ;	.line	142; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[1] = TMR0H;
0048c2   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
0048c4   0102     movlb	0x2                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
0048c6   6f8e     movwf	0x8e, 0x1          	MOVWF	(_GenerateRandomDWORD_wTime_1_1 + 1), B
                                           ;	.line	143; TCPIP_Stack/Helpers.c	w = rand();
0048c8   ecfb     call	0xb7f6, 0           	CALL	_rand
0048ca   f05b
0048cc   6e10     movwf	0x10, 0            	MOVWF	r0x10
0048ce   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
0048d0   f011
0048d2   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
0048d4   f012
0048d6   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
0048d8   f013
                                           ;	.line	146; TCPIP_Stack/Helpers.c	dwTotalTime += wTime;
0048da   c28d     movff	0x28d, 0x12        	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x12
0048dc   f012
0048de   c28e     movff	0x28e, 0x13        	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x13
0048e0   f013
0048e2   6a14     clrf	0x14, 0             	CLRF	r0x14
0048e4   6a15     clrf	0x15, 0             	CLRF	r0x15
0048e6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0048e8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0048ea   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0048ec   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0048ee   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0048f0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0048f2   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0048f4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
                                           ;	.line	147; TCPIP_Stack/Helpers.c	if(dwTotalTime >= GetInstructionClock())
0048f6   0e00     movlw	0                  	MOVLW	0x00
0048f8   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
0048fa   e108     bnz	0x490c               	BNZ	_00130_DS_
0048fc   0e9e     movlw	0x9e               	MOVLW	0x9e
0048fe   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
004900   e105     bnz	0x490c               	BNZ	_00130_DS_
004902   0ef2     movlw	0xf2               	MOVLW	0xf2
004904   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
004906   e102     bnz	0x490c               	BNZ	_00130_DS_
004908   0e1a     movlw	0x1a               	MOVLW	0x1a
00490a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00130_DS_:
00490c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00490e   d048     bra	0x49a0               	BRA	_00112_DS_
                                           ;	.line	149; TCPIP_Stack/Helpers.c	dwRandomResult ^= rand() | (((DWORD)rand())<<15ul) | (((DWORD)rand())<<30ul);
004910   ecfb     call	0xb7f6, 0           	CALL	_rand
004912   f05b
004914   6e12     movwf	0x12, 0            	MOVWF	r0x12
004916   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
004918   f013
00491a   cff4     movff	0xff4, 0x14        	MOVFF	PRODH, r0x14
00491c   f014
00491e   cfe9     movff	0xfe9, 0x15        	MOVFF	FSR0L, r0x15
004920   f015
004922   ecfb     call	0xb7f6, 0           	CALL	_rand
004924   f05b
004926   6e16     movwf	0x16, 0            	MOVWF	r0x16
004928   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00492a   f017
00492c   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
00492e   f018
004930   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
004932   f019
004934   3018     rrcf	0x18, 0, 0          	RRCF	r0x18, W
004936   3017     rrcf	0x17, 0, 0          	RRCF	r0x17, W
004938   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
00493a   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
00493c   321c     rrcf	0x1c, 0x1, 0        	RRCF	r0x1c, F
00493e   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
004940   0b80     andlw	0x80               	ANDLW	0x80
004942   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
004944   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
004946   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
004948   0b7f     andlw	0x7f               	ANDLW	0x7f
00494a   121c     iorwf	0x1c, 0x1, 0       	IORWF	r0x1c, F
00494c   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
00494e   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
004950   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
004952   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
004954   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
004956   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
004958   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
00495a   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
00495c   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
00495e   ecfb     call	0xb7f6, 0           	CALL	_rand
004960   f05b
004962   6e16     movwf	0x16, 0            	MOVWF	r0x16
004964   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
004966   f017
004968   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
00496a   f018
00496c   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
00496e   f019
004970   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
004972   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
004974   0bc0     andlw	0xc0               	ANDLW	0xc0
004976   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
004978   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
00497a   6a1b     clrf	0x1b, 0             	CLRF	r0x1b
00497c   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
00497e   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
004980   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
004982   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
004984   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
004986   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
004988   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
00498a   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
00498c   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
00498e   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
004990   1a0b     xorwf	0xb, 0x1, 0        	XORWF	r0x0b, F
004992   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
004994   1a0c     xorwf	0xc, 0x1, 0        	XORWF	r0x0c, F
004996   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
004998   1a0d     xorwf	0xd, 0x1, 0        	XORWF	r0x0d, F
00499a   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00499c   1a0e     xorwf	0xe, 0x1, 0        	XORWF	r0x0e, F
                                           ;	.line	150; TCPIP_Stack/Helpers.c	break;
00499e   d047     bra	0x4a2e               	BRA	_00121_DS_
                                           _00112_DS_:
                                           ;	.line	154; TCPIP_Stack/Helpers.c	if(wLastValue == wTime)
0049a0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0049a2   0102     movlb	0x2                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
0049a4   198d     xorwf	0x8d, 0, 0x1       	XORWF	_GenerateRandomDWORD_wTime_1_1, W, B
0049a6   e105     bnz	0x49b2               	BNZ	_00135_DS_
0049a8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0049aa   0102     movlb	0x2                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
0049ac   198e     xorwf	0x8e, 0, 0x1       	XORWF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
0049ae   e101     bnz	0x49b2               	BNZ	_00135_DS_
0049b0   d77f     bra	0x48b0               	BRA	_00120_DS_
                                           _00135_DS_:
0049b2   0102     movlb	0x2                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
                                           ;	.line	158; TCPIP_Stack/Helpers.c	srand(w + (wLastValue - wTime));
0049b4   518d     movf	0x8d, 0, 0x1        	MOVF	_GenerateRandomDWORD_wTime_1_1, W, B
0049b6   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
0049b8   6e12     movwf	0x12, 0            	MOVWF	r0x12
0049ba   0102     movlb	0x2                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
0049bc   518e     movf	0x8e, 0, 0x1        	MOVF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
0049be   580a     subwfb	0xa, 0, 0         	SUBWFB	r0x0a, W
0049c0   6e13     movwf	0x13, 0            	MOVWF	r0x13
0049c2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0049c4   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0049c6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0049c8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
0049ca   6a12     clrf	0x12, 0             	CLRF	r0x12
0049cc   6a13     clrf	0x13, 0             	CLRF	r0x13
0049ce   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0049d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049d2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0049d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049d6   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0049d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049da   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0049dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049de   ec20     call	0xbc40, 0           	CALL	_srand
0049e0   f05e
0049e2   0e04     movlw	0x4                	MOVLW	0x04
0049e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	159; TCPIP_Stack/Helpers.c	wLastValue = wTime;
0049e6   c28d     movff	0x28d, 0x9         	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x09
0049e8   f009
0049ea   c28e     movff	0x28e, 0xa         	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x0a
0049ec   f00a
                                           ;	.line	162; TCPIP_Stack/Helpers.c	dwRandomResult <<= 1;
0049ee   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0049f0   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
0049f2   360c     rlcf	0xc, 0x1, 0         	RLCF	r0x0c, F
0049f4   360d     rlcf	0xd, 0x1, 0         	RLCF	r0x0d, F
0049f6   360e     rlcf	0xe, 0x1, 0         	RLCF	r0x0e, F
                                           ;	.line	163; TCPIP_Stack/Helpers.c	if(rand() >= 16384)
0049f8   ecfb     call	0xb7f6, 0           	CALL	_rand
0049fa   f05b
0049fc   6e10     movwf	0x10, 0            	MOVWF	r0x10
0049fe   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
004a00   f011
004a02   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
004a04   f012
004a06   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
004a08   f013
004a0a   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
004a0c   0f80     addlw	0x80               	ADDLW	0x80
004a0e   0f80     addlw	0x80               	ADDLW	0x80
004a10   e108     bnz	0x4a22               	BNZ	_00136_DS_
004a12   0e00     movlw	0                  	MOVLW	0x00
004a14   5c12     subwf	0x12, 0, 0         	SUBWF	r0x12, W
004a16   e105     bnz	0x4a22               	BNZ	_00136_DS_
004a18   0e40     movlw	0x40               	MOVLW	0x40
004a1a   5c11     subwf	0x11, 0, 0         	SUBWF	r0x11, W
004a1c   e102     bnz	0x4a22               	BNZ	_00136_DS_
004a1e   0e00     movlw	0                  	MOVLW	0x00
004a20   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
                                           _00136_DS_:
004a22   e301     bnc	0x4a26               	BNC	_00116_DS_
                                           ;	.line	164; TCPIP_Stack/Helpers.c	dwRandomResult |= 0x1;
004a24   800b     bsf	0xb, 0, 0            	BSF	r0x0b, 0
                                           _00116_DS_:
                                           ;	.line	167; TCPIP_Stack/Helpers.c	if(++vBitCount == 0u)
004a26   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
004a28   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
004a2a   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004a2c   d741     bra	0x48b0               	BRA	_00120_DS_
                                           _00121_DS_:
                                           ;	.line	172; TCPIP_Stack/Helpers.c	ADCON0 = ADCON0Save;
004a2e   c000     movff	0, 0xfc2           	MOVFF	r0x00, _ADCON0
004a30   ffc2
                                           ;	.line	173; TCPIP_Stack/Helpers.c	ADCON2 = ADCON2Save;
004a32   c001     movff	0x1, 0xfc0         	MOVFF	r0x01, _ADCON2
004a34   ffc0
                                           ;	.line	174; TCPIP_Stack/Helpers.c	TMR0H = TMR0HSave;
004a36   c004     movff	0x4, 0xfd7         	MOVFF	r0x04, _TMR0H
004a38   ffd7
                                           ;	.line	175; TCPIP_Stack/Helpers.c	TMR0L = TMR0LSave;
004a3a   c003     movff	0x3, 0xfd6         	MOVFF	r0x03, _TMR0L
004a3c   ffd6
                                           ;	.line	176; TCPIP_Stack/Helpers.c	T0CON = T0CONSave;
004a3e   c002     movff	0x2, 0xfd5         	MOVFF	r0x02, _T0CON
004a40   ffd5
                                           ;	.line	254; TCPIP_Stack/Helpers.c	return dwRandomResult;
004a42   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
004a44   ffe9
004a46   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
004a48   fff4
004a4a   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
004a4c   fff3
004a4e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
004a50   cfe4     movff	0xfe4, 0x1d        	MOVFF	PREINC1, r0x1d
004a52   f01d
004a54   cfe4     movff	0xfe4, 0x1c        	MOVFF	PREINC1, r0x1c
004a56   f01c
004a58   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
004a5a   f01b
004a5c   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
004a5e   f01a
004a60   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
004a62   f019
004a64   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
004a66   f018
004a68   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
004a6a   f017
004a6c   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
004a6e   f016
004a70   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
004a72   f015
004a74   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
004a76   f014
004a78   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
004a7a   f013
004a7c   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
004a7e   f012
004a80   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
004a82   f011
004a84   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
004a86   f010
004a88   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
004a8a   f00f
004a8c   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
004a8e   f00e
004a90   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
004a92   f00d
004a94   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
004a96   f00c
004a98   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
004a9a   f00b
004a9c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004a9e   f00a
004aa0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004aa2   f009
004aa4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004aa6   f008
004aa8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004aaa   f007
004aac   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004aae   f006
004ab0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004ab2   f005
004ab4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004ab6   f004
004ab8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004aba   f003
004abc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004abe   f002
004ac0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004ac2   f001
004ac4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004ac6   f000
004ac8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004aca   ffd9
004acc   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3510 (0x0db6) bytes ( 2.68%)
                                           ;           	 1755 (0x06db) words
                                           ; udata size:	   24 (0x0018) bytes ( 0.62%)
                                           ; access size:	   30 (0x001e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ICMPProcess
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACMemCopyAsync
                                           	extern _MACIsMemCopyDone
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_ICMP_0	udata
                                           _ICMPProcess_dwVal_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ICMP__ICMPProcess	code
                                           _ICMPProcess:
                                           ;	.line	132; TCPIP_Stack/ICMP.c	void ICMPProcess(NODE_INFO *remote, WORD len)
00750c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00750e   ffe5
007510   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007512   ffd9
007514   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007516   ffe5
007518   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00751a   ffe5
00751c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00751e   ffe5
007520   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007522   ffe5
007524   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007526   ffe5
007528   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00752a   ffe5
00752c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00752e   ffe5
007530   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007532   ffe5
007534   0e02     movlw	0x2                	MOVLW	0x02
007536   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007538   f000
00753a   0e03     movlw	0x3                	MOVLW	0x03
00753c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00753e   f001
007540   0e04     movlw	0x4                	MOVLW	0x04
007542   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007544   f002
007546   0e05     movlw	0x5                	MOVLW	0x05
007548   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00754a   f003
00754c   0e06     movlw	0x6                	MOVLW	0x06
00754e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
007550   f004
                                           ;	.line	137; TCPIP_Stack/ICMP.c	MACGetArray((BYTE*)&dwVal, sizeof(dwVal));
007552   0e02     movlw	0x2                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
007554   6e06     movwf	0x6, 0             	MOVWF	r0x06
007556   0e38     movlw	0x38               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
007558   6e05     movwf	0x5, 0             	MOVWF	r0x05
00755a   0e80     movlw	0x80               	MOVLW	0x80
00755c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00755e   0e00     movlw	0                  	MOVLW	0x00
007560   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007562   0e04     movlw	0x4                	MOVLW	0x04
007564   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007566   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007568   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00756a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00756c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00756e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007570   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007572   ecac     call	0x9d58, 0           	CALL	_MACGetArray
007574   f04e
007576   0e05     movlw	0x5                	MOVLW	0x05
007578   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00757a   0102     movlb	0x2                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	140; TCPIP_Stack/ICMP.c	if(dwVal.w[0] == 0x0008u)
00757c   5138     movf	0x38, 0, 0x1        	MOVF	_ICMPProcess_dwVal_1_1, W, B
00757e   0a08     xorlw	0x8                	XORLW	0x08
007580   e103     bnz	0x7588               	BNZ	_00129_DS_
007582   0102     movlb	0x2                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 1)
007584   5139     movf	0x39, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 1), W, B
007586   e001     bz	0x758a                	BZ	_00130_DS_
                                           _00129_DS_:
007588   d07e     bra	0x7686               	BRA	_00119_DS_
                                           _00130_DS_:
                                           ;	.line	146; TCPIP_Stack/ICMP.c	if(MACCalcRxChecksum(0+sizeof(IP_HEADER), len))
00758a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00758c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00758e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007590   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007592   0e00     movlw	0                  	MOVLW	0x00
007594   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007596   0e14     movlw	0x14               	MOVLW	0x14
007598   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00759a   ec16     call	0x8a2c, 0           	CALL	_MACCalcRxChecksum
00759c   f045
00759e   6e05     movwf	0x5, 0             	MOVWF	r0x05
0075a0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0075a2   f006
0075a4   0e04     movlw	0x4                	MOVLW	0x04
0075a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0075a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0075aa   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0075ac   e001     bz	0x75b0                	BZ	_00106_DS_
                                           ;	.line	147; TCPIP_Stack/ICMP.c	return;
0075ae   d06b     bra	0x7686               	BRA	_00119_DS_
                                           _00106_DS_:
0075b0   0102     movlb	0x2                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	150; TCPIP_Stack/ICMP.c	dwVal.v[0] = 0x00;	// Type: 0 (ICMP echo/ping reply)
0075b2   6b38     clrf	0x38, 0x1           	CLRF	_ICMPProcess_dwVal_1_1, B
                                           ;	.line	151; TCPIP_Stack/ICMP.c	dwVal.v[2] += 8;	// Subtract 0x0800 from the checksum
0075b4   0e08     movlw	0x8                	MOVLW	0x08
0075b6   0102     movlb	0x2                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
0075b8   253a     addwf	0x3a, 0, 0x1       	ADDWF	(_ICMPProcess_dwVal_1_1 + 2), W, B
0075ba   6e05     movwf	0x5, 0             	MOVWF	r0x05
0075bc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0075be   0102     movlb	0x2                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
0075c0   6f3a     movwf	0x3a, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           ;	.line	152; TCPIP_Stack/ICMP.c	if(dwVal.v[2] < 8u)
0075c2   c23a     movff	0x23a, 0x6         	MOVFF	(_ICMPProcess_dwVal_1_1 + 2), r0x06
0075c4   f006
0075c6   6a07     clrf	0x7, 0              	CLRF	r0x07
0075c8   0e00     movlw	0                  	MOVLW	0x00
0075ca   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
0075cc   e102     bnz	0x75d2               	BNZ	_00131_DS_
0075ce   0e08     movlw	0x8                	MOVLW	0x08
0075d0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00131_DS_:
0075d2   e20d     bc	0x75ee                	BC	_00111_DS_
                                           ;	.line	154; TCPIP_Stack/ICMP.c	dwVal.v[3]++;
0075d4   c23b     movff	0x23b, 0x5         	MOVFF	(_ICMPProcess_dwVal_1_1 + 3), r0x05
0075d6   f005
0075d8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0075da   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0075dc   0102     movlb	0x2                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
0075de   6f3b     movwf	0x3b, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 3), B
0075e0   0102     movlb	0x2                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
                                           ;	.line	155; TCPIP_Stack/ICMP.c	if(dwVal.v[3] == 0u) dwVal.v[2]++;
0075e2   513b     movf	0x3b, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 3), W, B
0075e4   e104     bnz	0x75ee               	BNZ	_00111_DS_
0075e6   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0075e8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0075ea   0102     movlb	0x2                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
0075ec   6f3a     movwf	0x3a, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           _00111_DS_:
                                           ;	.line	160; TCPIP_Stack/ICMP.c	while(!IPIsTxReady());
0075ee   ecb2     call	0xb364, 0           	CALL	_MACIsTxReady
0075f0   f059
0075f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0075f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0075f6   e0fb     bz	0x75ee                	BZ	_00111_DS_
                                           ;	.line	165; TCPIP_Stack/ICMP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
0075f8   0e1a     movlw	0x1a               	MOVLW	0x1a
0075fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075fc   0e19     movlw	0x19               	MOVLW	0x19
0075fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007600   ecb1     call	0xb162, 0           	CALL	_MACSetWritePtr
007602   f058
007604   0e02     movlw	0x2                	MOVLW	0x02
007606   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	168; TCPIP_Stack/ICMP.c	IPPutHeader(remote, IP_PROT_ICMP, len);
007608   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00760a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00760c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00760e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007610   0e01     movlw	0x1                	MOVLW	0x01
007612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007614   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007616   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007618   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00761a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00761c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00761e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007620   ec32     call	0x6a64, 0           	CALL	_IPPutHeader
007622   f035
007624   0e06     movlw	0x6                	MOVLW	0x06
007626   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; TCPIP_Stack/ICMP.c	MACPutArray((BYTE*)&dwVal, sizeof(dwVal));
007628   0e02     movlw	0x2                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
00762a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00762c   0e38     movlw	0x38               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
00762e   6e00     movwf	0, 0               	MOVWF	r0x00
007630   0e80     movlw	0x80               	MOVLW	0x80
007632   6e02     movwf	0x2, 0             	MOVWF	r0x02
007634   0e00     movlw	0                  	MOVLW	0x00
007636   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007638   0e04     movlw	0x4                	MOVLW	0x04
00763a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00763c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00763e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007640   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007644   5000     movf	0, 0, 0             	MOVF	r0x00, W
007646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007648   eceb     call	0xabd6, 0           	CALL	_MACPutArray
00764a   f055
00764c   0e05     movlw	0x5                	MOVLW	0x05
00764e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; TCPIP_Stack/ICMP.c	MACMemCopyAsync(-1, -1, len-4);
007650   0efc     movlw	0xfc               	MOVLW	0xfc
007652   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
007654   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
007656   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
007658   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00765a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00765c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00765e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007660   0eff     movlw	0xff               	MOVLW	0xff
007662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007664   0eff     movlw	0xff               	MOVLW	0xff
007666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007668   0eff     movlw	0xff               	MOVLW	0xff
00766a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00766c   0eff     movlw	0xff               	MOVLW	0xff
00766e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007670   ec1d     call	0x2c3a, 0           	CALL	_MACMemCopyAsync
007672   f016
007674   0e06     movlw	0x6                	MOVLW	0x06
007676   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00114_DS_:
                                           ;	.line	173; TCPIP_Stack/ICMP.c	while(!MACIsMemCopyDone());
007678   ece1     call	0xbbc2, 0           	CALL	_MACIsMemCopyDone
00767a   f05d
00767c   6e00     movwf	0, 0               	MOVWF	r0x00
00767e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007680   e0fb     bz	0x7678                	BZ	_00114_DS_
                                           ;	.line	176; TCPIP_Stack/ICMP.c	MACFlush();
007682   ec95     call	0xb52a, 0           	CALL	_MACFlush
007684   f05a
                                           _00119_DS_:
007686   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007688   f007
00768a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00768c   f006
00768e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007690   f005
007692   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007694   f004
007696   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007698   f003
00769a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00769c   f002
00769e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0076a0   f001
0076a2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0076a4   f000
0076a6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0076a8   ffd9
0076aa   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  416 (0x01a0) bytes ( 0.32%)
                                           ;           	  208 (0x00d0) words
                                           ; udata size:	    4 (0x0004) bytes ( 0.10%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _IPGetHeader
                                           	global _IPPutHeader
                                           	global _IPSetRxBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput4
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetReadPtrInRx
                                           	extern _MACGetArray
                                           	extern _MACPutHeader
                                           	extern _MACPutArray
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           __Identifier	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_IP_0	udata
                                           _IPHeaderLen	res	1
                                           
                                           udata_IP_1	udata
                                           _IPGetHeader_header_1_1	res	20
                                           
                                           udata_IP_2	udata
                                           _IPGetHeader_CalcChecksum_1_1	res	2
                                           
                                           udata_IP_3	udata
                                           _IPPutHeader_header_1_1	res	20
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_IP__SwapIPHeader	code
                                           _SwapIPHeader:
                                           ;	.line	302; TCPIP_Stack/IP.c	static void SwapIPHeader(IP_HEADER* h)
007c8e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c90   ffe5
007c92   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c94   ffd9
007c96   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007c98   ffe5
007c9a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007c9c   ffe5
007c9e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007ca0   ffe5
007ca2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007ca4   ffe5
007ca6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007ca8   ffe5
007caa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007cac   ffe5
007cae   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007cb0   ffe5
007cb2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
007cb4   ffe5
007cb6   0e02     movlw	0x2                	MOVLW	0x02
007cb8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007cba   f000
007cbc   0e03     movlw	0x3                	MOVLW	0x03
007cbe   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007cc0   f001
007cc2   0e04     movlw	0x4                	MOVLW	0x04
007cc4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007cc6   f002
                                           ;	.line	304; TCPIP_Stack/IP.c	h->TotalLength      = swaps(h->TotalLength);
007cc8   5000     movf	0, 0, 0             	MOVF	r0x00, W
007cca   0f02     addlw	0x2                	ADDLW	0x02
007ccc   6e03     movwf	0x3, 0             	MOVWF	r0x03
007cce   0e00     movlw	0                  	MOVLW	0x00
007cd0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007cd2   6e04     movwf	0x4, 0             	MOVWF	r0x04
007cd4   0e00     movlw	0                  	MOVLW	0x00
007cd6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
007cd8   6e05     movwf	0x5, 0             	MOVWF	r0x05
007cda   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007cdc   ffe9
007cde   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007ce0   fff3
007ce2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007ce4   eccb     call	0xbb96, 0           	CALL	__gptrget2
007ce6   f05d
007ce8   6e06     movwf	0x6, 0             	MOVWF	r0x06
007cea   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007cec   f007
007cee   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cf2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cf6   eca9     call	0xb752, 0           	CALL	_swaps
007cf8   f05b
007cfa   6e06     movwf	0x6, 0             	MOVWF	r0x06
007cfc   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007cfe   f007
007d00   0e02     movlw	0x2                	MOVLW	0x02
007d02   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007d04   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007d06   ffe5
007d08   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
007d0a   fff4
007d0c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007d0e   ffe9
007d10   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007d12   fff3
007d14   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007d16   ec08     call	0xbe10, 0           	CALL	__gptrput2
007d18   f05f
                                           ;	.line	305; TCPIP_Stack/IP.c	h->Identification   = swaps(h->Identification);
007d1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
007d1c   0f04     addlw	0x4                	ADDLW	0x04
007d1e   6e03     movwf	0x3, 0             	MOVWF	r0x03
007d20   0e00     movlw	0                  	MOVLW	0x00
007d22   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007d24   6e04     movwf	0x4, 0             	MOVWF	r0x04
007d26   0e00     movlw	0                  	MOVLW	0x00
007d28   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
007d2a   6e05     movwf	0x5, 0             	MOVWF	r0x05
007d2c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007d2e   ffe9
007d30   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007d32   fff3
007d34   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007d36   eccb     call	0xbb96, 0           	CALL	__gptrget2
007d38   f05d
007d3a   6e06     movwf	0x6, 0             	MOVWF	r0x06
007d3c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007d3e   f007
007d40   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
007d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d44   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
007d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d48   eca9     call	0xb752, 0           	CALL	_swaps
007d4a   f05b
007d4c   6e06     movwf	0x6, 0             	MOVWF	r0x06
007d4e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
007d50   f007
007d52   0e02     movlw	0x2                	MOVLW	0x02
007d54   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007d56   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
007d58   ffe5
007d5a   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
007d5c   fff4
007d5e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
007d60   ffe9
007d62   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
007d64   fff3
007d66   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
007d68   ec08     call	0xbe10, 0           	CALL	__gptrput2
007d6a   f05f
                                           ;	.line	306; TCPIP_Stack/IP.c	h->HeaderChecksum   = swaps(h->HeaderChecksum);
007d6c   0e0a     movlw	0xa                	MOVLW	0x0a
007d6e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
007d70   0e00     movlw	0                  	MOVLW	0x00
007d72   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
007d74   0e00     movlw	0                  	MOVLW	0x00
007d76   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
007d78   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007d7a   ffe9
007d7c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007d7e   fff3
007d80   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007d82   eccb     call	0xbb96, 0           	CALL	__gptrget2
007d84   f05d
007d86   6e03     movwf	0x3, 0             	MOVWF	r0x03
007d88   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007d8a   f004
007d8c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007d8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007d92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d94   eca9     call	0xb752, 0           	CALL	_swaps
007d96   f05b
007d98   6e03     movwf	0x3, 0             	MOVWF	r0x03
007d9a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
007d9c   f004
007d9e   0e02     movlw	0x2                	MOVLW	0x02
007da0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007da2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007da4   ffe5
007da6   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
007da8   fff4
007daa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007dac   ffe9
007dae   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007db0   fff3
007db2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007db4   ec08     call	0xbe10, 0           	CALL	__gptrput2
007db6   f05f
007db8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
007dba   f007
007dbc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
007dbe   f006
007dc0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007dc2   f005
007dc4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007dc6   f004
007dc8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007dca   f003
007dcc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007dce   f002
007dd0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007dd2   f001
007dd4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007dd6   f000
007dd8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007dda   ffd9
007ddc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPSetRxBuffer	code
                                           _IPSetRxBuffer:
                                           ;	.line	295; TCPIP_Stack/IP.c	void IPSetRxBuffer(WORD Offset) 
00b650   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b652   ffe5
00b654   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b656   ffd9
00b658   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b65a   ffe5
00b65c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b65e   ffe5
00b660   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b662   ffe5
00b664   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b666   ffe5
00b668   0e02     movlw	0x2                	MOVLW	0x02
00b66a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b66c   f000
00b66e   0e03     movlw	0x3                	MOVLW	0x03
00b670   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b672   f001
                                           ;	.line	297; TCPIP_Stack/IP.c	MACSetReadPtrInRx(Offset+IPHeaderLen);
00b674   c2b2     movff	0x2b2, 0x2         	MOVFF	_IPHeaderLen, r0x02
00b676   f002
00b678   6a03     clrf	0x3, 0              	CLRF	r0x03
00b67a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b67c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00b67e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00b680   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00b682   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b684   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b686   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b68a   ec02     call	0xa404, 0           	CALL	_MACSetReadPtrInRx
00b68c   f052
00b68e   0e02     movlw	0x2                	MOVLW	0x02
00b690   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00b692   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b694   f003
00b696   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b698   f002
00b69a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b69c   f001
00b69e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b6a0   f000
00b6a2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b6a4   ffd9
00b6a6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPPutHeader	code
                                           _IPPutHeader:
                                           ;	.line	247; TCPIP_Stack/IP.c	WORD IPPutHeader(NODE_INFO *remote,
006a64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006a66   ffe5
006a68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006a6a   ffd9
006a6c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006a6e   ffe5
006a70   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006a72   ffe5
006a74   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006a76   ffe5
006a78   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006a7a   ffe5
006a7c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006a7e   ffe5
006a80   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006a82   ffe5
006a84   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006a86   ffe5
006a88   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006a8a   ffe5
006a8c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006a8e   ffe5
006a90   0e02     movlw	0x2                	MOVLW	0x02
006a92   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006a94   f000
006a96   0e03     movlw	0x3                	MOVLW	0x03
006a98   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006a9a   f001
006a9c   0e04     movlw	0x4                	MOVLW	0x04
006a9e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006aa0   f002
006aa2   0e05     movlw	0x5                	MOVLW	0x05
006aa4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006aa6   f003
006aa8   0e06     movlw	0x6                	MOVLW	0x06
006aaa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006aac   f004
006aae   0e07     movlw	0x7                	MOVLW	0x07
006ab0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
006ab2   f005
                                           ;	.line	253; TCPIP_Stack/IP.c	IPHeaderLen = sizeof(IP_HEADER);
006ab4   0e14     movlw	0x14               	MOVLW	0x14
006ab6   0102     movlb	0x2                	BANKSEL	_IPHeaderLen
006ab8   6fb2     movwf	0xb2, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	255; TCPIP_Stack/IP.c	header.VersionIHL       = IP_VERSION | IP_IHL;
006aba   0e45     movlw	0x45               	MOVLW	0x45
006abc   0109     movlb	0x9                	BANKSEL	_IPPutHeader_header_1_1
006abe   6fea     movwf	0xea, 0x1          	MOVWF	_IPPutHeader_header_1_1, B
006ac0   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 1)
                                           ;	.line	256; TCPIP_Stack/IP.c	header.TypeOfService    = IP_SERVICE;
006ac2   6beb     clrf	0xeb, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 1), B
                                           ;	.line	257; TCPIP_Stack/IP.c	header.TotalLength      = sizeof(header) + len;
006ac4   0e14     movlw	0x14               	MOVLW	0x14
006ac6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
006ac8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006aca   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006acc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006ace   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 2)
006ad0   6fec     movwf	0xec, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 2), B
006ad2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006ad4   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 3)
006ad6   6fed     movwf	0xed, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 3), B
006ad8   010e     movlb	0xe                	BANKSEL	__Identifier
                                           ;	.line	258; TCPIP_Stack/IP.c	header.Identification   = ++_Identifier;
006ada   2b53     incf	0x53, 0x1, 0x1      	INCF	__Identifier, F, B
006adc   e302     bnc	0x6ae2               	BNC	_10137_DS_
006ade   010e     movlb	0xe                	BANKSEL	(__Identifier + 1)
006ae0   2b54     incf	0x54, 0x1, 0x1      	INCF	(__Identifier + 1), F, B
                                           _10137_DS_:
006ae2   010e     movlb	0xe                	BANKSEL	__Identifier
006ae4   5153     movf	0x53, 0, 0x1        	MOVF	__Identifier, W, B
006ae6   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 4)
006ae8   6fee     movwf	0xee, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 4), B
006aea   010e     movlb	0xe                	BANKSEL	(__Identifier + 1)
006aec   5154     movf	0x54, 0, 0x1        	MOVF	(__Identifier + 1), W, B
006aee   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 5)
006af0   6fef     movwf	0xef, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 5), B
006af2   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 6)
                                           ;	.line	259; TCPIP_Stack/IP.c	header.FragmentInfo     = 0;
006af4   6bf0     clrf	0xf0, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 6), B
006af6   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 7)
006af8   6bf1     clrf	0xf1, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 7), B
                                           ;	.line	260; TCPIP_Stack/IP.c	header.TimeToLive       = MY_IP_TTL;
006afa   0e64     movlw	0x64               	MOVLW	0x64
006afc   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 8)
006afe   6ff2     movwf	0xf2, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 8), B
                                           ;	.line	261; TCPIP_Stack/IP.c	header.Protocol         = protocol;
006b00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006b02   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 9)
006b04   6ff3     movwf	0xf3, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 9), B
006b06   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
                                           ;	.line	262; TCPIP_Stack/IP.c	header.HeaderChecksum   = 0;
006b08   6bf4     clrf	0xf4, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 10), B
006b0a   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
006b0c   6bf5     clrf	0xf5, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 11), B
006b0e   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	264; TCPIP_Stack/IP.c	header.SourceAddress.Val 	= AppConfig.MyIPAddr.Val;
006b10   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
006b12   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 12)
006b14   6ff6     movwf	0xf6, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 12), B
006b16   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
006b18   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
006b1a   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 13)
006b1c   6ff7     movwf	0xf7, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 13), B
006b1e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
006b20   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
006b22   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 14)
006b24   6ff8     movwf	0xf8, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 14), B
006b26   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
006b28   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
006b2a   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 15)
006b2c   6ff9     movwf	0xf9, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 15), B
                                           ;	.line	266; TCPIP_Stack/IP.c	header.DestAddress.Val = remote->IPAddr.Val;
006b2e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006b30   ffe9
006b32   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006b34   fff3
006b36   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006b38   ec40     call	0xba80, 0           	CALL	__gptrget4
006b3a   f05d
006b3c   6e03     movwf	0x3, 0             	MOVWF	r0x03
006b3e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
006b40   f006
006b42   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
006b44   f007
006b46   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
006b48   f008
006b4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006b4c   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 16)
006b4e   6ffa     movwf	0xfa, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 16), B
006b50   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006b52   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 17)
006b54   6ffb     movwf	0xfb, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 17), B
006b56   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006b58   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 18)
006b5a   6ffc     movwf	0xfc, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 18), B
006b5c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006b5e   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 19)
006b60   6ffd     movwf	0xfd, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 19), B
                                           ;	.line	268; TCPIP_Stack/IP.c	SwapIPHeader(&header);
006b62   0e09     movlw	0x9                	MOVLW	HIGH(_IPPutHeader_header_1_1)
006b64   6e06     movwf	0x6, 0             	MOVWF	r0x06
006b66   0eea     movlw	0xea               	MOVLW	LOW(_IPPutHeader_header_1_1)
006b68   6e03     movwf	0x3, 0             	MOVWF	r0x03
006b6a   0e80     movlw	0x80               	MOVLW	0x80
006b6c   6e07     movwf	0x7, 0             	MOVWF	r0x07
006b6e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006b70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b72   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006b74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b76   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b7a   ec47     call	0x7c8e, 0           	CALL	_SwapIPHeader
006b7c   f03e
006b7e   0e03     movlw	0x3                	MOVLW	0x03
006b80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; TCPIP_Stack/IP.c	header.HeaderChecksum   = CalcIPChecksum((BYTE*)&header, sizeof(header));
006b82   0e09     movlw	0x9                	MOVLW	HIGH(_IPPutHeader_header_1_1)
006b84   6e06     movwf	0x6, 0             	MOVWF	r0x06
006b86   0eea     movlw	0xea               	MOVLW	LOW(_IPPutHeader_header_1_1)
006b88   6e03     movwf	0x3, 0             	MOVWF	r0x03
006b8a   0e80     movlw	0x80               	MOVLW	0x80
006b8c   6e07     movwf	0x7, 0             	MOVWF	r0x07
006b8e   0e00     movlw	0                  	MOVLW	0x00
006b90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b92   0e14     movlw	0x14               	MOVLW	0x14
006b94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b96   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006b98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b9a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b9e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006ba0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ba2   eccc     call	0x2f98, 0           	CALL	_CalcIPChecksum
006ba4   f017
006ba6   6e03     movwf	0x3, 0             	MOVWF	r0x03
006ba8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
006baa   f006
006bac   0e05     movlw	0x5                	MOVLW	0x05
006bae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006bb0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006bb2   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
006bb4   6ff4     movwf	0xf4, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 10), B
006bb6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006bb8   0109     movlb	0x9                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
006bba   6ff5     movwf	0xf5, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 11), B
                                           ;	.line	272; TCPIP_Stack/IP.c	MACPutHeader(&remote->MACAddr, MAC_IP, (sizeof(header)+len));
006bbc   0e04     movlw	0x4                	MOVLW	0x04
006bbe   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006bc0   0e00     movlw	0                  	MOVLW	0x00
006bc2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006bc4   0e00     movlw	0                  	MOVLW	0x00
006bc6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006bc8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bcc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bd0   0e00     movlw	0                  	MOVLW	0x00
006bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bd4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bd8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
006bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006be0   ec7d     call	0x82fa, 0           	CALL	_MACPutHeader
006be2   f041
006be4   0e06     movlw	0x6                	MOVLW	0x06
006be6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	273; TCPIP_Stack/IP.c	MACPutArray((BYTE*)&header, sizeof(header));
006be8   0e09     movlw	0x9                	MOVLW	HIGH(_IPPutHeader_header_1_1)
006bea   6e01     movwf	0x1, 0             	MOVWF	r0x01
006bec   0eea     movlw	0xea               	MOVLW	LOW(_IPPutHeader_header_1_1)
006bee   6e00     movwf	0, 0               	MOVWF	r0x00
006bf0   0e80     movlw	0x80               	MOVLW	0x80
006bf2   6e02     movwf	0x2, 0             	MOVWF	r0x02
006bf4   0e00     movlw	0                  	MOVLW	0x00
006bf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bf8   0e14     movlw	0x14               	MOVLW	0x14
006bfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bfc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006bfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c00   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006c02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c04   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c08   eceb     call	0xabd6, 0           	CALL	_MACPutArray
006c0a   f055
006c0c   0e05     movlw	0x5                	MOVLW	0x05
006c0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	275; TCPIP_Stack/IP.c	return 0x0000;
006c10   6af3     clrf	0xf3, 0             	CLRF	PRODL
006c12   6ae8     clrf	0xe8, 0             	CLRF	WREG
006c14   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006c16   f008
006c18   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006c1a   f007
006c1c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006c1e   f006
006c20   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006c22   f005
006c24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006c26   f004
006c28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006c2a   f003
006c2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006c2e   f002
006c30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006c32   f001
006c34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006c36   f000
006c38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006c3a   ffd9
006c3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPGetHeader	code
                                           _IPGetHeader:
                                           ;	.line	136; TCPIP_Stack/IP.c	BOOL IPGetHeader(IP_ADDR *localIP,
005990   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005992   ffe5
005994   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005996   ffd9
005998   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00599a   ffe5
00599c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00599e   ffe5
0059a0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0059a2   ffe5
0059a4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0059a6   ffe5
0059a8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0059aa   ffe5
0059ac   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0059ae   ffe5
0059b0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0059b2   ffe5
0059b4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0059b6   ffe5
0059b8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0059ba   ffe5
0059bc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0059be   ffe5
0059c0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0059c2   ffe5
0059c4   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0059c6   ffe5
0059c8   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0059ca   ffe5
0059cc   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0059ce   ffe5
0059d0   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0059d2   ffe5
0059d4   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0059d6   ffe5
0059d8   0e02     movlw	0x2                	MOVLW	0x02
0059da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0059dc   f000
0059de   0e03     movlw	0x3                	MOVLW	0x03
0059e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0059e2   f001
0059e4   0e04     movlw	0x4                	MOVLW	0x04
0059e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0059e8   f002
0059ea   0e05     movlw	0x5                	MOVLW	0x05
0059ec   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0059ee   f003
0059f0   0e06     movlw	0x6                	MOVLW	0x06
0059f2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0059f4   f004
0059f6   0e07     movlw	0x7                	MOVLW	0x07
0059f8   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0059fa   f005
0059fc   0e08     movlw	0x8                	MOVLW	0x08
0059fe   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
005a00   f006
005a02   0e09     movlw	0x9                	MOVLW	0x09
005a04   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
005a06   f007
005a08   0e0a     movlw	0xa                	MOVLW	0x0a
005a0a   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
005a0c   f008
005a0e   0e0b     movlw	0xb                	MOVLW	0x0b
005a10   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
005a12   f009
005a14   0e0c     movlw	0xc                	MOVLW	0x0c
005a16   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
005a18   f00a
005a1a   0e0d     movlw	0xd                	MOVLW	0x0d
005a1c   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
005a1e   f00b
                                           ;	.line	153; TCPIP_Stack/IP.c	MACGetArray((BYTE*)&header, sizeof(header));
005a20   0e01     movlw	0x1                	MOVLW	HIGH(_IPGetHeader_header_1_1)
005a22   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
005a24   0eea     movlw	0xea               	MOVLW	LOW(_IPGetHeader_header_1_1)
005a26   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005a28   0e80     movlw	0x80               	MOVLW	0x80
005a2a   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
005a2c   0e00     movlw	0                  	MOVLW	0x00
005a2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a30   0e14     movlw	0x14               	MOVLW	0x14
005a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a34   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
005a36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a38   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a3c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a40   ecac     call	0x9d58, 0           	CALL	_MACGetArray
005a42   f04e
005a44   0e05     movlw	0x5                	MOVLW	0x05
005a46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	156; TCPIP_Stack/IP.c	if((header.VersionIHL & 0xf0) != IP_VERSION) return FALSE;
005a48   0ef0     movlw	0xf0               	MOVLW	0xf0
005a4a   0101     movlb	0x1                	BANKSEL	_IPGetHeader_header_1_1
005a4c   15ea     andwf	0xea, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
005a4e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005a50   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005a52   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005a54   0a40     xorlw	0x40               	XORLW	0x40
005a56   e102     bnz	0x5a5c               	BNZ	_00121_DS_
005a58   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005a5a   e002     bz	0x5a60                	BZ	_00106_DS_
                                           _00121_DS_:
005a5c   6ae8     clrf	0xe8, 0             	CLRF	WREG
005a5e   d0a0     bra	0x5ba0               	BRA	_00113_DS_
                                           _00106_DS_:
005a60   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 6)
                                           ;	.line	160; TCPIP_Stack/IP.c	if(header.FragmentInfo & 0xFF1F) return FALSE;
005a62   51f0     movf	0xf0, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 6), W, B
005a64   0b1f     andlw	0x1f               	ANDLW	0x1f
005a66   e103     bnz	0x5a6e               	BNZ	_00122_DS_
005a68   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 7)
005a6a   51f1     movf	0xf1, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 7), W, B
005a6c   e002     bz	0x5a72                	BZ	_00108_DS_
                                           _00122_DS_:
005a6e   6ae8     clrf	0xe8, 0             	CLRF	WREG
005a70   d097     bra	0x5ba0               	BRA	_00113_DS_
                                           _00108_DS_:
                                           ;	.line	162; TCPIP_Stack/IP.c	IPHeaderLen = (header.VersionIHL & 0x0f) << 2;
005a72   0e0f     movlw	0xf                	MOVLW	0x0f
005a74   0101     movlb	0x1                	BANKSEL	_IPGetHeader_header_1_1
005a76   15ea     andwf	0xea, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
005a78   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005a7a   440c     rlncf	0xc, 0, 0          	RLNCF	r0x0c, W
005a7c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005a7e   0bfc     andlw	0xfc               	ANDLW	0xfc
005a80   0102     movlb	0x2                	BANKSEL	_IPHeaderLen
005a82   6fb2     movwf	0xb2, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	169; TCPIP_Stack/IP.c	CalcChecksum.Val = MACCalcRxChecksum(0, IPHeaderLen);
005a84   c2b2     movff	0x2b2, 0xc         	MOVFF	_IPHeaderLen, r0x0c
005a86   f00c
005a88   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005a8a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005a8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a8e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005a90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a92   0e00     movlw	0                  	MOVLW	0x00
005a94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a96   0e00     movlw	0                  	MOVLW	0x00
005a98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a9a   ec16     call	0x8a2c, 0           	CALL	_MACCalcRxChecksum
005a9c   f045
005a9e   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005aa0   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
005aa2   f00d
005aa4   0e04     movlw	0x4                	MOVLW	0x04
005aa6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005aa8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005aaa   0102     movlb	0x2                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
005aac   6f95     movwf	0x95, 0x1          	MOVWF	_IPGetHeader_CalcChecksum_1_1, B
005aae   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005ab0   0102     movlb	0x2                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
005ab2   6f96     movwf	0x96, 0x1          	MOVWF	(_IPGetHeader_CalcChecksum_1_1 + 1), B
                                           ;	.line	172; TCPIP_Stack/IP.c	MACSetReadPtrInRx(IPHeaderLen);
005ab4   c2b2     movff	0x2b2, 0xc         	MOVFF	_IPHeaderLen, r0x0c
005ab6   f00c
005ab8   6a0d     clrf	0xd, 0              	CLRF	r0x0d
005aba   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005abc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005abe   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ac2   ec02     call	0xa404, 0           	CALL	_MACSetReadPtrInRx
005ac4   f052
005ac6   0e02     movlw	0x2                	MOVLW	0x02
005ac8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005aca   0102     movlb	0x2                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
                                           ;	.line	174; TCPIP_Stack/IP.c	if(CalcChecksum.Val)
005acc   5195     movf	0x95, 0, 0x1        	MOVF	_IPGetHeader_CalcChecksum_1_1, W, B
005ace   0102     movlb	0x2                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
005ad0   1196     iorwf	0x96, 0, 0x1       	IORWF	(_IPGetHeader_CalcChecksum_1_1 + 1), W, B
005ad2   e002     bz	0x5ad8                	BZ	_00110_DS_
                                           ;	.line	209; TCPIP_Stack/IP.c	return FALSE;
005ad4   6ae8     clrf	0xe8, 0             	CLRF	WREG
005ad6   d064     bra	0x5ba0               	BRA	_00113_DS_
                                           _00110_DS_:
                                           ;	.line	213; TCPIP_Stack/IP.c	SwapIPHeader(&header);
005ad8   0e01     movlw	0x1                	MOVLW	HIGH(_IPGetHeader_header_1_1)
005ada   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
005adc   0eea     movlw	0xea               	MOVLW	LOW(_IPGetHeader_header_1_1)
005ade   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
005ae0   0e80     movlw	0x80               	MOVLW	0x80
005ae2   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
005ae4   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
005ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ae8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
005aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005aec   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
005aee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005af0   ec47     call	0x7c8e, 0           	CALL	_SwapIPHeader
005af2   f03e
005af4   0e03     movlw	0x3                	MOVLW	0x03
005af6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; TCPIP_Stack/IP.c	if ( localIP ) localIP->Val = header.DestAddress.Val;
005af8   5000     movf	0, 0, 0             	MOVF	r0x00, W
005afa   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
005afc   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
005afe   e017     bz	0x5b2e                	BZ	_00112_DS_
005b00   c1fa     movff	0x1fa, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 16), r0x0c
005b02   f00c
005b04   c1fb     movff	0x1fb, 0xd         	MOVFF	(_IPGetHeader_header_1_1 + 17), r0x0d
005b06   f00d
005b08   c1fc     movff	0x1fc, 0xe         	MOVFF	(_IPGetHeader_header_1_1 + 18), r0x0e
005b0a   f00e
005b0c   c1fd     movff	0x1fd, 0xf         	MOVFF	(_IPGetHeader_header_1_1 + 19), r0x0f
005b0e   f00f
005b10   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
005b12   ffe5
005b14   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
005b16   fff4
005b18   c00e     movff	0xe, 0xff6         	MOVFF	r0x0e, TBLPTRL
005b1a   fff6
005b1c   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
005b1e   fff7
005b20   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005b22   ffe9
005b24   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005b26   fff3
005b28   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005b2a   ec86     call	0xbd0c, 0           	CALL	__gptrput4
005b2c   f05e
                                           _00112_DS_:
                                           ;	.line	219; TCPIP_Stack/IP.c	remote->IPAddr.Val  = header.SourceAddress.Val;
005b2e   c1f6     movff	0x1f6, 0           	MOVFF	(_IPGetHeader_header_1_1 + 12), r0x00
005b30   f000
005b32   c1f7     movff	0x1f7, 0x1         	MOVFF	(_IPGetHeader_header_1_1 + 13), r0x01
005b34   f001
005b36   c1f8     movff	0x1f8, 0x2         	MOVFF	(_IPGetHeader_header_1_1 + 14), r0x02
005b38   f002
005b3a   c1f9     movff	0x1f9, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 15), r0x0c
005b3c   f00c
005b3e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005b40   ffe5
005b42   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
005b44   fff4
005b46   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
005b48   fff6
005b4a   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
005b4c   fff7
005b4e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005b50   ffe9
005b52   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005b54   fff3
005b56   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005b58   ec86     call	0xbd0c, 0           	CALL	__gptrput4
005b5a   f05e
                                           ;	.line	220; TCPIP_Stack/IP.c	*protocol           = header.Protocol;
005b5c   c1f3     movff	0x1f3, 0           	MOVFF	(_IPGetHeader_header_1_1 + 9), r0x00
005b5e   f000
005b60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005b62   ffe5
005b64   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
005b66   ffe9
005b68   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005b6a   fff3
005b6c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005b6e   ec28     call	0xbe50, 0           	CALL	__gptrput1
005b70   f05f
                                           ;	.line	221; TCPIP_Stack/IP.c	*len 		= header.TotalLength - IPHeaderLen;
005b72   c2b2     movff	0x2b2, 0           	MOVFF	_IPHeaderLen, r0x00
005b74   f000
005b76   6a01     clrf	0x1, 0              	CLRF	r0x01
005b78   5000     movf	0, 0, 0             	MOVF	r0x00, W
005b7a   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 2)
005b7c   5dec     subwf	0xec, 0, 0x1       	SUBWF	(_IPGetHeader_header_1_1 + 2), W, B
005b7e   6e00     movwf	0, 0               	MOVWF	r0x00
005b80   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005b82   0101     movlb	0x1                	BANKSEL	(_IPGetHeader_header_1_1 + 3)
005b84   59ed     subwfb	0xed, 0, 0x1      	SUBWFB	(_IPGetHeader_header_1_1 + 3), W, B
005b86   6e01     movwf	0x1, 0             	MOVWF	r0x01
005b88   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005b8a   ffe5
005b8c   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
005b8e   fff4
005b90   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
005b92   ffe9
005b94   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
005b96   fff3
005b98   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
005b9a   ec08     call	0xbe10, 0           	CALL	__gptrput2
005b9c   f05f
                                           ;	.line	223; TCPIP_Stack/IP.c	return TRUE;
005b9e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00113_DS_:
005ba0   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
005ba2   f00f
005ba4   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
005ba6   f00e
005ba8   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
005baa   f00d
005bac   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
005bae   f00c
005bb0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
005bb2   f00b
005bb4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
005bb6   f00a
005bb8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005bba   f009
005bbc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005bbe   f008
005bc0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005bc2   f007
005bc4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005bc6   f006
005bc8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005bca   f005
005bcc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005bce   f004
005bd0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005bd2   f003
005bd4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005bd6   f002
005bd8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005bda   f001
005bdc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005bde   f000
005be0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005be2   ffd9
005be4   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   43 (0x002b) bytes ( 1.12%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
00a6dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a6de   ffe5
00a6e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a6e2   ffd9
00a6e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a6e6   ffe5
00a6e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a6ea   ffe5
00a6ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a6ee   ffe5
00a6f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a6f2   ffe5
00a6f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00a6f6   ffe5
00a6f8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00a6fa   ffe5
00a6fc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00a6fe   ffe5
00a700   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00a702   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
00a704   0e01     movlw	0x1                	MOVLW	0x01
00a706   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a708   0e00     movlw	0                  	MOVLW	0x00
00a70a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a70c   ecc8     call	0xb590, 0           	CALL	_LCDWrite
00a70e   f05a
00a710   0e02     movlw	0x2                	MOVLW	0x02
00a712   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00a714   0e48     movlw	0x48               	MOVLW	0x48
00a716   6e00     movwf	0, 0               	MOVWF	r0x00
00a718   0e0d     movlw	0xd                	MOVLW	0x0d
00a71a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00a71c   6a02     clrf	0x2, 0              	CLRF	r0x02
00a71e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
00a720   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00a722   f004
00a724   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00a726   f005
00a728   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00a72a   f006
00a72c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00a72e   f007
00a730   0eff     movlw	0xff               	MOVLW	0xff
00a732   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a734   0eff     movlw	0xff               	MOVLW	0xff
00a736   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a738   0eff     movlw	0xff               	MOVLW	0xff
00a73a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00a73c   0eff     movlw	0xff               	MOVLW	0xff
00a73e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00a740   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00a742   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00a744   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00a746   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00a748   e1eb     bnz	0xa720               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
00a74a   0e00     movlw	0                  	MOVLW	0x00
00a74c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a74e   0e20     movlw	0x20               	MOVLW	0x20
00a750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a752   0e20     movlw	0x20               	MOVLW	0x20
00a754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a756   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00a758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a75a   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
00a75c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a75e   ecd5     call	0xa1aa, 0           	CALL	_memset
00a760   f050
00a762   0e05     movlw	0x5                	MOVLW	0x05
00a764   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00a766   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00a768   f007
00a76a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00a76c   f006
00a76e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00a770   f005
00a772   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00a774   f004
00a776   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a778   f003
00a77a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a77c   f002
00a77e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00a780   f001
00a782   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00a784   f000
00a786   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00a788   ffd9
00a78a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
00500c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00500e   ffe5
005010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005012   ffd9
005014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005016   ffe5
005018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00501a   ffe5
00501c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00501e   ffe5
005020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005022   ffe5
005024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005026   ffe5
005028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00502a   ffe5
00502c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00502e   ffe5
005030   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005032   ffe5
005034   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005036   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
005038   0e02     movlw	0x2                	MOVLW	0x02
00503a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00503c   0e00     movlw	0                  	MOVLW	0x00
00503e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005040   ecc8     call	0xb590, 0           	CALL	_LCDWrite
005042   f05a
005044   0e02     movlw	0x2                	MOVLW	0x02
005046   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
005048   0e48     movlw	0x48               	MOVLW	0x48
00504a   6e00     movwf	0, 0               	MOVWF	r0x00
00504c   0e0d     movlw	0xd                	MOVLW	0x0d
00504e   6e01     movwf	0x1, 0             	MOVWF	r0x01
005050   6a02     clrf	0x2, 0              	CLRF	r0x02
005052   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
005054   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
005056   f004
005058   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00505a   f005
00505c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00505e   f006
005060   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005062   f007
005064   0eff     movlw	0xff               	MOVLW	0xff
005066   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005068   0eff     movlw	0xff               	MOVLW	0xff
00506a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00506c   0eff     movlw	0xff               	MOVLW	0xff
00506e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005070   0eff     movlw	0xff               	MOVLW	0xff
005072   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005074   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005076   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005078   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00507a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00507c   e1eb     bnz	0x5054               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00507e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
005080   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005082   f001
005084   6a02     clrf	0x2, 0              	CLRF	r0x02
005086   0e00     movlw	0                  	MOVLW	0x00
005088   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00508a   e102     bnz	0x5090               	BNZ	_00297_DS_
00508c   0e10     movlw	0x10               	MOVLW	0x10
00508e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
005090   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005092   d057     bra	0x5142               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
005094   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
005096   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005098   6e01     movwf	0x1, 0             	MOVWF	r0x01
00509a   6a02     clrf	0x2, 0              	CLRF	r0x02
00509c   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00509e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0050a0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0050a2   ffe9
0050a4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0050a6   ffea
0050a8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0050aa   f001
0050ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0050ae   e119     bnz	0x50e2               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0050b0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0050b2   f001
                                           _00253_DS_:
0050b4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0050b6   f002
0050b8   6a03     clrf	0x3, 0              	CLRF	r0x03
0050ba   0e00     movlw	0                  	MOVLW	0x00
0050bc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0050be   e102     bnz	0x50c4               	BNZ	_00298_DS_
0050c0   0e10     movlw	0x10               	MOVLW	0x10
0050c2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0050c4   e20e     bc	0x50e2                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0050c6   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0050c8   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0050ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0050cc   6a03     clrf	0x3, 0              	CLRF	r0x03
0050ce   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0050d0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0050d2   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0050d4   ffe9
0050d6   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0050d8   ffea
0050da   0e20     movlw	0x20               	MOVLW	0x20
0050dc   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0050de   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0050e0   d7e9     bra	0x50b4               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0050e2   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0050e4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0050e6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0050e8   6a02     clrf	0x2, 0              	CLRF	r0x02
0050ea   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0050ec   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0050ee   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0050f0   ffe9
0050f2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0050f4   ffea
0050f6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0050f8   f001
0050fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0050fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0050fe   0e01     movlw	0x1                	MOVLW	0x01
005100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005102   ecc8     call	0xb590, 0           	CALL	_LCDWrite
005104   f05a
005106   0e02     movlw	0x2                	MOVLW	0x02
005108   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00510a   0e55     movlw	0x55               	MOVLW	0x55
00510c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00510e   6a02     clrf	0x2, 0              	CLRF	r0x02
005110   6a03     clrf	0x3, 0              	CLRF	r0x03
005112   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
005114   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005116   f005
005118   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00511a   f006
00511c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00511e   f007
005120   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
005122   f008
005124   0eff     movlw	0xff               	MOVLW	0xff
005126   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005128   0eff     movlw	0xff               	MOVLW	0xff
00512a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00512c   0eff     movlw	0xff               	MOVLW	0xff
00512e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005130   0eff     movlw	0xff               	MOVLW	0xff
005132   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005134   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005136   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005138   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00513a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00513c   e1eb     bnz	0x5114               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00513e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
005140   d79f     bra	0x5080               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
005142   0ec0     movlw	0xc0               	MOVLW	0xc0
005144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005146   0e00     movlw	0                  	MOVLW	0x00
005148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00514a   ecc8     call	0xb590, 0           	CALL	_LCDWrite
00514c   f05a
00514e   0e02     movlw	0x2                	MOVLW	0x02
005150   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
005152   0e55     movlw	0x55               	MOVLW	0x55
005154   6e00     movwf	0, 0               	MOVWF	r0x00
005156   6a01     clrf	0x1, 0              	CLRF	r0x01
005158   6a02     clrf	0x2, 0              	CLRF	r0x02
00515a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00515c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00515e   f004
005160   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005162   f005
005164   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005166   f006
005168   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00516a   f007
00516c   0eff     movlw	0xff               	MOVLW	0xff
00516e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005170   0eff     movlw	0xff               	MOVLW	0xff
005172   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005174   0eff     movlw	0xff               	MOVLW	0xff
005176   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005178   0eff     movlw	0xff               	MOVLW	0xff
00517a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00517c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00517e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005180   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005182   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005184   e1eb     bnz	0x515c               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
005186   0e10     movlw	0x10               	MOVLW	0x10
005188   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
00518a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00518c   f001
00518e   6a02     clrf	0x2, 0              	CLRF	r0x02
005190   0e00     movlw	0                  	MOVLW	0x00
005192   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
005194   e102     bnz	0x519a               	BNZ	_00299_DS_
005196   0e20     movlw	0x20               	MOVLW	0x20
005198   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
00519a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00519c   d057     bra	0x524c               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00519e   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0051a0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0051a2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0051a4   6a02     clrf	0x2, 0              	CLRF	r0x02
0051a6   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0051a8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0051aa   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0051ac   ffe9
0051ae   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0051b0   ffea
0051b2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0051b4   f001
0051b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0051b8   e119     bnz	0x51ec               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0051ba   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0051bc   f001
                                           _00261_DS_:
0051be   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0051c0   f002
0051c2   6a03     clrf	0x3, 0              	CLRF	r0x03
0051c4   0e00     movlw	0                  	MOVLW	0x00
0051c6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0051c8   e102     bnz	0x51ce               	BNZ	_00300_DS_
0051ca   0e20     movlw	0x20               	MOVLW	0x20
0051cc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0051ce   e20e     bc	0x51ec                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0051d0   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0051d2   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0051d4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0051d6   6a03     clrf	0x3, 0              	CLRF	r0x03
0051d8   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0051da   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0051dc   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0051de   ffe9
0051e0   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0051e2   ffea
0051e4   0e20     movlw	0x20               	MOVLW	0x20
0051e6   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0051e8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0051ea   d7e9     bra	0x51be               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0051ec   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
0051ee   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0051f0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0051f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0051f4   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0051f6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0051f8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0051fa   ffe9
0051fc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0051fe   ffea
005200   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
005202   f001
005204   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005206   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005208   0e01     movlw	0x1                	MOVLW	0x01
00520a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00520c   ecc8     call	0xb590, 0           	CALL	_LCDWrite
00520e   f05a
005210   0e02     movlw	0x2                	MOVLW	0x02
005212   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
005214   0e55     movlw	0x55               	MOVLW	0x55
005216   6e01     movwf	0x1, 0             	MOVWF	r0x01
005218   6a02     clrf	0x2, 0              	CLRF	r0x02
00521a   6a03     clrf	0x3, 0              	CLRF	r0x03
00521c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
00521e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005220   f005
005222   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005224   f006
005226   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005228   f007
00522a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00522c   f008
00522e   0eff     movlw	0xff               	MOVLW	0xff
005230   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005232   0eff     movlw	0xff               	MOVLW	0xff
005234   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005236   0eff     movlw	0xff               	MOVLW	0xff
005238   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00523a   0eff     movlw	0xff               	MOVLW	0xff
00523c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00523e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005240   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005242   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005244   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
005246   e1eb     bnz	0x521e               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
005248   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00524a   d79f     bra	0x518a               	BRA	_00265_DS_
                                           _00269_DS_:
00524c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00524e   f008
005250   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005252   f007
005254   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005256   f006
005258   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00525a   f005
00525c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00525e   f004
005260   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005262   f003
005264   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005266   f002
005268   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00526a   f001
00526c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00526e   f000
005270   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005272   ffd9
005274   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
005734   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005736   ffe5
005738   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00573a   ffd9
00573c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00573e   ffe5
005740   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005742   ffe5
005744   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005746   ffe5
005748   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00574a   ffe5
00574c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00574e   ffe5
005750   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005752   ffe5
005754   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005756   ffe5
005758   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00575a   ffe5
00575c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00575e   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
005760   0e00     movlw	0                  	MOVLW	0x00
005762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005764   0e20     movlw	0x20               	MOVLW	0x20
005766   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005768   0e20     movlw	0x20               	MOVLW	0x20
00576a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00576c   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00576e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005770   0e22     movlw	0x22               	MOVLW	LOW(_LCDText)
005772   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005774   ecd5     call	0xa1aa, 0           	CALL	_memset
005776   f050
005778   0e05     movlw	0x5                	MOVLW	0x05
00577a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00577c   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00577e   6b42     clrf	0x42, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
005780   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
005782   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
005784   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
005786   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
005788   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
00578a   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
00578c   0ea0     movlw	0xa0               	MOVLW	0xa0
00578e   6e00     movwf	0, 0               	MOVWF	r0x00
005790   0e09     movlw	0x9                	MOVLW	0x09
005792   6e01     movwf	0x1, 0             	MOVWF	r0x01
005794   0e01     movlw	0x1                	MOVLW	0x01
005796   6e02     movwf	0x2, 0             	MOVWF	r0x02
005798   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
00579a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00579c   f004
00579e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0057a0   f005
0057a2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0057a4   f006
0057a6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0057a8   f007
0057aa   0eff     movlw	0xff               	MOVLW	0xff
0057ac   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0057ae   0eff     movlw	0xff               	MOVLW	0xff
0057b0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0057b2   0eff     movlw	0xff               	MOVLW	0xff
0057b4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0057b6   0eff     movlw	0xff               	MOVLW	0xff
0057b8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0057ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0057bc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0057be   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0057c0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0057c2   e1eb     bnz	0x579a               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0057c4   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
0057c6   0e03     movlw	0x3                	MOVLW	0x03
0057c8   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
0057ca   0000     nop                      	nop 
0057cc   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0057ce   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
0057d0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0057d2   f001
0057d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0057d6   0e00     movlw	0                  	MOVLW	0x00
0057d8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0057da   e102     bnz	0x57e0               	BNZ	_00220_DS_
0057dc   0e03     movlw	0x3                	MOVLW	0x03
0057de   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
0057e0   e239     bc	0x5854                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0057e2   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
0057e4   0e11     movlw	0x11               	MOVLW	0x11
0057e6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0057e8   6a02     clrf	0x2, 0              	CLRF	r0x02
0057ea   6a03     clrf	0x3, 0              	CLRF	r0x03
0057ec   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
0057ee   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0057f0   f005
0057f2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0057f4   f006
0057f6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0057f8   f007
0057fa   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0057fc   f008
0057fe   0eff     movlw	0xff               	MOVLW	0xff
005800   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005802   0eff     movlw	0xff               	MOVLW	0xff
005804   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005806   0eff     movlw	0xff               	MOVLW	0xff
005808   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00580a   0eff     movlw	0xff               	MOVLW	0xff
00580c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00580e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005810   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005812   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005814   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
005816   e1eb     bnz	0x57ee               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
005818   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00581a   0e48     movlw	0x48               	MOVLW	0x48
00581c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00581e   0e0d     movlw	0xd                	MOVLW	0x0d
005820   6e02     movwf	0x2, 0             	MOVWF	r0x02
005822   6a03     clrf	0x3, 0              	CLRF	r0x03
005824   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
005826   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005828   f005
00582a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00582c   f006
00582e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005830   f007
005832   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
005834   f008
005836   0eff     movlw	0xff               	MOVLW	0xff
005838   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00583a   0eff     movlw	0xff               	MOVLW	0xff
00583c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00583e   0eff     movlw	0xff               	MOVLW	0xff
005840   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005842   0eff     movlw	0xff               	MOVLW	0xff
005844   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005846   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005848   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00584a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00584c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00584e   e1eb     bnz	0x5826               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
005850   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
005852   d7be     bra	0x57d0               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
005854   0e38     movlw	0x38               	MOVLW	0x38
005856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005858   0e00     movlw	0                  	MOVLW	0x00
00585a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00585c   ecc8     call	0xb590, 0           	CALL	_LCDWrite
00585e   f05a
005860   0e02     movlw	0x2                	MOVLW	0x02
005862   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
005864   0e55     movlw	0x55               	MOVLW	0x55
005866   6e00     movwf	0, 0               	MOVWF	r0x00
005868   6a01     clrf	0x1, 0              	CLRF	r0x01
00586a   6a02     clrf	0x2, 0              	CLRF	r0x02
00586c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00586e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
005870   f004
005872   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005874   f005
005876   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005878   f006
00587a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00587c   f007
00587e   0eff     movlw	0xff               	MOVLW	0xff
005880   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005882   0eff     movlw	0xff               	MOVLW	0xff
005884   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005886   0eff     movlw	0xff               	MOVLW	0xff
005888   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00588a   0eff     movlw	0xff               	MOVLW	0xff
00588c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00588e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005890   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005892   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005894   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005896   e1eb     bnz	0x586e               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
005898   0e06     movlw	0x6                	MOVLW	0x06
00589a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00589c   0e00     movlw	0                  	MOVLW	0x00
00589e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058a0   ecc8     call	0xb590, 0           	CALL	_LCDWrite
0058a2   f05a
0058a4   0e02     movlw	0x2                	MOVLW	0x02
0058a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0058a8   0e55     movlw	0x55               	MOVLW	0x55
0058aa   6e00     movwf	0, 0               	MOVWF	r0x00
0058ac   6a01     clrf	0x1, 0              	CLRF	r0x01
0058ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0058b0   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0058b2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0058b4   f004
0058b6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0058b8   f005
0058ba   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0058bc   f006
0058be   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0058c0   f007
0058c2   0eff     movlw	0xff               	MOVLW	0xff
0058c4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0058c6   0eff     movlw	0xff               	MOVLW	0xff
0058c8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0058ca   0eff     movlw	0xff               	MOVLW	0xff
0058cc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0058ce   0eff     movlw	0xff               	MOVLW	0xff
0058d0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0058d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0058d4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0058d6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0058d8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0058da   e1eb     bnz	0x58b2               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0058dc   0e0c     movlw	0xc                	MOVLW	0x0c
0058de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058e0   0e00     movlw	0                  	MOVLW	0x00
0058e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058e4   ecc8     call	0xb590, 0           	CALL	_LCDWrite
0058e6   f05a
0058e8   0e02     movlw	0x2                	MOVLW	0x02
0058ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0058ec   0e55     movlw	0x55               	MOVLW	0x55
0058ee   6e00     movwf	0, 0               	MOVWF	r0x00
0058f0   6a01     clrf	0x1, 0              	CLRF	r0x01
0058f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0058f4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
0058f6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0058f8   f004
0058fa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0058fc   f005
0058fe   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005900   f006
005902   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
005904   f007
005906   0eff     movlw	0xff               	MOVLW	0xff
005908   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00590a   0eff     movlw	0xff               	MOVLW	0xff
00590c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00590e   0eff     movlw	0xff               	MOVLW	0xff
005910   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005912   0eff     movlw	0xff               	MOVLW	0xff
005914   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005918   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00591a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00591c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00591e   e1eb     bnz	0x58f6               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
005920   0e01     movlw	0x1                	MOVLW	0x01
005922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005924   0e00     movlw	0                  	MOVLW	0x00
005926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005928   ecc8     call	0xb590, 0           	CALL	_LCDWrite
00592a   f05a
00592c   0e02     movlw	0x2                	MOVLW	0x02
00592e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
005930   0e48     movlw	0x48               	MOVLW	0x48
005932   6e00     movwf	0, 0               	MOVWF	r0x00
005934   0e0d     movlw	0xd                	MOVLW	0x0d
005936   6e01     movwf	0x1, 0             	MOVWF	r0x01
005938   6a02     clrf	0x2, 0              	CLRF	r0x02
00593a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
00593c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00593e   f004
005940   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005942   f005
005944   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005946   f006
005948   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00594a   f007
00594c   0eff     movlw	0xff               	MOVLW	0xff
00594e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005950   0eff     movlw	0xff               	MOVLW	0xff
005952   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005954   0eff     movlw	0xff               	MOVLW	0xff
005956   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005958   0eff     movlw	0xff               	MOVLW	0xff
00595a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00595c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00595e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005960   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005962   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005964   e1eb     bnz	0x593c               	BNZ	_00185_DS_
005966   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005968   f008
00596a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00596c   f007
00596e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005970   f006
005972   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005974   f005
005976   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005978   f004
00597a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00597c   f003
00597e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005980   f002
005982   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005984   f001
005986   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005988   f000
00598a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00598c   ffd9
00598e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00b590   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b592   ffe5
00b594   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b596   ffd9
00b598   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b59a   ffe5
00b59c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b59e   ffe5
00b5a0   0e02     movlw	0x2                	MOVLW	0x02
00b5a2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b5a4   f000
00b5a6   0e03     movlw	0x3                	MOVLW	0x03
00b5a8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b5aa   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00b5ac   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00b5ae   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00b5b0   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00b5b2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
00b5b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b5b6   0b01     andlw	0x1                	ANDLW	0x01
00b5b8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00b5ba   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00b5bc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00b5be   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00b5c0   0bfb     andlw	0xfb               	ANDLW	0xfb
00b5c2   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00b5c4   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
00b5c6   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
00b5c8   ff8d
00b5ca   0000     nop                      	nop 
00b5cc   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00b5ce   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00b5d0   0000     nop                      	nop 
00b5d2   0000     nop                      	nop 
00b5d4   0000     nop                      	nop 
00b5d6   0000     nop                      	nop 
00b5d8   0000     nop                      	nop 
00b5da   0000     nop                      	nop 
00b5dc   0000     nop                      	nop 
00b5de   0000     nop                      	nop 
00b5e0   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00b5e2   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00b5e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b5e6   f001
00b5e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b5ea   f000
00b5ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b5ee   ffd9
00b5f0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _StackInit
                                           	global _StackTask
                                           	global _StackTaskHelp
                                           	global _StackApplications
                                           	global _remoteNode
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _memcpy
                                           	extern _GenerateRandomDWORD
                                           	extern _MACInit
                                           	extern _MACIsLinked
                                           	extern _MACGetHeader
                                           	extern _IPGetHeader
                                           	extern _ARPInit
                                           	extern _ARPProcess
                                           	extern _UDPInit
                                           	extern _UDPTask
                                           	extern _UDPProcess
                                           	extern _UDPDiscard
                                           	extern _DHCPInit
                                           	extern _DHCPTask
                                           	extern _DHCPDisable
                                           	extern _DHCPIsBound
                                           	extern _ICMPProcess
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _StackTaskHelp_bLastLinkState_2_2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           
                                           udata_StackTsk_0	udata
                                           _smStack	res	1
                                           
                                           udata_StackTsk_1	udata
                                           _StackTaskHelp_tempLocalIP_1_1	res	4
                                           
                                           udata_StackTsk_2	udata
                                           _remoteNode	res	10
                                           
                                           udata_StackTsk_3	udata
                                           _StackTaskHelp_cFrameType_1_1	res	1
                                           
                                           udata_StackTsk_4	udata
                                           _StackTaskHelp_cIPFrameType_1_1	res	1
                                           
                                           udata_StackTsk_5	udata
                                           _StackTaskHelp_dataCount_1_1	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_StackTsk__StackApplications	code
                                           _StackApplications:
                                           ;	.line	386; TCPIP_Stack/StackTsk.c	void StackApplications(void)
00be74   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00be76   ffe5
00be78   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00be7a   ffd9
                                           ;	.line	443; TCPIP_Stack/StackTsk.c	}
00be7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00be7e   ffd9
00be80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTaskHelp	code
                                           _StackTaskHelp:
                                           ;	.line	214; TCPIP_Stack/StackTsk.c	void StackTaskHelp(IP_ADDR *last_remote_ip)
001e4c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001e4e   ffe5
001e50   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001e52   ffd9
001e54   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001e56   ffe5
001e58   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001e5a   ffe5
001e5c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001e5e   ffe5
001e60   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001e62   ffe5
001e64   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001e66   ffe5
001e68   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001e6a   ffe5
001e6c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001e6e   ffe5
001e70   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001e72   ffe5
001e74   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001e76   ffe5
001e78   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001e7a   ffe5
001e7c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001e7e   ffe5
001e80   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001e82   ffe5
001e84   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001e86   ffe5
001e88   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001e8a   ffe5
001e8c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001e8e   ffe5
001e90   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001e92   ffe5
001e94   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001e96   ffe5
001e98   0e02     movlw	0x2                	MOVLW	0x02
001e9a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001e9c   f000
001e9e   0e03     movlw	0x3                	MOVLW	0x03
001ea0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001ea2   f001
001ea4   0e04     movlw	0x4                	MOVLW	0x04
001ea6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001ea8   f002
001eaa   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	234; TCPIP_Stack/StackTsk.c	if(AppConfig.Flags.bIsDHCPEnabled)
001eac   adf4     btfss	0xf4, 0x6, 0x1     	BTFSS	(_AppConfig + 44), 6, B
001eae   d047     bra	0x1f3e               	BRA	_00124_DS_
                                           ;	.line	239; TCPIP_Stack/StackTsk.c	bCurrentLinkState = MACIsLinked();
001eb0   ecdc     call	0xb9b8, 0           	CALL	_MACIsLinked
001eb2   f05c
001eb4   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	240; TCPIP_Stack/StackTsk.c	if(bCurrentLinkState != bLastLinkState)
001eb6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001eb8   010e     movlb	0xe                	BANKSEL	_StackTaskHelp_bLastLinkState_2_2
001eba   1955     xorwf	0x55, 0, 0x1       	XORWF	_StackTaskHelp_bLastLinkState_2_2, W, B
001ebc   e101     bnz	0x1ec0               	BNZ	_00165_DS_
001ebe   d033     bra	0x1f26               	BRA	_00120_DS_
                                           _00165_DS_:
                                           ;	.line	242; TCPIP_Stack/StackTsk.c	bLastLinkState = bCurrentLinkState;
001ec0   c003     movff	0x3, 0xe55         	MOVFF	r0x03, _StackTaskHelp_bLastLinkState_2_2
001ec2   fe55
                                           ;	.line	243; TCPIP_Stack/StackTsk.c	if(!bCurrentLinkState) //we lost the MAC link
001ec4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001ec6   e12f     bnz	0x1f26               	BNZ	_00120_DS_
                                           ;	.line	245; TCPIP_Stack/StackTsk.c	AppConfig.MyIPAddr.Val = AppConfig.DefaultIPAddr.Val;
001ec8   c8dc     movff	0x8dc, 0x3         	MOVFF	(_AppConfig + 20), r0x03
001eca   f003
001ecc   c8dd     movff	0x8dd, 0x4         	MOVFF	(_AppConfig + 21), r0x04
001ece   f004
001ed0   c8de     movff	0x8de, 0x5         	MOVFF	(_AppConfig + 22), r0x05
001ed2   f005
001ed4   c8df     movff	0x8df, 0x6         	MOVFF	(_AppConfig + 23), r0x06
001ed6   f006
001ed8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001eda   0108     movlb	0x8                	BANKSEL	_AppConfig
001edc   6fc8     movwf	0xc8, 0x1          	MOVWF	_AppConfig, B
001ede   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001ee0   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
001ee2   6fc9     movwf	0xc9, 0x1          	MOVWF	(_AppConfig + 1), B
001ee4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001ee6   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
001ee8   6fca     movwf	0xca, 0x1          	MOVWF	(_AppConfig + 2), B
001eea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001eec   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
001eee   6fcb     movwf	0xcb, 0x1          	MOVWF	(_AppConfig + 3), B
                                           ;	.line	246; TCPIP_Stack/StackTsk.c	AppConfig.MyMask.Val = AppConfig.DefaultMask.Val;
001ef0   c8e0     movff	0x8e0, 0x3         	MOVFF	(_AppConfig + 24), r0x03
001ef2   f003
001ef4   c8e1     movff	0x8e1, 0x4         	MOVFF	(_AppConfig + 25), r0x04
001ef6   f004
001ef8   c8e2     movff	0x8e2, 0x5         	MOVFF	(_AppConfig + 26), r0x05
001efa   f005
001efc   c8e3     movff	0x8e3, 0x6         	MOVFF	(_AppConfig + 27), r0x06
001efe   f006
001f00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f02   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
001f04   6fcc     movwf	0xcc, 0x1          	MOVWF	(_AppConfig + 4), B
001f06   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f08   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
001f0a   6fcd     movwf	0xcd, 0x1          	MOVWF	(_AppConfig + 5), B
001f0c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f0e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
001f10   6fce     movwf	0xce, 0x1          	MOVWF	(_AppConfig + 6), B
001f12   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f14   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
001f16   6fcf     movwf	0xcf, 0x1          	MOVWF	(_AppConfig + 7), B
001f18   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	247; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
001f1a   8ff4     bsf	0xf4, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	248; TCPIP_Stack/StackTsk.c	DHCPInit(0);
001f1c   0e00     movlw	0                  	MOVLW	0x00
001f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f20   ec6f     call	0xb0de, 0           	CALL	_DHCPInit
001f22   f058
001f24   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00120_DS_:
                                           ;	.line	256; TCPIP_Stack/StackTsk.c	DHCPTask();
001f26   ec83     call	0x706, 0            	CALL	_DHCPTask
001f28   f003
                                           ;	.line	258; TCPIP_Stack/StackTsk.c	if(DHCPIsBound(0))
001f2a   0e00     movlw	0                  	MOVLW	0x00
001f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f2e   ec76     call	0xbcec, 0           	CALL	_DHCPIsBound
001f30   f05e
001f32   6e03     movwf	0x3, 0             	MOVWF	r0x03
001f34   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001f36   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f38   e002     bz	0x1f3e                	BZ	_00124_DS_
001f3a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	259; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = FALSE;
001f3c   9ff4     bcf	0xf4, 0x7, 0x1       	BCF	(_AppConfig + 44), 7, B
                                           _00124_DS_:
                                           ;	.line	275; TCPIP_Stack/StackTsk.c	UDPTask();
001f3e   ec1e     call	0xbe3c, 0           	CALL	_UDPTask
001f40   f05f
                                           _00145_DS_:
                                           ;	.line	290; TCPIP_Stack/StackTsk.c	UDPDiscard();
001f42   ec0b     call	0xbc16, 0           	CALL	_UDPDiscard
001f44   f05e
                                           ;	.line	295; TCPIP_Stack/StackTsk.c	if(!MACGetHeader(&remoteNode.MACAddr, &cFrameType))
001f46   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode + 4)
001f48   6e04     movwf	0x4, 0             	MOVWF	r0x04
001f4a   0ecc     movlw	0xcc               	MOVLW	LOW(_remoteNode + 4)
001f4c   6e03     movwf	0x3, 0             	MOVWF	r0x03
001f4e   0e80     movlw	0x80               	MOVLW	0x80
001f50   6e05     movwf	0x5, 0             	MOVWF	r0x05
001f52   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskHelp_cFrameType_1_1)
001f54   6e07     movwf	0x7, 0             	MOVWF	r0x07
001f56   0eb4     movlw	0xb4               	MOVLW	LOW(_StackTaskHelp_cFrameType_1_1)
001f58   6e06     movwf	0x6, 0             	MOVWF	r0x06
001f5a   0e80     movlw	0x80               	MOVLW	0x80
001f5c   6e08     movwf	0x8, 0             	MOVWF	r0x08
001f5e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001f60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f62   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001f64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f66   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001f68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001f6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f6e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f76   ec33     call	0x6266, 0           	CALL	_MACGetHeader
001f78   f031
001f7a   6e03     movwf	0x3, 0             	MOVWF	r0x03
001f7c   0e06     movlw	0x6                	MOVLW	0x06
001f7e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001f80   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f82   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001f84   d107     bra	0x2194               	BRA	_00147_DS_
                                           ;	.line	299; TCPIP_Stack/StackTsk.c	switch(cFrameType)
001f86   c2b4     movff	0x2b4, 0x3         	MOVFF	_StackTaskHelp_cFrameType_1_1, r0x03
001f88   f003
001f8a   6a04     clrf	0x4, 0              	CLRF	r0x04
001f8c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f8e   e102     bnz	0x1f94               	BNZ	_00167_DS_
001f90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f92   e009     bz	0x1fa6                	BZ	_00128_DS_
                                           _00167_DS_:
001f94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001f96   0a06     xorlw	0x6                	XORLW	0x06
001f98   e102     bnz	0x1f9e               	BNZ	_00168_DS_
001f9a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001f9c   e001     bz	0x1fa0                	BZ	_00169_DS_
                                           _00168_DS_:
001f9e   d7d1     bra	0x1f42               	BRA	_00145_DS_
                                           _00169_DS_:
                                           ;	.line	303; TCPIP_Stack/StackTsk.c	ARPProcess();
001fa0   ecc6     call	0x4d8c, 0           	CALL	_ARPProcess
001fa2   f026
                                           ;	.line	304; TCPIP_Stack/StackTsk.c	break;
001fa4   d7ce     bra	0x1f42               	BRA	_00145_DS_
                                           _00128_DS_:
                                           ;	.line	308; TCPIP_Stack/StackTsk.c	if(!IPGetHeader(&tempLocalIP, &remoteNode, &cIPFrameType, &dataCount))
001fa6   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskHelp_tempLocalIP_1_1)
001fa8   6e04     movwf	0x4, 0             	MOVWF	r0x04
001faa   0e3c     movlw	0x3c               	MOVLW	LOW(_StackTaskHelp_tempLocalIP_1_1)
001fac   6e03     movwf	0x3, 0             	MOVWF	r0x03
001fae   0e80     movlw	0x80               	MOVLW	0x80
001fb0   6e05     movwf	0x5, 0             	MOVWF	r0x05
001fb2   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
001fb4   6e07     movwf	0x7, 0             	MOVWF	r0x07
001fb6   0ec8     movlw	0xc8               	MOVLW	LOW(_remoteNode)
001fb8   6e06     movwf	0x6, 0             	MOVWF	r0x06
001fba   0e80     movlw	0x80               	MOVLW	0x80
001fbc   6e08     movwf	0x8, 0             	MOVWF	r0x08
001fbe   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskHelp_cIPFrameType_1_1)
001fc0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001fc2   0eb5     movlw	0xb5               	MOVLW	LOW(_StackTaskHelp_cIPFrameType_1_1)
001fc4   6e09     movwf	0x9, 0             	MOVWF	r0x09
001fc6   0e80     movlw	0x80               	MOVLW	0x80
001fc8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001fca   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskHelp_dataCount_1_1)
001fcc   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001fce   0e97     movlw	0x97               	MOVLW	LOW(_StackTaskHelp_dataCount_1_1)
001fd0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001fd2   0e80     movlw	0x80               	MOVLW	0x80
001fd4   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001fd6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001fd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fda   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001fdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fde   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001fe0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fe2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001fe4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fe6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001fe8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fea   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fee   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001ff0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001ff4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001ff8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ffa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001ffc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ffe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002000   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002002   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002004   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002006   ecc8     call	0x5990, 0           	CALL	_IPGetHeader
002008   f02c
00200a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00200c   0e0c     movlw	0xc                	MOVLW	0x0c
00200e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002010   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002012   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002014   d796     bra	0x1f42               	BRA	_00145_DS_
                                           ;	.line	312; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_ICMP)
002016   c2b5     movff	0x2b5, 0x3         	MOVFF	_StackTaskHelp_cIPFrameType_1_1, r0x03
002018   f003
00201a   6a04     clrf	0x4, 0              	CLRF	r0x04
00201c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00201e   0a01     xorlw	0x1                	XORLW	0x01
002020   e102     bnz	0x2026               	BNZ	_00170_DS_
002022   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002024   e001     bz	0x2028                	BZ	_00171_DS_
                                           _00170_DS_:
002026   d06d     bra	0x2102               	BRA	_00136_DS_
                                           _00171_DS_:
                                           ;	.line	333; TCPIP_Stack/StackTsk.c	if( (tempLocalIP.Val == AppConfig.MyIPAddr.Val) ||
002028   c23c     movff	0x23c, 0x5         	MOVFF	_StackTaskHelp_tempLocalIP_1_1, r0x05
00202a   f005
00202c   c23d     movff	0x23d, 0x6         	MOVFF	(_StackTaskHelp_tempLocalIP_1_1 + 1), r0x06
00202e   f006
002030   c23e     movff	0x23e, 0x7         	MOVFF	(_StackTaskHelp_tempLocalIP_1_1 + 2), r0x07
002032   f007
002034   c23f     movff	0x23f, 0x8         	MOVFF	(_StackTaskHelp_tempLocalIP_1_1 + 3), r0x08
002036   f008
002038   c8c8     movff	0x8c8, 0x9         	MOVFF	_AppConfig, r0x09
00203a   f009
00203c   c8c9     movff	0x8c9, 0xa         	MOVFF	(_AppConfig + 1), r0x0a
00203e   f00a
002040   c8ca     movff	0x8ca, 0xb         	MOVFF	(_AppConfig + 2), r0x0b
002042   f00b
002044   c8cb     movff	0x8cb, 0xc         	MOVFF	(_AppConfig + 3), r0x0c
002046   f00c
002048   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00204a   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
00204c   e10a     bnz	0x2062               	BNZ	_00173_DS_
00204e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002050   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
002052   e107     bnz	0x2062               	BNZ	_00173_DS_
002054   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002056   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
002058   e104     bnz	0x2062               	BNZ	_00173_DS_
00205a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00205c   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
00205e   e101     bnz	0x2062               	BNZ	_00173_DS_
002060   d039     bra	0x20d4               	BRA	_00131_DS_
                                           _00173_DS_:
                                           ;	.line	334; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == 0xFFFFFFFF) ||
002062   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002064   0aff     xorlw	0xff               	XORLW	0xff
002066   e109     bnz	0x207a               	BNZ	_00175_DS_
002068   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00206a   0aff     xorlw	0xff               	XORLW	0xff
00206c   e106     bnz	0x207a               	BNZ	_00175_DS_
00206e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002070   0aff     xorlw	0xff               	XORLW	0xff
002072   e103     bnz	0x207a               	BNZ	_00175_DS_
002074   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002076   0aff     xorlw	0xff               	XORLW	0xff
002078   e02d     bz	0x20d4                	BZ	_00131_DS_
                                           _00175_DS_:
00207a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	335; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == ((AppConfig.MyIPAddr.Val & AppConfig.MyMask.Val) | ~AppConfig.MyMask.Val)))
00207c   51cc     movf	0xcc, 0, 0x1        	MOVF	(_AppConfig + 4), W, B
00207e   1609     andwf	0x9, 0x1, 0        	ANDWF	r0x09, F
002080   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
002082   51cd     movf	0xcd, 0, 0x1        	MOVF	(_AppConfig + 5), W, B
002084   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
002086   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
002088   51ce     movf	0xce, 0, 0x1        	MOVF	(_AppConfig + 6), W, B
00208a   160b     andwf	0xb, 0x1, 0        	ANDWF	r0x0b, F
00208c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
00208e   51cf     movf	0xcf, 0, 0x1        	MOVF	(_AppConfig + 7), W, B
002090   160c     andwf	0xc, 0x1, 0        	ANDWF	r0x0c, F
002092   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
002094   1dcc     comf	0xcc, 0, 0x1        	COMF	(_AppConfig + 4), W, B
002096   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002098   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
00209a   1dcd     comf	0xcd, 0, 0x1        	COMF	(_AppConfig + 5), W, B
00209c   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00209e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
0020a0   1dce     comf	0xce, 0, 0x1        	COMF	(_AppConfig + 6), W, B
0020a2   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0020a4   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
0020a6   1dcf     comf	0xcf, 0, 0x1        	COMF	(_AppConfig + 7), W, B
0020a8   6e10     movwf	0x10, 0            	MOVWF	r0x10
0020aa   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0020ac   1209     iorwf	0x9, 0x1, 0        	IORWF	r0x09, F
0020ae   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0020b0   120a     iorwf	0xa, 0x1, 0        	IORWF	r0x0a, F
0020b2   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0020b4   120b     iorwf	0xb, 0x1, 0        	IORWF	r0x0b, F
0020b6   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0020b8   120c     iorwf	0xc, 0x1, 0        	IORWF	r0x0c, F
0020ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020bc   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
0020be   e109     bnz	0x20d2               	BNZ	_00178_DS_
0020c0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0020c2   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
0020c4   e106     bnz	0x20d2               	BNZ	_00178_DS_
0020c6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0020c8   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
0020ca   e103     bnz	0x20d2               	BNZ	_00178_DS_
0020cc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0020ce   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
0020d0   e001     bz	0x20d4                	BZ	_00131_DS_
                                           _00178_DS_:
0020d2   d737     bra	0x1f42               	BRA	_00145_DS_
                                           _00131_DS_:
                                           ;	.line	337; TCPIP_Stack/StackTsk.c	ICMPProcess(&remoteNode, dataCount);
0020d4   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
0020d6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0020d8   0ec8     movlw	0xc8               	MOVLW	LOW(_remoteNode)
0020da   6e05     movwf	0x5, 0             	MOVWF	r0x05
0020dc   0e80     movlw	0x80               	MOVLW	0x80
0020de   6e07     movwf	0x7, 0             	MOVWF	r0x07
0020e0   0102     movlb	0x2                	BANKSEL	(_StackTaskHelp_dataCount_1_1 + 1)
0020e2   5198     movf	0x98, 0, 0x1        	MOVF	(_StackTaskHelp_dataCount_1_1 + 1), W, B
0020e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020e6   0102     movlb	0x2                	BANKSEL	_StackTaskHelp_dataCount_1_1
0020e8   5197     movf	0x97, 0, 0x1        	MOVF	_StackTaskHelp_dataCount_1_1, W, B
0020ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020ec   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0020ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0020f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f8   ec86     call	0x750c, 0           	CALL	_ICMPProcess
0020fa   f03a
0020fc   0e05     movlw	0x5                	MOVLW	0x05
0020fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	340; TCPIP_Stack/StackTsk.c	break;
002100   d720     bra	0x1f42               	BRA	_00145_DS_
                                           _00136_DS_:
                                           ;	.line	354; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_UDP)
002102   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002104   0a11     xorlw	0x11               	XORLW	0x11
002106   e102     bnz	0x210c               	BNZ	_00180_DS_
002108   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00210a   e001     bz	0x210e                	BZ	_00181_DS_
                                           _00180_DS_:
00210c   d71a     bra	0x1f42               	BRA	_00145_DS_
                                           _00181_DS_:
                                           ;	.line	358; TCPIP_Stack/StackTsk.c	if(UDPProcess(&remoteNode, &tempLocalIP, dataCount))
00210e   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
002110   6e04     movwf	0x4, 0             	MOVWF	r0x04
002112   0ec8     movlw	0xc8               	MOVLW	LOW(_remoteNode)
002114   6e03     movwf	0x3, 0             	MOVWF	r0x03
002116   0e80     movlw	0x80               	MOVLW	0x80
002118   6e05     movwf	0x5, 0             	MOVWF	r0x05
00211a   0e02     movlw	0x2                	MOVLW	HIGH(_StackTaskHelp_tempLocalIP_1_1)
00211c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00211e   0e3c     movlw	0x3c               	MOVLW	LOW(_StackTaskHelp_tempLocalIP_1_1)
002120   6e06     movwf	0x6, 0             	MOVWF	r0x06
002122   0e80     movlw	0x80               	MOVLW	0x80
002124   6e08     movwf	0x8, 0             	MOVWF	r0x08
002126   0102     movlb	0x2                	BANKSEL	(_StackTaskHelp_dataCount_1_1 + 1)
002128   5198     movf	0x98, 0, 0x1        	MOVF	(_StackTaskHelp_dataCount_1_1 + 1), W, B
00212a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00212c   0102     movlb	0x2                	BANKSEL	_StackTaskHelp_dataCount_1_1
00212e   5197     movf	0x97, 0, 0x1        	MOVF	_StackTaskHelp_dataCount_1_1, W, B
002130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002132   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002136   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00213c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002142   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002146   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00214a   ec0e     call	0x421c, 0           	CALL	_UDPProcess
00214c   f021
00214e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002150   0e08     movlw	0x8                	MOVLW	0x08
002152   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002154   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002156   e01e     bz	0x2194                	BZ	_00147_DS_
                                           ;	.line	359; TCPIP_Stack/StackTsk.c	if(last_remote_ip != NULL){
002158   5000     movf	0, 0, 0             	MOVF	r0x00, W
00215a   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00215c   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
00215e   e01a     bz	0x2194                	BZ	_00147_DS_
                                           ;	.line	360; TCPIP_Stack/StackTsk.c	memcpy(last_remote_ip, &remoteNode.IPAddr, sizeof(remoteNode.IPAddr));
002160   0e0b     movlw	0xb                	MOVLW	HIGH(_remoteNode)
002162   6e04     movwf	0x4, 0             	MOVWF	r0x04
002164   0ec8     movlw	0xc8               	MOVLW	LOW(_remoteNode)
002166   6e03     movwf	0x3, 0             	MOVWF	r0x03
002168   0e80     movlw	0x80               	MOVLW	0x80
00216a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00216c   0e00     movlw	0                  	MOVLW	0x00
00216e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002170   0e04     movlw	0x4                	MOVLW	0x04
002172   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002174   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002178   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00217a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00217c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00217e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002180   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002182   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002184   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002186   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002188   5000     movf	0, 0, 0             	MOVF	r0x00, W
00218a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00218c   ec7b     call	0x94f6, 0           	CALL	_memcpy
00218e   f04a
002190   0e08     movlw	0x8                	MOVLW	0x08
002192   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00147_DS_:
                                           ;	.line	367; TCPIP_Stack/StackTsk.c	}
002194   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002196   f010
002198   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00219a   f00f
00219c   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00219e   f00e
0021a0   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0021a2   f00d
0021a4   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0021a6   f00c
0021a8   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0021aa   f00b
0021ac   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0021ae   f00a
0021b0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0021b2   f009
0021b4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0021b6   f008
0021b8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0021ba   f007
0021bc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0021be   f006
0021c0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0021c2   f005
0021c4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021c6   f004
0021c8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021ca   f003
0021cc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021ce   f002
0021d0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021d2   f001
0021d4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0021d6   f000
0021d8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0021da   ffd9
0021dc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTask	code
                                           _StackTask:
                                           ;	.line	210; TCPIP_Stack/StackTsk.c	void StackTask(){
00bc66   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bc68   ffe5
00bc6a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bc6c   ffd9
                                           ;	.line	211; TCPIP_Stack/StackTsk.c	StackTaskHelp(NULL);
00bc6e   0e00     movlw	0                  	MOVLW	0x00
00bc70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00bc72   0e00     movlw	0                  	MOVLW	0x00
00bc74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00bc76   0e00     movlw	0                  	MOVLW	0x00
00bc78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00bc7a   ec26     call	0x1e4c, 0           	CALL	_StackTaskHelp
00bc7c   f00f
00bc7e   0e03     movlw	0x3                	MOVLW	0x03
00bc80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00bc82   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bc84   ffd9
00bc86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackInit	code
                                           _StackInit:
                                           ;	.line	115; TCPIP_Stack/StackTsk.c	void StackInit(void)
00afd2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00afd4   ffe5
00afd6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00afd8   ffd9
00afda   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00afdc   ffe5
00afde   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00afe0   ffe5
00afe2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00afe4   ffe5
00afe6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00afe8   ffe5
00afea   0102     movlb	0x2                	BANKSEL	_smStack
                                           ;	.line	117; TCPIP_Stack/StackTsk.c	smStack                     = SM_STACK_IDLE;
00afec   6bb3     clrf	0xb3, 0x1           	CLRF	_smStack, B
00afee   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	124; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
00aff0   8ff4     bsf	0xf4, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	128; TCPIP_Stack/StackTsk.c	srand(GenerateRandomDWORD());
00aff2   ecf8     call	0x47f0, 0           	CALL	_GenerateRandomDWORD
00aff4   f023
00aff6   6e00     movwf	0, 0               	MOVWF	r0x00
00aff8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00affa   f001
00affc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00affe   f002
00b000   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00b002   f003
00b004   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00b006   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b008   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b00a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b00c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00b00e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b010   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b014   ec20     call	0xbc40, 0           	CALL	_srand
00b016   f05e
00b018   0e04     movlw	0x4                	MOVLW	0x04
00b01a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	130; TCPIP_Stack/StackTsk.c	MACInit();
00b01c   ec31     call	0x8c62, 0           	CALL	_MACInit
00b01e   f046
                                           ;	.line	139; TCPIP_Stack/StackTsk.c	ARPInit();
00b020   ec99     call	0xbb32, 0           	CALL	_ARPInit
00b022   f05d
                                           ;	.line	142; TCPIP_Stack/StackTsk.c	UDPInit();
00b024   ec71     call	0xb8e2, 0           	CALL	_UDPInit
00b026   f05c
                                           ;	.line	174; TCPIP_Stack/StackTsk.c	DHCPInit(0);
00b028   0e00     movlw	0                  	MOVLW	0x00
00b02a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b02c   ec6f     call	0xb0de, 0           	CALL	_DHCPInit
00b02e   f058
00b030   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00b032   0108     movlb	0x8                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	176; TCPIP_Stack/StackTsk.c	if(!AppConfig.Flags.bIsDHCPEnabled)
00b034   bdf4     btfsc	0xf4, 0x6, 0x1     	BTFSC	(_AppConfig + 44), 6, B
00b036   d005     bra	0xb042               	BRA	_00107_DS_
                                           ;	.line	178; TCPIP_Stack/StackTsk.c	DHCPDisable(0);  
00b038   0e00     movlw	0                  	MOVLW	0x00
00b03a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b03c   ec4b     call	0xb896, 0           	CALL	_DHCPDisable
00b03e   f05c
00b040   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00107_DS_:
00b042   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b044   f003
00b046   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b048   f002
00b04a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b04c   f001
00b04e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b050   f000
00b052   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b054   ffd9
00b056   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1096 (0x0448) bytes ( 0.84%)
                                           ;           	  548 (0x0224) words
                                           ; udata size:	   19 (0x0013) bytes ( 0.49%)
                                           ; access size:	   17 (0x0011) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _TickInit
                                           	global _TickGet
                                           	global _TickGetDiv256
                                           	global _TickGetDiv64K
                                           	global _TickConvertToMilliseconds
                                           	global _TickUpdate
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _dwInternalTicks	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_Tick_0	udata
                                           _vTickReading	res	6
                                           
                                           udata_Tick_1	udata
                                           _TickGetDiv256_ret_1_1	res	4
                                           
                                           udata_Tick_2	udata
                                           _TickGetDiv64K_ret_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Tick__TickUpdate	code
                                           _TickUpdate:
                                           ;	.line	356; TCPIP_Stack/Tick.c	void TickUpdate(void)
00bbec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bbee   ffe5
00bbf0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bbf2   ffd9
                                           ;	.line	358; TCPIP_Stack/Tick.c	if(INTCONbits.TMR0IF)
00bbf4   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
00bbf6   d00c     bra	0xbc10               	BRA	_00143_DS_
00bbf8   010e     movlb	0xe                	BANKSEL	_dwInternalTicks
                                           ;	.line	361; TCPIP_Stack/Tick.c	dwInternalTicks++;
00bbfa   2b56     incf	0x56, 0x1, 0x1      	INCF	_dwInternalTicks, F, B
00bbfc   e302     bnc	0xbc02               	BNC	_10141_DS_
00bbfe   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 1)
00bc00   2b57     incf	0x57, 0x1, 0x1      	INCF	(_dwInternalTicks + 1), F, B
                                           _10141_DS_:
00bc02   e302     bnc	0xbc08               	BNC	_20142_DS_
00bc04   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 2)
00bc06   2b58     incf	0x58, 0x1, 0x1      	INCF	(_dwInternalTicks + 2), F, B
                                           _20142_DS_:
00bc08   e302     bnc	0xbc0e               	BNC	_30143_DS_
00bc0a   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 3)
00bc0c   2b59     incf	0x59, 0x1, 0x1      	INCF	(_dwInternalTicks + 3), F, B
                                           _30143_DS_:
                                           ;	.line	364; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;
00bc0e   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00143_DS_:
00bc10   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bc12   ffd9
00bc14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickConvertToMilliseconds	code
                                           _TickConvertToMilliseconds:
                                           ;	.line	333; TCPIP_Stack/Tick.c	DWORD TickConvertToMilliseconds(DWORD dwTickValue)
00a972   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00a974   ffe5
00a976   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00a978   ffd9
00a97a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00a97c   ffe5
00a97e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00a980   ffe5
00a982   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00a984   ffe5
00a986   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00a988   ffe5
00a98a   0e02     movlw	0x2                	MOVLW	0x02
00a98c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00a98e   f000
00a990   0e03     movlw	0x3                	MOVLW	0x03
00a992   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00a994   f001
00a996   0e04     movlw	0x4                	MOVLW	0x04
00a998   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00a99a   f002
00a99c   0e05     movlw	0x5                	MOVLW	0x05
00a99e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00a9a0   f003
                                           ;	.line	335; TCPIP_Stack/Tick.c	return (dwTickValue+(TICKS_PER_SECOND/2000ul))/((DWORD)(TICKS_PER_SECOND/1000ul));
00a9a2   0e14     movlw	0x14               	MOVLW	0x14
00a9a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00a9a6   0e00     movlw	0                  	MOVLW	0x00
00a9a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00a9aa   0e00     movlw	0                  	MOVLW	0x00
00a9ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00a9ae   0e00     movlw	0                  	MOVLW	0x00
00a9b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00a9b2   0e00     movlw	0                  	MOVLW	0x00
00a9b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9b6   0e00     movlw	0                  	MOVLW	0x00
00a9b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9ba   0e00     movlw	0                  	MOVLW	0x00
00a9bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9be   0e28     movlw	0x28               	MOVLW	0x28
00a9c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00a9c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00a9c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00a9cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a9d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00a9d2   eca4     call	0x8b48, 0           	CALL	__divulong
00a9d4   f045
00a9d6   6e00     movwf	0, 0               	MOVWF	r0x00
00a9d8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00a9da   f001
00a9dc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00a9de   f002
00a9e0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00a9e2   f003
00a9e4   0e08     movlw	0x8                	MOVLW	0x08
00a9e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00a9e8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00a9ea   ffe9
00a9ec   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
00a9ee   fff4
00a9f0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00a9f2   fff3
00a9f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
00a9f6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00a9f8   f003
00a9fa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00a9fc   f002
00a9fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00aa00   f001
00aa02   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aa04   f000
00aa06   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aa08   ffd9
00aa0a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv64K	code
                                           _TickGetDiv64K:
                                           ;	.line	292; TCPIP_Stack/Tick.c	DWORD TickGetDiv64K(void)
00b9fc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b9fe   ffe5
00ba00   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ba02   ffd9
                                           ;	.line	296; TCPIP_Stack/Tick.c	GetTickCopy();
00ba04   ec97     call	0xb92e, 0           	CALL	_GetTickCopy
00ba06   f05c
00ba08   0102     movlb	0x2                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	297; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[2];	// Note: This copy must be done one 
00ba0a   5108     movf	0x8, 0, 0x1         	MOVF	(_vTickReading + 2), W, B
00ba0c   0102     movlb	0x2                	BANKSEL	_TickGetDiv64K_ret_1_1
00ba0e   6f44     movwf	0x44, 0x1          	MOVWF	_TickGetDiv64K_ret_1_1, B
00ba10   0102     movlb	0x2                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	298; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[3];	// byte at a time to prevent misaligned 
00ba12   5109     movf	0x9, 0, 0x1         	MOVF	(_vTickReading + 3), W, B
00ba14   0102     movlb	0x2                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 1)
00ba16   6f45     movwf	0x45, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 1), B
00ba18   0102     movlb	0x2                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	299; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[4];	// memory reads, which will reset the PIC.
00ba1a   510a     movf	0xa, 0, 0x1         	MOVF	(_vTickReading + 4), W, B
00ba1c   0102     movlb	0x2                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 2)
00ba1e   6f46     movwf	0x46, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 2), B
00ba20   0102     movlb	0x2                	BANKSEL	(_vTickReading + 5)
                                           ;	.line	300; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[5];
00ba22   510b     movf	0xb, 0, 0x1         	MOVF	(_vTickReading + 5), W, B
00ba24   0102     movlb	0x2                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 3)
00ba26   6f47     movwf	0x47, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 3), B
                                           ;	.line	302; TCPIP_Stack/Tick.c	return ret.Val;
00ba28   c247     movff	0x247, 0xfe9       	MOVFF	(_TickGetDiv64K_ret_1_1 + 3), FSR0L
00ba2a   ffe9
00ba2c   c246     movff	0x246, 0xff4       	MOVFF	(_TickGetDiv64K_ret_1_1 + 2), PRODH
00ba2e   fff4
00ba30   c245     movff	0x245, 0xff3       	MOVFF	(_TickGetDiv64K_ret_1_1 + 1), PRODL
00ba32   fff3
00ba34   0102     movlb	0x2                	BANKSEL	_TickGetDiv64K_ret_1_1
00ba36   5144     movf	0x44, 0, 0x1        	MOVF	_TickGetDiv64K_ret_1_1, W, B
00ba38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ba3a   ffd9
00ba3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv256	code
                                           _TickGetDiv256:
                                           ;	.line	255; TCPIP_Stack/Tick.c	DWORD TickGetDiv256(void)
00ba3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ba40   ffe5
00ba42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ba44   ffd9
                                           ;	.line	259; TCPIP_Stack/Tick.c	GetTickCopy();
00ba46   ec97     call	0xb92e, 0           	CALL	_GetTickCopy
00ba48   f05c
00ba4a   0102     movlb	0x2                	BANKSEL	(_vTickReading + 1)
                                           ;	.line	260; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[1];	// Note: This copy must be done one 
00ba4c   5107     movf	0x7, 0, 0x1         	MOVF	(_vTickReading + 1), W, B
00ba4e   0102     movlb	0x2                	BANKSEL	_TickGetDiv256_ret_1_1
00ba50   6f40     movwf	0x40, 0x1          	MOVWF	_TickGetDiv256_ret_1_1, B
00ba52   0102     movlb	0x2                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	261; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[2];	// byte at a time to prevent misaligned 
00ba54   5108     movf	0x8, 0, 0x1         	MOVF	(_vTickReading + 2), W, B
00ba56   0102     movlb	0x2                	BANKSEL	(_TickGetDiv256_ret_1_1 + 1)
00ba58   6f41     movwf	0x41, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 1), B
00ba5a   0102     movlb	0x2                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	262; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[3];	// memory reads, which will reset the PIC.
00ba5c   5109     movf	0x9, 0, 0x1         	MOVF	(_vTickReading + 3), W, B
00ba5e   0102     movlb	0x2                	BANKSEL	(_TickGetDiv256_ret_1_1 + 2)
00ba60   6f42     movwf	0x42, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 2), B
00ba62   0102     movlb	0x2                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	263; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[4];
00ba64   510a     movf	0xa, 0, 0x1         	MOVF	(_vTickReading + 4), W, B
00ba66   0102     movlb	0x2                	BANKSEL	(_TickGetDiv256_ret_1_1 + 3)
00ba68   6f43     movwf	0x43, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 3), B
                                           ;	.line	265; TCPIP_Stack/Tick.c	return ret.Val;
00ba6a   c243     movff	0x243, 0xfe9       	MOVFF	(_TickGetDiv256_ret_1_1 + 3), FSR0L
00ba6c   ffe9
00ba6e   c242     movff	0x242, 0xff4       	MOVFF	(_TickGetDiv256_ret_1_1 + 2), PRODH
00ba70   fff4
00ba72   c241     movff	0x241, 0xff3       	MOVFF	(_TickGetDiv256_ret_1_1 + 1), PRODL
00ba74   fff3
00ba76   0102     movlb	0x2                	BANKSEL	_TickGetDiv256_ret_1_1
00ba78   5140     movf	0x40, 0, 0x1        	MOVF	_TickGetDiv256_ret_1_1, W, B
00ba7a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00ba7c   ffd9
00ba7e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGet	code
                                           _TickGet:
                                           ;	.line	225; TCPIP_Stack/Tick.c	DWORD TickGet(void)
00bc88   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bc8a   ffe5
00bc8c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bc8e   ffd9
                                           ;	.line	227; TCPIP_Stack/Tick.c	GetTickCopy();
00bc90   ec97     call	0xb92e, 0           	CALL	_GetTickCopy
00bc92   f05c
                                           ;	.line	228; TCPIP_Stack/Tick.c	return *((DWORD*)&vTickReading[0]);
00bc94   c209     movff	0x209, 0xfe9       	MOVFF	(_vTickReading + 3), FSR0L
00bc96   ffe9
00bc98   c208     movff	0x208, 0xff4       	MOVFF	(_vTickReading + 2), PRODH
00bc9a   fff4
00bc9c   c207     movff	0x207, 0xff3       	MOVFF	(_vTickReading + 1), PRODL
00bc9e   fff3
00bca0   0102     movlb	0x2                	BANKSEL	_vTickReading
00bca2   5106     movf	0x6, 0, 0x1         	MOVF	_vTickReading, W, B
00bca4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bca6   ffd9
00bca8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__GetTickCopy	code
                                           _GetTickCopy:
                                           ;	.line	157; TCPIP_Stack/Tick.c	static void GetTickCopy(void)
00b92e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b930   ffe5
00b932   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b934   ffd9
                                           _00113_DS_:
                                           ;	.line	164; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
00b936   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
00b938   0000     nop                      	nop 
                                           ;	.line	166; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 0;		// Disable interrupt
00b93a   9af2     bcf	0xf2, 0x5, 0         	BCF	_INTCONbits, 5
                                           ;	.line	167; TCPIP_Stack/Tick.c	vTickReading[0] = TMR0L;
00b93c   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
00b93e   0102     movlb	0x2                	BANKSEL	_vTickReading
00b940   6f06     movwf	0x6, 0x1           	MOVWF	_vTickReading, B
                                           ;	.line	168; TCPIP_Stack/Tick.c	vTickReading[1] = TMR0H;
00b942   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
00b944   0102     movlb	0x2                	BANKSEL	(_vTickReading + 1)
00b946   6f07     movwf	0x7, 0x1           	MOVWF	(_vTickReading + 1), B
00b948   010e     movlb	0xe                	BANKSEL	_dwInternalTicks
                                           ;	.line	169; TCPIP_Stack/Tick.c	*((DWORD*)&vTickReading[2]) = dwInternalTicks;
00b94a   5156     movf	0x56, 0, 0x1        	MOVF	_dwInternalTicks, W, B
00b94c   0102     movlb	0x2                	BANKSEL	(_vTickReading + 2)
00b94e   6f08     movwf	0x8, 0x1           	MOVWF	(_vTickReading + 2), B
00b950   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 1)
00b952   5157     movf	0x57, 0, 0x1        	MOVF	(_dwInternalTicks + 1), W, B
00b954   0102     movlb	0x2                	BANKSEL	(_vTickReading + 3)
00b956   6f09     movwf	0x9, 0x1           	MOVWF	(_vTickReading + 3), B
00b958   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 2)
00b95a   5158     movf	0x58, 0, 0x1        	MOVF	(_dwInternalTicks + 2), W, B
00b95c   0102     movlb	0x2                	BANKSEL	(_vTickReading + 4)
00b95e   6f0a     movwf	0xa, 0x1           	MOVWF	(_vTickReading + 4), B
00b960   010e     movlb	0xe                	BANKSEL	(_dwInternalTicks + 3)
00b962   5159     movf	0x59, 0, 0x1        	MOVF	(_dwInternalTicks + 3), W, B
00b964   0102     movlb	0x2                	BANKSEL	(_vTickReading + 5)
00b966   6f0b     movwf	0xb, 0x1           	MOVWF	(_vTickReading + 5), B
                                           ;	.line	170; TCPIP_Stack/Tick.c	} while(INTCONbits.TMR0IF);
00b968   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
00b96a   d7e5     bra	0xb936               	BRA	_00113_DS_
                                           ;	.line	171; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;			// Enable interrupt
00b96c   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
00b96e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b970   ffd9
00b972   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickInit	code
                                           _TickInit:
                                           ;	.line	97; TCPIP_Stack/Tick.c	void TickInit(void)
00bdc0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bdc2   ffe5
00bdc4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bdc6   ffd9
                                           ;	.line	102; TCPIP_Stack/Tick.c	TMR0H = 0;
00bdc8   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	103; TCPIP_Stack/Tick.c	TMR0L = 0;
00bdca   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	106; TCPIP_Stack/Tick.c	INTCON2bits.TMR0IP = 0;		// Low priority
00bdcc   94f1     bcf	0xf1, 0x2, 0         	BCF	_INTCON2bits, 2
                                           ;	.line	107; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;          //reset overflow indicator
00bdce   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
00bdd0   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	111; TCPIP_Stack/Tick.c	T0CON = 0x87;
00bdd2   0e87     movlw	0x87               	MOVLW	0x87
00bdd4   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
00bdd6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bdd8   ffd9
00bdda   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  460 (0x01cc) bytes ( 0.35%)
                                           ;           	  230 (0x00e6) words
                                           ; udata size:	   14 (0x000e) bytes ( 0.36%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (May 13 2013) (UNIX)
                                           ; This file was generated Sat May 18 21:24:46 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _UDPInit
                                           	global _UDPTask
                                           	global _UDPOpen
                                           	global _UDPClose
                                           	global _UDPSetTxBuffer
                                           	global _UDPSetRxBuffer
                                           	global _UDPIsPutReady
                                           	global _UDPPut
                                           	global _UDPPutArray
                                           	global _UDPPutString
                                           	global _UDPFlush
                                           	global _UDPIsGetReady
                                           	global _UDPGet
                                           	global _UDPGetArray
                                           	global _UDPDiscard
                                           	global _UDPProcess
                                           	global _UDPSocketInfo
                                           	global _activeUDPSocket
                                           	global _UDPTxCount
                                           	global _UDPRxCount
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _CalcIPBufferChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACSetReadPtr
                                           	extern _MACGet
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACIsTxReady
                                           	extern _MACPut
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           	extern _IPSetRxBuffer
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _LastPutSocket	db	0xff
                                           _SocketWithRxData	db	0xff
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           
                                           udata_UDP_0	udata
                                           _wPutOffset	res	2
                                           
                                           udata_UDP_1	udata
                                           _wGetOffset	res	2
                                           
                                           udata_UDP_2	udata
                                           _Flags	res	1
                                           
                                           udata_UDP_3	udata
                                           _UDPOpen_NextPort_1_1	res	2
                                           
                                           udata_UDP_4	udata
                                           _activeUDPSocket	res	1
                                           
                                           udata_UDP_5	udata
                                           _UDPSocketInfo	res	140
                                           
                                           udata_UDP_6	udata
                                           _UDPTxCount	res	2
                                           
                                           udata_UDP_7	udata
                                           _UDPFlush_wChecksum_1_1	res	2
                                           
                                           udata_UDP_8	udata
                                           _UDPFlush_h_1_1	res	8
                                           
                                           udata_UDP_9	udata
                                           _UDPFlush_pseudoHeader_2_2	res	12
                                           
                                           udata_UDP_10	udata
                                           _UDPRxCount	res	2
                                           
                                           udata_UDP_11	udata
                                           _UDPProcess_h_1_1	res	8
                                           
                                           udata_UDP_12	udata
                                           _UDPProcess_pseudoHeader_1_1	res	12
                                           
                                           udata_UDP_13	udata
                                           _UDPProcess_checksums_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_UDP__FindMatchingSocket	code
                                           _FindMatchingSocket:
                                           ;	.line	1017; TCPIP_Stack/UDP.c	static UDP_SOCKET FindMatchingSocket(UDP_HEADER *h,
002564   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002566   ffe5
002568   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00256a   ffd9
00256c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00256e   ffe5
002570   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002572   ffe5
002574   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002576   ffe5
002578   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00257a   ffe5
00257c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00257e   ffe5
002580   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002582   ffe5
002584   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002586   ffe5
002588   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00258a   ffe5
00258c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00258e   ffe5
002590   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002592   ffe5
002594   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002596   ffe5
002598   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00259a   ffe5
00259c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00259e   ffe5
0025a0   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0025a2   ffe5
0025a4   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0025a6   ffe5
0025a8   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0025aa   ffe5
0025ac   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0025ae   ffe5
0025b0   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0025b2   ffe5
0025b4   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0025b6   ffe5
0025b8   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0025ba   ffe5
0025bc   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0025be   ffe5
0025c0   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0025c2   ffe5
0025c4   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
0025c6   ffe5
0025c8   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
0025ca   ffe5
0025cc   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
0025ce   ffe5
0025d0   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
0025d2   ffe5
0025d4   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
0025d6   ffe5
0025d8   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
0025da   ffe5
0025dc   0e02     movlw	0x2                	MOVLW	0x02
0025de   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0025e0   f000
0025e2   0e03     movlw	0x3                	MOVLW	0x03
0025e4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0025e6   f001
0025e8   0e04     movlw	0x4                	MOVLW	0x04
0025ea   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0025ec   f002
0025ee   0e05     movlw	0x5                	MOVLW	0x05
0025f0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0025f2   f003
0025f4   0e06     movlw	0x6                	MOVLW	0x06
0025f6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0025f8   f004
0025fa   0e07     movlw	0x7                	MOVLW	0x07
0025fc   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0025fe   f005
002600   0e08     movlw	0x8                	MOVLW	0x08
002602   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
002604   f006
002606   0e09     movlw	0x9                	MOVLW	0x09
002608   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00260a   f007
00260c   0e0a     movlw	0xa                	MOVLW	0x0a
00260e   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
002610   f008
                                           ;	.line	1025; TCPIP_Stack/UDP.c	partialMatch = INVALID_UDP_SOCKET;
002612   0eff     movlw	0xff               	MOVLW	0xff
002614   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	1027; TCPIP_Stack/UDP.c	p = UDPSocketInfo;
002616   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
002618   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00261a   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00261c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00261e   0e80     movlw	0x80               	MOVLW	0x80
002620   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
002622   6a0d     clrf	0xd, 0              	CLRF	r0x0d
002624   5000     movf	0, 0, 0             	MOVF	r0x00, W
002626   0f02     addlw	0x2                	ADDLW	0x02
002628   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00262a   0e00     movlw	0                  	MOVLW	0x00
00262c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00262e   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
002630   0e00     movlw	0                  	MOVLW	0x00
002632   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002634   6e10     movwf	0x10, 0            	MOVWF	r0x10
002636   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
002638   ffe9
00263a   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
00263c   fff3
00263e   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002640   eccb     call	0xbb96, 0           	CALL	__gptrget2
002642   f05d
002644   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002646   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
002648   f00f
00264a   c00a     movff	0xa, 0x10          	MOVFF	r0x0a, r0x10
00264c   f010
00264e   c00b     movff	0xb, 0x11          	MOVFF	r0x0b, r0x11
002650   f011
002652   c00c     movff	0xc, 0x12          	MOVFF	r0x0c, r0x12
002654   f012
002656   6a13     clrf	0x13, 0             	CLRF	r0x13
                                           _00306_DS_:
002658   c013     movff	0x13, 0x14         	MOVFF	r0x13, r0x14
00265a   f014
00265c   6a15     clrf	0x15, 0             	CLRF	r0x15
00265e   0e00     movlw	0                  	MOVLW	0x00
002660   5c15     subwf	0x15, 0, 0         	SUBWF	r0x15, W
002662   e102     bnz	0x2668               	BNZ	_00319_DS_
002664   0e0a     movlw	0xa                	MOVLW	0x0a
002666   5c14     subwf	0x14, 0, 0         	SUBWF	r0x14, W
                                           _00319_DS_:
002668   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00266a   d0b4     bra	0x27d4               	BRA	_00309_DS_
                                           ;	.line	1035; TCPIP_Stack/UDP.c	if ( p->localPort == h->DestinationPort )
00266c   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00266e   0f0c     addlw	0xc                	ADDLW	0x0c
002670   6e14     movwf	0x14, 0            	MOVWF	r0x14
002672   0e00     movlw	0                  	MOVLW	0x00
002674   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
002676   6e15     movwf	0x15, 0            	MOVWF	r0x15
002678   0e00     movlw	0                  	MOVLW	0x00
00267a   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
00267c   6e16     movwf	0x16, 0            	MOVWF	r0x16
00267e   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
002680   ffe9
002682   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
002684   fff3
002686   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002688   eccb     call	0xbb96, 0           	CALL	__gptrget2
00268a   f05d
00268c   6e14     movwf	0x14, 0            	MOVWF	r0x14
00268e   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
002690   f015
002692   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002694   180e     xorwf	0xe, 0, 0          	XORWF	r0x0e, W
002696   e103     bnz	0x269e               	BNZ	_00320_DS_
002698   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00269a   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
00269c   e001     bz	0x26a0                	BZ	_00321_DS_
                                           _00320_DS_:
00269e   d090     bra	0x27c0               	BRA	_00303_DS_
                                           _00321_DS_:
                                           ;	.line	1037; TCPIP_Stack/UDP.c	if(p->remotePort == h->SourcePort)
0026a0   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0026a2   0f0a     addlw	0xa                	ADDLW	0x0a
0026a4   6e14     movwf	0x14, 0            	MOVWF	r0x14
0026a6   0e00     movlw	0                  	MOVLW	0x00
0026a8   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0026aa   6e15     movwf	0x15, 0            	MOVWF	r0x15
0026ac   0e00     movlw	0                  	MOVLW	0x00
0026ae   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0026b0   6e16     movwf	0x16, 0            	MOVWF	r0x16
0026b2   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0026b4   ffe9
0026b6   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0026b8   fff3
0026ba   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0026bc   eccb     call	0xbb96, 0           	CALL	__gptrget2
0026be   f05d
0026c0   6e14     movwf	0x14, 0            	MOVWF	r0x14
0026c2   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0026c4   f015
0026c6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0026c8   ffe9
0026ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0026cc   fff3
0026ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0026d0   eccb     call	0xbb96, 0           	CALL	__gptrget2
0026d2   f05d
0026d4   6e16     movwf	0x16, 0            	MOVWF	r0x16
0026d6   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
0026d8   f017
0026da   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0026dc   1816     xorwf	0x16, 0, 0         	XORWF	r0x16, W
0026de   e103     bnz	0x26e6               	BNZ	_00322_DS_
0026e0   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0026e2   1817     xorwf	0x17, 0, 0         	XORWF	r0x17, W
0026e4   e001     bz	0x26e8                	BZ	_00323_DS_
                                           _00322_DS_:
0026e6   d06a     bra	0x27bc               	BRA	_00301_DS_
                                           _00323_DS_:
                                           ;	.line	1039; TCPIP_Stack/UDP.c	if( (p->remoteNode.IPAddr.Val == remoteNode->IPAddr.Val) ||
0026e8   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0026ea   ffe9
0026ec   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0026ee   fff3
0026f0   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0026f2   ec40     call	0xba80, 0           	CALL	__gptrget4
0026f4   f05d
0026f6   6e14     movwf	0x14, 0            	MOVWF	r0x14
0026f8   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0026fa   f015
0026fc   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
0026fe   f016
002700   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
002702   f017
002704   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002706   ffe9
002708   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00270a   fff3
00270c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00270e   ec40     call	0xba80, 0           	CALL	__gptrget4
002710   f05d
002712   6e18     movwf	0x18, 0            	MOVWF	r0x18
002714   cff3     movff	0xff3, 0x19        	MOVFF	PRODL, r0x19
002716   f019
002718   cff4     movff	0xff4, 0x1a        	MOVFF	PRODH, r0x1a
00271a   f01a
00271c   cfe9     movff	0xfe9, 0x1b        	MOVFF	FSR0L, r0x1b
00271e   f01b
002720   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002722   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
002724   e10a     bnz	0x273a               	BNZ	_00325_DS_
002726   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002728   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
00272a   e107     bnz	0x273a               	BNZ	_00325_DS_
00272c   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
00272e   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
002730   e104     bnz	0x273a               	BNZ	_00325_DS_
002732   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
002734   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
002736   e101     bnz	0x273a               	BNZ	_00325_DS_
002738   d03f     bra	0x27b8               	BRA	_00296_DS_
                                           _00325_DS_:
                                           ;	.line	1040; TCPIP_Stack/UDP.c	(localIP->Val == 0xFFFFFFFFul) || (localIP->Val == 
00273a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00273c   ffe9
00273e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
002740   fff3
002742   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002744   ec40     call	0xba80, 0           	CALL	__gptrget4
002746   f05d
002748   6e14     movwf	0x14, 0            	MOVWF	r0x14
00274a   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00274c   f015
00274e   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
002750   f016
002752   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
002754   f017
002756   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002758   0aff     xorlw	0xff               	XORLW	0xff
00275a   e109     bnz	0x276e               	BNZ	_00327_DS_
00275c   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00275e   0aff     xorlw	0xff               	XORLW	0xff
002760   e106     bnz	0x276e               	BNZ	_00327_DS_
002762   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002764   0aff     xorlw	0xff               	XORLW	0xff
002766   e103     bnz	0x276e               	BNZ	_00327_DS_
002768   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00276a   0aff     xorlw	0xff               	XORLW	0xff
00276c   e025     bz	0x27b8                	BZ	_00296_DS_
                                           _00327_DS_:
00276e   0108     movlb	0x8                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1041; TCPIP_Stack/UDP.c	(AppConfig.MyIPAddr.Val | (~AppConfig.MyMask.Val))))
002770   1dcc     comf	0xcc, 0, 0x1        	COMF	(_AppConfig + 4), W, B
002772   6e18     movwf	0x18, 0            	MOVWF	r0x18
002774   0108     movlb	0x8                	BANKSEL	(_AppConfig + 5)
002776   1dcd     comf	0xcd, 0, 0x1        	COMF	(_AppConfig + 5), W, B
002778   6e19     movwf	0x19, 0            	MOVWF	r0x19
00277a   0108     movlb	0x8                	BANKSEL	(_AppConfig + 6)
00277c   1dce     comf	0xce, 0, 0x1        	COMF	(_AppConfig + 6), W, B
00277e   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
002780   0108     movlb	0x8                	BANKSEL	(_AppConfig + 7)
002782   1dcf     comf	0xcf, 0, 0x1        	COMF	(_AppConfig + 7), W, B
002784   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
002786   0108     movlb	0x8                	BANKSEL	_AppConfig
002788   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
00278a   1218     iorwf	0x18, 0x1, 0       	IORWF	r0x18, F
00278c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
00278e   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
002790   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x19, F
002792   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
002794   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
002796   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x1a, F
002798   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
00279a   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
00279c   121b     iorwf	0x1b, 0x1, 0       	IORWF	r0x1b, F
00279e   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0027a0   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
0027a2   e109     bnz	0x27b6               	BNZ	_00329_DS_
0027a4   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0027a6   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
0027a8   e106     bnz	0x27b6               	BNZ	_00329_DS_
0027aa   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0027ac   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
0027ae   e103     bnz	0x27b6               	BNZ	_00329_DS_
0027b0   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
0027b2   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
0027b4   e001     bz	0x27b8                	BZ	_00296_DS_
                                           _00329_DS_:
0027b6   d002     bra	0x27bc               	BRA	_00301_DS_
                                           _00296_DS_:
                                           ;	.line	1043; TCPIP_Stack/UDP.c	return s;
0027b8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0027ba   d054     bra	0x2864               	BRA	_00310_DS_
                                           _00301_DS_:
                                           ;	.line	1047; TCPIP_Stack/UDP.c	partialMatch = s;
0027bc   c013     movff	0x13, 0x9          	MOVFF	r0x13, r0x09
0027be   f009
                                           _00303_DS_:
                                           ;	.line	1049; TCPIP_Stack/UDP.c	p++;
0027c0   0e0e     movlw	0xe                	MOVLW	0x0e
0027c2   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0027c4   0e00     movlw	0                  	MOVLW	0x00
0027c6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
0027c8   0e00     movlw	0                  	MOVLW	0x00
0027ca   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x12, F
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
0027cc   2a13     incf	0x13, 0x1, 0        	INCF	r0x13, F
0027ce   c013     movff	0x13, 0xd          	MOVFF	r0x13, r0x0d
0027d0   f00d
0027d2   d742     bra	0x2658               	BRA	_00306_DS_
                                           _00309_DS_:
                                           ;	.line	1052; TCPIP_Stack/UDP.c	if ( partialMatch != INVALID_UDP_SOCKET )
0027d4   c009     movff	0x9, 0x6           	MOVFF	r0x09, r0x06
0027d6   f006
0027d8   6a07     clrf	0x7, 0              	CLRF	r0x07
0027da   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0027dc   0aff     xorlw	0xff               	XORLW	0xff
0027de   e103     bnz	0x27e6               	BNZ	_00332_DS_
0027e0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0027e2   e101     bnz	0x27e6               	BNZ	_00332_DS_
0027e4   d03e     bra	0x2862               	BRA	_00305_DS_
                                           ; ;multiply lit val:0x0e by variable r0x09 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00332_DS_:
                                           ;	.line	1054; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[partialMatch];
0027e6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0027e8   0d0e     mullw	0xe                	MULLW	0x0e
0027ea   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0027ec   f006
0027ee   6a07     clrf	0x7, 0              	CLRF	r0x07
0027f0   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0027f2   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
0027f4   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0027f6   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0027f8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0027fa   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0027fc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0027fe   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002800   0e80     movlw	0x80               	MOVLW	0x80
002802   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1057; TCPIP_Stack/UDP.c	(void*)remoteNode, sizeof(p->remoteNode) );
002804   0e00     movlw	0                  	MOVLW	0x00
002806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002808   0e0a     movlw	0xa                	MOVLW	0x0a
00280a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00280c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00280e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002810   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002812   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002814   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002816   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002818   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00281a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00281c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00281e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002820   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002822   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002824   ec7b     call	0x94f6, 0           	CALL	_memcpy
002826   f04a
002828   0e08     movlw	0x8                	MOVLW	0x08
00282a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1059; TCPIP_Stack/UDP.c	p->remotePort = h->SourcePort;
00282c   0e0a     movlw	0xa                	MOVLW	0x0a
00282e   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
002830   0e00     movlw	0                  	MOVLW	0x00
002832   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
002834   0e00     movlw	0                  	MOVLW	0x00
002836   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
002838   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00283a   ffe9
00283c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00283e   fff3
002840   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002842   eccb     call	0xbb96, 0           	CALL	__gptrget2
002844   f05d
002846   6e00     movwf	0, 0               	MOVWF	r0x00
002848   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00284a   f001
00284c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00284e   ffe5
002850   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
002852   fff4
002854   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
002856   ffe9
002858   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
00285a   fff3
00285c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00285e   ec08     call	0xbe10, 0           	CALL	__gptrput2
002860   f05f
                                           _00305_DS_:
                                           ;	.line	1061; TCPIP_Stack/UDP.c	return partialMatch;
002862   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
                                           _00310_DS_:
002864   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
002866   f01b
002868   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
00286a   f01a
00286c   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
00286e   f019
002870   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
002872   f018
002874   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
002876   f017
002878   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
00287a   f016
00287c   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
00287e   f015
002880   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002882   f014
002884   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002886   f013
002888   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
00288a   f012
00288c   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
00288e   f011
002890   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002892   f010
002894   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002896   f00f
002898   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00289a   f00e
00289c   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00289e   f00d
0028a0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0028a2   f00c
0028a4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0028a6   f00b
0028a8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0028aa   f00a
0028ac   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0028ae   f009
0028b0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0028b2   f008
0028b4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0028b6   f007
0028b8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0028ba   f006
0028bc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0028be   f005
0028c0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028c2   f004
0028c4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028c6   f003
0028c8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028ca   f002
0028cc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028ce   f001
0028d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028d2   f000
0028d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028d6   ffd9
0028d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPProcess	code
                                           _UDPProcess:
                                           ;	.line	929; TCPIP_Stack/UDP.c	BOOL UDPProcess(NODE_INFO *remoteNode, IP_ADDR *localIP, WORD len)
00421c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00421e   ffe5
004220   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004222   ffd9
004224   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004226   ffe5
004228   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00422a   ffe5
00422c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00422e   ffe5
004230   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004232   ffe5
004234   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004236   ffe5
004238   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00423a   ffe5
00423c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00423e   ffe5
004240   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004242   ffe5
004244   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004246   ffe5
004248   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00424a   ffe5
00424c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00424e   ffe5
004250   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004252   ffe5
004254   0e02     movlw	0x2                	MOVLW	0x02
004256   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004258   f000
00425a   0e03     movlw	0x3                	MOVLW	0x03
00425c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00425e   f001
004260   0e04     movlw	0x4                	MOVLW	0x04
004262   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004264   f002
004266   0e05     movlw	0x5                	MOVLW	0x05
004268   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00426a   f003
00426c   0e06     movlw	0x6                	MOVLW	0x06
00426e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004270   f004
004272   0e07     movlw	0x7                	MOVLW	0x07
004274   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004276   f005
004278   0e08     movlw	0x8                	MOVLW	0x08
00427a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00427c   f006
00427e   0e09     movlw	0x9                	MOVLW	0x09
004280   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
004282   f007
004284   0102     movlb	0x2                	BANKSEL	_UDPRxCount
                                           ;	.line	936; TCPIP_Stack/UDP.c	UDPRxCount = 0;
004286   6ba3     clrf	0xa3, 0x1           	CLRF	_UDPRxCount, B
004288   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
00428a   6ba4     clrf	0xa4, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	939; TCPIP_Stack/UDP.c	MACGetArray((BYTE*)&h, sizeof(h));
00428c   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPProcess_h_1_1)
00428e   6e09     movwf	0x9, 0             	MOVWF	r0x09
004290   0ee2     movlw	0xe2               	MOVLW	LOW(_UDPProcess_h_1_1)
004292   6e08     movwf	0x8, 0             	MOVWF	r0x08
004294   0e80     movlw	0x80               	MOVLW	0x80
004296   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
004298   0e00     movlw	0                  	MOVLW	0x00
00429a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00429c   0e08     movlw	0x8                	MOVLW	0x08
00429e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042a0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0042a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042a4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0042a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042a8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0042aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042ac   ecac     call	0x9d58, 0           	CALL	_MACGetArray
0042ae   f04e
0042b0   0e05     movlw	0x5                	MOVLW	0x05
0042b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042b4   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 1)
                                           ;	.line	941; TCPIP_Stack/UDP.c	h.SourcePort        = swaps(h.SourcePort);
0042b6   51e3     movf	0xe3, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 1), W, B
0042b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042ba   010b     movlb	0xb                	BANKSEL	_UDPProcess_h_1_1
0042bc   51e2     movf	0xe2, 0, 0x1        	MOVF	_UDPProcess_h_1_1, W, B
0042be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042c0   eca9     call	0xb752, 0           	CALL	_swaps
0042c2   f05b
0042c4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0042c6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0042c8   f009
0042ca   0e02     movlw	0x2                	MOVLW	0x02
0042cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042ce   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0042d0   010b     movlb	0xb                	BANKSEL	_UDPProcess_h_1_1
0042d2   6fe2     movwf	0xe2, 0x1          	MOVWF	_UDPProcess_h_1_1, B
0042d4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0042d6   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 1)
0042d8   6fe3     movwf	0xe3, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 1), B
0042da   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 3)
                                           ;	.line	942; TCPIP_Stack/UDP.c	h.DestinationPort   = swaps(h.DestinationPort);
0042dc   51e5     movf	0xe5, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 3), W, B
0042de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042e0   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 2)
0042e2   51e4     movf	0xe4, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 2), W, B
0042e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042e6   eca9     call	0xb752, 0           	CALL	_swaps
0042e8   f05b
0042ea   6e08     movwf	0x8, 0             	MOVWF	r0x08
0042ec   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0042ee   f009
0042f0   0e02     movlw	0x2                	MOVLW	0x02
0042f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042f4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0042f6   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 2)
0042f8   6fe4     movwf	0xe4, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 2), B
0042fa   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0042fc   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 3)
0042fe   6fe5     movwf	0xe5, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 3), B
004300   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 5)
                                           ;	.line	943; TCPIP_Stack/UDP.c	h.Length            = swaps(h.Length) - sizeof(UDP_HEADER);
004302   51e7     movf	0xe7, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 5), W, B
004304   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004306   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 4)
004308   51e6     movf	0xe6, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 4), W, B
00430a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00430c   eca9     call	0xb752, 0           	CALL	_swaps
00430e   f05b
004310   6e08     movwf	0x8, 0             	MOVWF	r0x08
004312   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004314   f009
004316   0e02     movlw	0x2                	MOVLW	0x02
004318   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00431a   0ef8     movlw	0xf8               	MOVLW	0xf8
00431c   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
00431e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
004320   0609     decf	0x9, 0x1, 0         	DECF	r0x09, F
004322   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004324   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 4)
004326   6fe6     movwf	0xe6, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 4), B
004328   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00432a   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 5)
00432c   6fe7     movwf	0xe7, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 5), B
00432e   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 6)
                                           ;	.line	946; TCPIP_Stack/UDP.c	if(h.Checksum)
004330   51e8     movf	0xe8, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 6), W, B
004332   010b     movlb	0xb                	BANKSEL	(_UDPProcess_h_1_1 + 7)
004334   11e9     iorwf	0xe9, 0, 0x1       	IORWF	(_UDPProcess_h_1_1 + 7), W, B
004336   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
004338   d096     bra	0x4466               	BRA	_00279_DS_
                                           ;	.line	949; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val	= remoteNode->IPAddr.Val;
00433a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00433c   ffe9
00433e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004340   fff3
004342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004344   ec40     call	0xba80, 0           	CALL	__gptrget4
004346   f05d
004348   6e08     movwf	0x8, 0             	MOVWF	r0x08
00434a   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
00434c   f009
00434e   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
004350   f00a
004352   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
004354   f00b
004356   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004358   010b     movlb	0xb                	BANKSEL	_UDPProcess_pseudoHeader_1_1
00435a   6f44     movwf	0x44, 0x1          	MOVWF	_UDPProcess_pseudoHeader_1_1, B
00435c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00435e   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 1)
004360   6f45     movwf	0x45, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 1), B
004362   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004364   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 2)
004366   6f46     movwf	0x46, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 2), B
004368   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00436a   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 3)
00436c   6f47     movwf	0x47, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 3), B
                                           ;	.line	950; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val	= localIP->Val;
00436e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004370   ffe9
004372   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004374   fff3
004376   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004378   ec40     call	0xba80, 0           	CALL	__gptrget4
00437a   f05d
00437c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00437e   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004380   f009
004382   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
004384   f00a
004386   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
004388   f00b
00438a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00438c   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 4)
00438e   6f48     movwf	0x48, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 4), B
004390   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004392   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 5)
004394   6f49     movwf	0x49, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 5), B
004396   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004398   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 6)
00439a   6f4a     movwf	0x4a, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 6), B
00439c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00439e   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 7)
0043a0   6f4b     movwf	0x4b, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 7), B
0043a2   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 8)
                                           ;	.line	951; TCPIP_Stack/UDP.c	pseudoHeader.Zero		= 0x0;
0043a4   6b4c     clrf	0x4c, 0x1           	CLRF	(_UDPProcess_pseudoHeader_1_1 + 8), B
                                           ;	.line	952; TCPIP_Stack/UDP.c	pseudoHeader.Protocol		= IP_PROT_UDP;
0043a6   0e11     movlw	0x11               	MOVLW	0x11
0043a8   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 9)
0043aa   6f4d     movwf	0x4d, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 9), B
                                           ;	.line	953; TCPIP_Stack/UDP.c	pseudoHeader.Length		= len;
0043ac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0043ae   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0043b0   6f4e     movwf	0x4e, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0043b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0043b4   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0043b6   6f4f     movwf	0x4f, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	955; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0043b8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0043ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043bc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0043be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043c0   eca9     call	0xb752, 0           	CALL	_swaps
0043c2   f05b
0043c4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0043c6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0043c8   f009
0043ca   0e02     movlw	0x2                	MOVLW	0x02
0043cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0043ce   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0043d0   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0043d2   6f4e     movwf	0x4e, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0043d4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0043d6   010b     movlb	0xb                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0043d8   6f4f     movwf	0x4f, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	957; TCPIP_Stack/UDP.c	checksums.w[0] = ~CalcIPChecksum((BYTE*)&pseudoHeader,
0043da   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPProcess_pseudoHeader_1_1)
0043dc   6e09     movwf	0x9, 0             	MOVWF	r0x09
0043de   0e44     movlw	0x44               	MOVLW	LOW(_UDPProcess_pseudoHeader_1_1)
0043e0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0043e2   0e80     movlw	0x80               	MOVLW	0x80
0043e4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	958; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0043e6   0e00     movlw	0                  	MOVLW	0x00
0043e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ea   0e0c     movlw	0xc                	MOVLW	0x0c
0043ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ee   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0043f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043f2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0043f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043f6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0043f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043fa   eccc     call	0x2f98, 0           	CALL	_CalcIPChecksum
0043fc   f017
0043fe   6e08     movwf	0x8, 0             	MOVWF	r0x08
004400   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004402   f009
004404   0e05     movlw	0x5                	MOVLW	0x05
004406   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004408   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
00440a   1e09     comf	0x9, 0x1, 0         	COMF	r0x09, F
00440c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00440e   0102     movlb	0x2                	BANKSEL	_UDPProcess_checksums_1_1
004410   6f48     movwf	0x48, 0x1          	MOVWF	_UDPProcess_checksums_1_1, B
004412   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004414   0102     movlb	0x2                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
004416   6f49     movwf	0x49, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 1), B
                                           ;	.line	963; TCPIP_Stack/UDP.c	IPSetRxBuffer(0);
004418   0e00     movlw	0                  	MOVLW	0x00
00441a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00441c   0e00     movlw	0                  	MOVLW	0x00
00441e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004420   ec28     call	0xb650, 0           	CALL	_IPSetRxBuffer
004422   f05b
004424   0e02     movlw	0x2                	MOVLW	0x02
004426   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/UDP.c	checksums.w[1] = CalcIPBufferChecksum(len);
004428   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00442a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00442c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00442e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004430   ec81     call	0x1702, 0           	CALL	_CalcIPBufferChecksum
004432   f00b
004434   6e06     movwf	0x6, 0             	MOVWF	r0x06
004436   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004438   f007
00443a   0e02     movlw	0x2                	MOVLW	0x02
00443c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00443e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004440   0102     movlb	0x2                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
004442   6f4a     movwf	0x4a, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 2), B
004444   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004446   0102     movlb	0x2                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
004448   6f4b     movwf	0x4b, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 3), B
00444a   0102     movlb	0x2                	BANKSEL	_UDPProcess_checksums_1_1
                                           ;	.line	966; TCPIP_Stack/UDP.c	if(checksums.w[0] != checksums.w[1])
00444c   5148     movf	0x48, 0, 0x1        	MOVF	_UDPProcess_checksums_1_1, W, B
00444e   0102     movlb	0x2                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
004450   194a     xorwf	0x4a, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 2), W, B
004452   e105     bnz	0x445e               	BNZ	_00289_DS_
004454   0102     movlb	0x2                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
004456   5149     movf	0x49, 0, 0x1        	MOVF	(_UDPProcess_checksums_1_1 + 1), W, B
004458   0102     movlb	0x2                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00445a   194b     xorwf	0x4b, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 3), W, B
00445c   e004     bz	0x4466                	BZ	_00279_DS_
                                           _00289_DS_:
                                           ;	.line	968; TCPIP_Stack/UDP.c	MACDiscardRx();
00445e   ec81     call	0xad02, 0           	CALL	_MACDiscardRx
004460   f056
                                           ;	.line	969; TCPIP_Stack/UDP.c	return FALSE;
004462   6ae8     clrf	0xe8, 0             	CLRF	WREG
004464   d035     bra	0x44d0               	BRA	_00283_DS_
                                           _00279_DS_:
                                           ;	.line	973; TCPIP_Stack/UDP.c	s = FindMatchingSocket(&h, remoteNode, localIP);
004466   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPProcess_h_1_1)
004468   6e07     movwf	0x7, 0             	MOVWF	r0x07
00446a   0ee2     movlw	0xe2               	MOVLW	LOW(_UDPProcess_h_1_1)
00446c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00446e   0e80     movlw	0x80               	MOVLW	0x80
004470   6e08     movwf	0x8, 0             	MOVWF	r0x08
004472   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004476   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004478   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00447a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00447c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00447e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004482   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004486   5000     movf	0, 0, 0             	MOVF	r0x00, W
004488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00448a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00448c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00448e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004490   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004492   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004494   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004496   ecb2     call	0x2564, 0           	CALL	_FindMatchingSocket
004498   f012
00449a   6e00     movwf	0, 0               	MOVWF	r0x00
00449c   0e09     movlw	0x9                	MOVLW	0x09
00449e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	974; TCPIP_Stack/UDP.c	if(s == INVALID_UDP_SOCKET)
0044a0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0044a2   f001
0044a4   6a02     clrf	0x2, 0              	CLRF	r0x02
0044a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0044a8   0aff     xorlw	0xff               	XORLW	0xff
0044aa   e102     bnz	0x44b0               	BNZ	_00290_DS_
0044ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0044ae   e001     bz	0x44b2                	BZ	_00291_DS_
                                           _00290_DS_:
0044b0   d004     bra	0x44ba               	BRA	_00281_DS_
                                           _00291_DS_:
                                           ;	.line	978; TCPIP_Stack/UDP.c	MACDiscardRx();
0044b2   ec81     call	0xad02, 0           	CALL	_MACDiscardRx
0044b4   f056
                                           ;	.line	979; TCPIP_Stack/UDP.c	return FALSE;
0044b6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0044b8   d00b     bra	0x44d0               	BRA	_00283_DS_
                                           _00281_DS_:
                                           ;	.line	983; TCPIP_Stack/UDP.c	SocketWithRxData = s;
0044ba   c000     movff	0, 0xe5b           	MOVFF	r0x00, _SocketWithRxData
0044bc   fe5b
                                           ;	.line	984; TCPIP_Stack/UDP.c	UDPRxCount = h.Length;
0044be   cbe6     movff	0xbe6, 0x2a3       	MOVFF	(_UDPProcess_h_1_1 + 4), _UDPRxCount
0044c0   f2a3
0044c2   cbe7     movff	0xbe7, 0x2a4       	MOVFF	(_UDPProcess_h_1_1 + 5), (_UDPRxCount + 1)
0044c4   f2a4
0044c6   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	985; TCPIP_Stack/UDP.c	Flags.bFirstRead = 1;
0044c8   81b6     bsf	0xb6, 0, 0x1         	BSF	_Flags, 0, B
0044ca   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	986; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 0;
0044cc   93b6     bcf	0xb6, 0x1, 0x1       	BCF	_Flags, 1, B
                                           ;	.line	990; TCPIP_Stack/UDP.c	return TRUE;
0044ce   0e01     movlw	0x1                	MOVLW	0x01
                                           _00283_DS_:
0044d0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0044d2   f00b
0044d4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0044d6   f00a
0044d8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0044da   f009
0044dc   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0044de   f008
0044e0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0044e2   f007
0044e4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0044e6   f006
0044e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0044ea   f005
0044ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0044ee   f004
0044f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0044f2   f003
0044f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0044f6   f002
0044f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0044fa   f001
0044fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0044fe   f000
004500   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004502   ffd9
004504   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPDiscard	code
                                           _UDPDiscard:
                                           ;	.line	886; TCPIP_Stack/UDP.c	void UDPDiscard(void)
00bc16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00bc18   ffe5
00bc1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00bc1c   ffd9
00bc1e   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	888; TCPIP_Stack/UDP.c	if(!Flags.bWasDiscarded)
00bc20   b3b6     btfsc	0xb6, 0x1, 0x1     	BTFSC	_Flags, 1, B
00bc22   d00b     bra	0xbc3a               	BRA	_00271_DS_
                                           ;	.line	890; TCPIP_Stack/UDP.c	MACDiscardRx();
00bc24   ec81     call	0xad02, 0           	CALL	_MACDiscardRx
00bc26   f056
00bc28   0102     movlb	0x2                	BANKSEL	_UDPRxCount
                                           ;	.line	891; TCPIP_Stack/UDP.c	UDPRxCount = 0;
00bc2a   6ba3     clrf	0xa3, 0x1           	CLRF	_UDPRxCount, B
00bc2c   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
00bc2e   6ba4     clrf	0xa4, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	892; TCPIP_Stack/UDP.c	SocketWithRxData = INVALID_UDP_SOCKET;
00bc30   0eff     movlw	0xff               	MOVLW	0xff
00bc32   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
00bc34   6f5b     movwf	0x5b, 0x1          	MOVWF	_SocketWithRxData, B
00bc36   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	893; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
00bc38   83b6     bsf	0xb6, 0x1, 0x1       	BSF	_Flags, 1, B
                                           _00271_DS_:
00bc3a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00bc3c   ffd9
00bc3e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGetArray	code
                                           _UDPGetArray:
                                           ;	.line	843; TCPIP_Stack/UDP.c	WORD UDPGetArray(BYTE *cData, WORD wDataLen)
009b90   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
009b92   ffe5
009b94   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
009b96   ffd9
009b98   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
009b9a   ffe5
009b9c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009b9e   ffe5
009ba0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009ba2   ffe5
009ba4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009ba6   ffe5
009ba8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
009baa   ffe5
009bac   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009bae   ffe5
009bb0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009bb2   ffe5
009bb4   0e02     movlw	0x2                	MOVLW	0x02
009bb6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009bb8   f000
009bba   0e03     movlw	0x3                	MOVLW	0x03
009bbc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009bbe   f001
009bc0   0e04     movlw	0x4                	MOVLW	0x04
009bc2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
009bc4   f002
009bc6   0e05     movlw	0x5                	MOVLW	0x05
009bc8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009bca   f003
009bcc   0e06     movlw	0x6                	MOVLW	0x06
009bce   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
009bd0   f004
009bd2   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	848; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
009bd4   51a4     movf	0xa4, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
009bd6   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
009bd8   5d9c     subwf	0x9c, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
009bda   e104     bnz	0x9be4               	BNZ	_00261_DS_
009bdc   0102     movlb	0x2                	BANKSEL	_UDPRxCount
009bde   51a3     movf	0xa3, 0, 0x1        	MOVF	_UDPRxCount, W, B
009be0   0102     movlb	0x2                	BANKSEL	_wGetOffset
009be2   5d9b     subwf	0x9b, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00261_DS_:
009be4   e205     bc	0x9bf0                	BC	_00252_DS_
009be6   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
009be8   515b     movf	0x5b, 0, 0x1        	MOVF	_SocketWithRxData, W, B
009bea   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
009bec   19b7     xorwf	0xb7, 0, 0x1       	XORWF	_activeUDPSocket, W, B
009bee   e003     bz	0x9bf6                	BZ	_00253_DS_
                                           _00252_DS_:
                                           ;	.line	849; TCPIP_Stack/UDP.c	return 0;
009bf0   6af3     clrf	0xf3, 0             	CLRF	PRODL
009bf2   6ae8     clrf	0xe8, 0             	CLRF	WREG
009bf4   d02e     bra	0x9c52               	BRA	_00257_DS_
                                           _00253_DS_:
009bf6   0102     movlb	0x2                	BANKSEL	_wGetOffset
                                           ;	.line	852; TCPIP_Stack/UDP.c	wBytesAvailable = UDPRxCount - wGetOffset;
009bf8   519b     movf	0x9b, 0, 0x1        	MOVF	_wGetOffset, W, B
009bfa   0102     movlb	0x2                	BANKSEL	_UDPRxCount
009bfc   5da3     subwf	0xa3, 0, 0x1       	SUBWF	_UDPRxCount, W, B
009bfe   6e05     movwf	0x5, 0             	MOVWF	r0x05
009c00   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
009c02   519c     movf	0x9c, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
009c04   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
009c06   59a4     subwfb	0xa4, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
009c08   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/UDP.c	if(wBytesAvailable < wDataLen) wDataLen = wBytesAvailable;
009c0a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009c0c   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
009c0e   e102     bnz	0x9c14               	BNZ	_00264_DS_
009c10   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009c12   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00264_DS_:
009c14   e204     bc	0x9c1e                	BC	_00256_DS_
009c16   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
009c18   f003
009c1a   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
009c1c   f004
                                           _00256_DS_:
                                           ;	.line	855; TCPIP_Stack/UDP.c	wDataLen = MACGetArray(cData, wDataLen);
009c1e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c22   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
009c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
009c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
009c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
009c32   ecac     call	0x9d58, 0           	CALL	_MACGetArray
009c34   f04e
009c36   6e03     movwf	0x3, 0             	MOVWF	r0x03
009c38   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
009c3a   f004
009c3c   0e05     movlw	0x5                	MOVLW	0x05
009c3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	856; TCPIP_Stack/UDP.c	wGetOffset += wDataLen;
009c40   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009c42   0102     movlb	0x2                	BANKSEL	_wGetOffset
009c44   279b     addwf	0x9b, 0x1, 0x1     	ADDWF	_wGetOffset, F, B
009c46   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009c48   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
009c4a   239c     addwfc	0x9c, 0x1, 0x1    	ADDWFC	(_wGetOffset + 1), F, B
                                           ;	.line	858; TCPIP_Stack/UDP.c	return wDataLen;
009c4c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
009c4e   fff3
009c50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00257_DS_:
009c52   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
009c54   f006
009c56   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
009c58   f005
009c5a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
009c5c   f004
009c5e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
009c60   f003
009c62   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
009c64   f002
009c66   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
009c68   f001
009c6a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
009c6c   f000
009c6e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
009c70   ffd9
009c72   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGet	code
                                           _UDPGet:
                                           ;	.line	805; TCPIP_Stack/UDP.c	BOOL UDPGet(BYTE *v)
00b058   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b05a   ffe5
00b05c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b05e   ffd9
00b060   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b062   ffe5
00b064   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b066   ffe5
00b068   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b06a   ffe5
00b06c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b06e   ffe5
00b070   0e02     movlw	0x2                	MOVLW	0x02
00b072   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b074   f000
00b076   0e03     movlw	0x3                	MOVLW	0x03
00b078   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b07a   f001
00b07c   0e04     movlw	0x4                	MOVLW	0x04
00b07e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00b080   f002
00b082   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	808; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
00b084   51a4     movf	0xa4, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
00b086   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
00b088   5d9c     subwf	0x9c, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
00b08a   e104     bnz	0xb094               	BNZ	_00245_DS_
00b08c   0102     movlb	0x2                	BANKSEL	_UDPRxCount
00b08e   51a3     movf	0xa3, 0, 0x1        	MOVF	_UDPRxCount, W, B
00b090   0102     movlb	0x2                	BANKSEL	_wGetOffset
00b092   5d9b     subwf	0x9b, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00245_DS_:
00b094   e205     bc	0xb0a0                	BC	_00239_DS_
00b096   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
00b098   515b     movf	0x5b, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00b09a   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
00b09c   19b7     xorwf	0xb7, 0, 0x1       	XORWF	_activeUDPSocket, W, B
00b09e   e002     bz	0xb0a4                	BZ	_00240_DS_
                                           _00239_DS_:
                                           ;	.line	809; TCPIP_Stack/UDP.c	return FALSE;
00b0a0   6ae8     clrf	0xe8, 0             	CLRF	WREG
00b0a2   d012     bra	0xb0c8               	BRA	_00242_DS_
                                           _00240_DS_:
                                           ;	.line	811; TCPIP_Stack/UDP.c	*v = MACGet();
00b0a4   ec32     call	0xbe64, 0           	CALL	_MACGet
00b0a6   f05f
00b0a8   6e03     movwf	0x3, 0             	MOVWF	r0x03
00b0aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b0ac   ffe5
00b0ae   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00b0b0   ffe9
00b0b2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00b0b4   fff3
00b0b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b0b8   ec28     call	0xbe50, 0           	CALL	__gptrput1
00b0ba   f05f
00b0bc   0102     movlb	0x2                	BANKSEL	_wGetOffset
                                           ;	.line	812; TCPIP_Stack/UDP.c	wGetOffset++;
00b0be   2b9b     incf	0x9b, 0x1, 0x1      	INCF	_wGetOffset, F, B
00b0c0   e302     bnc	0xb0c6               	BNC	_10296_DS_
00b0c2   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
00b0c4   2b9c     incf	0x9c, 0x1, 0x1      	INCF	(_wGetOffset + 1), F, B
                                           _10296_DS_:
                                           ;	.line	814; TCPIP_Stack/UDP.c	return TRUE;
00b0c6   0e01     movlw	0x1                	MOVLW	0x01
                                           _00242_DS_:
00b0c8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b0ca   f003
00b0cc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b0ce   f002
00b0d0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b0d2   f001
00b0d4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b0d6   f000
00b0d8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b0da   ffd9
00b0dc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsGetReady	code
                                           _UDPIsGetReady:
                                           ;	.line	766; TCPIP_Stack/UDP.c	WORD UDPIsGetReady(UDP_SOCKET s)
00b4c0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b4c2   ffe5
00b4c4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b4c6   ffd9
00b4c8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b4ca   ffe5
00b4cc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b4ce   ffe5
00b4d0   0e02     movlw	0x2                	MOVLW	0x02
00b4d2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b4d4   f000
                                           ;	.line	768; TCPIP_Stack/UDP.c	activeUDPSocket = s;
00b4d6   c000     movff	0, 0x2b7           	MOVFF	r0x00, _activeUDPSocket
00b4d8   f2b7
00b4da   010e     movlb	0xe                	BANKSEL	_SocketWithRxData
                                           ;	.line	769; TCPIP_Stack/UDP.c	if(SocketWithRxData != s) return 0;
00b4dc   515b     movf	0x5b, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00b4de   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00b4e0   e003     bz	0xb4e8                	BZ	_00226_DS_
00b4e2   6af3     clrf	0xf3, 0             	CLRF	PRODL
00b4e4   6ae8     clrf	0xe8, 0             	CLRF	WREG
00b4e6   d01a     bra	0xb51c               	BRA	_00229_DS_
                                           _00226_DS_:
00b4e8   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	773; TCPIP_Stack/UDP.c	if(Flags.bFirstRead)
00b4ea   a1b6     btfss	0xb6, 0, 0x1       	BTFSS	_Flags, 0, B
00b4ec   d00a     bra	0xb502               	BRA	_00228_DS_
00b4ee   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	775; TCPIP_Stack/UDP.c	Flags.bFirstRead = 0;
00b4f0   91b6     bcf	0xb6, 0, 0x1         	BCF	_Flags, 0, B
                                           ;	.line	776; TCPIP_Stack/UDP.c	UDPSetRxBuffer(0);
00b4f2   0e00     movlw	0                  	MOVLW	0x00
00b4f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b4f6   0e00     movlw	0                  	MOVLW	0x00
00b4f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b4fa   ecf9     call	0xb5f2, 0           	CALL	_UDPSetRxBuffer
00b4fc   f05a
00b4fe   0e02     movlw	0x2                	MOVLW	0x02
00b500   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00228_DS_:
00b502   0102     movlb	0x2                	BANKSEL	_wGetOffset
                                           ;	.line	779; TCPIP_Stack/UDP.c	return UDPRxCount - wGetOffset;
00b504   519b     movf	0x9b, 0, 0x1        	MOVF	_wGetOffset, W, B
00b506   0102     movlb	0x2                	BANKSEL	_UDPRxCount
00b508   5da3     subwf	0xa3, 0, 0x1       	SUBWF	_UDPRxCount, W, B
00b50a   6e00     movwf	0, 0               	MOVWF	r0x00
00b50c   0102     movlb	0x2                	BANKSEL	(_wGetOffset + 1)
00b50e   519c     movf	0x9c, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
00b510   0102     movlb	0x2                	BANKSEL	(_UDPRxCount + 1)
00b512   59a4     subwfb	0xa4, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
00b514   6e01     movwf	0x1, 0             	MOVWF	r0x01
00b516   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00b518   fff3
00b51a   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00229_DS_:
00b51c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b51e   f001
00b520   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b522   f000
00b524   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b526   ffd9
00b528   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPFlush	code
                                           _UDPFlush:
                                           ;	.line	671; TCPIP_Stack/UDP.c	void UDPFlush(void)
004506   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004508   ffe5
00450a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00450c   ffd9
00450e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004510   ffe5
004512   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004514   ffe5
004516   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004518   ffe5
00451a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00451c   ffe5
00451e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004520   ffe5
004522   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004524   ffe5
004526   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004528   ffe5
00452a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00452c   ffe5
00452e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004530   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004532   0102     movlb	0x2                	BANKSEL	_activeUDPSocket
                                           ;	.line	679; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[activeUDPSocket];
004534   51b7     movf	0xb7, 0, 0x1        	MOVF	_activeUDPSocket, W, B
004536   0d0e     mullw	0xe                	MULLW	0x0e
004538   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00453a   f000
00453c   6a01     clrf	0x1, 0              	CLRF	r0x01
00453e   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
004540   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004542   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
004544   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004546   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004548   6e01     movwf	0x1, 0             	MOVWF	r0x01
00454a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00454c   6e00     movwf	0, 0               	MOVWF	r0x00
00454e   0e80     movlw	0x80               	MOVLW	0x80
004550   6e02     movwf	0x2, 0             	MOVWF	r0x02
004552   0102     movlb	0x2                	BANKSEL	_UDPTxCount
                                           ;	.line	681; TCPIP_Stack/UDP.c	wUDPLength = UDPTxCount + sizeof(UDP_HEADER);
004554   519f     movf	0x9f, 0, 0x1        	MOVF	_UDPTxCount, W, B
004556   0f08     addlw	0x8                	ADDLW	0x08
004558   6e03     movwf	0x3, 0             	MOVWF	r0x03
00455a   0e00     movlw	0                  	MOVLW	0x00
00455c   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00455e   21a0     addwfc	0xa0, 0, 0x1      	ADDWFC	(_UDPTxCount + 1), W, B
004560   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	684; TCPIP_Stack/UDP.c	h.SourcePort = swaps(p->localPort);
004562   5000     movf	0, 0, 0             	MOVF	r0x00, W
004564   0f0c     addlw	0xc                	ADDLW	0x0c
004566   6e05     movwf	0x5, 0             	MOVWF	r0x05
004568   0e00     movlw	0                  	MOVLW	0x00
00456a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00456c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00456e   0e00     movlw	0                  	MOVLW	0x00
004570   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004572   6e07     movwf	0x7, 0             	MOVWF	r0x07
004574   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004576   ffe9
004578   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00457a   fff3
00457c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00457e   eccb     call	0xbb96, 0           	CALL	__gptrget2
004580   f05d
004582   6e05     movwf	0x5, 0             	MOVWF	r0x05
004584   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004586   f006
004588   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00458a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00458c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00458e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004590   eca9     call	0xb752, 0           	CALL	_swaps
004592   f05b
004594   6e05     movwf	0x5, 0             	MOVWF	r0x05
004596   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004598   f006
00459a   0e02     movlw	0x2                	MOVLW	0x02
00459c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00459e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0045a0   010b     movlb	0xb                	BANKSEL	_UDPFlush_h_1_1
0045a2   6fda     movwf	0xda, 0x1          	MOVWF	_UDPFlush_h_1_1, B
0045a4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0045a6   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 1)
0045a8   6fdb     movwf	0xdb, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 1), B
                                           ;	.line	685; TCPIP_Stack/UDP.c	h.DestinationPort = swaps(p->remotePort);
0045aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0045ac   0f0a     addlw	0xa                	ADDLW	0x0a
0045ae   6e05     movwf	0x5, 0             	MOVWF	r0x05
0045b0   0e00     movlw	0                  	MOVLW	0x00
0045b2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0045b4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0045b6   0e00     movlw	0                  	MOVLW	0x00
0045b8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0045ba   6e07     movwf	0x7, 0             	MOVWF	r0x07
0045bc   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0045be   ffe9
0045c0   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0045c2   fff3
0045c4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0045c6   eccb     call	0xbb96, 0           	CALL	__gptrget2
0045c8   f05d
0045ca   6e05     movwf	0x5, 0             	MOVWF	r0x05
0045cc   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0045ce   f006
0045d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0045d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0045d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045d8   eca9     call	0xb752, 0           	CALL	_swaps
0045da   f05b
0045dc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0045de   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0045e0   f006
0045e2   0e02     movlw	0x2                	MOVLW	0x02
0045e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0045e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0045e8   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 2)
0045ea   6fdc     movwf	0xdc, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 2), B
0045ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0045ee   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 3)
0045f0   6fdd     movwf	0xdd, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 3), B
                                           ;	.line	686; TCPIP_Stack/UDP.c	h.Length = swaps(wUDPLength);
0045f2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0045f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045f6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0045f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045fa   eca9     call	0xb752, 0           	CALL	_swaps
0045fc   f05b
0045fe   6e05     movwf	0x5, 0             	MOVWF	r0x05
004600   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004602   f006
004604   0e02     movlw	0x2                	MOVLW	0x02
004606   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004608   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00460a   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 4)
00460c   6fde     movwf	0xde, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 4), B
00460e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004610   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 5)
004612   6fdf     movwf	0xdf, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 5), B
004614   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 6)
                                           ;	.line	687; TCPIP_Stack/UDP.c	h.Checksum = 0x0000;
004616   6be0     clrf	0xe0, 0x1           	CLRF	(_UDPFlush_h_1_1 + 6), B
004618   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 7)
00461a   6be1     clrf	0xe1, 0x1           	CLRF	(_UDPFlush_h_1_1 + 7), B
00461c   0108     movlb	0x8                	BANKSEL	_AppConfig
                                           ;	.line	695; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val = AppConfig.MyIPAddr.Val;
00461e   51c8     movf	0xc8, 0, 0x1        	MOVF	_AppConfig, W, B
004620   010b     movlb	0xb                	BANKSEL	_UDPFlush_pseudoHeader_2_2
004622   6f38     movwf	0x38, 0x1          	MOVWF	_UDPFlush_pseudoHeader_2_2, B
004624   0108     movlb	0x8                	BANKSEL	(_AppConfig + 1)
004626   51c9     movf	0xc9, 0, 0x1        	MOVF	(_AppConfig + 1), W, B
004628   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 1)
00462a   6f39     movwf	0x39, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 1), B
00462c   0108     movlb	0x8                	BANKSEL	(_AppConfig + 2)
00462e   51ca     movf	0xca, 0, 0x1        	MOVF	(_AppConfig + 2), W, B
004630   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 2)
004632   6f3a     movwf	0x3a, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 2), B
004634   0108     movlb	0x8                	BANKSEL	(_AppConfig + 3)
004636   51cb     movf	0xcb, 0, 0x1        	MOVF	(_AppConfig + 3), W, B
004638   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 3)
00463a   6f3b     movwf	0x3b, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 3), B
                                           ;	.line	696; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val = p->remoteNode.IPAddr.Val;
00463c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00463e   ffe9
004640   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004642   fff3
004644   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004646   ec40     call	0xba80, 0           	CALL	__gptrget4
004648   f05d
00464a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00464c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00464e   f006
004650   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
004652   f007
004654   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
004656   f008
004658   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00465a   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 4)
00465c   6f3c     movwf	0x3c, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 4), B
00465e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004660   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 5)
004662   6f3d     movwf	0x3d, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 5), B
004664   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004666   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 6)
004668   6f3e     movwf	0x3e, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 6), B
00466a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00466c   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 7)
00466e   6f3f     movwf	0x3f, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 7), B
004670   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 8)
                                           ;	.line	697; TCPIP_Stack/UDP.c	pseudoHeader.Zero = 0x0;
004672   6b40     clrf	0x40, 0x1           	CLRF	(_UDPFlush_pseudoHeader_2_2 + 8), B
                                           ;	.line	698; TCPIP_Stack/UDP.c	pseudoHeader.Protocol = IP_PROT_UDP;
004674   0e11     movlw	0x11               	MOVLW	0x11
004676   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 9)
004678   6f41     movwf	0x41, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 9), B
                                           ;	.line	699; TCPIP_Stack/UDP.c	pseudoHeader.Length = wUDPLength;
00467a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00467c   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
00467e   6f42     movwf	0x42, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
004680   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004682   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
004684   6f43     movwf	0x43, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	700; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
004686   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00468a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00468c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00468e   eca9     call	0xb752, 0           	CALL	_swaps
004690   f05b
004692   6e05     movwf	0x5, 0             	MOVWF	r0x05
004694   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004696   f006
004698   0e02     movlw	0x2                	MOVLW	0x02
00469a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00469c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00469e   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0046a0   6f42     movwf	0x42, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0046a2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0046a4   010b     movlb	0xb                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0046a6   6f43     movwf	0x43, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	701; TCPIP_Stack/UDP.c	h.Checksum = ~CalcIPChecksum((BYTE*)&pseudoHeader, 
0046a8   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPFlush_pseudoHeader_2_2)
0046aa   6e06     movwf	0x6, 0             	MOVWF	r0x06
0046ac   0e38     movlw	0x38               	MOVLW	LOW(_UDPFlush_pseudoHeader_2_2)
0046ae   6e05     movwf	0x5, 0             	MOVWF	r0x05
0046b0   0e80     movlw	0x80               	MOVLW	0x80
0046b2   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	702; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0046b4   0e00     movlw	0                  	MOVLW	0x00
0046b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046b8   0e0c     movlw	0xc                	MOVLW	0x0c
0046ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046bc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0046be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046c0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0046c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046c4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0046c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046c8   eccc     call	0x2f98, 0           	CALL	_CalcIPChecksum
0046ca   f017
0046cc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0046ce   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0046d0   f006
0046d2   0e05     movlw	0x5                	MOVLW	0x05
0046d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0046d6   1e05     comf	0x5, 0x1, 0         	COMF	r0x05, F
0046d8   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
0046da   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0046dc   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 6)
0046de   6fe0     movwf	0xe0, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 6), B
0046e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0046e2   010b     movlb	0xb                	BANKSEL	(_UDPFlush_h_1_1 + 7)
0046e4   6fe1     movwf	0xe1, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 7), B
                                           ;	.line	708; TCPIP_Stack/UDP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
0046e6   0e1a     movlw	0x1a               	MOVLW	0x1a
0046e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046ea   0e19     movlw	0x19               	MOVLW	0x19
0046ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046ee   ecb1     call	0xb162, 0           	CALL	_MACSetWritePtr
0046f0   f058
0046f2   0e02     movlw	0x2                	MOVLW	0x02
0046f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; TCPIP_Stack/UDP.c	IPPutHeader(&p->remoteNode, IP_PROT_UDP, wUDPLength);
0046f6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0046f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0046fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0046fe   0e11     movlw	0x11               	MOVLW	0x11
004700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004702   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004706   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004708   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00470a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00470c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00470e   ec32     call	0x6a64, 0           	CALL	_IPPutHeader
004710   f035
004712   0e06     movlw	0x6                	MOVLW	0x06
004714   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	714; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&h, sizeof(h));
004716   0e0b     movlw	0xb                	MOVLW	HIGH(_UDPFlush_h_1_1)
004718   6e01     movwf	0x1, 0             	MOVWF	r0x01
00471a   0eda     movlw	0xda               	MOVLW	LOW(_UDPFlush_h_1_1)
00471c   6e00     movwf	0, 0               	MOVWF	r0x00
00471e   0e80     movlw	0x80               	MOVLW	0x80
004720   6e02     movwf	0x2, 0             	MOVWF	r0x02
004722   0e00     movlw	0                  	MOVLW	0x00
004724   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004726   0e08     movlw	0x8                	MOVLW	0x08
004728   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00472a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00472c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00472e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004732   5000     movf	0, 0, 0             	MOVF	r0x00, W
004734   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004736   eceb     call	0xabd6, 0           	CALL	_MACPutArray
004738   f055
00473a   0e05     movlw	0x5                	MOVLW	0x05
00473c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	720; TCPIP_Stack/UDP.c	sizeof(IP_HEADER));
00473e   0e1a     movlw	0x1a               	MOVLW	0x1a
004740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004742   0e2d     movlw	0x2d               	MOVLW	0x2d
004744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004746   ecf3     call	0xb1e6, 0           	CALL	_MACSetReadPtr
004748   f058
00474a   6e00     movwf	0, 0               	MOVWF	r0x00
00474c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00474e   f001
004750   0e02     movlw	0x2                	MOVLW	0x02
004752   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	721; TCPIP_Stack/UDP.c	wChecksum = CalcIPBufferChecksum(wUDPLength);
004754   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004756   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004758   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00475a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00475c   ec81     call	0x1702, 0           	CALL	_CalcIPBufferChecksum
00475e   f00b
004760   0102     movlb	0x2                	BANKSEL	_UDPFlush_wChecksum_1_1
004762   6fa1     movwf	0xa1, 0x1          	MOVWF	_UDPFlush_wChecksum_1_1, B
004764   cff3     movff	0xff3, 0x2a2       	MOVFF	PRODL, (_UDPFlush_wChecksum_1_1 + 1)
004766   f2a2
004768   0e02     movlw	0x2                	MOVLW	0x02
00476a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	722; TCPIP_Stack/UDP.c	MACSetReadPtr(wReadPtrSave);
00476c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00476e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004770   5000     movf	0, 0, 0             	MOVF	r0x00, W
004772   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004774   ecf3     call	0xb1e6, 0           	CALL	_MACSetReadPtr
004776   f058
004778   0e02     movlw	0x2                	MOVLW	0x02
00477a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	724; TCPIP_Stack/UDP.c	+ 6);    // 6 is the offset to the Checksum field in UDP_HEADER
00477c   0e1a     movlw	0x1a               	MOVLW	0x1a
00477e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004780   0e33     movlw	0x33               	MOVLW	0x33
004782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004784   ecb1     call	0xb162, 0           	CALL	_MACSetWritePtr
004786   f058
004788   0e02     movlw	0x2                	MOVLW	0x02
00478a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	725; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&wChecksum, sizeof(wChecksum));
00478c   0e02     movlw	0x2                	MOVLW	HIGH(_UDPFlush_wChecksum_1_1)
00478e   6e01     movwf	0x1, 0             	MOVWF	r0x01
004790   0ea1     movlw	0xa1               	MOVLW	LOW(_UDPFlush_wChecksum_1_1)
004792   6e00     movwf	0, 0               	MOVWF	r0x00
004794   0e80     movlw	0x80               	MOVLW	0x80
004796   6e02     movwf	0x2, 0             	MOVWF	r0x02
004798   0e00     movlw	0                  	MOVLW	0x00
00479a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00479c   0e02     movlw	0x2                	MOVLW	0x02
00479e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0047a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0047a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0047aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047ac   eceb     call	0xabd6, 0           	CALL	_MACPutArray
0047ae   f055
0047b0   0e05     movlw	0x5                	MOVLW	0x05
0047b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	730; TCPIP_Stack/UDP.c	MACFlush();
0047b4   ec95     call	0xb52a, 0           	CALL	_MACFlush
0047b6   f05a
0047b8   0102     movlb	0x2                	BANKSEL	_UDPTxCount
                                           ;	.line	733; TCPIP_Stack/UDP.c	UDPTxCount = 0;
0047ba   6b9f     clrf	0x9f, 0x1           	CLRF	_UDPTxCount, B
0047bc   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
0047be   6ba0     clrf	0xa0, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	734; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
0047c0   0eff     movlw	0xff               	MOVLW	0xff
0047c2   010e     movlb	0xe                	BANKSEL	_LastPutSocket
0047c4   6f5a     movwf	0x5a, 0x1          	MOVWF	_LastPutSocket, B
0047c6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0047c8   f008
0047ca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0047cc   f007
0047ce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0047d0   f006
0047d2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0047d4   f005
0047d6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0047d8   f004
0047da   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0047dc   f003
0047de   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0047e0   f002
0047e2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0047e4   f001
0047e6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0047e8   f000
0047ea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0047ec   ffd9
0047ee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutString	code
                                           _UDPPutString:
                                           ;	.line	601; TCPIP_Stack/UDP.c	BYTE* UDPPutString(BYTE *strData)
00aa0c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00aa0e   ffe5
00aa10   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00aa12   ffd9
00aa14   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00aa16   ffe5
00aa18   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00aa1a   ffe5
00aa1c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00aa1e   ffe5
00aa20   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00aa22   ffe5
00aa24   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00aa26   ffe5
00aa28   0e02     movlw	0x2                	MOVLW	0x02
00aa2a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00aa2c   f000
00aa2e   0e03     movlw	0x3                	MOVLW	0x03
00aa30   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00aa32   f001
00aa34   0e04     movlw	0x4                	MOVLW	0x04
00aa36   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00aa38   f002
                                           ;	.line	603; TCPIP_Stack/UDP.c	return strData + UDPPutArray(strData, strlen((char*)strData));
00aa3a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00aa3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00aa40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa42   5000     movf	0, 0, 0             	MOVF	r0x00, W
00aa44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa46   ec33     call	0xb266, 0           	CALL	_strlen
00aa48   f059
00aa4a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00aa4c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00aa4e   f004
00aa50   0e03     movlw	0x3                	MOVLW	0x03
00aa52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00aa54   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00aa56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa58   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00aa5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa5c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00aa5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa60   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00aa62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa64   5000     movf	0, 0, 0             	MOVF	r0x00, W
00aa66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00aa68   ecf9     call	0x97f2, 0           	CALL	_UDPPutArray
00aa6a   f04b
00aa6c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00aa6e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00aa70   f004
00aa72   0e05     movlw	0x5                	MOVLW	0x05
00aa74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00aa76   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00aa78   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00aa7a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00aa7c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00aa7e   6ae8     clrf	0xe8, 0             	CLRF	WREG
00aa80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00aa82   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
00aa84   fff4
00aa86   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00aa88   fff3
00aa8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00aa8c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00aa8e   f004
00aa90   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00aa92   f003
00aa94   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00aa96   f002
00aa98   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00aa9a   f001
00aa9c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aa9e   f000
00aaa0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aaa2   ffd9
00aaa4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutArray	code
                                           _UDPPutArray:
                                           ;	.line	514; TCPIP_Stack/UDP.c	WORD UDPPutArray(BYTE *cData, WORD wDataLen)
0097f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0097f4   ffe5
0097f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0097f8   ffd9
0097fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0097fc   ffe5
0097fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
009800   ffe5
009802   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
009804   ffe5
009806   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
009808   ffe5
00980a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00980c   ffe5
00980e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
009810   ffe5
009812   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
009814   ffe5
009816   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
009818   ffe5
00981a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00981c   ffe5
00981e   0e02     movlw	0x2                	MOVLW	0x02
009820   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
009822   f000
009824   0e03     movlw	0x3                	MOVLW	0x03
009826   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
009828   f001
00982a   0e04     movlw	0x4                	MOVLW	0x04
00982c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00982e   f002
009830   0e05     movlw	0x5                	MOVLW	0x05
009832   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
009834   f003
009836   0e06     movlw	0x6                	MOVLW	0x06
009838   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00983a   f004
                                           ;	.line	518; TCPIP_Stack/UDP.c	wTemp=(MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER))-wPutOffset;
00983c   c299     movff	0x299, 0x5         	MOVFF	_wPutOffset, r0x05
00983e   f005
009840   c29a     movff	0x29a, 0x6         	MOVFF	(_wPutOffset + 1), r0x06
009842   f006
009844   6a07     clrf	0x7, 0              	CLRF	r0x07
009846   6a08     clrf	0x8, 0              	CLRF	r0x08
009848   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00984a   08c0     sublw	0xc0               	SUBLW	0xc0
00984c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00984e   0e05     movlw	0x5                	MOVLW	0x05
009850   5606     subfwb	0x6, 0x1, 0       	SUBFWB	r0x06, F
009852   0e00     movlw	0                  	MOVLW	0x00
009854   5607     subfwb	0x7, 0x1, 0       	SUBFWB	r0x07, F
009856   0e00     movlw	0                  	MOVLW	0x00
009858   5608     subfwb	0x8, 0x1, 0       	SUBFWB	r0x08, F
                                           ;	.line	519; TCPIP_Stack/UDP.c	if(wTemp < wDataLen) wDataLen = wTemp;
00985a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00985c   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
00985e   e102     bnz	0x9864               	BNZ	_00209_DS_
009860   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009862   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00209_DS_:
009864   e204     bc	0x986e                	BC	_00202_DS_
009866   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
009868   f003
00986a   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
00986c   f004
                                           _00202_DS_:
                                           ;	.line	521; TCPIP_Stack/UDP.c	wPutOffset += wDataLen;
00986e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
009870   0102     movlb	0x2                	BANKSEL	_wPutOffset
009872   2799     addwf	0x99, 0x1, 0x1     	ADDWF	_wPutOffset, F, B
009874   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009876   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
009878   239a     addwfc	0x9a, 0x1, 0x1    	ADDWFC	(_wPutOffset + 1), F, B
00987a   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	522; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount) UDPTxCount = wPutOffset;
00987c   519a     movf	0x9a, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
00987e   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
009880   5da0     subwf	0xa0, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
009882   e104     bnz	0x988c               	BNZ	_00210_DS_
009884   0102     movlb	0x2                	BANKSEL	_wPutOffset
009886   5199     movf	0x99, 0, 0x1        	MOVF	_wPutOffset, W, B
009888   0102     movlb	0x2                	BANKSEL	_UDPTxCount
00988a   5d9f     subwf	0x9f, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00210_DS_:
00988c   e204     bc	0x9896                	BC	_00204_DS_
00988e   c299     movff	0x299, 0x29f       	MOVFF	_wPutOffset, _UDPTxCount
009890   f29f
009892   c29a     movff	0x29a, 0x2a0       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
009894   f2a0
                                           _00204_DS_:
                                           ;	.line	525; TCPIP_Stack/UDP.c	MACPutArray(cData, wDataLen);
009896   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
009898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00989a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00989c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00989e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0098a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0098a2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0098a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0098a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0098a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0098aa   eceb     call	0xabd6, 0           	CALL	_MACPutArray
0098ac   f055
0098ae   0e05     movlw	0x5                	MOVLW	0x05
0098b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; TCPIP_Stack/UDP.c	return wDataLen;
0098b2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0098b4   fff3
0098b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0098b8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0098ba   f008
0098bc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0098be   f007
0098c0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0098c2   f006
0098c4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0098c6   f005
0098c8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0098ca   f004
0098cc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0098ce   f003
0098d0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0098d2   f002
0098d4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0098d6   f001
0098d8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0098da   f000
0098dc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0098de   ffd9
0098e0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPut	code
                                           _UDPPut:
                                           ;	.line	472; TCPIP_Stack/UDP.c	BOOL UDPPut(BYTE v)
00ac6c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ac6e   ffe5
00ac70   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ac72   ffd9
00ac74   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ac76   ffe5
00ac78   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00ac7a   ffe5
00ac7c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00ac7e   ffe5
00ac80   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00ac82   ffe5
00ac84   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00ac86   ffe5
00ac88   0e02     movlw	0x2                	MOVLW	0x02
00ac8a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00ac8c   f000
                                           ;	.line	475; TCPIP_Stack/UDP.c	if(wPutOffset >= (MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)))
00ac8e   c299     movff	0x299, 0x1         	MOVFF	_wPutOffset, r0x01
00ac90   f001
00ac92   c29a     movff	0x29a, 0x2         	MOVFF	(_wPutOffset + 1), r0x02
00ac94   f002
00ac96   6a03     clrf	0x3, 0              	CLRF	r0x03
00ac98   6a04     clrf	0x4, 0              	CLRF	r0x04
00ac9a   0e00     movlw	0                  	MOVLW	0x00
00ac9c   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00ac9e   e108     bnz	0xacb0               	BNZ	_00195_DS_
00aca0   0e00     movlw	0                  	MOVLW	0x00
00aca2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00aca4   e105     bnz	0xacb0               	BNZ	_00195_DS_
00aca6   0e05     movlw	0x5                	MOVLW	0x05
00aca8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00acaa   e102     bnz	0xacb0               	BNZ	_00195_DS_
00acac   0ec0     movlw	0xc0               	MOVLW	0xc0
00acae   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00195_DS_:
00acb0   e302     bnc	0xacb6               	BNC	_00188_DS_
                                           ;	.line	477; TCPIP_Stack/UDP.c	return FALSE;
00acb2   6ae8     clrf	0xe8, 0             	CLRF	WREG
00acb4   d019     bra	0xace8               	BRA	_00191_DS_
                                           _00188_DS_:
                                           ;	.line	481; TCPIP_Stack/UDP.c	MACPut(v);
00acb6   5000     movf	0, 0, 0             	MOVF	r0x00, W
00acb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00acba   ec14     call	0xbe28, 0           	CALL	_MACPut
00acbc   f05f
00acbe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00acc0   0102     movlb	0x2                	BANKSEL	_wPutOffset
                                           ;	.line	482; TCPIP_Stack/UDP.c	wPutOffset++;
00acc2   2b99     incf	0x99, 0x1, 0x1      	INCF	_wPutOffset, F, B
00acc4   e302     bnc	0xacca               	BNC	_20297_DS_
00acc6   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
00acc8   2b9a     incf	0x9a, 0x1, 0x1      	INCF	(_wPutOffset + 1), F, B
                                           _20297_DS_:
00acca   0102     movlb	0x2                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	483; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount)
00accc   519a     movf	0x9a, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
00acce   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00acd0   5da0     subwf	0xa0, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
00acd2   e104     bnz	0xacdc               	BNZ	_00196_DS_
00acd4   0102     movlb	0x2                	BANKSEL	_wPutOffset
00acd6   5199     movf	0x99, 0, 0x1        	MOVF	_wPutOffset, W, B
00acd8   0102     movlb	0x2                	BANKSEL	_UDPTxCount
00acda   5d9f     subwf	0x9f, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00196_DS_:
00acdc   e204     bc	0xace6                	BC	_00190_DS_
                                           ;	.line	484; TCPIP_Stack/UDP.c	UDPTxCount = wPutOffset;
00acde   c299     movff	0x299, 0x29f       	MOVFF	_wPutOffset, _UDPTxCount
00ace0   f29f
00ace2   c29a     movff	0x29a, 0x2a0       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
00ace4   f2a0
                                           _00190_DS_:
                                           ;	.line	486; TCPIP_Stack/UDP.c	return TRUE;
00ace6   0e01     movlw	0x1                	MOVLW	0x01
                                           _00191_DS_:
00ace8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00acea   f004
00acec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00acee   f003
00acf0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00acf2   f002
00acf4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00acf6   f001
00acf8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00acfa   f000
00acfc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00acfe   ffd9
00ad00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsPutReady	code
                                           _UDPIsPutReady:
                                           ;	.line	434; TCPIP_Stack/UDP.c	WORD UDPIsPutReady(UDP_SOCKET s)
00ae28   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00ae2a   ffe5
00ae2c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00ae2e   ffd9
00ae30   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00ae32   ffe5
00ae34   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00ae36   ffe5
00ae38   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00ae3a   ffe5
00ae3c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00ae3e   ffe5
00ae40   0e02     movlw	0x2                	MOVLW	0x02
00ae42   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00ae44   f000
                                           ;	.line	436; TCPIP_Stack/UDP.c	if(!MACIsTxReady())
00ae46   ecb2     call	0xb364, 0           	CALL	_MACIsTxReady
00ae48   f059
00ae4a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00ae4c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00ae4e   e103     bnz	0xae56               	BNZ	_00174_DS_
                                           ;	.line	437; TCPIP_Stack/UDP.c	return 0;
00ae50   6af3     clrf	0xf3, 0             	CLRF	PRODL
00ae52   6ae8     clrf	0xe8, 0             	CLRF	WREG
00ae54   d026     bra	0xaea2               	BRA	_00177_DS_
                                           _00174_DS_:
00ae56   010e     movlb	0xe                	BANKSEL	_LastPutSocket
                                           ;	.line	439; TCPIP_Stack/UDP.c	if(LastPutSocket != s)
00ae58   515a     movf	0x5a, 0, 0x1        	MOVF	_LastPutSocket, W, B
00ae5a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00ae5c   e00e     bz	0xae7a                	BZ	_00176_DS_
                                           ;	.line	441; TCPIP_Stack/UDP.c	LastPutSocket = s;
00ae5e   c000     movff	0, 0xe5a           	MOVFF	r0x00, _LastPutSocket
00ae60   fe5a
00ae62   0102     movlb	0x2                	BANKSEL	_UDPTxCount
                                           ;	.line	442; TCPIP_Stack/UDP.c	UDPTxCount = 0;
00ae64   6b9f     clrf	0x9f, 0x1           	CLRF	_UDPTxCount, B
00ae66   0102     movlb	0x2                	BANKSEL	(_UDPTxCount + 1)
00ae68   6ba0     clrf	0xa0, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	443; TCPIP_Stack/UDP.c	UDPSetTxBuffer(0);
00ae6a   0e00     movlw	0                  	MOVLW	0x00
00ae6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00ae6e   0e00     movlw	0                  	MOVLW	0x00
00ae70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00ae72   ec73     call	0xb2e6, 0           	CALL	_UDPSetTxBuffer
00ae74   f059
00ae76   0e02     movlw	0x2                	MOVLW	0x02
00ae78   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00176_DS_:
                                           ;	.line	445; TCPIP_Stack/UDP.c	activeUDPSocket = s;
00ae7a   c000     movff	0, 0x2b7           	MOVFF	r0x00, _activeUDPSocket
00ae7c   f2b7
                                           ;	.line	447; TCPIP_Stack/UDP.c	return MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)-UDPTxCount;
00ae7e   c29f     movff	0x29f, 0           	MOVFF	_UDPTxCount, r0x00
00ae80   f000
00ae82   c2a0     movff	0x2a0, 0x1         	MOVFF	(_UDPTxCount + 1), r0x01
00ae84   f001
00ae86   6a02     clrf	0x2, 0              	CLRF	r0x02
00ae88   6a03     clrf	0x3, 0              	CLRF	r0x03
00ae8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00ae8c   08c0     sublw	0xc0               	SUBLW	0xc0
00ae8e   6e00     movwf	0, 0               	MOVWF	r0x00
00ae90   0e05     movlw	0x5                	MOVLW	0x05
00ae92   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
00ae94   0e00     movlw	0                  	MOVLW	0x00
00ae96   5602     subfwb	0x2, 0x1, 0       	SUBFWB	r0x02, F
00ae98   0e00     movlw	0                  	MOVLW	0x00
00ae9a   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
00ae9c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00ae9e   fff3
00aea0   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00177_DS_:
00aea2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00aea4   f003
00aea6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00aea8   f002
00aeaa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00aeac   f001
00aeae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00aeb0   f000
00aeb2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00aeb4   ffd9
00aeb6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetRxBuffer	code
                                           _UDPSetRxBuffer:
                                           ;	.line	400; TCPIP_Stack/UDP.c	void UDPSetRxBuffer(WORD wOffset)
00b5f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b5f4   ffe5
00b5f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b5f8   ffd9
00b5fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b5fc   ffe5
00b5fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b600   ffe5
00b602   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b604   ffe5
00b606   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b608   ffe5
00b60a   0e02     movlw	0x2                	MOVLW	0x02
00b60c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b60e   f000
00b610   0e03     movlw	0x3                	MOVLW	0x03
00b612   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b614   f001
                                           ;	.line	402; TCPIP_Stack/UDP.c	IPSetRxBuffer(wOffset+sizeof(UDP_HEADER));
00b616   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b618   0f08     addlw	0x8                	ADDLW	0x08
00b61a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00b61c   0e00     movlw	0                  	MOVLW	0x00
00b61e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00b620   6e03     movwf	0x3, 0             	MOVWF	r0x03
00b622   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00b624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b626   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b62a   ec28     call	0xb650, 0           	CALL	_IPSetRxBuffer
00b62c   f05b
00b62e   0e02     movlw	0x2                	MOVLW	0x02
00b630   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	403; TCPIP_Stack/UDP.c	wGetOffset = wOffset;
00b632   c000     movff	0, 0x29b           	MOVFF	r0x00, _wGetOffset
00b634   f29b
00b636   c001     movff	0x1, 0x29c         	MOVFF	r0x01, (_wGetOffset + 1)
00b638   f29c
00b63a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b63c   f003
00b63e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b640   f002
00b642   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b644   f001
00b646   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b648   f000
00b64a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b64c   ffd9
00b64e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetTxBuffer	code
                                           _UDPSetTxBuffer:
                                           ;	.line	370; TCPIP_Stack/UDP.c	void UDPSetTxBuffer(WORD wOffset)
00b2e6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b2e8   ffe5
00b2ea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b2ec   ffd9
00b2ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b2f0   ffe5
00b2f2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b2f4   ffe5
00b2f6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b2f8   ffe5
00b2fa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00b2fc   ffe5
00b2fe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00b300   ffe5
00b302   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00b304   ffe5
00b306   0e02     movlw	0x2                	MOVLW	0x02
00b308   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00b30a   f000
00b30c   0e03     movlw	0x3                	MOVLW	0x03
00b30e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00b310   f001
                                           ;	.line	372; TCPIP_Stack/UDP.c	IPSetTxBuffer(wOffset+sizeof(UDP_HEADER));
00b312   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00b314   f002
00b316   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
00b318   f003
00b31a   6a04     clrf	0x4, 0              	CLRF	r0x04
00b31c   6a05     clrf	0x5, 0              	CLRF	r0x05
00b31e   0e35     movlw	0x35               	MOVLW	0x35
00b320   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00b322   0e1a     movlw	0x1a               	MOVLW	0x1a
00b324   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00b326   0e00     movlw	0                  	MOVLW	0x00
00b328   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00b32a   0e00     movlw	0                  	MOVLW	0x00
00b32c   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00b32e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00b330   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b332   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00b334   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b336   ecb1     call	0xb162, 0           	CALL	_MACSetWritePtr
00b338   f058
00b33a   0e02     movlw	0x2                	MOVLW	0x02
00b33c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/UDP.c	wPutOffset = wOffset;
00b33e   c000     movff	0, 0x299           	MOVFF	r0x00, _wPutOffset
00b340   f299
00b342   c001     movff	0x1, 0x29a         	MOVFF	r0x01, (_wPutOffset + 1)
00b344   f29a
00b346   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00b348   f005
00b34a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00b34c   f004
00b34e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00b350   f003
00b352   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b354   f002
00b356   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b358   f001
00b35a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b35c   f000
00b35e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b360   ffd9
00b362   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPClose	code
                                           _UDPClose:
                                           ;	.line	339; TCPIP_Stack/UDP.c	void UDPClose(UDP_SOCKET s)
00af46   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00af48   ffe5
00af4a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00af4c   ffd9
00af4e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00af50   ffe5
00af52   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00af54   ffe5
00af56   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00af58   ffe5
00af5a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00af5c   ffe5
00af5e   0e02     movlw	0x2                	MOVLW	0x02
00af60   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00af62   f000
                                           ;	.line	341; TCPIP_Stack/UDP.c	if(s >= MAX_UDP_SOCKETS) return;
00af64   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00af66   f001
00af68   6a02     clrf	0x2, 0              	CLRF	r0x02
00af6a   0e00     movlw	0                  	MOVLW	0x00
00af6c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00af6e   e102     bnz	0xaf74               	BNZ	_00158_DS_
00af70   0e0a     movlw	0xa                	MOVLW	0x0a
00af72   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00158_DS_:
00af74   e223     bc	0xafbc                	BC	_00155_DS_
                                           ; ;multiply lit val:0x0e by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	342; TCPIP_Stack/UDP.c	UDPSocketInfo[s].localPort = INVALID_UDP_PORT;
00af76   5000     movf	0, 0, 0             	MOVF	r0x00, W
00af78   0d0e     mullw	0xe                	MULLW	0x0e
00af7a   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00af7c   f000
00af7e   6a01     clrf	0x1, 0              	CLRF	r0x01
00af80   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00af82   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00af84   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00af86   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00af88   5000     movf	0, 0, 0             	MOVF	r0x00, W
00af8a   0f0c     addlw	0xc                	ADDLW	0x0c
00af8c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00af8e   0e00     movlw	0                  	MOVLW	0x00
00af90   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00af92   6e03     movwf	0x3, 0             	MOVWF	r0x03
00af94   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00af96   ffe9
00af98   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00af9a   ffea
00af9c   0e00     movlw	0                  	MOVLW	0x00
00af9e   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00afa0   0e00     movlw	0                  	MOVLW	0x00
00afa2   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	343; TCPIP_Stack/UDP.c	UDPSocketInfo[s].remoteNode.IPAddr.Val = 0x00000000;
00afa4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00afa6   ffe9
00afa8   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00afaa   ffea
00afac   0e00     movlw	0                  	MOVLW	0x00
00afae   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00afb0   0e00     movlw	0                  	MOVLW	0x00
00afb2   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00afb4   0e00     movlw	0                  	MOVLW	0x00
00afb6   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00afb8   0e00     movlw	0                  	MOVLW	0x00
00afba   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00155_DS_:
00afbc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00afbe   f003
00afc0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00afc2   f002
00afc4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00afc6   f001
00afc8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00afca   f000
00afcc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00afce   ffd9
00afd0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPOpen	code
                                           _UDPOpen:
                                           ;	.line	258; TCPIP_Stack/UDP.c	UDP_SOCKET UDPOpen(UDP_PORT this_localPort,
005276   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005278   ffe5
00527a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00527c   ffd9
00527e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005280   ffe5
005282   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005284   ffe5
005286   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005288   ffe5
00528a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00528c   ffe5
00528e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005290   ffe5
005292   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005294   ffe5
005296   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005298   ffe5
00529a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00529c   ffe5
00529e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0052a0   ffe5
0052a2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0052a4   ffe5
0052a6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0052a8   ffe5
0052aa   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0052ac   ffe5
0052ae   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0052b0   ffe5
0052b2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0052b4   ffe5
0052b6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0052b8   ffe5
0052ba   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0052bc   ffe5
0052be   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0052c0   ffe5
0052c2   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0052c4   ffe5
0052c6   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0052c8   ffe5
0052ca   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0052cc   ffe5
0052ce   0e02     movlw	0x2                	MOVLW	0x02
0052d0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0052d2   f000
0052d4   0e03     movlw	0x3                	MOVLW	0x03
0052d6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0052d8   f001
0052da   0e04     movlw	0x4                	MOVLW	0x04
0052dc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0052de   f002
0052e0   0e05     movlw	0x5                	MOVLW	0x05
0052e2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0052e4   f003
0052e6   0e06     movlw	0x6                	MOVLW	0x06
0052e8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0052ea   f004
0052ec   0e07     movlw	0x7                	MOVLW	0x07
0052ee   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0052f0   f005
0052f2   0e08     movlw	0x8                	MOVLW	0x08
0052f4   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0052f6   f006
                                           ;	.line	269; TCPIP_Stack/UDP.c	p = UDPSocketInfo; //pointer to the table of UDP sockets
0052f8   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0052fa   6e08     movwf	0x8, 0             	MOVWF	r0x08
0052fc   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0052fe   6e07     movwf	0x7, 0             	MOVWF	r0x07
005300   0e80     movlw	0x80               	MOVLW	0x80
005302   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
005304   6a0a     clrf	0xa, 0              	CLRF	r0x0a
005306   c007     movff	0x7, 0xb           	MOVFF	r0x07, r0x0b
005308   f00b
00530a   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
00530c   f00c
00530e   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
005310   f00d
005312   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00134_DS_:
005314   c00e     movff	0xe, 0xf           	MOVFF	r0x0e, r0x0f
005316   f00f
005318   6a10     clrf	0x10, 0             	CLRF	r0x10
00531a   0e00     movlw	0                  	MOVLW	0x00
00531c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
00531e   e102     bnz	0x5324               	BNZ	_00146_DS_
005320   0e0a     movlw	0xa                	MOVLW	0x0a
005322   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00146_DS_:
005324   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005326   d0ac     bra	0x5480               	BRA	_00137_DS_
                                           ;	.line	272; TCPIP_Stack/UDP.c	if(p->localPort == INVALID_UDP_PORT)
005328   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00532a   0f0c     addlw	0xc                	ADDLW	0x0c
00532c   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00532e   0e00     movlw	0                  	MOVLW	0x00
005330   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
005332   6e10     movwf	0x10, 0            	MOVWF	r0x10
005334   0e00     movlw	0                  	MOVLW	0x00
005336   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
005338   6e11     movwf	0x11, 0            	MOVWF	r0x11
00533a   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00533c   ffe9
00533e   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
005340   fff3
005342   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005344   eccb     call	0xbb96, 0           	CALL	__gptrget2
005346   f05d
005348   6e12     movwf	0x12, 0            	MOVWF	r0x12
00534a   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
00534c   f013
00534e   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
005350   1013     iorwf	0x13, 0, 0         	IORWF	r0x13, W
005352   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
005354   d085     bra	0x5460               	BRA	_00133_DS_
                                           ;	.line	274; TCPIP_Stack/UDP.c	p->localPort = this_localPort;	
005356   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005358   ffe5
00535a   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
00535c   fff4
00535e   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
005360   ffe9
005362   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
005364   fff3
005366   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005368   ec08     call	0xbe10, 0           	CALL	__gptrput2
00536a   f05f
                                           ;	.line	276; TCPIP_Stack/UDP.c	if(this_localPort == 0x0000u) //select any free port
00536c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00536e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
005370   e132     bnz	0x53d6               	BNZ	_00128_DS_
                                           ;	.line	278; TCPIP_Stack/UDP.c	if(NextPort > LOCAL_UDP_PORT_END_NUMBER || 
005372   0e20     movlw	0x20               	MOVLW	0x20
005374   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
005376   5d9e     subwf	0x9e, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
005378   e103     bnz	0x5380               	BNZ	_00147_DS_
00537a   0e01     movlw	0x1                	MOVLW	0x01
00537c   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
00537e   5d9d     subwf	0x9d, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00147_DS_:
005380   e208     bc	0x5392                	BC	_00124_DS_
                                           ;	.line	279; TCPIP_Stack/UDP.c	NextPort < LOCAL_UDP_PORT_START_NUMBER)
005382   0e10     movlw	0x10               	MOVLW	0x10
005384   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
005386   5d9e     subwf	0x9e, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
005388   e103     bnz	0x5390               	BNZ	_00148_DS_
00538a   0e00     movlw	0                  	MOVLW	0x00
00538c   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
00538e   5d9d     subwf	0x9d, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00148_DS_:
005390   e205     bc	0x539c                	BC	_00125_DS_
                                           _00124_DS_:
005392   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
                                           ;	.line	280; TCPIP_Stack/UDP.c	NextPort = LOCAL_UDP_PORT_START_NUMBER;
005394   6b9d     clrf	0x9d, 0x1           	CLRF	_UDPOpen_NextPort_1_1, B
005396   0e10     movlw	0x10               	MOVLW	0x10
005398   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
00539a   6f9e     movwf	0x9e, 0x1          	MOVWF	(_UDPOpen_NextPort_1_1 + 1), B
                                           _00125_DS_:
                                           ;	.line	282; TCPIP_Stack/UDP.c	p->localPort    = NextPort++;
00539c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00539e   0f0c     addlw	0xc                	ADDLW	0x0c
0053a0   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0053a2   0e00     movlw	0                  	MOVLW	0x00
0053a4   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0053a6   6e10     movwf	0x10, 0            	MOVWF	r0x10
0053a8   0e00     movlw	0                  	MOVLW	0x00
0053aa   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0053ac   6e11     movwf	0x11, 0            	MOVWF	r0x11
0053ae   c29d     movff	0x29d, 0x12        	MOVFF	_UDPOpen_NextPort_1_1, r0x12
0053b0   f012
0053b2   c29e     movff	0x29e, 0x13        	MOVFF	(_UDPOpen_NextPort_1_1 + 1), r0x13
0053b4   f013
0053b6   0102     movlb	0x2                	BANKSEL	_UDPOpen_NextPort_1_1
0053b8   2b9d     incf	0x9d, 0x1, 0x1      	INCF	_UDPOpen_NextPort_1_1, F, B
0053ba   e302     bnc	0x53c0               	BNC	_30298_DS_
0053bc   0102     movlb	0x2                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0053be   2b9e     incf	0x9e, 0x1, 0x1      	INCF	(_UDPOpen_NextPort_1_1 + 1), F, B
                                           _30298_DS_:
0053c0   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0053c2   ffe5
0053c4   c013     movff	0x13, 0xff4        	MOVFF	r0x13, PRODH
0053c6   fff4
0053c8   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0053ca   ffe9
0053cc   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0053ce   fff3
0053d0   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0053d2   ec08     call	0xbe10, 0           	CALL	__gptrput2
0053d4   f05f
                                           _00128_DS_:
                                           ;	.line	286; TCPIP_Stack/UDP.c	if(this_remoteNode)
0053d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0053d8   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0053da   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0053dc   e015     bz	0x5408                	BZ	_00130_DS_
                                           ;	.line	289; TCPIP_Stack/UDP.c	sizeof(p->remoteNode));
0053de   0e00     movlw	0                  	MOVLW	0x00
0053e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053e2   0e0a     movlw	0xa                	MOVLW	0x0a
0053e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053e6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0053e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053ea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0053ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0053f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053f2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0053f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053f6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0053f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0053fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053fe   ec7b     call	0x94f6, 0           	CALL	_memcpy
005400   f04a
005402   0e08     movlw	0x8                	MOVLW	0x08
005404   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005406   d014     bra	0x5430               	BRA	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	294; TCPIP_Stack/UDP.c	memset((void*)&(p->remoteNode), 0xFF, sizeof(p->remoteNode));
005408   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
00540a   f00f
00540c   c008     movff	0x8, 0x10          	MOVFF	r0x08, r0x10
00540e   f010
005410   c009     movff	0x9, 0x11          	MOVFF	r0x09, r0x11
005412   f011
005414   0e00     movlw	0                  	MOVLW	0x00
005416   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005418   0e0a     movlw	0xa                	MOVLW	0x0a
00541a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00541c   0eff     movlw	0xff               	MOVLW	0xff
00541e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005420   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
005422   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005424   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
005426   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005428   ecd5     call	0xa1aa, 0           	CALL	_memset
00542a   f050
00542c   0e05     movlw	0x5                	MOVLW	0x05
00542e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	297; TCPIP_Stack/UDP.c	p->remotePort = this_remotePort;
005430   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005432   0f0a     addlw	0xa                	ADDLW	0x0a
005434   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
005436   0e00     movlw	0                  	MOVLW	0x00
005438   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00543a   6e10     movwf	0x10, 0            	MOVWF	r0x10
00543c   0e00     movlw	0                  	MOVLW	0x00
00543e   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
005440   6e11     movwf	0x11, 0            	MOVWF	r0x11
005442   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005444   ffe5
005446   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
005448   fff4
00544a   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00544c   ffe9
00544e   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
005450   fff3
005452   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
005454   ec08     call	0xbe10, 0           	CALL	__gptrput2
005456   f05f
                                           ;	.line	302; TCPIP_Stack/UDP.c	activeUDPSocket = s;
005458   c00a     movff	0xa, 0x2b7         	MOVFF	r0x0a, _activeUDPSocket
00545a   f2b7
                                           ;	.line	303; TCPIP_Stack/UDP.c	return s;
00545c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00545e   d011     bra	0x5482               	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	305; TCPIP_Stack/UDP.c	p++;
005460   0e0e     movlw	0xe                	MOVLW	0x0e
005462   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
005464   0e00     movlw	0                  	MOVLW	0x00
005466   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
005468   0e00     movlw	0                  	MOVLW	0x00
00546a   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
00546c   c00b     movff	0xb, 0x7           	MOVFF	r0x0b, r0x07
00546e   f007
005470   c00c     movff	0xc, 0x8           	MOVFF	r0x0c, r0x08
005472   f008
005474   c00d     movff	0xd, 0x9           	MOVFF	r0x0d, r0x09
005476   f009
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
005478   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
00547a   c00e     movff	0xe, 0xa           	MOVFF	r0x0e, r0x0a
00547c   f00a
00547e   d74a     bra	0x5314               	BRA	_00134_DS_
                                           _00137_DS_:
                                           ;	.line	308; TCPIP_Stack/UDP.c	return (UDP_SOCKET)INVALID_UDP_SOCKET;
005480   68e8     setf	0xe8, 0             	SETF	WREG
                                           _00138_DS_:
005482   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
005484   f013
005486   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
005488   f012
00548a   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
00548c   f011
00548e   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
005490   f010
005492   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
005494   f00f
005496   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
005498   f00e
00549a   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00549c   f00d
00549e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0054a0   f00c
0054a2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0054a4   f00b
0054a6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0054a8   f00a
0054aa   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0054ac   f009
0054ae   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0054b0   f008
0054b2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0054b4   f007
0054b6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0054b8   f006
0054ba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0054bc   f005
0054be   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0054c0   f004
0054c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0054c4   f003
0054c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0054c8   f002
0054ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0054cc   f001
0054ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0054d0   f000
0054d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0054d4   ffd9
0054d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPTask	code
                                           _UDPTask:
                                           ;	.line	215; TCPIP_Stack/UDP.c	void UDPTask(void)
00be3c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00be3e   ffe5
00be40   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00be42   ffd9
                                           ;	.line	217; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
00be44   0eff     movlw	0xff               	MOVLW	0xff
00be46   010e     movlb	0xe                	BANKSEL	_LastPutSocket
00be48   6f5a     movwf	0x5a, 0x1          	MOVWF	_LastPutSocket, B
00be4a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00be4c   ffd9
00be4e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPInit	code
                                           _UDPInit:
                                           ;	.line	177; TCPIP_Stack/UDP.c	void UDPInit(void)
00b8e2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00b8e4   ffe5
00b8e6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00b8e8   ffd9
00b8ea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00b8ec   ffe5
00b8ee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00b8f0   ffe5
00b8f2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00b8f4   ffe5
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
00b8f6   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00105_DS_:
00b8f8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00b8fa   f001
00b8fc   6a02     clrf	0x2, 0              	CLRF	r0x02
00b8fe   0e00     movlw	0                  	MOVLW	0x00
00b900   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00b902   e102     bnz	0xb908               	BNZ	_00114_DS_
00b904   0e0a     movlw	0xa                	MOVLW	0x0a
00b906   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00114_DS_:
00b908   e207     bc	0xb918                	BC	_00108_DS_
                                           ;	.line	184; TCPIP_Stack/UDP.c	UDPClose(s);
00b90a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00b90c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00b90e   eca3     call	0xaf46, 0           	CALL	_UDPClose
00b910   f057
00b912   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
00b914   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00b916   d7f0     bra	0xb8f8               	BRA	_00105_DS_
                                           _00108_DS_:
00b918   0102     movlb	0x2                	BANKSEL	_Flags
                                           ;	.line	186; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
00b91a   83b6     bsf	0xb6, 0x1, 0x1       	BSF	_Flags, 1, B
00b91c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00b91e   f002
00b920   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00b922   f001
00b924   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00b926   f000
00b928   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00b92a   ffd9
00b92c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4642 (0x1222) bytes ( 3.54%)
                                           ;           	 2321 (0x0911) words
                                           ; udata size:	  198 (0x00c6) bytes ( 5.16%)
                                           ; access size:	   28 (0x001c) bytes
                                           
                                           
                                           	end
